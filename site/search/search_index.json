{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"LdapRecord-Docs","text":"<p>The LdapRecord documentation repository.</p>"},{"location":"docs/core/v1/","title":"Overview","text":"<p>LdapRecord is a PHP package that provides you with a full ActiveRecord implementation for working with your LDAP server. Each LDAP object type has a corresponding \"Model\" which is used to interact with that type. An LDAP object type is determined by its object classes.</p> <p>Models allow you to execute search operations on your LDAP server as well as create and modify objects.</p> <p>PHP applications that require LDAP integration are very tricky to setup. Creating these integrations yourself can take days or even weeks due to the amount of learning you must take on to understand how LDAP works.</p> <p>LdapRecord sweats the small stuff so you can get up and running as fast as possible.</p> <p>If you require support or assistance getting set up, consider becoming a sponsor to receive issue priority so you get up and running as fast as possible.</p>"},{"location":"docs/core/v1/authentication/","title":"Authentication","text":""},{"location":"docs/core/v1/authentication/#introduction","title":"Introduction","text":"<p>Before we get started, it's paramount to know that LdapRecord does not set up any sort of PHP session that persists through every request. This is up to you to implement, as every project may vary with session usage.</p>"},{"location":"docs/core/v1/authentication/#basic-authentication","title":"Basic Authentication","text":"<p>The most widely used feature of any LDAP library is authentication. Let's walk through this step by step using LdapRecord.</p> <p>Firstly, we need to define a <code>Connection</code> for your LDAP server that you would like users to authenticate against. Then, we will call the <code>auth()-&gt;attempt()</code> method:</p> <p>If you only need to authenticate users against your LDAP server, you do not need to provide a <code>base_dn</code>. This is only used for performing searches on your directory.  Similarly with the <code>username</code> and <code>password</code> configuration options, these are only used for performing operations on your LDAP server that require permission - such as resetting passwords, modifying LDAP objects, and more.</p> <pre><code>$connection = new \\LdapRecord\\Connection([\n    'hosts' =&gt; ['127.0.0.1'],\n]);\n\nif ($connection-&gt;auth()-&gt;attempt('cn=john doe,dc=acme,dc=org', 'p@ssw0rd', $stayAuthenticated = true)) {\n    // Successfully authenticated user.\n} else {\n    // Username or password is incorrect.\n}\n</code></pre> <p>As you can see from the above, the first parameter of the <code>attempt()</code> method is the users Distinguished Name. If you're running Active Directory, you can use the users <code>userPrincipalName</code> instead, which (in the case above) would be in the format of <code>jdoe@acme.org</code>.</p> <p>You may have also noticed we added a third parameter named <code>$stayAuthenticated = true</code>. This means, that throughout the entire lifecycle of the current request, you can perform further operations on your LDAP server as the successfully authenticated user.</p>"},{"location":"docs/core/v1/authentication/#determining-auth-bind-failure-cause","title":"Determining Auth / Bind Failure Cause","text":"<p>This will only work when binding to an Active Directory server.</p> <p>It's a common scenario to require showing why a user's password failed, whether it be an expired password, or account lockout. You can do this one of two ways:</p> <ul> <li>Using <code>auth()-&gt;attempt()</code> with an event listener:</li> </ul> <pre><code>use LdapRecord\\Container;\nuse LdapRecord\\Auth\\Events\\Failed;\n\n$dispatcher = Container::getEventDispatcher();\n\n$message = '';\n\n$dispatcher-&gt;listen(Failed::class, function (Failed $event) use (&amp;$message) {\n    $ldap = $event-&gt;connection-&gt;getLdapConnection();\n\n    // The diagnostic message will be available here.\n    $error = $ldap-&gt;getDiagnosticMessage();\n\n    if (strpos($error, '532') !== false) {\n        $message = 'Your password has expired.';\n    } elseif (strpos($error, '533') !== false) {\n        $message = 'Your account is disabled.';\n    } elseif (strpos($error, '701') !== false) {\n        $message = 'Your account has expired.';\n    } elseif (strpos($error, '775') !== false) {\n        $message = 'Your account is locked.';\n    } else {\n        $message = 'Username or password is incorrect.';\n    }\n});\n\nif ($connection-&gt;auth()-&gt;attempt($username, $password)) {\n    // The users credentials are valid.\n} else {\n    // Invalid credentials.\n    return $message;\n}\n</code></pre> <ul> <li>Using <code>auth()-&gt;bind()</code> and catching the thrown exception:</li> </ul> <pre><code>try {\n    $connection-&gt;auth()-&gt;bind($username, $password);\n\n    // Further bound operations...\n} catch (\\LdapRecord\\Auth\\BindException $e) {\n    $error = $e-&gt;getDetailedError()-&gt;getDiagnosticMessage();\n\n    if (strpos($error, '532') !== false) {\n        return 'Your password has expired.';\n    } elseif (strpos($error, '533') !== false) {\n        return 'Your account is disabled.';\n    } elseif (strpos($error, '701') !== false) {\n        return 'Your account has expired';\n    } elseif (strpos($error, '775') !== false) {\n        return 'Your account is locked.';\n    }\n\n    return 'Username or password is incorrect.';\n}\n</code></pre> <p>However, please be aware of the differences of the above methods as described in the connection binding documentation:</p> <ul> <li><code>auth()-&gt;attempt()</code> will automatically rebind the user you have in your configuration,   unless you have specified <code>true</code> in the third parameter to stay bound. </li> <li><code>auth()-&gt;bind()</code> will not automatically rebind the user you have in your configuration,   and will allow <code>null</code> usernames and passwords (anonymous binds).</li> </ul>"},{"location":"docs/core/v1/authentication/#authenticating-with-other-username-attributes","title":"Authenticating with other username attributes","text":"<p>No user wants to type in their full Distinguished Name to login to an application. It's cumbersome, and will likely change over the years due to IT administrators moving objects in the LDAP directory for organization purposes.</p> <p>However, LDAP only supports binding (authenticating) users using their Distinguished Name (unless you're using Active Directory). How do we get around this limitation? Well, we can first connect to our LDAP directory and then retrieve their account information - including their Distinguished Name. Let's walk through this.</p> <p>Since we will first be searching our LDAP directory for the user that is attempting to authenticate, we have two options:</p> <ul> <li>Providing a <code>username</code> and <code>password</code> to our connection</li> <li>Anonymously bind to our connection, by not providing a <code>username</code> and <code>password</code> (if enabled in your directory)</li> </ul> <p>Since we will be searching our directory, we must provide a <code>base_dn</code>, so LdapRecord knows where to begin searching for records.</p> <pre><code>// Connecting with an an account...\n$connection = new \\LdapRecord\\Connection([\n    'hosts' =&gt; ['127.0.0.1'],\n    'base_dn' =&gt; 'dc=acme,dc=org',\n    'username' =&gt; 'cn=WebApi,dc=acme,dc=org',\n    'password' =&gt; 'super-secret',\n]);\n\n$connection-&gt;connect();\n\n// Anonymously binding...\n$connection = new \\LdapRecord\\Connection([\n    'hosts' =&gt; ['127.0.0.1'],\n    'base_dn' =&gt; 'dc=acme,dc=org',\n]);\n\n$connection-&gt;connect();\n</code></pre> <p>It's recommended to create and use an account in your LDAP directory that is specifically for your web application(s), rather than using your own account or a domain administrator.</p> <p>Once we're connected, we can then search for the user who is trying to authenticate.</p> <p>For this example, we're wanting users to login using their <code>sAMAccountName</code>:</p> <pre><code>$connection = new \\LdapRecord\\Connection(['...']);\n\n$connection-&gt;connect();\n\n$user = $connection-&gt;query()\n    -&gt;where('samaccountname', '=', $_POST['username'])\n    -&gt;firstOrFail();\n\nif ($connection-&gt;auth()-&gt;attempt($user['distinguishedname'], $_POST['password'])) {\n    // User has been successfully authenticated.\n} else {\n    // Username or password is incorrect.\n}\n</code></pre>"},{"location":"docs/core/v1/authentication/#restricting-authentication","title":"Restricting Authentication","text":"<p>Sometimes you only want certain users allowed to login to your application. You can do this in a couple ways.</p>"},{"location":"docs/core/v1/authentication/#group-memberships","title":"Group Memberships","text":"<p>To restrict who can authenticate in your application using groups that users will be members of, we will perform the same as above, except we will check if the returned <code>memberof</code> array of the user contains the allowed groups.</p> <p>In this example, we will limit users who are members of <code>Accounting</code> and <code>IT</code>.</p> <pre><code>$connection = new \\LdapRecord\\Connection(['...']);\n\n$connection-&gt;connect();\n\n$user = $connection-&gt;query()\n    -&gt;where('samaccountname', '=', $_POST['username'])\n    -&gt;firstOrFail();\n\n// Get the groups from the user.\n$userGroups = $user['memberof'];\n\n// Set up our allowed groups.\n$allowed = [\n    'cn=Accounting,ou=Groups,dc=acme,dc=org',\n    'cn=IT,ou=Groups,dc=acme,dc=org',\n];\n\n// Normalize the group distinguished names and determine if\n// the user is a member of any of the allowed groups:\n$difference = array_intersect(\n    array_map('strtolower', $userGroups),\n    array_map('strtolower', $allowed)\n);\n\nif (count($difference) &gt; 0) {\n    // Our user is a member of one of the allowed groups.\n    // Continue with authentication.\n    if ($connection-&gt;auth()-&gt;attempt($user['distinguishedname'], $_POST['password'])) {\n        // User has been successfully authenticated.\n    } else {\n        // Username or password is incorrect.\n    }\n}\n\n// User is not a member of any of the allowed groups.\n</code></pre>"},{"location":"docs/core/v1/authentication/#organizational-units","title":"Organizational Units","text":"<p>Using Organizational Units to determine which users are allowed to authenticate is easier than using groups.</p> <p>In this scenario, we will limit our search to a single Organization Unit that contain users who are allowed to authenticate.</p> <p>We can simply determine if a result is returned, we know the user exists inside:</p> <pre><code>$connection = new \\LdapRecord\\Connection(['...']);\n\n$connection-&gt;connect();\n\n$organizationalUnit = 'ou=AllowedUsers,dc=acme,dc=org';\n\n$user = $connection-&gt;query()\n    -&gt;in($organizationalUnit)\n    -&gt;where('samaccountname', '=', $_POST['username'])\n    -&gt;first();\n\nif ($user) {\n    // Our user is a member of one of the allowed groups.\n    // Continue with authentication.\n    if ($connection-&gt;auth()-&gt;attempt($user['distinguishedname'], $_POST['password'])) {\n        // User has been successfully authenticated.\n    } else {\n        // Username or password is incorrect.\n    }\n}\n\n// No user found. They are not inside the OU.\n</code></pre>"},{"location":"docs/core/v1/caching/","title":"Query Caching","text":""},{"location":"docs/core/v1/caching/#introduction","title":"Introduction","text":"<p>LdapRecord supports caching LDAP search operations. This is useful when running expensive queries. A <code>pagination</code> query on the root of your LDAP directory may take several seconds to complete.</p> <p>Caching allows you to store the entire result so it is not retrieved again from the server until the cache is set to expire.</p>"},{"location":"docs/core/v1/caching/#requirements","title":"Requirements","text":"<p>Your application must have a caching implementation that uses the PSR Simple Cache interface.</p> <p>For example, the Laravel cache system implements this interface.</p>"},{"location":"docs/core/v1/caching/#getting-started","title":"Getting Started","text":"<p>To setup caching, you must add your cache implementation to your LDAP connection instance.</p> <p>This is done by the <code>setCache</code> method:</p> <pre><code>use LdapRecord\\Connection;\n\n$connection = new Connection(['...']);\n\n$connection-&gt;setCache($myAppCache);\n</code></pre>"},{"location":"docs/core/v1/caching/#usage","title":"Usage","text":"<p>Once you've added your caching implementation to your LdapRecord connection, you can start caching queries on plain queries or queries on LdapRecord models.</p> <p>This is done via the <code>cache</code> method. This method accepts two parameters.</p> <p>The first is a <code>DateTimeInterface</code> - which is an instance of a PHP Date object set in the future as to when the cache for the query must expire.</p> <p>The second is a boolean indicating whether the cache must be flushed prior to running the query. This allows you to have control over manually cache flushing for the query.</p> <pre><code>$until = new \\DateTime('tomorrow');\n\n$results = $connection-&gt;query()-&gt;cache($until)-&gt;paginate();\n\n// Manually flushing the cache...\n$results = $connection-&gt;query()-&gt;cache($until, $flush = true)-&gt;paginate();\n</code></pre> <p>The above example will cache results at the time of running until the next the day. Once the existing cache has expired, it will be re-cached again.</p> <p>To cache model query results, call the same method upon your model query:</p> <pre><code>use LdapRecord\\Models\\ActiveDirectory\\User;\n\n$until = new \\DateTime('tomorrow');\n\n$users = User::cache($until)-&gt;get();\n</code></pre>"},{"location":"docs/core/v1/common-queries/","title":"Common Queries","text":"<p>Most applications will require retrieving certain set / type of objects from a directory.</p>"},{"location":"docs/core/v1/common-queries/#using-models","title":"Using Models","text":"<p>Utilizing LdapRecord's built in models allow you to easily query specific types of objects in your directory.</p> <p>The examples below assume you have created a <code>Connection</code> and have added them into the Container.</p>"},{"location":"docs/core/v1/common-queries/#active-directory","title":"Active Directory","text":""},{"location":"docs/core/v1/common-queries/#generic-queries","title":"Generic Queries","text":"<pre><code>// All Active Directory objects:\n// Note: We use 'paginate' here so over 1000 results can be returned.\n$objects = \\LdapRecord\\Models\\ActiveDirectory\\Entry::paginate();\n\n// All Active Directory users:\n$users = \\LdapRecord\\Models\\ActiveDirectory\\User::get();\n\n// All Active Directory contacts:\n$contacts = \\LdapRecord\\Models\\ActiveDirectory\\Contact::get();\n\n// All Active Directory groups:\n$groups = \\LdapRecord\\Models\\ActiveDirectory\\Group::get();\n\n// All Active Directory organizational units:\n$ous = \\LdapRecord\\Models\\ActiveDirectory\\OrganizationalUnit::get();\n\n// All Active Directory printers:\n$printers = \\LdapRecord\\Models\\ActiveDirectory\\Printer::get();\n\n// All Active Directory computers:\n$computers = \\LdapRecord\\Models\\ActiveDirectory\\Computer::get();\n\n// All foreign security principals:\n$foreignPrincipals = \\LdapRecord\\Models\\ActiveDirectory\\ForeignSecurityPrincipal::get();\n</code></pre>"},{"location":"docs/core/v1/common-queries/#users-created-after-a-date","title":"Users Created After a Date","text":"<pre><code>$date = (new DateTime('October 1st 2016'))-&gt;format('YmdHis.0\\Z');\n\n$users = User::where('whencreated', '&gt;=', $date)-&gt;get();\n</code></pre>"},{"location":"docs/core/v1/common-queries/#openldap","title":"OpenLDAP","text":""},{"location":"docs/core/v1/common-queries/#generic-queries_1","title":"Generic Queries","text":"<pre><code>// All OpenLDAP objects:\n// Note: We use 'paginate' here so over 1000 results can be returned.\n$objects = \\LdapRecord\\Models\\OpenLDAP\\Entry::paginate();\n\n// All OpenLDAP users:\n$users = \\LdapRecord\\Models\\OpenLDAP\\User::get();\n\n// All OpenLDAP groups:\n$groups = \\LdapRecord\\Models\\OpenLDAP\\Group::get();\n\n// All OpenLDAP organizational units:\n$ous = \\LdapRecord\\Models\\OpenLDAP\\OrganizationalUnit::get();\n</code></pre>"},{"location":"docs/core/v1/common-queries/#without-models","title":"Without Models","text":"<p>If you do not want to use LdapRecord models, you can still use the query builder and retrieve raw LDAP results.</p> <pre><code>use LdapRecord\\Connection;\n\n$connection = new Connection(['...']);\n\n// All LDAP objects:\n// Note: We use 'paginate' here so over 1000 results can be returned.\n$objects = $connection-&gt;query()-&gt;paginate();\n</code></pre>"},{"location":"docs/core/v1/common-queries/#active-directory_1","title":"Active Directory","text":"<pre><code>use LdapRecord\\Connection;\n\n$connection = new Connection(['...']);\n\n// All Active Directory Users:\n$users = $connection-&gt;query()-&gt;where([\n    ['objectclass', '=', 'top'],\n    ['objectclass', '=', 'person'],\n    ['objectclass', '=', 'organizationalperson'],\n    ['objectclass', '=', 'user'],\n])-&gt;get();\n\n// All Active Directory contacts:\n$contacts = $connection-&gt;query()-&gt;where([\n    ['objectclass', '=', 'top'],\n    ['objectclass', '=', 'person'],\n    ['objectclass', '=', 'organizationalperson'],\n    ['objectclass', '=', 'contact'],\n])-&gt;get();\n\n// All Active Directory groups:\n$groups = $connection-&gt;query()-&gt;where([\n    ['objectclass', '=', 'top'],\n    ['objectclass', '=', 'group'],\n])-&gt;get();\n\n// All Active Directory organizational units:\n$ous = $connection-&gt;query()-&gt;where([\n    ['objectclass', '=', 'top'],\n    ['objectclass', '=', 'organizationalunit'],\n])-&gt;get();\n\n// All Active Directory printers:\n$printers = $connection-&gt;query()\n    -&gt;where('objectclass', '=', 'printqueue')\n    -&gt;get();\n\n// All Active Directory computers:\n$computers = $connection-&gt;query()-&gt;where([\n    ['objectclass', '=', 'top'],\n    ['objectclass', '=', 'person'],\n    ['objectclass', '=', 'organizationalperson'],\n    ['objectclass', '=', 'user'],\n    ['objectclass', '=', 'computer'],\n])-&gt;get();\n\n// All foreign security principals:\n$foreignPrincipals = $connection-&gt;query()\n    -&gt;where('objectclass', '=', 'foreignsecurityprincipal')\n    -&gt;get();\n</code></pre>"},{"location":"docs/core/v1/common-queries/#openldap_1","title":"OpenLDAP","text":"<pre><code>// All OpenLDAP users:\n$users = $connection-&gt;query()-&gt;where([\n    ['objectclass', '=', 'top'],\n    ['objectclass', '=', 'person'],\n    ['objectclass', '=', 'organizationalperson'],\n    ['objectclass', '=', 'inetorgperson'],\n])-&gt;get();\n\n// All OpenLDAP groups:\n$groups = $connection-&gt;query()-&gt;where([\n    ['objectclass', '=', 'top'],\n    ['objectclass', '=', 'groupofuniquenames'],\n])-&gt;get();\n\n// All OpenLDAP organizational units:\n$ous = $connection-&gt;query()-&gt;where([\n    ['objectclass', '=', 'top'],\n    ['objectclass', '=', 'organizationalunit'],\n])-&gt;get();\n</code></pre>"},{"location":"docs/core/v1/configuration/","title":"Configuration","text":"<p>To configure your LDAP connections, provide an array with key-value pairs to set various parameters.</p> <p>Here is a list of all parameters.</p> <pre><code>$config = [\n    // Mandatory Configuration Options\n    'hosts'            =&gt; ['192.168.1.1'],\n    'base_dn'          =&gt; 'dc=local,dc=com',\n    'username'         =&gt; 'cn=admin,dc=local,dc=com',\n    'password'         =&gt; 'password',\n\n    // Optional Configuration Options\n    'port'             =&gt; 389,\n    'use_ssl'          =&gt; false,\n    'use_tls'          =&gt; false,\n    'version'          =&gt; 3,\n    'timeout'          =&gt; 5,\n    'follow_referrals' =&gt; false,\n\n    // Custom LDAP Options\n    'options' =&gt; [\n        // See: http://php.net/ldap_set_option\n        LDAP_OPT_X_TLS_REQUIRE_CERT =&gt; LDAP_OPT_X_TLS_HARD\n    ]\n];\n\n$connection = new Connection($config);\n</code></pre>"},{"location":"docs/core/v1/configuration/#hosts","title":"Hosts","text":"<p>The hosts option is an array of IP addresses or host names located on your network that serve an LDAP directory.</p> <p>You insert as many servers or as little as you'd like depending on your forest (with the minimum of one of course).</p> <p>Do not append your port to your IP addresses or host names. Use the <code>port</code> configuration option instead.</p>"},{"location":"docs/core/v1/configuration/#base-distinguished-name","title":"Base Distinguished Name","text":"<p>A 'Distinguished Name' is a string based identifier in LDAP that is used to indicate hierarchy.</p> <p>Each object in your domain is assigned a Distinguished Name.</p> <p>An example Distinguished Name would be <code>cn=John Doe,ou=Users,dc=local,dc=com</code>.</p> <p>The above can be broken into the following 'Relative Distinguished Names' (RDN for short):</p> RDN Meaning <code>cn=John Doe</code> The object has a 'Common Name' of <code>John Doe</code> <code>ou=Users</code> The object resides in the 'Organizational Unit' <code>Users</code> <code>dc=local,dc=com</code> The object resides in the 'Domain' <code>local.com</code> <p>A 'Base Distinguished Name' is the distinguished name that you would like to be used as the root of all searches and object creations using LdapRecord.</p> <p>An example base DN would be <code>dc=local,dc=com</code>.</p> <p>This means, that all searches executed with LdapRecord will start at <code>dc=local,dc=com</code> as the root. This would allow all records below it to be retrieved from results.</p> <p>If you do not define a base DN, you will not retrieve any search results from queries.</p> <p>Your base DN is case insensitive. You do not need to worry about incorrect casing.</p>"},{"location":"docs/core/v1/configuration/#username-password","title":"Username &amp; Password","text":"<p>To connect to your LDAP server, a username and password is required to be able to query and run operations on your server(s).</p> Additional Tips The <code>username</code> option must be a users Distinguished Name. If you are connecting to an Active Directory server, you may use a users userPrincipalName (<code>username@domain.com</code>) or Down-Level Logon Name (<code>DOMAIN\\\\username</code>) instead. To run administration level operations, such as resetting passwords, this account must have the permissions to do so on your directory."},{"location":"docs/core/v1/configuration/#port","title":"Port","text":"<p>The port option is used for authenticating and binding to your LDAP server.</p> <p>The default ports are already used for non SSL and SSL connections (<code>389</code> and <code>636</code>).</p> <p>Only insert a port if your LDAP server uses a unique port.</p>"},{"location":"docs/core/v1/configuration/#ssl-tls","title":"SSL &amp; TLS","text":"<p>These boolean options enable an SSL or TLS connection to your LDAP server.</p> <p>It is recommended to use one of these options if you have the ability to. This ensures secure connectivity.</p> Requirements &amp; Tips Only one can be set to <code>true</code>. You must chose either or. You must enable SSL or TLS to set / change / reset passwords in Active Directory. TLS is recommended over SSL. SSL is labelled as a deprecated mechanism for securely running LDAP operations. <p>If you're having connectivity issues over SSL or TLS, you may have to create an <code>ldap.conf</code> file and add the following inside:</p> <pre><code>TLS_REQCERT never\n</code></pre> <p>The <code>ldap.conf</code> file will likely not exist by default. Create it inside the location for your OS:</p> OS Location Windows <code>C:\\OpenLDAP\\sysconf\\ldap.conf</code> Linux <code>/etc/ldap/ldap.conf</code> macOS <code>/usr/local/etc/openldap/ldap.conf</code> <p>The above directories may not exist - you will need to create them in such case.</p> <p>Important: You must restart your web server after making changes to the <code>ldap.conf</code> file. In some cases, you may even have to restart your workstation or server for the changes to take effect.</p> <p>If you can connect using <code>TLS_REQCERT never</code> inside of your <code>ldap.conf</code> file, you may want to copy your domain CA certificate to your web server, as it can be a bit of a security risk as it will ignore invalid certificates.</p> <p>Copy your domain CA certificate to the following location:</p> OS Location Windows <code>C:\\OpenLDAP\\sysconf</code> Linux / macOS <code>/etc/ssl/certs</code> <p>Then, reference it in your <code>ldap.conf</code> with the full file path using (replace <code>my-custom-path</code> with the location of the file):</p> <pre><code>TLS_CACERT my-custom-path/ca.pem\nTLS_REQCERT hard\n</code></pre> <p>Windows Example:</p> <pre><code>TLS_CACERT C:\\OpenLDAP\\sysconf\\ca.pem\nTLS_REQCERT hard\n</code></pre> <p>Linux / macOS Example:</p> <pre><code>TLS_CACERT /etc/ssl/certs/ca.pem\nTLS_REQCERT hard\n</code></pre>"},{"location":"docs/core/v1/configuration/#timeout","title":"Timeout","text":"<p>The timeout option allows you to configure the amount of seconds to wait until your application receives a response from your LDAP server.</p> <p>The default is <code>5</code> seconds.</p>"},{"location":"docs/core/v1/configuration/#version","title":"Version","text":"<p>The LDAP version to use for your connection.</p> <p>Must be an integer and can either be <code>2</code> or <code>3</code>.</p>"},{"location":"docs/core/v1/configuration/#follow-referrals","title":"Follow Referrals","text":"<p>The follow referrals option is a boolean to tell Active Directory to follow a referral to another server on your network if the server queried knows the information your asking for exists, but does not yet contain a copy of it locally.</p> <p>This option is defaulted to <code>false</code>.</p> <p>Disable this option if you're experiencing search / connectivity issues.</p> <p>For more information, visit: https://technet.microsoft.com/en-us/library/cc978014.aspx</p>"},{"location":"docs/core/v1/configuration/#options","title":"Options","text":"<p>Arbitrary options can be set for the connection to fine-tune TLS and connection behavior.</p> <p>Important: The following options will be ignored if set:</p> <ul> <li><code>LDAP_OPT_PROTOCOL_VERSION</code></li> <li><code>LDAP_OPT_NETWORK_TIMEOUT</code></li> <li><code>LDAP_OPT_REFERRALS</code></li> </ul> <p>These are instead set with the <code>version</code>, <code>timeout</code> and <code>follow_referrals</code> keys.</p> <p>Valid LDAP options are listed in the ldap_set_option PHP documentation.</p>"},{"location":"docs/core/v1/connections/","title":"Connections","text":""},{"location":"docs/core/v1/connections/#introduction","title":"Introduction","text":"<p>Once you've defined your configuration, you must then create a connection and insert your configuration into it:</p> <pre><code>use LdapRecord\\Connection;\n\n$connection = new Connection([\n     'hosts'    =&gt; ['192.168.1.1'],\n     'port'     =&gt; 389,\n     'username' =&gt; 'cn=user,dc=local,dc=com',\n     'password' =&gt; 'secret',\n]);\n</code></pre>"},{"location":"docs/core/v1/connections/#connecting","title":"Connecting","text":"<p>Once you have your connection, call <code>connect()</code> to bind to your LDAP server:</p> <pre><code>try {\n    $connection-&gt;connect();\n\n    echo \"Successfully connected!\";\n} catch (\\LdapRecord\\Auth\\BindException $e) {\n    $error = $e-&gt;getDetailedError();\n\n    echo $error-&gt;getErrorCode();\n    echo $error-&gt;getErrorMessage();\n    echo $error-&gt;getDiagnosticMessage();\n}\n</code></pre> <p>If you'd like to connect / bind anonymously to your LDAP server, simply set your <code>username</code> and <code>password</code> configuration parameters to <code>null</code>:</p> <pre><code>use LdapRecord\\Connection;\n\n$connection = new Connection([\n     'hosts'    =&gt; ['192.168.1.1'],\n     'port'     =&gt; 389,\n     'username' =&gt; null,\n     'password' =&gt; null,\n]);\n\n$connection-&gt;connect();\n</code></pre>"},{"location":"docs/core/v1/connections/#binding","title":"Binding","text":"<p>Using the connection instance, you can execute a bind request to perform LDAP authentication to see if a username and password is valid.</p> <pre><code>$user = 'cn=user,dc=local,dc=com';\n$password = 'secret';\n\nif ($connection-&gt;auth()-&gt;attempt($user, $password))\n{\n    echo \"Username and password are correct!\";\n}\n</code></pre> <p>After calling the above, the user you have configured in your configuration will be rebound to your LDAP server. This is to ensure you can continue to execute LDAP operations underneath this user during the same request.</p> <p>If you would like to run all further LDAP operations underneath the authenticated user for the duration of the request, pass in <code>true</code> in the third parameter in the <code>attempt()</code> method:</p> <pre><code>$user = 'cn=user,dc=local,dc=com';\n$password = 'secret';\n\nif ($connection-&gt;auth()-&gt;attempt($user, $password, $stayBound = true))\n{\n    echo \"Username and password are correct!\";\n\n    // Run further LDAP operations under this user.\n}\n</code></pre> <p>Important: Binding as the user will not persist LDAP connectivity between requests. PHP is stateless - which means a new LDAP connection is created upon every request to your application. LdapRecord does not and will not store user credentials to persist connectivity.</p>"},{"location":"docs/core/v1/connections/#container","title":"Container","text":"<p>You must add your LDAP connections into the container if you would like to use LdapRecord models. Models pull the connection that they use from this container by their name.</p>"},{"location":"docs/core/v1/connections/#adding-connections","title":"Adding Connections","text":"<pre><code>use LdapRecord\\Container;\nuse LdapRecord\\Connection;\n\n$connection = new Connection(['...']);\n\n$connection-&gt;connect();\n\nContainer::addConnection($connection);\n</code></pre> <p>If you do not call <code>connect</code> on your connection prior to adding it into the <code>Container</code>, it will be connected to automatically when you attempt to retrieve query results.</p> <p>Each connection you add can have it's own name. This is required for connecting to multiple LDAP servers at one time. To set the name of a connection in the container, pass it into the second parameter:</p> <pre><code>Container::addConnection($connection, 'domain-b');\n</code></pre> <p>Without passing in a name, the name of the connection is set to <code>default</code>. Passing in multiple connections without providing a name will overwrite the previously added connection, so be sure to identify them differently if needed:</p> <pre><code>use LdapRecord\\Container;\nuse LdapRecord\\Connection;\n\n$connectionAlpha = new Connection(['...']);\n$connectionBravo = new Connection(['...']);\n\nContainer::addConnection($connectionAlpha);\n\n// This will overwrite $connectionAlpha:\nContainer::addConnection($connectionBravo);\n</code></pre> <p>If you do not define a <code>$connection</code> property inside of your LdapRecord models, they will use your default connection.</p>"},{"location":"docs/core/v1/connections/#getting-connections","title":"Getting Connections","text":"<p>To get the default connection, call the <code>getDefaultConnection</code> method:</p> <pre><code>$connection = Container::getDefaultConnection();\n</code></pre> <p>To get a differently named connection, call the <code>getConnection</code> method:</p> <pre><code>$connection = Container::getConnection('domain-b');\n</code></pre>"},{"location":"docs/core/v1/connections/#setting-default-connection","title":"Setting Default Connection","text":"<p>To set the name of the default connection, call the <code>setDefaultConnection</code> method prior to adding a connection:</p> <pre><code>Container::setDefaultConnection('domain-a');\n\nContainer::addConnection(new Connection(['...']));\n\n// Returns the `domain-a` connection.\n$connection = Container::getDefaultConnection();\n</code></pre>"},{"location":"docs/core/v1/connections/#checking-connection-existence","title":"Checking Connection Existence","text":"<p>To check if a connection exists, call the <code>exists()</code> method on the container instance:</p> <pre><code>if (Container::getInstance()-&gt;exists('domain-b')) {\n    // The 'domain-b' connection exists!\n}\n</code></pre>"},{"location":"docs/core/v1/credits/","title":"Credits","text":"<p>LdapRecord was based heavily on Laravel's fantastic ORM Eloquent which was created by Taylor Otwell. Many of its features and documentation are direct ports to be used for LDAP.</p> <p>Without its battle tested infrastructure already built, this package would not have the stability and usability that was granted from his thousands of hours of hard work, and of course the hundreds to thousands of contributors that has brought continuous improvements to the Laravel framework.</p> <p>If you can, please support Taylor Otwell's work. He has made web development with PHP a fun and exciting experience - without costing developers a dime.</p> <p>I must also mention Chad Sikorra and his library LdapTools. His open source work with LDAP on GitHub and Stackoverflow has helped me tremendously in understanding nuances in the LDAP protocol and Active Directory itself. Without his advanced expertise and knowledge, Adldap2 and LdapRecord would not be here today.</p>"},{"location":"docs/core/v1/events/","title":"Events","text":""},{"location":"docs/core/v1/events/#introduction","title":"Introduction","text":"<p>LdapRecord events provide a method of listening for certain LDAP actions that are called and execute tasks for that specific event.</p> <p>The LdapRecord event dispatcher was actually derived from the Laravel Framework with Broadcasting &amp; Queuing omitted to remove extra dependencies that would be required with implementing those features.</p> <p>If you've worked with Laravel's event system before, this will feel very familiar.</p>"},{"location":"docs/core/v1/events/#registering-listeners","title":"Registering Listeners","text":"<p>Before we get to registering listeners, it's crucial to know that events throughout LdapRecord are fired irrespective of the current connection or provider in use.</p> <p>This means that when using multiple LDAP connections, the same events will be fired. This allows you to set listeners on events that occur for all LDAP connections you utilize.</p> <p>If you are required to determine which events are fired from alternate connections, see below.</p> <p>To register a listener on an event, retrieve the event dispatcher and call the <code>listen()</code> method:</p> <pre><code>$dispatcher = \\LdapRecord\\Container::getEventDispatcher();\n\n$dispatcher-&gt;listen(Binding::class, function (Binding $event) {\n    $event-&gt;connection; // LdapRecord\\Connections\\Ldap instance\n    $event-&gt;username; // 'jdoe@acme.org'\n    $event-&gt;password; // 'super-secret'\n});\n</code></pre> <p>The first argument is the event name you would like to listen for, and the second is either a closure or class name that should handle the event.</p>"},{"location":"docs/core/v1/events/#using-a-class-based-listener","title":"Using a Class Based Listener","text":"<p>When using just a class name, the class must contain a public <code>handle()</code> method that will handle the event.</p> <pre><code>$dispatcher = \\LdapRecord\\Container::getEventDispatcher();\n\n$dispatcher-&gt;listen(Binding::class, MyApp\\BindingEventHandler::class);\n</code></pre> <pre><code>namespace MyApp;\n\nuse LdapRecord\\Auth\\Events\\Binding;\n\nclass BindingEventHandler\n{\n    public function handle(Binding $event)\n    {\n        // Handle the event...\n    }\n}\n</code></pre>"},{"location":"docs/core/v1/events/#model-events","title":"Model Events","text":"<p>Model events are handled the same way as authentication events.</p> <p>Simply call the event dispatcher <code>listen()</code> method with the model event you are wanting to listen for:</p> <pre><code>use LdapRecord\\Container;\nuse LdapRecord\\Models\\Events\\Saving;\n\n$dispatcher = Container::getEventDispatcher();\n\n$dispatcher-&gt;listen(Saving::class, function (Saving $event) {\n    // Returns the model instance being saved,\n    // eg. `LdapRecord\\Models\\Entry`\n    $event-&gt;getModel();\n});\n</code></pre>"},{"location":"docs/core/v1/events/#wildcard-event-listeners","title":"Wildcard Event Listeners","text":"<p>You can register listeners using the <code>*</code> as a wildcard parameter to catch multiple events with the same listener.</p> <p>Wildcard listeners will receive the event name as their first argument, and the entire event data array as their second argument:</p> <pre><code>use LdapRecord\\Container;\n\n$dispatcher = Container::getEventDispatcher();\n\n// Listen for all model events.\n$dispatcher-&gt;listen('LdapRecord\\Models\\Events\\*', function ($eventName, array $data) {\n    // Returns 'LdapRecord\\Models\\Events\\Updating'\n    echo $eventName;\n\n    // Returns [0] =&gt; (object) LdapRecord\\Models\\Events\\Updating;\n    var_dump($data);\n});\n\n$connection = Container::getDefaultConnection();\n\n$user = $connection-&gt;query()-&gt;find('cn=User,dc=local,dc=com');\n\n$user-&gt;company = 'New Company';\n\n$user-&gt;save();\n</code></pre>"},{"location":"docs/core/v1/events/#determining-the-connection","title":"Determining the Connection","text":"<p>If you're using multiple LDAP connections and you require the ability to determine which events belong to a certain connection, you can do so by verifying the host of the LDAP connection.</p> <p>Here's an example:</p> <pre><code>use LdapRecord\\Container;\nuse LdapRecord\\Models\\Events\\Creating;\n\n$dispatcher = Container::getEventDispatcher();\n\n$dispatcher-&gt;listen(Creating::class, function ($event) {\n    $connection = $event-&gt;model-&gt;getConnection();\n\n    $host = $connection-&gt;getHost();\n\n    echo $host; // Displays 'ldap://192.168.1.1:386'\n});\n</code></pre> <p>Example with authentication events:</p> <pre><code>use LdapRecord\\Container;\nuse LdapRecord\\Auth\\Events\\Binding;\n\n$dispatcher = Container::getEventDispatcher();\n\n$dispatcher-&gt;listen(Binding::class, function ($event) {\n    $connection = $event-&gt;connection;\n\n    $host = $connection-&gt;getHost();\n\n    echo $host; // Displays 'ldap://192.168.1.1:386'\n});\n</code></pre>"},{"location":"docs/core/v1/events/#list-of-events","title":"List of Events","text":""},{"location":"docs/core/v1/events/#authentication-events","title":"Authentication Events","text":"<p>There are several events that are fired during initial and subsequent binds to your configured LDAP server. Here is a list of all events that are fired:</p> Event Fired `LdapRecord\\Auth\\Events\\Attempting`                  When any authentication attempt is called via:                 <ul><li>`$connection-&gt;auth()-&gt;attempt()`</li></ul> `LdapRecord\\Auth\\Events\\Passed`                  When any authentication attempts pass via:                 <ul><li>`$connection-&gt;auth()-&gt;attempt()`</li></ul> `LdapRecord\\Auth\\Events\\Failed`                   When any authentication attempts fail via:                 <ul> <li>`$connection-&gt;auth()-&gt;attempt()`</li> <li>`$connection-&gt;auth()-&gt;bind()`</li> </ul> `LdapRecord\\Auth\\Events\\Binding`                   When any LDAP bind attempts occur via:                 <ul> <li>`$connection-&gt;auth()-&gt;attempt()`</li> <li>`$connection-&gt;auth()-&gt;bind()`</li> </ul> `LdapRecord\\Auth\\Events\\Bound`                   When any LDAP bind attempts are successful via:                 <ul> <li>`$connection-&gt;auth()-&gt;attempt()`</li> <li>`$connection-&gt;auth()-&gt;bind()`</li> </ul>"},{"location":"docs/core/v1/events/#model-events_1","title":"Model Events","text":"<p>There are several events that are fired during the creation, updating and deleting of all models.</p> <p>Here is a list of all events that are fired:</p> Event Fired `LdapRecord\\Models\\Events\\Saving`                  When a model is in the process of being saved via:                 <ul> <li>`$model-&gt;save()`</li> </ul> `LdapRecord\\Models\\Events\\Saved`                  When a model has been successfully saved via:                 <ul> <li>`$model-&gt;save()`</li> </ul> `LdapRecord\\Models\\Events\\Creating`                  When a model is being created via:                 <ul> <li>`$model-&gt;save()`</li> <li>`$model-&gt;create()`</li> </ul> `LdapRecord\\Models\\Events\\Created`                  When a model has been successfully created via:                 <ul> <li>`$model-&gt;save()`</li> <li>`$model-&gt;create()`</li> </ul> `LdapRecord\\Models\\Events\\Updating`                  When a model is being updated via:                 <ul> <li>`$model-&gt;save()`</li> <li>`$model-&gt;update()`</li> </ul> `LdapRecord\\Models\\Events\\Updated`                  When a model has been successfully updated via:                 <ul> <li>`$model-&gt;save()`</li> <li>`$model-&gt;update()`</li> </ul> `LdapRecord\\Models\\Events\\Deleting`                  When a model is being deleted via:                 <ul> <li>`$model-&gt;delete()`</li> </ul> `LdapRecord\\Models\\Events\\Deleted`                  When a model has been successfully deleted via:                 <ul> <li>`$model-&gt;delete()`</li> </ul>"},{"location":"docs/core/v1/installation/","title":"Installation","text":"<p>LdapRecord requires the following:</p> Requirements PHP &gt;= 7.2 PHP LDAP extension enabled An LDAP server (Active Directory, OpenLDAP, FreeIPA etc.) <p>LdapRecord uses Composer for installation.</p> <p>After installing Composer, run the following command in the root directory of your project:</p> <pre><code>composer require directorytree/ldaprecord\n</code></pre> <p>If your application doesn't already require Composer's autoload, you will need to do it manually.</p> <p>Insert the following line at the top of your projects PHP script (usually <code>index.php</code>):</p> <pre><code>require __DIR__ . '/vendor/autoload.php';\n</code></pre>"},{"location":"docs/core/v1/license/","title":"License","text":"<p>LdapRecord is open-sourced software licensed under the MIT license.</p>"},{"location":"docs/core/v1/logging/","title":"Logging","text":"<p>LdapRecord includes an implementation of PSR's widely supported Logger interface.</p> <p>By default, all of LdapRecord's events will call the logger you have set to utilize.</p> <p>LdapRecord does not include a file / text logger. You must implement your own.</p>"},{"location":"docs/core/v1/logging/#registering-enabling-a-logger","title":"Registering &amp; Enabling a Logger","text":"<p>To register a logger call <code>LdapRecord\\Container::setLogger()</code>. The logger must implement the <code>Psr\\Log\\LoggerInterface</code>.</p> <pre><code>\\LdapRecord\\Container::setLogger($myLogger);\n</code></pre>"},{"location":"docs/core/v1/logging/#disabling-logging","title":"Disabling Logging","text":"<p>If you need to disable the event logger after a certain set of operations, simply pass in <code>null</code> and logging will be disabled:</p> <pre><code>\\LdapRecord\\Container::setLogger($myLogger);\n\n$connection = new \\LdapRecord\\Connection(['...']);\n\ntry {\n    $connection-&gt;connect();\n\n    // Disable logging anything else.\n    \\LdapRecord\\Container::setLogger(null);\n} catch (\\LdapRecord\\Auth\\BindException $e) {\n    //\n}\n</code></pre>"},{"location":"docs/core/v1/logging/#logged-information","title":"Logged Information","text":"<p>After enabling LdapRecord logging, the following events are logged:</p>"},{"location":"docs/core/v1/logging/#ldaprecordautheventsattempting","title":"<code>LdapRecord\\Auth\\Events\\Attempting</code>","text":"<pre><code>LDAP (ldap://192.168.1.1:389) - Operation: LdapRecord\\Auth\\Events\\Attempting - Username: CN=Steve Bauman,OU=Users,DC=local,DC=com\n</code></pre>"},{"location":"docs/core/v1/logging/#ldaprecordautheventsbinding","title":"<code>LdapRecord\\Auth\\Events\\Binding</code>","text":"<pre><code>LDAP (ldap://192.168.1.1:389) - Operation: LdapRecord\\Auth\\Events\\Binding - Username: CN=Steve Bauman,OU=Users,DC=local,DC=com\n</code></pre>"},{"location":"docs/core/v1/logging/#ldaprecordautheventsbound","title":"<code>LdapRecord\\Auth\\Events\\Bound</code>","text":"<pre><code>LDAP (ldap://192.168.1.1:389) - Operation: LdapRecord\\Auth\\Events\\Bound - Username: CN=Steve Bauman,OU=Users,DC=local,DC=com\n</code></pre>"},{"location":"docs/core/v1/logging/#ldaprecordautheventspassed","title":"<code>LdapRecord\\Auth\\Events\\Passed</code>","text":"<pre><code>LDAP (ldap://192.168.1.1:389) - Operation: LdapRecord\\Auth\\Events\\Passed - Username: CN=Steve Bauman,OU=Users,DC=local,DC=com\n</code></pre>"},{"location":"docs/core/v1/logging/#ldaprecordautheventsfailed","title":"<code>LdapRecord\\Auth\\Events\\Failed</code>","text":"<pre><code>LDAP (ldap://192.168.1.1:389) - Operation: LdapRecord\\Auth\\Events\\Failed - Username: CN=Steve Bauman,OU=Users,DC=local,DC=com - Result: Invalid Credentials\n</code></pre>"},{"location":"docs/core/v1/logging/#ldaprecordmodelseventssaving","title":"<code>LdapRecord\\Models\\Events\\Saving</code>","text":"<pre><code>LDAP (ldap://192.168.1.1:389) - Operation: Saving - On: LdapRecord\\Models\\Entry - Distinguished Name: cn=John Doe,DC=local,DC=com\n</code></pre>"},{"location":"docs/core/v1/logging/#ldaprecordmodelseventssaved","title":"<code>LdapRecord\\Models\\Events\\Saved</code>","text":"<pre><code>LDAP (ldap://192.168.1.1:389) - Operation: Saved - On: LdapRecord\\Models\\Entry - Distinguished Name: cn=John Doe,DC=local,DC=com\n</code></pre>"},{"location":"docs/core/v1/logging/#ldaprecordmodelseventscreating","title":"<code>LdapRecord\\Models\\Events\\Creating</code>","text":"<pre><code>LDAP (ldap://192.168.1.1:389) - Operation: Creating - On: LdapRecord\\Models\\Entry - Distinguished Name: cn=John Doe,DC=local,DC=com\n</code></pre>"},{"location":"docs/core/v1/logging/#ldaprecordmodelseventscreated","title":"<code>LdapRecord\\Models\\Events\\Created</code>","text":"<pre><code>LDAP (ldap://192.168.1.1:389) - Operation: Created - On: LdapRecord\\Models\\Entry - Distinguished Name: cn=John Doe,DC=local,DC=com\n</code></pre>"},{"location":"docs/core/v1/logging/#ldaprecordmodelseventsupdating","title":"<code>LdapRecord\\Models\\Events\\Updating</code>","text":"<pre><code>LDAP (ldap://192.168.1.1:389) - Operation: Updating - On: LdapRecord\\Models\\Entry - Distinguished Name: cn=John Doe,DC=local,DC=com\n</code></pre>"},{"location":"docs/core/v1/logging/#ldaprecordmodelseventsupdated","title":"<code>LdapRecord\\Models\\Events\\Updated</code>","text":"<pre><code>LDAP (ldap://192.168.1.1:389) - Operation: Updated - On: LdapRecord\\Models\\Entry - Distinguished Name: cn=John Doe,DC=local,DC=com\n</code></pre>"},{"location":"docs/core/v1/logging/#ldaprecordmodelseventsdeleting","title":"<code>LdapRecord\\Models\\Events\\Deleting</code>","text":"<pre><code>LDAP (ldap://192.168.1.1:389) - Operation: Deleting - On: LdapRecord\\Models\\Entry - Distinguished Name: cn=John Doe,DC=local,DC=com\n</code></pre>"},{"location":"docs/core/v1/logging/#ldaprecordmodelseventsdeleted","title":"<code>LdapRecord\\Models\\Events\\Deleted</code>","text":"<pre><code>LDAP (ldap://192.168.1.1:389) - Operation: Deleted - On: LdapRecord\\Models\\Entry - Distinguished Name: cn=John Doe,DC=local,DC=com\n</code></pre>"},{"location":"docs/core/v1/model-api/","title":"Available Model Methods (API)","text":""},{"location":"docs/core/v1/model-api/#method-listing","title":"Method Listing","text":""},{"location":"docs/core/v1/model-api/#addattributevalue","title":"<code>addAttributeValue</code>","text":"<p>Add a value into an array of attribute values:</p> <pre><code>$model-&gt;proxyaddresses = ['SMTP:sbauman@microsoft.com'];\n\n$model-&gt;addAttributeValue('proxyaddresses', 'smtp:sbauman@local.com');\n\n// Displays:\n// [\n//     'SMTP:sbauman@microsoft.com',\n//     'smtp:sbauman@local.com'\n// ]\nvar_dump($model-&gt;proxyaddresses);\n</code></pre>"},{"location":"docs/core/v1/model-api/#addhidden","title":"<code>addHidden</code>","text":"<p>Add an attribute to hide when encoding a model using <code>json_encode</code>:</p> <pre><code>$model-&gt;addHidden('userpassword');\n\n$model-&gt;addHidden(['userpassword', 'mail']);\n\n// 'userpassword' and 'mail' will be omitted:\n$attributes = json_encode($model);\n</code></pre>"},{"location":"docs/core/v1/model-api/#addmodification","title":"<code>addModification</code>","text":"<p>Add a batch modification to the model to be executed upon <code>save()</code>:</p> <pre><code>// Using an array...\n$modification = [\n    'attrib'  =&gt; 'telephoneNumber',\n    'modtype' =&gt; LDAP_MODIFY_BATCH_ADD,\n    'values'  =&gt; ['+1 555 555 1717'],\n];\n\n$model-&gt;addModification($modification);\n\n// Using a BatchModification...\n$mod = new \\LdapRecord\\Models\\BatchModification(\n    $attrib = 'telephoneNumber',\n    $modType = LDAP_MODIFY_BATCH_ADD,\n    $values = ['+1 555 555 1717']\n);\n\n$model-&gt;addModification($mod);\n\n$model-&gt;save();\n</code></pre>"},{"location":"docs/core/v1/model-api/#addvisible","title":"<code>addVisible</code>","text":"<p>Add an attribute to include that is being hidden when encoding a model using <code>json_encode</code>:</p> <pre><code>$model-&gt;addVisible('userpassword');\n\n$model-&gt;addVisible(['userpassword', 'mail']);\n</code></pre>"},{"location":"docs/core/v1/model-api/#ancestors","title":"<code>ancestors</code>","text":"<p>Begin querying the direct ancestors of the model:</p> <pre><code>$ancestors = $model-&gt;ancestors()-&gt;get();\n</code></pre>"},{"location":"docs/core/v1/model-api/#asdatetime","title":"<code>asDateTime</code>","text":"<p>Convert an LDAP timestamp to a <code>Carbon\\Carbon</code> instance:</p> <pre><code>$carbon = $model-&gt;asDateTime('ldap', '20200508184557Z');\n\n$carbon = $model-&gt;asDateTime('windows', '20200508184533.0Z');\n\n$carbon = $model-&gt;asDateTime('windows-int', 132334371140000000);\n</code></pre>"},{"location":"docs/core/v1/model-api/#attributestoarray","title":"<code>attributesToArray</code>","text":"<p>Convert all the models attributes to their JSON encodable value:</p> <pre><code>$attributes = $model-&gt;attributesToArray();\n</code></pre> <p>LDAP date attributes specified via the <code>$dates</code> model property will be converted in the returned array.</p>"},{"location":"docs/core/v1/model-api/#convert","title":"<code>convert</code>","text":"<p>Convert a model into another by copying its attributes, connection and distinguished name:</p> <p>This will also set <code>$model-&gt;exists</code> property to <code>true</code> if the model being converted exists.</p> <pre><code>$into = new \\LdapRecord\\Models\\ActiveDirectory\\User();\n\n// Returns instance of \\LdapRecord\\Models\\ActiveDirectory\\User\n$user = $model-&gt;convert($into);\n</code></pre>"},{"location":"docs/core/v1/model-api/#countattributes","title":"<code>countAttributes</code>","text":"<p>Get the total number of attributes on a model:</p> <p>This does not count attribute values.</p> <pre><code>$model-&gt;fill([\n    'cn' =&gt; 'Steve Bauman',\n    'sn' =&gt; 'Bauman',\n]);\n\n// Returns '2'\n$model-&gt;countAttributes();\n</code></pre>"},{"location":"docs/core/v1/model-api/#createattribute","title":"<code>createAttribute</code>","text":"<p>Immediately inserts a new attribute value on the model.</p> <p>Performs an <code>ldap_mod_add</code> under the hood.</p> <p>This does not create attributes that do not exist on your LDAP schema for the object.</p> <pre><code>$model-&gt;createAttribute('telephonenumber', '+1 555 555 1717');\n</code></pre>"},{"location":"docs/core/v1/model-api/#delete","title":"<code>delete</code>","text":"<p>Immediately delete an existing model instance:</p> <pre><code>$model-&gt;delete();\n\n// Returns false.\n$model-&gt;exists;\n</code></pre> <p>To delete nested objects contained in the model recursively, pass in <code>true</code>:</p> <pre><code>$model-&gt;delete($recursive = true);\n</code></pre>"},{"location":"docs/core/v1/model-api/#deleteattribute","title":"<code>deleteAttribute</code>","text":"<p>Immediately delete an attribute on a model.</p> <p>Performs an <code>ldap_mod_del</code> under the hood.</p> <pre><code>$model-&gt;deleteAttribute('telephonenumber');\n\n$model-&gt;telephonenumber; // Returns null\n</code></pre>"},{"location":"docs/core/v1/model-api/#descendants","title":"<code>descendants</code>","text":"<p>Begin querying the direct descendants of the model:</p> <pre><code>$descendants = $model-&gt;descendants()-&gt;get();\n</code></pre>"},{"location":"docs/core/v1/model-api/#escape","title":"<code>escape</code>","text":"<p>Prepare a value to be escaped:</p> <pre><code>// Returns \\LdapRecord\\Models\\Attributes\\EscapedValue;\n$escapedValue = $model-&gt;escape($value, $ignore = '', $flags = 0);\n\n// Cast to string for immediate return of escaped value:\n$escapedValue = (string) $model-&gt;escape($value, $ignore = '', $flags = 0);\n</code></pre>"},{"location":"docs/core/v1/model-api/#fill","title":"<code>fill</code>","text":"<p>Fill a model with attributes and values:</p> <pre><code>$model-&gt;fill([\n    'cn' =&gt; 'Steve Bauman',\n    'proxyAddresses' =&gt; ['foo', 'bar'],\n]);\n\n$model-&gt;save();\n</code></pre>"},{"location":"docs/core/v1/model-api/#fresh","title":"<code>fresh</code>","text":"<p>Get a fresh new instance of the existing model.</p> <p>The model will be re-retrieved from the LDAP directory. The existing model will not be affected:</p> <pre><code>$fresh = $model-&gt;fresh();\n</code></pre>"},{"location":"docs/core/v1/model-api/#fromdatetime","title":"<code>fromDateTime</code>","text":"<p>Convert a <code>DateTime</code>, <code>Carbon</code> or <code>string</code> to the specified LDAP timestamp type:</p> <pre><code>$date = new \\DateTime('now');\n\n$ldapTimestamp = $model-&gt;fromDateTime('ldap', $date);\n\n$windowsTimestamp = $model-&gt;fromDateTime('windows', $date);\n\n$windowsIntTimestamp = $model-&gt;fromDateTime('windows-int', $date);\n</code></pre>"},{"location":"docs/core/v1/model-api/#getanrattributes","title":"<code>getAnrAttributes</code>","text":"<p>Get an array of ANR attributes defined on the model:</p> <pre><code>$attributes = $model-&gt;getAnrAttributes();\n\n// Displays: [\n//    'cn',\n//    'sn',\n//    'uid',\n//    'name',\n//    'mail',\n//    'givenname',\n//    'displayname'\n// ]\nvar_dump($attributes);\n</code></pre>"},{"location":"docs/core/v1/model-api/#getattribute","title":"<code>getAttribute</code>","text":"<p>Get the value of the specified attribute.</p> <p>This will return an <code>array</code> if the attribute exists and <code>null</code> if non-existent:</p> <p>If a mutator exists for the attribute (such as a date, or custom attribute mutator method), it's value will be returned instead.</p> <pre><code>// Returns array:\n$values = $model-&gt;getAttribute('cn');\n\n// Returns first value:\n$value = $model-&gt;getAttribute('cn')[0];\n\n// Returns null:\n$null = $model-&gt;getAttribute('non-existent');\n</code></pre>"},{"location":"docs/core/v1/model-api/#getattributevalue","title":"<code>getAttributeValue</code>","text":"<p>Performs the same as above.</p>"},{"location":"docs/core/v1/model-api/#getattributes","title":"<code>getAttributes</code>","text":"<p>Get all the models raw attributes:</p> <p>Mutator attribute values will not be included in this array.</p> <pre><code>$attributes = $model-&gt;getAttributes();\n\nforeach ($attributes as $attribute =&gt; $values) {\n    //\n}\n</code></pre>"},{"location":"docs/core/v1/model-api/#getconnection","title":"<code>getConnection</code>","text":"<p>Resolve the underlying <code>LdapRecord\\Connection</code>:</p> <pre><code>$connection = $model-&gt;getConnection();\n\n$config = $connection-&gt;getConfiguration();\n</code></pre>"},{"location":"docs/core/v1/model-api/#getconnectionname","title":"<code>getConnectionName</code>","text":"<p>Get the connection name from the model:</p> <p>If no connection is set on the model, <code>null</code> will be returned.</p> <pre><code>class Entry extends Model\n{\n    protected $connection = 'domain-b';\n}\n\n// Returns 'domain-b'\n$connectionName = (new Entry)-&gt;getConnectionName();\n</code></pre>"},{"location":"docs/core/v1/model-api/#getconvertedguid","title":"<code>getConvertedGuid</code>","text":"<p>Get the models string GUID:</p> <pre><code>// Example: bf9679e7-0de6-11d0-a285-00aa003049e2\n$guid = $model-&gt;getConvertedGuid();\n</code></pre>"},{"location":"docs/core/v1/model-api/#getcreatabledn","title":"<code>getCreatableDn</code>","text":"<p>Get the models creatable Distinguished Name:</p> <pre><code>$model = new Entry(['cn' =&gt; 'John Doe']);\n\n// Returns: 'cn=John Doe,dc=local,dc=com'\n$creatableDn = $model-&gt;getCreatableDn();\n\n$model-&gt;cn = 'Jane Doe';\n\n// Returns: 'cn=Jane Doe,dc=local,dc=com'\n$creatableDn = $model-&gt;getCreatableDn();\n</code></pre>"},{"location":"docs/core/v1/model-api/#getcreatablerdn","title":"<code>getCreatableRdn</code>","text":"<p>Get the models creatable relative Distinguished Name:</p> <pre><code>$model = new Entry(['cn' =&gt; 'John Doe']);\n\n// Returns: 'cn=John Doe'\n$creatableDn = $model-&gt;getCreatableRdn();\n\n$model-&gt;cn = 'Jane Doe';\n\n// Returns: 'cn=Jane Doe'\n$creatableDn = $model-&gt;getCreatableRdn();\n</code></pre>"},{"location":"docs/core/v1/model-api/#getdateformat","title":"<code>getDateFormat</code>","text":"<p>Get the format that dates are serialized to:</p> <pre><code>// Returns: 'Y-m-d\\TH:i:sO'\n$model-&gt;getDateFormat();\n</code></pre>"},{"location":"docs/core/v1/model-api/#getdates","title":"<code>getDates</code>","text":"<p>Get an array of attributes that should be mutated to dates:</p> <pre><code>$dates = $model-&gt;getDates();\n\n// Displays: [\n//    'createtimestamp' =&gt; 'ldap',\n//    'modifytimestamp' =&gt; 'ldap',\n// ]\nvar_dump($dates);\n</code></pre>"},{"location":"docs/core/v1/model-api/#getdirty","title":"<code>getDirty</code>","text":"<p>Get the attributes that have been changed:</p> <pre><code>$model-&gt;cn = 'Changed';\n\nforeach ($model-&gt;getDirty() as $attribute =&gt; $values) {\n    // Displays: 'cn'\n    echo $attribute;\n\n    // Displays: ['Changed']\n    var_dump($values);\n}\n</code></pre>"},{"location":"docs/core/v1/model-api/#getdn","title":"<code>getDn</code>","text":"<p>Get the models Distinguished Name:</p> <pre><code>// Displays: 'cn=John Doe,dc=local,dc=com'\necho $model-&gt;getDn();\n</code></pre>"},{"location":"docs/core/v1/model-api/#getfirstattribute","title":"<code>getFirstAttribute</code>","text":"<p>Get the first value of an attribute:</p> <pre><code>$model-&gt;proxyaddresses = ['first', 'second'];\n\n// Returns: 'first'\n$value = $model-&gt;getFirstAttribute('proxyaddresses');\n</code></pre>"},{"location":"docs/core/v1/model-api/#getglobalscopes","title":"<code>getGlobalScopes</code>","text":"<p>Get the global scopes set on the model:</p> <pre><code>Model::addGlobalScope('my-scope', function () {\n    // ...\n});\n\n// Returns: ['my-scope' =&gt; \\Closure]\n$scopes = $model-&gt;getGlobalScopes();\n</code></pre>"},{"location":"docs/core/v1/model-api/#getguidkey","title":"<code>getGuidKey</code>","text":"<p>Get the attribute key that contains the objects GUID:</p> <pre><code>// Returns: 'objectguid'\n$model-&gt;getGuidKey();\n</code></pre>"},{"location":"docs/core/v1/model-api/#gethidden","title":"<code>getHidden</code>","text":"<p>Get the hidden attributes for the model:</p> <pre><code>$model-&gt;addHidden('cn');\n\n// Returns: ['cn']\n$model-&gt;getHidden();\n</code></pre>"},{"location":"docs/core/v1/model-api/#getmodifications","title":"<code>getModifications</code>","text":"<p>Get the models batch modifications to be processed:</p> <pre><code>$model-&gt;cn = 'Changed';\n\n// Returns:\n// [\n//      [\n//      'attrib' =&gt; 'cn',\n//      'modtype' =&gt; 1,\n//      'values' =&gt; ['Changed'],\n//     ]\n// ]\n$mods = $model-&gt;getModifications();\n</code></pre>"},{"location":"docs/core/v1/model-api/#getname","title":"<code>getName</code>","text":"<p>Get the name of a model:</p> <pre><code>$model-&gt;setDn('cn=John Doe,dc=local,dc=com');\n\n// Returns: 'John Doe'\n$name = $model-&gt;getName();\n</code></pre>"},{"location":"docs/core/v1/model-api/#getobjectguid","title":"<code>getObjectGuid</code>","text":"<p>Get the raw binary object GUID:</p> <p>The raw binary object GUID will be returned when connecting to Active Directory.  The raw string GUID will be returned with other LDAP directories.</p> <pre><code>$rawBinary = $model-&gt;getObjectGuid();\n</code></pre>"},{"location":"docs/core/v1/model-api/#getoriginal","title":"<code>getOriginal</code>","text":"<p>Get the original, un-modified attributes on a model:</p> <pre><code>$model = Model::findBy('cn', 'Steve Bauman');\n\n$model-&gt;cn = 'Changed';\n\n// Returns:\n// [\n//    'cn' =&gt; ['Steve Bauman']\n//    ...\n// ]\n$model-&gt;getOriginal();\n</code></pre>"},{"location":"docs/core/v1/model-api/#getparentdn","title":"<code>getParentDn</code>","text":"<p>Get the direct parent Distinguished Name of a model:</p> <pre><code>$model = Model::find('cn=John Doe,dc=local,dc=com');\n\n// Returns: 'dc=local,dc=com'\n$model-&gt;getParentDn();\n\n// Returns: 'ou=Users,dc=local,dc=com'\n$model-&gt;getParentDn('cn=Steve Bauman,ou=Users,dc=local,dc=com');\n</code></pre>"},{"location":"docs/core/v1/model-api/#getrdn","title":"<code>getRdn</code>","text":"<p>Get the models Relative Distinguished Name:</p> <pre><code>$model = Model::find('cn=John Doe,dc=local,dc=com');\n\n// Returns: 'cn=John Doe'\n$model-&gt;getRdn();\n\n// Returns: 'cn=Steve Bauman'\n$model-&gt;getRdn('cn=Steve Bauman,ou=Users,dc=local,dc=com');\n</code></pre>"},{"location":"docs/core/v1/model-api/#getvisible","title":"<code>getVisible</code>","text":"<p>Get the attributes that should be visible when encoding a model using <code>json_encode</code>:</p> <pre><code>$model-&gt;addVisible('cn', 'sn');\n\n// Returns: ['cn', 'sn']\n$visibleAttributes = $model-&gt;getVisible();\n</code></pre>"},{"location":"docs/core/v1/model-api/#hasattribute","title":"<code>hasAttribute</code>","text":"<p>Determine if the model has an attribute with a value:</p> <pre><code>$model = Model::findBy('cn', 'Steve Bauman');\n\n// Returns: true\n$modle-&gt;hasAttribute('cn');\n\n// Returns: false\n$model-&gt;hasAttribute('non-existent');\n</code></pre>"},{"location":"docs/core/v1/model-api/#hasgetmutator","title":"<code>hasGetMutator</code>","text":"<p>Determine if the model has a 'get' mutator for the given attribute:</p> <pre><code>class Entry extends Model\n{\n    public function getCnAttribute($values)\n    {\n        // ...\n    }\n}\n\n$model = new Entry();\n\n// Returns: true\n$model-&gt;hasGetMutator('cn');\n</code></pre>"},{"location":"docs/core/v1/model-api/#hassetmutator","title":"<code>hasSetMutator</code>","text":"<p>Determine if the model has a 'set' mutator for the given attribute:</p> <pre><code>class Entry extends Model\n{\n    public function setCnAttribute($values)\n    {\n        // ...\n    }\n}\n\n$model = new Entry();\n\n// Returns: true\n$model-&gt;hasSetAttribute('cn');\n</code></pre>"},{"location":"docs/core/v1/model-api/#inside","title":"<code>inside</code>","text":"<p>Set the container that the model should be created inside:</p> <p>Calling <code>inside()</code> on an existing model will not perform any move / rename operation.  Use move or rename instead.</p> <pre><code>$model = new Model();\n\n// ...\n\n$model-&gt;inside('ou=Container,dc=local,dc=com');\n\n$model-&gt;save();\n</code></pre>"},{"location":"docs/core/v1/model-api/#is","title":"<code>is</code>","text":"<p>Determine if a model is the same by comparing their Distinguished Names and connections:</p> <pre><code>// Returns: bool\n$model-&gt;is($another);\n</code></pre>"},{"location":"docs/core/v1/model-api/#isancestorof","title":"<code>isAncestorOf</code>","text":"<p>Determine if a model is an ancestor of another:</p> <pre><code>$user = User::find('cn=John Doe,ou=Accounting,ou=Accounts,dc=acme,dc=org');\n$ou = OrganizationalUnit::find('ou=Accounts,dc=acme,dc=org');\n\n// Returns: true\n$ou-&gt;isAncestorOf($user);\n</code></pre>"},{"location":"docs/core/v1/model-api/#ischildof","title":"<code>isChildOf</code>","text":"<p>Determine if a model is an immediate child of another:</p> <pre><code>$ou = OrganizationalUnit::find('ou=Accounts,dc=acme,dc=org');\n$user = User::find('cn=John Doe,ou=Accounts,dc=acme,dc=org');\n\n// Returns: true\n$user-&gt;isChildOf($ou);\n</code></pre>"},{"location":"docs/core/v1/model-api/#isdateattribute","title":"<code>isDateAttribute</code>","text":"<p>Determine if given attribute is a date attribute on the model:</p> <pre><code>class Entry extends Model\n{\n    protected $dates = ['whenchanged' =&gt; 'windows'];\n}\n\n$model = new Entry();\n\n// Returns: true\n$model-&gt;isDateAttribute('whenchanged');\n</code></pre>"},{"location":"docs/core/v1/model-api/#isdescendantof","title":"<code>isDescendantOf</code>","text":"<p>Determine if a model is a descendent of another:</p> <pre><code>$ou = OrganizationalUnit::find('ou=Accounts,dc=acme,dc=org');\n$user = User::find('cn=John Doe,ou=Accounting,ou=Accounts,dc=acme,dc=org');\n\n// Returns: true\n$user-&gt;isDescendantOf($ou);\n</code></pre>"},{"location":"docs/core/v1/model-api/#isdirty","title":"<code>isDirty</code>","text":"<p>Determine if the given attribute has been changed:</p> <pre><code>$model = Model::findBy('cn', 'Steve Bauman');\n\n// Returns: false\n$model-&gt;isDirty('cn');\n\n$model-&gt;cn = 'Changed';\n\n// Returns: true\n$model-&gt;isDirty('cn');\n</code></pre>"},{"location":"docs/core/v1/model-api/#isparentof","title":"<code>isParentOf</code>","text":"<p>Determine if a model is an immediate parent of another:</p> <pre><code>$ou = OrganizationalUnit::find('ou=Accounts,dc=acme,dc=org');\n$user = User::find('cn=John Doe,ou=Accounts,dc=acme,dc=org');\n\n// Returns: true\n$ou-&gt;isParentOf($user);\n</code></pre>"},{"location":"docs/core/v1/model-api/#makehidden","title":"<code>makeHidden</code>","text":"<p>Make the given, typically visible, attributes hidden on the model:</p> <pre><code>class Entry extends Model\n{\n    protected $visible = ['cn'];\n}\n\n// This will override the above:\n$model-&gt;makeHidden('cn');\n</code></pre>"},{"location":"docs/core/v1/model-api/#makevisible","title":"<code>makeVisible</code>","text":"<p>Make the given, typically hidden, attributes visible on the model:</p> <pre><code>class Entry extends Model\n{\n    protected $hidden = ['cn'];\n}\n\n// This will override the above:\n$model-&gt;makeVisible('cn');\n</code></pre>"},{"location":"docs/core/v1/model-api/#move","title":"<code>move</code>","text":"<p>Move a model into the specified container:</p> <pre><code>$user = User::find('cn=Steve Bauman,dc=local,dc=com');\n\n$ou = OrganizationalUnit::find('ou=Office Users,dc=local,dc=com');\n\n$user-&gt;move($ou);\n\n// Returns: 'cn=Steve Bauman,ou=Office Users,dc=local,d=com'\n$user-&gt;getDn();\n</code></pre>"},{"location":"docs/core/v1/model-api/#newbatchmodification","title":"<code>newBatchModification</code>","text":"<p>Create a new <code>LdapRecord\\Models\\BatchModification</code> instance:</p> <pre><code>// Returns instance of: BatchModification\n$mod = $model-&gt;newBatchModification(\n    'cn', LDAP_MODIFY_BATCH_ADD, ['Steve Bauman']\n);\n</code></pre>"},{"location":"docs/core/v1/model-api/#newcollection","title":"<code>newCollection</code>","text":"<p>Create a new <code>Tightenco\\Collect\\Support\\Collection</code>:</p> <pre><code>$collection = $model-&gt;newCollection($items = []);\n</code></pre>"},{"location":"docs/core/v1/model-api/#newinstance","title":"<code>newInstance</code>","text":"<p>Create a new model instance:</p> <pre><code>$model = Model::findByAnr('sbauman');\n\n$new = $model-&gt;newInstance();\n</code></pre>"},{"location":"docs/core/v1/model-api/#newquery","title":"<code>newQuery</code>","text":"<p>Create a new model query:</p> <p>Global scopes and object classes will be applied to this query.</p> <pre><code>$results = $model-&gt;newQuery()-&gt;where('cn', 'contains', 'Steve')-&gt;get();\n</code></pre>"},{"location":"docs/core/v1/model-api/#newquerywithoutscopes","title":"<code>newQueryWithoutScopes</code>","text":"<p>Create a new model query without global scopes:</p> <p>Global scopes and object classes will not be applied to this query.</p> <pre><code>$results = $model-&gt;newQueryWithoutScopes()-&gt;get();\n</code></pre>"},{"location":"docs/core/v1/model-api/#rename","title":"<code>rename</code>","text":"<p>Rename a model and keep it's container location:</p> <p>When renaming is successful, the models distinguished name is automatically updated to reflect its new name in the directory, so you may run further operations on it during the same request.</p> <pre><code>$user = Model::find('cn=John Doe,dc=local,dc=com');\n\n$user-&gt;rename('cn=Jane Doe');\n\n// Returns: 'cn=Jane Doe,dc=local,dc=com'\n$user-&gt;getDn();\n</code></pre>"},{"location":"docs/core/v1/model-api/#save","title":"<code>save</code>","text":"<p>Persist the new or existing model to the directory:</p> <pre><code>// Save a new model:\n$model = new Model(['cn' =&gt; 'John Doe']);\n\n$model-&gt;save();\n\n// Updating an existing model:\n$model = Model::findBy('cn', 'John Doe');\n\n$model-&gt;cn = 'Jane Doe';\n\n$model-&gt;save();\n</code></pre> <p>You may also pass an array of attributes to persist to your LDAP directory:</p> <pre><code>$model-&gt;save(['cn' =&gt; 'Steve Bauman']);\n</code></pre>"},{"location":"docs/core/v1/model-api/#setattribute","title":"<code>setAttribute</code>","text":"<p>Set the value of an existing or non-existing attribute:</p> <pre><code>$model-&gt;setAttribute('attribute', 'value');\n\n$model-&gt;setAttribute('attribute', ['foo', 'bar']);\n</code></pre>"},{"location":"docs/core/v1/model-api/#setconnection","title":"<code>setConnection</code>","text":"<p>Set the name of the connection for the model to use:</p> <pre><code>$model = new Model();\n\n// ...\n\n$model-&gt;setConnection('domain-b');\n\n// Model will be saved to 'domain-b'\n$model-&gt;save();\n</code></pre>"},{"location":"docs/core/v1/model-api/#setdateformat","title":"<code>setDateFormat</code>","text":"<p>Set the date format to use when serializing LDAP dates:</p> <pre><code>$model = Model::findByAnr('sbauman');\n\n$model-&gt;setDateFormat('Y-m-d H:i');\n\n$attributes = json_encode($model);\n</code></pre>"},{"location":"docs/core/v1/model-api/#setdn","title":"<code>setDn</code>","text":"<p>Set the Distinguished Name of the model to be created with:</p> <pre><code>$model = new Model();\n\n$model-&gt;setDn('cn=John Doe,dc=local,dc=com');\n\n$model-&gt;save();\n</code></pre>"},{"location":"docs/core/v1/model-api/#setfirstattribute","title":"<code>setFirstAttribute</code>","text":"<p>Set the first value of an existing or non-existing attribute:</p> <pre><code>$model = new Model();\n\n$model-&gt;setFirstAttribute('cn', 'John Doe');\n\n// Returns ['cn' =&gt; ['John Doe']]\n$model-&gt;getAttributes();\n\n$model-&gt;proxyaddresses = ['foo', 'bar'];\n\n// Overwrites 'foo' with 'baz':\n$model-&gt;setFirstAttribute('proxyaddresses', ['baz']);\n</code></pre>"},{"location":"docs/core/v1/model-api/#sethidden","title":"<code>setHidden</code>","text":"<p>Clear defined hidden attributes and set the attributes that should be hidden during serialization:</p> <pre><code>$model-&gt;setHidden(['cn', 'sn']);\n\n// Attributes 'cn' and 'sn' will be removed:\n$attributes = json_encode($model);\n</code></pre>"},{"location":"docs/core/v1/model-api/#setmodifications","title":"<code>setModifications</code>","text":"<p>Set the models batch modifications to be processed upon save:</p> <pre><code>$mods = [\n    [\n        'attrib'  =&gt; 'telephoneNumber',\n        'modtype' =&gt; LDAP_MODIFY_BATCH_ADD,\n        'values'  =&gt; ['+1 555 555 1717'],\n    ]\n];\n\n$model-&gt;setModifications($mods);\n\n$model-&gt;save();\n</code></pre>"},{"location":"docs/core/v1/model-api/#setvisible","title":"<code>setVisible</code>","text":"<p>Clear defined visible attributes and set the attributes that should be visible during serialization:</p> <pre><code>$model-&gt;setVisible(['cn', 'sn']);\n\n// Only attributes 'cn' and 'sn' will be included:\n$attributes = json_encode($model);\n</code></pre>"},{"location":"docs/core/v1/model-api/#siblings","title":"<code>siblings</code>","text":"<p>Create a new query to retrieve a models siblings:</p> <p>The existing model instance will be included in the query results.</p> <pre><code>$siblings = $model-&gt;siblings()-&gt;get();\n</code></pre>"},{"location":"docs/core/v1/model-api/#synchronize","title":"<code>synchronize</code>","text":"<p>Refresh a models attributes by re-retrieving them from your LDAP directory.</p> <p>This will affect the current model instance:</p> <pre><code>$model-&gt;synchronize();\n</code></pre>"},{"location":"docs/core/v1/model-api/#update","title":"<code>update</code>","text":"<p>Persist the changes of a model to the LDAP directory.</p> <p>The save method should be used instead of <code>update</code> to persist new or existing models.  If the model does not exist in the directory, an exception will be thrown.</p> <pre><code>$model-&gt;cn = 'John Doe';\n\n$model-&gt;update();\n</code></pre> <p>You may also provide an array of attributes to persist to your LDAP directory:</p> <pre><code>$model-&gt;update(['cn' =&gt; 'John Doe']);\n</code></pre>"},{"location":"docs/core/v1/model-api/#updateattribute","title":"<code>updateAttribute</code>","text":"<p>Immediately updates an attribute value on the model.</p> <p>Performs an <code>ldap_mod_replace</code> under the hood.</p> <pre><code>$model-&gt;updateAttribute('proxyaddresses', ['foo', 'bar']);\n</code></pre>"},{"location":"docs/core/v1/model-mutators/","title":"Models: Accessors &amp; Mutators","text":""},{"location":"docs/core/v1/model-mutators/#introduction","title":"Introduction","text":"<p>Accessors and mutators allow you to modify attribute values when you retrieve or set them on model instances. If you'd ever used Laravel accessors or mutators, you'll feel right at home.</p>"},{"location":"docs/core/v1/model-mutators/#accessors-mutators","title":"Accessors &amp; Mutators","text":""},{"location":"docs/core/v1/model-mutators/#defining-an-accessor","title":"Defining An Accessor","text":"<p>For an example, lets say we are working with Active Directory and we want to encode the <code>thumbnailPhoto</code> attribute whenever we retrieve it from our <code>User</code> model.</p> <p>To define an accessor for this attribute, we define a method named <code>getThumbnailphotoAttribute()</code>:</p> <pre><code>&lt;?php\n\nuse LdapRecord\\Models\\Model;\n\nclass User extends Model\n{\n    public function getThumbnailphotoAttribute($value)\n    {\n        // Due to LDAP's multi-valued nature, all values will be\n        // contained inside of an array. We will attempt to\n        // retrieve the first one, or supply a default.\n        $data = $value[0] ?? file_get_contents('images/default_photo.jpg');\n\n        $image = base64_encode($data);\n\n        $mime = 'image/jpeg';\n\n        if (function_exists('finfo_open')) {\n            $finfo = finfo_open();\n\n            $mime = finfo_buffer($finfo, $data, FILEINFO_MIME_TYPE);\n\n            return \"data:$mime;base64,$image\";\n        }\n\n        return \"data:$mime;base64,$image\";\n    }\n}\n</code></pre> <p>As you can see from the above, the attribute name we want to create an accessor for, must be between <code>get</code> and <code>Attribute</code>.</p> <p>The casing of <code>get</code> and <code>Attribute</code> are very important. This casing difference is how LdapRecord detects accessor and mutator methods.</p> <p>If your attribute contains a hyphen, use must use alternate casing to indicate this. For example, lets create an accessor for the <code>apple-user-homeurl</code> attribute:</p> <pre><code>&lt;?php\n\nuse LdapRecord\\Models\\Model;\n\nclass User extends Model\n{\n    public function getAppleUserHomeurlAttribute($value)\n    {\n        // Do something with its value.\n        return $value;\n    }\n}\n</code></pre> <p>As you can see, alternate casing indicates to LdapRecord that the attribute we are looking for contains hyphens.</p>"},{"location":"docs/core/v1/model-mutators/#defining-a-mutator","title":"Defining A Mutator","text":"<p>A mutator does the opposite of an accessor. A mutator is a function you define that accepts the value of the attribute you are setting so you can transform it before it is set onto the model.</p> <p>To define a mutator, we use the above accessor syntax with <code>set</code> instead of <code>get</code>.</p> <p>For example, let's define a <code>unicodepwd</code> mutator that automatically encodes a password by setting the attribute:</p> <pre><code>&lt;?php\n\nuse LdapRecord\\Utilities;\nuse LdapRecord\\Models\\Model;\n\nclass User extends Model\n{\n    public function setUnicodepwdAttribute($password)\n    {\n        $this-&gt;attributes['unicodepwd'] = [Utilities::encodePassword($password)];\n    }\n}\n</code></pre> <p>Now once we set the attribute, it will automatically encode the password we are setting on the <code>User</code> model:</p> <pre><code>$user = new User();\n\n$user-&gt;unicodepwd = 'secret';\n</code></pre>"},{"location":"docs/core/v1/model-mutators/#date-mutators","title":"Date Mutators","text":"<p>By default, LdapRecord will convert the attributes <code>createtimestamp</code> and <code>modifytimestamp</code> to instances of Carbon.</p> <p>If you extend from <code>ActiveDirectory</code> models, the attributes <code>whenchanged</code> and <code>whencreated</code> will be converted instead.</p> <p>When you define an attribute as a date, you can set its value to an instance of <code>DateTime</code> / <code>Carbon</code> instance, a UNIX timestamp, or a date string (<code>Y-m-d</code>). Upon saving your model, these will be converted properly to be stored in your directory.</p> <p>To define a mutator for an attribute that contains a timestamp, we must set the <code>$dates</code> property on the model. However, since LDAP directories have different timestamp formats for some attributes, we must tell LdapRecord what kind of format to use for proper conversion.</p> <p>For example, let's define a date mutator for the <code>accountexpires</code> attribute that exists on Active Directory. To do so, we must set the <code>$dates</code> property to a key / value pair, where the key is the attribute that contains the timestamp and the value is the type of LDAP format to convert to and from:</p> <pre><code>&lt;?php\n\nuse LdapRecord\\Models\\Model;\n\nclass User extends Model\n{\n    protected $dates = [\n        'accountexpires' =&gt; 'windows-int',\n    ];\n}\n</code></pre> <p>Now lets have our user's account expire at the same time tomorrow:</p> <pre><code>$user = User::find('cn=John Doe,dc=acme,dc=org');\n\n$user-&gt;accountexpires = new \\DateTime('+1 day');\n\n$user-&gt;save();\n</code></pre> <p>Once we've saved the model, the attribute will now automatically be converted to a Carbon instance so you can use any of Carbon's methods on the attribute:</p> <pre><code>$user = User::find('cn=John Doe,dc=acme,dc=org');\n\nif ($user-&gt;accountexpires-&gt;isPast()) {\n    // The user account is expired.\n}\n</code></pre>"},{"location":"docs/core/v1/model-mutators/#available-types","title":"Available Types","text":"<p>Currently, there are 3 built-in date mutator types. They are:</p> <ul> <li><code>ldap</code></li> <li><code>windows</code></li> <li><code>windows-int</code></li> </ul>"},{"location":"docs/core/v1/model-mutators/#ldap-type","title":"LDAP Type","text":"<p>The <code>ldap</code> type is the most common format for LDAP timestamps - outside of Active Directory. This format converts LDAP timestamps in the format of <code>YYYYMMDDHHMMSST</code>. T is the time zone which is usually 'Z' (Zulu Time Zone = UTC/GMT).</p>"},{"location":"docs/core/v1/model-mutators/#windows-type","title":"Windows Type","text":"<p>The <code>windows</code> type is similar to the <code>ldap</code> type, however it differs slightly so it requires its own conversion type. Its timestamp is in the format of <code>YYYYMMDDHHMMSS.0T</code>. T is the time zone which is usually 'Z' (Zulu Time Zone = UTC/GMT).</p>"},{"location":"docs/core/v1/model-mutators/#windows-integer-type","title":"Windows Integer Type","text":"<p>The <code>windows-int</code> type handles the 18-digit Active Directory timestamp format, also named 'Windows NT time format', 'Win32 FILETIME or SYSTEMTIME' or NTFS file time. An example of this would be the <code>accountexpires</code> attribute that exists on users:</p> <pre><code>132131246410000000\n</code></pre> <p>Which equals:</p> <pre><code>Monday, September 16, 2019 4:24:01 PM\n</code></pre>"},{"location":"docs/core/v1/model-mutators/#attribute-casting","title":"Attribute Casting","text":"<p>Similarly with Laravel's Eloquent, the <code>$casts</code> property on your model provides a convenient method of converting attributes to common data types. The <code>$casts</code> property should be an array where the key is the name of the attribute being cast and the value is the type you wish to cast the column to.</p> <p>The supported cast types are:</p> <ul> <li><code>integer</code></li> <li><code>real</code></li> <li><code>float</code></li> <li><code>double</code></li> <li><code>decimal:&lt;digits&gt;</code></li> <li><code>string</code></li> <li><code>boolean</code></li> <li><code>object</code></li> <li><code>array</code></li> <li><code>collection</code></li> <li><code>datetime:&lt;ldap/windows/windows-int&gt;</code></li> </ul> <p>To demonstrate attribute casting, let's cast the <code>msExchHideFromAddressList</code> Active Directory attribute, which determines whether a user account is shown in the Global Address List in Outlook.</p> <p>This attribute is stored as a string in Active Directory, with the value <code>TRUE</code> or <code>FALSE</code>.</p> <pre><code>namespace App\\Models\\Ldap;\n\nuse LdapRecord\\Models\\ActiveDirectory\\User as BaseUser;\n\nclass User extends BaseUser\n{\n    protected $casts = [\n        'msExchHideFromAddressList' =&gt; 'boolean',\n    ];\n}\n</code></pre> <p>Then, we can utilize it when we retrieve users from our directory:</p> <pre><code>$user = User::find('cn=John Doe,dc=local,dc=com');\n\nif ($user-&gt;msExchHideFromAddressList) {\n    // This user is being hidden from the Global Address list.\n}\n</code></pre>"},{"location":"docs/core/v1/model-relationships/","title":"Models: Relationships","text":""},{"location":"docs/core/v1/model-relationships/#introduction","title":"Introduction","text":"<p>LDAP records often contain attributes that reference other LDAP records in your directory. An example of this would be the <code>member</code> attribute on LDAP groups that contain a list of distinguished names whom are members of the group.</p> <p>Using LdapRecord relationships, we can define what models contain references to other records and easily retrieve the referenced models to perform operations upon. There are several relationship types that LdapRecord supports:</p> Relationship Type Has One Indicates a one-to-one relation, such as a user having one manager Has Many Indicates a one-to-many relation, such as a user having many groups Has Many (Inverse) Indicates an inverse one-to-many relation, such as a group having many members Has Many In Indicates a one-to-many relation, but with virtual attributes that cannot be modified"},{"location":"docs/core/v1/model-relationships/#defining-relationships","title":"Defining Relationships","text":""},{"location":"docs/core/v1/model-relationships/#has-one","title":"Has One","text":"<p>A has one relationship is a basic relationship to work with. An example of a \"has one\" relationship would be a <code>User</code> having one <code>manager</code>. To define this relationship, we place a <code>manager()</code> method on our <code>User</code> model, and call the <code>hasOne()</code> method and return the result:</p> <pre><code>&lt;?php\n\nuse LdapRecord\\Models\\Model;\n\nclass User extends Model\n{\n    /**\n     * Retrieve the manager of the current user.\n     */\n    public function manager()\n    {\n        return $this-&gt;hasOne(User::class, 'manager');\n    }\n}\n</code></pre> <p>The first argument that is passed into the relation is the name of the related model. The second is the LDAP attribute on the current user that contains the relationships distinguished name.</p> <p>If the relationships attribute you are defining does not contain a distinguished name, you can alter this and define a foreign key using the third parameter. For example, if our manager attribute actually contains a <code>uid</code>, we can change this so the related model is retrieved by a UID, instead of a distinguished name:</p> <pre><code>&lt;?php\n\nuse LdapRecord\\Models\\Model;\n\nclass User extends Model\n{\n    /**\n     * Retrieve the manager of the current user.\n     */\n    public function manager()\n    {\n        return $this-&gt;hasOne(User::class, 'manager', 'uid');\n    }\n}\n</code></pre>"},{"location":"docs/core/v1/model-relationships/#has-many","title":"Has Many","text":"<p>Defining a has many relationship indicates that the model can be apart of many of the given model.</p> <p>For example, a <code>User</code> \"has many\" <code>groups</code>:</p> <pre><code>&lt;?php\n\nuse LdapRecord\\Models\\Model;\n\nclass User extends Model\n{\n    /**\n     * Retrieve the groups the user is apart of.\n     */\n    public function groups()\n    {\n        return $this-&gt;hasMany(Group::class, 'member');\n    }\n}\n</code></pre> <p>In the above example, LdapRecord will construct a query to locate all of the groups that the user is apart of using the users distinguished name. This users distinguished name will automatically be escaped to be able to properly locate all of the groups.</p> <p>For example, this is the query filter that will be used in the search:</p> <pre><code>(member=cn\\3dJohn Doe\\2cdc\\3dacme\\2cdc\\3dorg)\n</code></pre> <p>If you're using an alternate LDAP server or a different attribute to locate group membership, you may change the relation key. For example, you may want to use <code>uniquemember</code> for this relationship:</p> <pre><code>/**\n * Retrieve the groups the user is apart of.\n */\npublic function groups()\n{\n    return $this-&gt;hasMany(Group::class, 'uniquemember');\n}\n</code></pre> <p>You may also define a foreign key in third parameter if the attribute you are using is not a distinguished name.</p>"},{"location":"docs/core/v1/model-relationships/#has-many-inverse","title":"Has Many (Inverse)","text":"<p>Now that we have setup a <code>User</code> model that can access of their groups, lets define a <code>Group</code> model to be able to access its members.</p> <p>Since an LDAP group can contain various types of objects (such as contacts, users, and other groups), we must pass in an array of models that are potential members of the group. This allows the relationship to properly create the models that are returned from the query results.</p> <p>LdapRecord will return plain <code>Entry</code> models when it cannot locate the correct model in the given array.</p> <pre><code>&lt;?php\n\nuse LdapRecord\\Models\\Model;\n\nclass Group extends Model\n{\n    /**\n     * Retrieve the members of the group.\n     */\n    public function members()\n    {\n        return $this-&gt;hasMany([\n            Group::class, User::class, Contact::class\n        ], 'memberof')-&gt;using($this, 'member');\n    }\n}\n</code></pre> <p>For brevity, we have not shown the creation of the <code>Contact</code> model.</p> <p>You can see from the above example, we have passed an array of models that are possible members of the group. The difference of this definition is the usage of the <code>using()</code> method.</p> <p>Since LDAP does not offer bi-directional relationships, we must add the <code>using()</code> method. This method defines which model and attribute to use for attaching and detaching related models.</p> <p>In this case, we pass in <code>$this</code> to indicate that the current model instance (the <code>Group</code>) contains the <code>member</code> attribute to add and remove models you pass into the <code>attach()</code> and <code>detach()</code> methods.</p> <p>This method is paramount to be able to properly utilize this relationship.</p> <p>When querying the above relationship, LdapRecord will construct the following filter:</p> <pre><code>(memberof=cn\\3dAccounting\\2cdc\\3dacme\\2cdc\\3dorg)\n</code></pre>"},{"location":"docs/core/v1/model-relationships/#has-many-in","title":"Has Many In","text":"<p>The has many in relationship allows you to retrieve related models from the given parent models virtual attribute such as <code>memberof</code>.</p> <p>Since this relationship uses virtual attributes, you cannot use <code>attach()</code> or <code>detach()</code> methods. This also means that for each entry that is contained in the virtual attribute, they will be queried for individually which can be very resource intensive depending on the group size.</p> <p>Lets define a <code>groups()</code> relationship that utilizes the <code>hasManyIn()</code> method:</p> <pre><code>&lt;?php\n\nuse LdapRecord\\Models\\Model;\n\nclass User extends Model\n{\n    public function groups()\n    {\n        return $this-&gt;hasManyIn(Group::class, 'memberof');\n    }\n}\n</code></pre>"},{"location":"docs/core/v1/model-relationships/#important-note-for-querying","title":"Important Note for Querying","text":"<p>When using the above relationship from query results, you must ensure you select the LDAP property you have defined as the foreign key in the relationship. This attribute contains the values needed to locate the related models.</p> <p>For example, the following relationship query below will return no results because we have explicitly requested attributes excluding <code>memberof</code>:</p> <pre><code>// Selecting only the 'cn', and 'sn' attributes:\n$user = User::select(['cn', 'sn'])-&gt;find('cn=John Doe,dc=acme,dc=org');\n\n// Returns an empty collection.\n$groups = $user-&gt;groups()-&gt;get();\n</code></pre>"},{"location":"docs/core/v1/model-relationships/#querying-relationships","title":"Querying Relationships","text":"<p>LdapRecord relationships also serve as query builders. This means you can chain query builder methods onto relationship methods to add constraints to the relationship query prior to retrieving the results from your directory.</p> <p>For example, lets define a <code>User</code> model that can be a member of many groups:</p> <pre><code>&lt;?php\n\nuse App\\Group;\nuse LdapRecord\\Models\\Model;\n\nclass User extends Model\n{\n    /**\n     * Retrieve groups that the current user is apart of.\n     */\n    public function groups()\n    {\n        return $this-&gt;hasMany(Group::class, 'member');\n    }\n}\n</code></pre> <p>Now, lets retrieve a user's groups, but only return those groups that have a common name starting with 'Admin':</p> <pre><code>$user = User::find('cn=John Doe,dc=acme,dc=org');\n\n$adminGroups = $user-&gt;groups()-&gt;whereStartsWith('cn', 'Admin')-&gt;get();\n</code></pre> <p>By default, querying relations will not include recursive results. More on this below.</p>"},{"location":"docs/core/v1/model-relationships/#recursive-queries","title":"Recursive Queries","text":"<p>To request all of the relationships results, such as nested groups in groups, call the <code>recursive()</code> method, prior to retrieving results via <code>get()</code>:</p> <pre><code>$user = User::find('cn=John Doe,dc=acme,dc=org');\n\n$allGroups = $user-&gt;groups()-&gt;recursive()-&gt;get();\n</code></pre> <p>Be careful when calling <code>recursive</code> on large sets of group memberships. If you are not careful, you could run out of memory due to thousands of models being returned.</p> <p>The <code>recursive</code> method sets a flag on the LdapRecord relationship indicating you would like recursive results included (groups of groups).</p> <p>Recursive results are gathered by first retrieving the groups that the user is a member of, then retrieving the groups that are members of each resulting parent group. This means an LDAP search query is executed for each group that your user is apart of.</p> <p>Circular group dependencies are rejected automatically to prevent infinite looping.</p>"},{"location":"docs/core/v1/model-relationships/#attaching-detatching-relationships","title":"Attaching &amp; Detatching Relationships","text":"<p>Using relationships you define, you can easily attach and detach related models from each other. For example, you may want to attach a <code>Group</code> to a <code>User</code>, or vice-versa.</p>"},{"location":"docs/core/v1/model-relationships/#attaching","title":"Attaching","text":"<p>Using the above relationship examples, lets walk through attaching a user to a group:</p> <pre><code>$user = User::find('cn=John Doe,dc=acme,dc=org');\n$group = Group::find('cn=Accounting,dc=acme,dc=org');\n\n// Attaching a group to a user:\n$user-&gt;groups()-&gt;attach($user);\n\n// Attaching a user to a group:\n$group-&gt;members()-&gt;attach($user);\n</code></pre> <p>You may also use the <code>attachMany()</code> method to attach many models at once.</p> <p>For this example, let's say we have an organizational unit that contains groups all new users must be apart of:</p> <pre><code>$ou = OrganizationalUnit::find('ou=Groups,dc=acme,dc=org');\n\n$groups = Group::in($ou)-&gt;get();\n\n$user = User::find('cn=John Doe,ou=Users,dc=acme,dc=org');\n\n$user-&gt;groups()-&gt;attachMany($groups);\n</code></pre> <p>As you can see above, we took a complex LDAP operation and completed it in just 4 lines of code.</p>"},{"location":"docs/core/v1/model-relationships/#detach","title":"Detach","text":"<p>Using the above relationship examples, lets walk through detaching a user from a group:</p> <pre><code>$user = User::find('cn=John Doe,dc=acme,dc=org');\n\n// Retrieve the first group that the user is apart of:\n$group = $user-&gt;groups()-&gt;get()-&gt;first();\n\n$user-&gt;groups()-&gt;detach($group);\n</code></pre> <p>You may also want to detach a user from all groups, if for example they are leaving the company and you it is apart of your off-boarding process.</p> <p>You may accomplish this task by using the <code>detachAll()</code> method:</p> <pre><code>$user = User::find('cn=John Doe,ou=Users,dc=acme,dc=org');\n\n$user-&gt;groups()-&gt;detachAll();\n</code></pre>"},{"location":"docs/core/v1/model-relationships/#checking-relationship-existence","title":"Checking Relationship Existence","text":"<p>To check if a model exists inside of a relationship, use the <code>exists()</code> relationship method.</p> <p>If you're using Active Directory and are simply looking to check if a user is inside of a particular group, utilize the <code>Model::whereMemberOf</code> method that is available on all Active Directory models to locate users whom are members of that group.</p> <p>For example, lets determine if a <code>User</code> is a member of a <code>Group</code>:</p> <pre><code>$user = User::find('cn=John Doe,dc=acme,dc=org');\n$group = Group::find('cn=Accounting,dc=acme,dc=org');\n\nif ($user-&gt;groups()-&gt;exists($group)) {\n    // This user is a member of the 'Accounting' group.\n}\n</code></pre> <p>This method can be used on all relationship types.</p> <p>For another example, lets determine if a <code>User</code> is a <code>manager</code> of another:</p> <pre><code>$user = User::find('cn=John Doe,dc=acme,dc=org');\n$manager = User::find('cn=Jane Doe,dc=acme,dc=org');\n\nif ($user-&gt;manager()-&gt;exists($manager)) {\n    // Jane Doe is John Doe's manager.\n}\n</code></pre> <p>You can also determine if the model has any groups or members by simply calling <code>exists()</code>:</p> <pre><code>$user = User::find('cn=John Doe,dc=acme,dc=org');\n\nif ($user-&gt;manager()-&gt;exists()) {\n    // This user has a manager.\n}\n\nif ($user-&gt;groups()-&gt;exists()) {\n    // This user is a member of at least one group.\n}\n</code></pre>"},{"location":"docs/core/v1/model-scopes/","title":"Models: Scopes","text":""},{"location":"docs/core/v1/model-scopes/#introduction","title":"Introduction","text":"<p>Model \"scoping\" allows you to define functions or classes that dynamically add filters to a model query. There are two types of scopes you may add to models, and there are benefits and drawbacks to each type:</p> <p>Local Scopes:</p> <ul> <li>Applied conditionally on model queries, being called explicitly</li> <li>Can accept parameters</li> </ul> <p>Global Scopes:</p> <ul> <li>Applied globally on model queries</li> <li>Cannot accept parameters</li> </ul>"},{"location":"docs/core/v1/model-scopes/#local-query-scopes","title":"Local Query Scopes","text":""},{"location":"docs/core/v1/model-scopes/#creating-a-local-scope","title":"Creating a local scope","text":"<p>Local scopes allow you to add constraints to LDAP queries created from models dynamically.</p> <p>To define a local scope, create a new <code>public</code> method, prefix it with <code>scope</code>, followed by the name you would like to call the scope by.</p> <p>Local scopes must also accept the <code>LdapRecord\\Query\\Model\\Builder</code> as the first parameter.</p> <p>For this example, let's create a local model scope that will return Active Directory locked out users:</p> <pre><code>use LdapRecord\\Models\\Model;\nuse LdapRecord\\Query\\Model\\Builder;\n\nclass User extends Model\n{\n    // ...\n\n    /**\n     * Apply the scope to the query.\n     *\n     * @param Builder $builder\n     *\n     * @return Builder\n     */\n    public function scopeLockedOut(Builder $query)\n    {\n        return $query-&gt;where('lockouttime', '&gt;', 1);\n    }\n}\n</code></pre>"},{"location":"docs/core/v1/model-scopes/#using-a-local-scope","title":"Using a local scope","text":"<p>Now that we have defined a local scope inside of our model, we can call it like so:</p> <pre><code>$usersLockedOut = User::lockedOut()-&gt;get();\n</code></pre> <p>Local scopes may also be chained, and accept parameters. This allows you further narrowing down your search results.</p> <p>Let's add another scope to our example model that will only return users of a particular company:</p> <pre><code>// User.php\n\npublic function scopeLockedOut(Builder $query)\n{\n    return $query-&gt;where('lockouttime', '&gt;', 1);\n}\n\npublic function scopeCompany(Builder $query, $companyName)\n{\n    return $query-&gt;where('company', '=', $companyName);\n}\n</code></pre> <p>Now we can use both of these scopes in succession:</p> <pre><code>$users = User::company('acme')-&gt;lockedOut()-&gt;get();\n</code></pre> <p>Local scopes are very powerful, allowing you to generate readable, understandable queries!</p>"},{"location":"docs/core/v1/model-scopes/#global-query-scopes","title":"Global Query Scopes","text":"<p>Global scopes allow you to add constraints to all LDAP queries that are created on a particular model. Writing a query scope allows you to be certain that a particular filter is always applied, rather than adding constraints every time you query the model.</p>"},{"location":"docs/core/v1/model-scopes/#creating-a-global-scope","title":"Creating a global scope","text":"<p>To create a global query scope, create a class in your application that implements the <code>LdapRecord\\Models\\Scope</code> interface. This interface will require you to add an <code>apply</code> method. The <code>apply</code> method accepts the query <code>Builder</code> in the first parameter, and the <code>Model</code> in second parameter.</p> <p>For an example, let's say our application must only retrieve user accounts whom are employees of a particular company. We will create a file in our application in the directory <code>app/Ldap/Scopes</code> with the file name <code>CompanyScope</code>:</p> <pre><code>&lt;?php\n\nnamespace App\\Ldap\\Scopes;\n\nuse LdapRecord\\Models\\Scope;\nuse LdapRecord\\Models\\Model;\nuse LdapRecord\\Query\\Model\\Builder;\n\nclass CompanyScope implements Scope\n{\n    /**\n     * Apply the scope to the query.\n     *\n     * @param Builder $builder\n     * @param Model   $model\n     */\n    public function apply(Builder $builder, Model $model)\n    {\n        $builder-&gt;where('company', '=', 'Acme Company');\n    }\n}\n</code></pre> <p>If you are looking to select additional attributes in your scope using the <code>select</code> method, use <code>addSelect</code> instead so your query selects are not overwritten.</p>"},{"location":"docs/core/v1/model-scopes/#apply-the-global-scope","title":"Apply the global scope","text":"<p>Now that we've written our global scope, we can apply it to our users model.</p> <p>We will do this by adding an override to the models <code>boot</code> method and using the <code>addGlobalScope</code> method:</p> <pre><code>&lt;?php\n\nnamespace App\\Ldap;\n\nuse LdapRecord\\Models\\Model;\nuse App\\Ldap\\Scopes\\CompanyScope;\n\nclass User extends Model\n{\n    /**\n     * The \"booting\" method of the model.\n     *\n     * @return void\n     */\n    protected static function boot()\n    {\n        parent::boot();\n\n        static::addGlobalScope(new CompanyScope);\n    }\n}\n</code></pre> <p>After adding the scope, queries ran on the <code>User</code> model will always add the filter:</p> <pre><code>(company=\\41\\63\\6d\\65\\20\\43\\6f\\6d\\70\\61\\6e\\79)\n</code></pre> <p>Which your LDAP server will read as:</p> <pre><code>(company=Acme Company)\n</code></pre> <p>This is due to all values being automatically escaped using the LdapRecord query builder.</p>"},{"location":"docs/core/v1/model-scopes/#anonymous-global-scopes","title":"Anonymous global scopes","text":"<p>Instead of creating a class scope, you may also define global scopes using Closures. This is useful for simple scopes that do not warrant a separate class:</p> <pre><code>&lt;?php\n\nnamespace App\\Ldap;\n\nuse LdapRecord\\Models\\Model;\nuse LdapRecord\\Query\\Model\\Builder;\n\nclass User extends Model\n{\n    /**\n     * The \"booting\" method of the model.\n     *\n     * @return void\n     */\n    protected static function boot()\n    {\n        parent::boot();\n\n        static::addGlobalScope('manager', function (Builder $builder) {\n            $builder-&gt;where('manager', '=', 'cn=John Doe,dc=local,dc=com');\n        });\n    }\n}\n</code></pre>"},{"location":"docs/core/v1/model-scopes/#removing-global-scopes","title":"Removing Global Scopes","text":"<p>If you would like to remove a global scope for a particular query, you may use the <code>withoutGlobalScope</code> method. The method accepts the class name of the global scope as its argument:</p> <pre><code>User::withoutGlobalScope(CompanyScope::class)-&gt;get();\n</code></pre> <p>Or, if you've defined a global scope using a Closure:</p> <pre><code>User::withoutGlobalScope('manager')-&gt;get();\n</code></pre> <p>If you would like to remove several or even all of the global scopes, you may use the <code>withoutGlobalScopes</code> method:</p> <pre><code>// Remove all of the global scopes:\nUser::withoutGlobalScopes()-&gt;get();\n\n// Remove some of the global scopes:\nUser::withoutGlobalScopes([\n    CompanyScope::class, 'manager'\n])-&gt;get();\n</code></pre>"},{"location":"docs/core/v1/models/","title":"Models: Getting Started","text":""},{"location":"docs/core/v1/models/#introduction","title":"Introduction","text":"<p>The LdapRecord ORM provides a beautiful and simple ActiveRecord implementation for working with your LDAP server. Each \"Model\" represents a type of LDAP object that resides in your directory.</p> <p>Models allow you query your directory as well as create, update, and delete records.</p> <p>Before getting started, ensure you've added at least one connection to the container.</p> <p>By default, there are models included with LdapRecord for popular LDAP directories (namely Active Directory &amp; OpenLDAP) so you can get up and running as fast as possible. More on this below.</p>"},{"location":"docs/core/v1/models/#defining-models","title":"Defining Models","text":"<p>To get started, you must create a new class that represents the LDAP object you would like to query.</p> <p>For example, let's create a model that represents Active Directory users:</p> <pre><code>&lt;?php\n\nuse LdapRecord\\Models\\Model;\n\nclass User extends Model\n{\n    public static $objectClasses = [\n        'top',\n        'person',\n        'organizationalperson',\n        'user',\n    ];\n}\n</code></pre> <p>As you can see above, we must add a public static property that contains the object classes of the LDAP record.</p> <p>These object classes are used to locate the proper objects in your LDAP directory.</p> <p>If you do not provide any object classes, global directory searches will be performed when retrieving models.</p>"},{"location":"docs/core/v1/models/#predefined-models","title":"Predefined Models","text":"<p>LdapRecord comes with many predefined models that allow you to get started right away.</p> <p>You may extend these built-in models and add your own methods &amp; functionality, as well as override built-in functionality.</p>"},{"location":"docs/core/v1/models/#entry-model","title":"Entry Model","text":"<p>Use the <code>LdapRecord\\Models\\Entry</code> model for retrieving all objects from your directory - regardless of type.</p>"},{"location":"docs/core/v1/models/#active-directory-models","title":"Active Directory Models","text":"<p>Each below model references a type of object in Active Directory.</p> Model <code>LdapRecord\\Models\\ActiveDirectory\\Entry</code> <code>LdapRecord\\Models\\ActiveDirectory\\User</code> <code>LdapRecord\\Models\\ActiveDirectory\\Group</code> <code>LdapRecord\\Models\\ActiveDirectory\\Computer</code> <code>LdapRecord\\Models\\ActiveDirectory\\Contact</code> <code>LdapRecord\\Models\\ActiveDirectory\\Container</code> <code>LdapRecord\\Models\\ActiveDirectory\\OrganizationalUnit</code> <code>LdapRecord\\Models\\ActiveDirectory\\Printer</code> <code>LdapRecord\\Models\\ActiveDirectory\\ForeignSecurityPrincipal</code>"},{"location":"docs/core/v1/models/#openldap-models","title":"OpenLDAP Models","text":"Model <code>LdapRecord\\Models\\OpenLdap\\Entry</code> <code>LdapRecord\\Models\\OpenLdap\\User</code> <code>LdapRecord\\Models\\OpenLdap\\Group</code> <code>LdapRecord\\Models\\OpenLdap\\OrganizationalUnit</code>"},{"location":"docs/core/v1/models/#freeipa-models","title":"FreeIPA Models","text":"Model <code>LdapRecord\\Models\\FreeIPA\\Entry</code> <code>LdapRecord\\Models\\FreeIPA\\User</code> <code>LdapRecord\\Models\\FreeIPA\\Group</code> <p>Don't see a model for the LDAP server you're using? Create a pull request!</p>"},{"location":"docs/core/v1/models/#connections","title":"Connections","text":"<p>By default, all models you create will try to use your <code>default</code> LDAP connection that resides in the connection container. To set your model to use an alternate connection, define a <code>$connection</code> property equal to the name of your other connection.</p> <pre><code>&lt;?php\n\nuse LdapRecord\\Models\\Model;\n\nclass User extends Model\n{\n    protected $connection = 'domain-b';\n}\n</code></pre>"},{"location":"docs/core/v1/models/#distinguished-names","title":"Distinguished Names","text":"<p>To get an objects full distinguished name call the <code>getDn</code> method:</p> <pre><code>$user = User::find('cn=user,dc=local,dc=com');\n\n// Returns 'cn=user,dc=local,dc=com'\n$user-&gt;getDn();\n</code></pre> <p>To get an objects relative distinguished name, call the <code>getRdn</code> method:</p> <pre><code>$user = User::find('cn=user,dc=local,dc=com');\n\n// Returns 'cn=user'\n$user-&gt;getRdn();\n</code></pre> <p>To get an objects parent distinguished name, call the <code>getParentDn</code> method:</p> <pre><code>$user = User::find('cn=user,dc=local,dc=com');\n\n// Returns 'dc=local,dc=com'\n$user-&gt;getParentDn();\n</code></pre> <p>To get an objects name, call the <code>getName</code> method:</p> <pre><code>$user = User::find('cn=user,dc=local,dc=com');\n\n// Returns 'user'\n$user-&gt;getName();\n</code></pre>"},{"location":"docs/core/v1/models/#object-guids","title":"Object GUIDs","text":"<p>To retrieve a models Object GUID (globally unique identifier) call the <code>getConvertedGuid</code> method.</p> <p>This method will return the string variant of your models GUID. Some LDAP directories (namely Active Directory) use hexadecimal byte arrays to store these, so conversion is necessary.</p> <pre><code>$user = User::find('cn=user,dc=local,dc=com');\n\n$user-&gt;getConvertedGuid();\n</code></pre> <p>To retrieve the raw GUID value, use the <code>getObjectGuid</code> method.</p> <p>By default, LdapRecord models will use the <code>objectguid</code> attribute in the above methods. If your directory stores GUIDs in a different attribute, define a <code>$guidKey</code> attribute inside of your model:</p> <pre><code>class User extends Model\n{\n    protected $guidKey = 'entryuuid';\n}\n</code></pre>"},{"location":"docs/core/v1/models/#default-attribute-values","title":"Default Attribute Values","text":"<p>If you would like to define the default values for some of your model's attributes, you may define an <code>$attributes</code> property on your model. This helps you to assign static default values when creating objects in your directory:</p> <p>Due to LDAP's multi-valued nature, each attribute value you define must be an array, regardless if it is single-valued or or multi-valued.</p> <pre><code>class User extends Model\n{\n    protected $attributes = [\n        'company' =&gt; ['Acme'],\n        'description' =&gt; ['User Account'],\n        'manager' =&gt; ['cn=John Doe,dc=acme,dc=org']\n    ];\n}\n</code></pre>"},{"location":"docs/core/v1/models/#retrieving-models","title":"Retrieving Models","text":"<p>Once you've created an LdapRecord model you're ready to start retrieving data from your directory. If you've used Laravel's Eloquent ORM, you'll feel right at home.</p> <p>You can think of a model as a powerful query builder allowing you to query your directory for objects fluently and easily.</p> <pre><code>&lt;?php\n\n$users = User::get();\n\nforeach ($users as $user) {\n    $user-&gt;getFirstAttribute('cn');\n}\n</code></pre>"},{"location":"docs/core/v1/models/#adding-constraints","title":"Adding Constraints","text":"<p>Each model serves as a query builder for the object classes you've defined inside. You can add constraints to your queries and then call <code>get()</code> to retrieve the results.</p> <pre><code>&lt;?php\n\n$users = User::whereStartsWith('cn', 'John')\n            -&gt;whereEndsWith('sn', 'Doe')\n            -&gt;limit(10)\n            -&gt;get();\n</code></pre> <p>Since models are query builders, it's a good idea to review the query builder methods so you can utilize them to their full potential.</p>"},{"location":"docs/core/v1/models/#model-constraints","title":"Model Constraints","text":"<p>Models come with some built in constraint methods that you may find useful.</p> <p>The below constraints will only retrieve the models that are equal to the type you have retrieved. For example, retrieving the descendants of an organizational unit will only return organizational units that are direct descendants. </p> <p>If you would like to avoid this, use the default <code>LdapRecord\\Models\\Entry</code> model, which provides no <code>objectclass</code> constraints on queries.</p>"},{"location":"docs/core/v1/models/#ancestors","title":"Ancestors","text":"<p>To retrieve the direct ancestors of a model, call the <code>ancestors()</code> constraint on a retrieved model:</p> <pre><code>$ou = OrganizationalUnit::find('ou=Accountants,ou=Users,dc=local,dc=com');\n\n$ancestors = $ou-&gt;ancestors()-&gt;get();\n</code></pre> <p>The above example will execute a <code>listing</code> on your LDAP directory in the distinguished name <code>dc=local,dc=com</code>. This effectively pulls the ancestors of the model.</p>"},{"location":"docs/core/v1/models/#siblings","title":"Siblings","text":"<p>To retrieve the siblings of a model, call the <code>siblings()</code> constraint on a retrieved model:</p> <pre><code>$ou = OrganizationalUnit::find('ou=Accountants,ou=Users,dc=local,dc=com');\n\n$siblings = $ou-&gt;siblings()-&gt;get();\n</code></pre> <p>The above example will execute a <code>listing</code> on your LDAP directory in the distinguished name <code>ou=Users,dc=local,dc=com</code>. This effectively pulls the siblings of the model. The current model will also be included in the resulting collection.</p>"},{"location":"docs/core/v1/models/#descendants","title":"Descendants","text":"<p>To retrieve the descendants of a model, call the <code>descendants()</code> constraint on a retrieved model:</p> <pre><code>$ou = OrganizationalUnit::find('ou=Accountants,ou=Users,dc=local,dc=com');\n\n$descendants = $ou-&gt;descendants()-&gt;get();\n</code></pre> <p>The above example will execute a <code>listing</code> on your LDAP directory in the distinguished name <code>ou=Accountants,ou=Users,dc=local,dc=com</code>. This effectively pulls the descendants of the model.</p>"},{"location":"docs/core/v1/models/#refreshing-models","title":"Refreshing Models","text":"<p>To re-retrieve a new model from your directory, call the <code>fresh()</code> method. Doing so will not affect the existing instance you already have:</p> <pre><code>$user = User::where('cn', '=', 'jdoe')-&gt;first();\n\n$freshUser = $user-&gt;fresh();\n</code></pre> <p>If you would like to re-retrieve the existing model, call the <code>synchronize()</code> method. This will re-retrieve the models attributes from the directory:</p> <pre><code>$user = User::where('cn', '=', 'jdoe')-&gt;first();\n\n$user-&gt;synchronize();\n</code></pre>"},{"location":"docs/core/v1/models/#collections","title":"Collections","text":"<p>When you query your models, returned results will be contained inside of a <code>LdapRecord\\Query\\Collection</code>. The <code>Collection</code> class directly extends Laravel's collection. Be sure to check out its documentation for all of the available helpful methods.</p> <pre><code>&lt;?php\n\n$users = User::get();\n\n$usersWithEmail = $users-&gt;filter(function (User $user) {\n    return $user-&gt;hasAttribute('mail');\n});\n</code></pre>"},{"location":"docs/core/v1/models/#retrieving-single-models","title":"Retrieving Single Models","text":"<p>If you would like to retrieve a single model from your directory, you can utilize a variety of methods. Here is a list and usage of each:</p> Method <code>first()</code> <code>find($distinguishedName)</code> <code>findBy($attributeName, $attributeValue)</code> <code>findByAnr($attributeValue)</code> <code>findByGuid($objectGuid)</code> <pre><code>// Retrieve the first model of a global LDAP search...\n$user = User::first();\n\n// Retrieve a model by its distinguished name...\n$user = User::find('cn=John Doe,dc=acme,dc=org');\n\n// Retrieve the first model that matches the attribute...\n$user = User::findBy('cn', 'John Doe');\n\n// Retrieve the first model that matches an array of ANR attributes...\n$user = User::findByAnr('John Doe');\n\n// Retrieve a model by its object guid...\n$user = User::findByGuid('bf9679e7-0de6-11d0-a285-00aa003049e2');\n</code></pre>"},{"location":"docs/core/v1/models/#not-found-exceptions","title":"Not Found Exceptions","text":"<p>Occasionally you may want to throw an exception if a specific record you're looking for cannot be found on your directory. You can substitute the above methods with <code>OrFail()</code> variants:</p> Method <code>firstOrFail()</code> <code>findOrFail($distinguishedName)</code> <code>findByOrFail($attributeName, $attributeValue)</code> <code>findByAnrOrFail($attributeValue)</code> <code>findByGuidOrFail($objectGuid)</code> <pre><code>try {\n    // Retrieve the first model of a global LDAP search or fail...\n    $user = User::firstOrFail();\n\n    // Retrieve a model by its distinguished name or fail...\n    $user = User::findOrFail('cn=John Doe,dc=acme,dc=org');\n\n    // Retrieve the first model that matches the attribute or fail...\n    $user = User::findByOrFail('cn', 'John Doe');\n\n    // Retrieve the first model that matches an array of ANR attributes or fail...\n    $user = User::findByAnrOrFail('John Doe');\n\n    // Retrieve a model by its object guid or fail...\n    $user = User::findByGuidOrFail('bf9679e7-0de6-11d0-a285-00aa003049e2');\n} catch (\\LdapRecord\\Models\\ModelNotFoundException $e) {\n    // One of the models could not be located...\n}\n</code></pre>"},{"location":"docs/core/v1/models/#creating-updating-models","title":"Creating &amp; Updating Models","text":""},{"location":"docs/core/v1/models/#creating","title":"Creating","text":"<p>Before we begin it is paramount to know that LDAP objects require a Distinguished Name to be created successfully in your LDAP directory. LdapRecord will always attempt to generate a Distinguished Name for models that do not have one upon <code>save</code>. In addition, some LDAP objects require more attributes to be set for successful creation.</p> <p>For example, to create a <code>User</code> object in Active Directory, the <code>cn</code> (Common Name) attribute is required. If you do not set this attribute, an exception will be thrown upon saving your LDAP model. For another example, <code>OrganizationlUnit</code>'s must have the <code>ou</code> attribute set.</p> <p>LdapRecord cannot validate this for you as LDAP objects differ widely in their attribute requirements.</p> <p>To create a new record in your directory, create a new model instance and call the <code>save()</code> method. Upon calling <code>save()</code>, if no Distinguished Name is set on a new model, one will be generated based on your configured <code>base_dn</code> that you have set inside your connections configuration:</p> <pre><code>$conn = new Connection([\n    // ...\n    'base_dn' =&gt; 'dc=local,dc=com',\n]);\n\n$conn-&gt;connect();\n\n$user = new User();\n\n$user-&gt;cn = 'John Doe';\n\n// User will be saved with the DN: 'cn=John Doe,dc=local,dc=com\n$user-&gt;save();\n</code></pre>"},{"location":"docs/core/v1/models/#dynamic-distinguished-name-generation","title":"Dynamic Distinguished Name Generation","text":"<p>LdapRecord generates a models distinguished name via the model method <code>getCreatableRdn</code>. This method is responsible for generating the \"Relative Distinguished Name\" which is the true name of the object inside of your LDAP directory that does not include your base Distinguished Name.</p> <p>Since most LDAP objects require a Common Name (<code>cn</code>) this is defaulted to:</p> <pre><code>/**\n * Get a creatable RDN for the model.\n *\n * @return string\n */\npublic function getCreatableRdn()\n{\n    $name = $this-&gt;escape($this-&gt;getFirstAttribute('cn'))-&gt;dn();\n\n    return \"cn=$name\";\n}\n</code></pre> <p>As you can see above, the attribute is escaped before being passed into the RDN string. You must do this, otherwise if commas or other reserved characters are inside the attribute you are using, it will generate a malformed distinguished name.</p> <p>You may override this method to allow your models Distinguished Name's to be dynamically generated rather than creating them yourself manually. For example, here is how we would set the Relative Distinguished Name (RDN) for an Active Directory <code>OrganizationalUnit</code> model:</p> <pre><code>public function getCreatableRdn()\n{\n    $name = $this-&gt;escape($this-&gt;getFirstAttribute('ou'))-&gt;dn();\n\n    return \"ou=$name\";\n}\n</code></pre> <p>This then gets prepended onto your connections configured <code>base_dn</code>, for a resulting \"Full\" Distinguished Name:</p> <pre><code>ou=MyOrganizationalUnitName,dc=local,dc=com\n</code></pre> <p>You may set the base DN of where you would like the object to be created inside by using the <code>inside()</code> method, rather than your <code>base_dn</code> from your configuration:</p> <pre><code>$user = new User(['cn' =&gt; 'John Doe']);\n\n$user-&gt;inside('ou=Users,dc=local,dc=com');\n\n$user-&gt;save();\n</code></pre> <p>You may also pass in an LdapRecord <code>Model</code> instance. This is convenient so you know the container / organizational unit distinguished name is valid:</p> <pre><code>$ou = OrganizationalUnit::findOrFail('ou=Users,dc=acme,dc=org');\n\n$user = new User(['cn' =&gt; 'John Doe']);\n\n$user-&gt;inside($ou)-&gt;save();\n</code></pre> <p>The above examples will save the user inside the <code>Users</code> OU resulting in the full distinguished name:</p> <pre><code>cn=John Doe,ou=Users,dc=acme,dc=org\n</code></pre>"},{"location":"docs/core/v1/models/#setting-a-distinguished-name","title":"Setting A Distinguished Name","text":"<p>To set the models distinguished name, call the <code>setDn()</code> method on your model and populate it with any organization unit or container that you would like it to be created inside:</p> <pre><code>$user = new User();\n\n$user-&gt;cn = 'John Doe';\n\n$user-&gt;setDn('cn=John Doe,ou=Users,dc=acme,dc=org');\n\n$user-&gt;save();\n</code></pre>"},{"location":"docs/core/v1/models/#updating","title":"Updating","text":"<p>Updating models is as easy as creating them. When you have a model returned from a query, set its attributes as you would for creating and call the <code>save()</code> method:</p> <pre><code>$user = User::first();\n\n$user-&gt;company = 'My Company';\n$user-&gt;samaccountname = 'jdoe';\n$user-&gt;department = 'Accounting';\n$user-&gt;displayname = 'Johnathan Doe';\n\n$user-&gt;save();\n</code></pre>"},{"location":"docs/core/v1/models/#moving","title":"Moving","text":"<p>To move existing models into Organizational Units or Containers, call the <code>move()</code> method:</p> <p>When moving a model is successful, the users distinguished name will be automatically updated to reflect its new location in your directory, so you may continue to run operations on it during the same request.</p> <pre><code>$user = User::find('cn=Steve Bauman,dc=local,dc=com');\n\n$ou = OrganizationalUnit::find('ou=Office Users,dc=local,dc=com');\n\n$user-&gt;move($ou);\n\n// Displays 'cn=Steve Bauman,ou=Office Users,dc=local,d=com'\necho $user-&gt;getDn();\n</code></pre>"},{"location":"docs/core/v1/models/#renaming","title":"Renaming","text":"<p>To rename existing models, call the <code>rename()</code> method and supply the new objects RDN (relative distinguished name):</p> <p>When renaming is successful, the users distinguished name is automatically updated to reflect its new name in the directory, so you may run further operations on it during the same request.</p> <pre><code>$user = User::find('cn=John Doe,dc=local,dc=com');\n\n$user-&gt;rename('cn=Jane Doe');\n\n// Displays 'cn=Jane Doe,dc=local,dc=com'\necho $user-&gt;getDn();\n</code></pre>"},{"location":"docs/core/v1/models/#restoring-deleted-models","title":"Restoring Deleted Models","text":"<p>Important: This feature is only possible when connecting to an Active Directory server.</p> <p>To restore a deleted object, we must first query the directory for deleted objects by using the <code>whereDeleted</code> method:</p> <pre><code>use LdapRecord\\LdapRecordException;\nuse LdapRecord\\Models\\ActiveDirectory\\User;\n\n$user = User::whereDeleted()\n            -&gt;where('mail', '=', 'sbauman@local.com')\n            -&gt;first();\n\ntry {\n    $user-&gt;restore();\n\n    // Successfully restored user.\n} catch (LdapRecordException $ex) {\n    // Failed restoring user.\n}\n</code></pre> <p>If you're including deleted results in your queries using the <code>withDeleted</code> clause, you can call the <code>isDeleted</code> method to check if an object has been deleted:</p> <pre><code>$users = User::withDeleted()-&gt;get();\n\nforeach ($users as $user) {\n    if ($user-&gt;isDeleted()) {\n        $user-&gt;restore();\n    }\n}\n</code></pre> <p>If you call <code>restore</code> on a non-deleted object, it will simply return <code>false</code>:</p> <pre><code>$user = User::where('cn', '=', 'Steve Bauman')-&gt;first();\n\n$result = $user-&gt;restore();\n\n// Displays bool(false)\nvar_dump($result);\n</code></pre>"},{"location":"docs/core/v1/models/#attributes","title":"Attributes","text":""},{"location":"docs/core/v1/models/#methods","title":"Methods","text":"<p>There are several built-in methods on models you may like to utilize:</p> <p><code>Model::getAttributes()</code></p> <p>The <code>getAttributes</code> method returns all of the values on the model:</p> <pre><code>$user = User::first();\n\n$attributes = $user-&gt;getAttributes();\n\nforeach ($attributes as $name =&gt; $values) {\n    //\n}\n</code></pre> <p>In the above example, <code>$values</code> will always be an array.</p> <p><code>Model::getAttribute($name)</code></p> <p>The <code>getAttribute</code> method returns all of the values inside the given key. This will return an <code>array</code> if the attribute exists:</p> <pre><code>$group = Group::first();\n\n$members = $group-&gt;getAttribute('member');\n\nif ($members) {\n    foreach ($members as $member) {\n        echo $member;\n    }\n}\n</code></pre> <p><code>Model::getFirstAttribute($name)</code></p> <p>The <code>getFirstAttribute</code> method returns the first value of the given key. This will always return <code>null</code> or <code>string</code>:</p> <pre><code>$group = Group::first();\n\n$firstMember = $group-&gt;getFirstAttribute('member');\n</code></pre> <p><code>Model::hasAttribute()</code></p> <p>The <code>hasAttribute</code> method determines whether the model contains the key in the models attributes:</p> <pre><code>$user = User::first();\n\nif ($user-&gt;hasAttribute('company')) {\n    //\n}\n</code></pre> <p><code>Model::addAttributeValue($name, $value)</code></p> <p>To add a value to an attribute without clearing it, use the <code>addAttributeValue</code> method:</p> <pre><code>$user = User::first();\n\n$user-&gt;addAttributeValue('proxyaddresses', 'SMTP:sbauman@local.com');\n</code></pre> <p><code>Model::countAttributes()</code></p> <p>The <code>countAttributes</code> method returns the number of attributes the model contains:</p> <pre><code>$user = User::first();\n\necho $user-&gt;countAttributes();\n</code></pre>"},{"location":"docs/core/v1/models/#array-conversion","title":"Array Conversion","text":"<p>Attributes you retrieve from an LdapRecord model will always return and array. This is due to LDAP's multi-valued nature.</p> <p>For example, if you would like to retrieve the users <code>mail</code> attribute, you must request the first key from it:</p> <pre><code>$user = User::find('cn=John Doe,dc=acme,dc=org');\n\n// Get the users email address.\necho $user-&gt;mail[0];\n</code></pre> <p>However, the above will cause an exception if the attribute does not exist.</p> <p>To work around this, we can use the <code>getFirstAttribute()</code> method:</p> <pre><code>$user = User::find('cn=John Doe,dc=acme,dc=org');\n\n// Get the users email address.\necho $user-&gt;getFirstAttribute('mail');\n</code></pre> <p>When setting attributes on models, they will automatically be converted to an array for you if you do not provide one.</p> <pre><code>$user = User::find('cn=John Doe,dc=acme,dc=org');\n\n// Both approaches will set the attribute identically:\n$user-&gt;mail = 'jdoe@acme.org';\n$user-&gt;mail = ['jdoe@acme.org'];\n</code></pre> <p>Similarly, you can use the <code>setFirstAttribute()</code> method to set the attributes first value in its array, even if it does not currently exist on the model:</p> <pre><code>$user = User::find('cn=John Doe,dc=acme,dc=org');\n\n// Set the users email address.\n$user-&gt;setFirstAttribute('mail', 'jdoe@acme.org');\n</code></pre>"},{"location":"docs/core/v1/models/#determining-attribute-existence","title":"Determining Attribute Existence","text":"<p>To check if a model has an attribute, you can use the <code>hasAttribute()</code> method:</p> <pre><code>if ($user-&gt;hasAttribute('mail')) {\n    // This user has an email address.\n}\n</code></pre> <p>As with all other attribute methods, this check is case-insensitive. You may pass any type of casing of the attribute you are looking for:</p> <pre><code>// Both will return 'true':\n$user-&gt;hasAttribute('samaccountname');\n$user-&gt;hasAttribute('sAMAccountname');\n</code></pre>"},{"location":"docs/core/v1/models/#casing-hyphens","title":"Casing &amp; Hyphens","text":""},{"location":"docs/core/v1/models/#attribute-casing","title":"Attribute Casing","text":"<p>LdapRecord automatically normalizes all attribute keys to lowercase. This means when setting or getting model attributes, you can use alternate casing and the same attribute will be set or retrieved.</p> <p>This is extremely handy so you do not have to look up the casing of each attribute every time you want to set or retrieve one. This also means you can use your own attribute convention:</p> <pre><code>$user = new User();\n\n// Each will set the same attribute:\n$user-&gt;samaccountname = 'John Doe';\n$user-&gt;sAMAccountName = 'John Doe';\n$user-&gt;samAccountName = 'John Doe';\n</code></pre>"},{"location":"docs/core/v1/models/#attribute-hyphens","title":"Attribute Hyphens","text":"<p>Since LDAP does not support underscores in LDAP attributes but does support using hyphens, anytime you would like to set an attribute that contains a hypen, set it using an underscore instead. LdapRecord will automatically convert the underscore to a hyphen dynamically:</p> <pre><code>$user = new User();\n\n$user-&gt;some_attribute = 'Value';\n\n// Returns 'Value'\necho $user-&gt;some_attribute[0];\necho $user-&gt;getAttribute('some-attribute')[0];\n</code></pre> <p>Similarly, when retrieving attributes that contain a hyphen, use an underscore instead:</p> <pre><code>$user = User::find('cn=John Doe,dc=acme,dc=org');\n\n// Both will act identically:\necho $user-&gt;apple_user_homeurl[0];\necho $user-&gt;getAttribute('apple-user-homeurl')[0];\n</code></pre>"},{"location":"docs/core/v1/models/#deleting-models","title":"Deleting Models","text":"<p>To delete a record from your directory, call the <code>delete()</code> method on a model you have retrieved:</p> <pre><code>&lt;?php\n\n$user = User::first();\n\n$user-&gt;delete();\n</code></pre> <p>The account you have configured to bind to your LDAP server must have permission to delete the record you have retrieved. If it does not, you will receive an exception upon deletion.</p>"},{"location":"docs/core/v1/models/#deleting-models-by-distinguished-name","title":"Deleting Models By Distinguished Name","text":"<p>In the example above, we are retrieving the record from the directory prior to deletion. However, if you'd like to simply delete a model by its distinguished name, call the <code>destroy()</code> method. The number of deleted models will be returned from this method:</p> <pre><code>&lt;?php\n\n// Deleting single object...\n$deleted = User::destroy('cn=John Doe,dc=acme,dc=org');\n\n// Deleting multiple objects...\n$deleted = User::destroy([\n    'cn=John Doe,dc=acme,dc=org',\n    'cn=Jane Doe,dc=acme,dc=org',\n]);\n</code></pre> <p>You may also pass in <code>true</code> into the second parameter to recursively delete leaf entries if a record is located by the distinguished name you have given.</p>"},{"location":"docs/core/v1/models/#recursive-deleting","title":"Recursive Deleting","text":"<p>Sometimes you will be working with containers or organizational units that contain nested records inside of them. Calling <code>delete()</code> on these records will generate an exception without first deleting the records inside. If you would like to delete all records contained inside of another model, pass in <code>true</code> in the first parameter of the <code>delete()</code> method:</p> <pre><code>&lt;?php\n\n$ou = OrganizationalUnit::find('ou=Users,dc=acme,dc=org');\n\n$ou-&gt;delete($recursive = true);\n</code></pre>"},{"location":"docs/core/v1/models/#comparing-models","title":"Comparing Models","text":"<p>If you ever need to compare to models to see if they are the same, call the the <code>is()</code> method. This method will determine if the models have the same distinguished name and connection:</p> <pre><code>if ($user-&gt;is($anotherUser)) {\n    //\n}\n</code></pre> <p>To see if a model is contained inside an organizational unit or another type of container, call the <code>isDescendantOf()</code> method:</p> <pre><code>$ou = OrganizationalUnit::find('ou=User Accounts,dc=acme,dc=org');\n$user = User::find('cn=John Doe,ou=User Accounts,dc=acme,dc=org');\n\nif ($user-&gt;isDescendantOf($ou)) {\n    // This user is contained inside this organizational unit.\n}\n</code></pre> <p>You may also want to know whether a model is an ancestor of another. To do so, call the <code>isAncestorOf()</code> method:</p> <pre><code>$user = User::find('cn=John Doe,ou=User Accounts,dc=acme,dc=org');\n$ou = OrganizationalUnit::find('ou=User Accounts,dc=acme,dc=org');\n\nif ($ou-&gt;isAncestorOf($user)) {\n    // This OU is an ancestor of this user.\n}\n</code></pre> <p>Calling <code>isDescendantOf()</code> or <code>isAncestorOf()</code> performs recursive checks. If a model is contained in a nested OU / container of the one you are checking, the methods will return <code>true</code>.</p> <pre><code>$ou = OrganizationalUnit::find('ou=User Accounts,dc=acme,dc=org');\n$user = User::find('cn=John Doe,ou=Accounting,ou=User Accounts,dc=acme,dc=org');\n\n// This will return true:\nif ($user-&gt;isDescendantOf($ou)) {\n    //\n}\n\n// This will return true:\nif ($ou-&gt;isAncestorOf($user)) {\n    //\n}\n</code></pre> <p>To perform non-recursive checks, such as checking if a model is a direct child of another model, call the <code>isChildOf</code> method:</p> <pre><code>$ou = OrganizationalUnit::find('ou=User Accounts,dc=acme,dc=org');\n$user = User::find('cn=John Doe,ou=User Accounts,dc=acme,dc=org');\n\nif ($user-&gt;isChildOf($ou)) {\n    //\n}\n</code></pre> <p>To perform the opposite, such as checking if a model is a parent of another, call the <code>isParentOf</code> method:</p> <pre><code>$officeOu = OrganizationalUnit::find('ou=Office,ou=User Accounts,dc=acme,dc=org');\n$userAccountsOu = OrganizationalUnit::find('ou=User Accounts,dc=acme,dc=org');\n\nif ($userAccountsOu-&gt;isParentOf($officeOu)) {\n    //\n}\n</code></pre>"},{"location":"docs/core/v1/models/#events","title":"Events","text":"<p>LdapRecord models fire several different event during the creation, updating and deletion. Here is a list of all the events you can listen for:</p> Event <code>LdapRecord\\Models\\Events\\Creating</code> <code>LdapRecord\\Models\\Events\\Created</code> <code>LdapRecord\\Models\\Events\\Updating</code> <code>LdapRecord\\Models\\Events\\Updated</code> <code>LdapRecord\\Models\\Events\\Saving</code> <code>LdapRecord\\Models\\Events\\Saved</code> <code>LdapRecord\\Models\\Events\\Deleting</code> <code>LdapRecord\\Models\\Events\\Deleted</code> <p>To listen for these events, call the <code>getEventDispatcher()</code> on the <code>LdapRecord\\Container</code> to retrieve the dispatcher, then call <code>listen()</code> on the returned dispatcher:</p> <pre><code>&lt;?php\n\n$dispatcher = \\LdapRecord\\Container::getEventDispatcher();\n\n$dispatcher-&gt;listen(\\LdapRecord\\Models\\Events\\Creating::class, function ($event) {\n    $model = $event-&gt;getModel();\n});\n</code></pre> <p>You will want to setup any listeners prior to making changes to models, otherwise your listener will not be executed due to them not existing yet.</p>"},{"location":"docs/core/v1/models/#serialization","title":"Serialization","text":"<p>All model instances can be converted to an array for JSON serialization. To serialize a model instance, simply pass the model into <code>json_encode()</code>. This calls <code>jsonSerialize()</code> on the model to retrieve is serializable data:</p> <pre><code>&lt;?php\n\n$user = User::first();\n\necho json_encode($user);\n</code></pre>"},{"location":"docs/core/v1/models/#hiding-attributes","title":"Hiding Attributes","text":"<p>You may want to exclude certain attributes from being included in the serialization of your model, such as <code>userPassword</code> for OpenLDAP.</p> <p>To do this, add a <code>$hidden</code> property to your model:</p> <pre><code>use LdapRecord\\Models\\Model;\n\nclass User extends Model\n{\n    protected $hidden = ['userPassword'];\n}\n</code></pre> <p>Now when you <code>json_encode($model)</code>, all attributes will be included except the <code>userPassword</code> attribute.</p> <p>If you'd prefer a white-list of attributes, you can add a <code>$visible</code> property instead, which will ensure only the attributes specified will be included in serialization:</p> <pre><code>use LdapRecord\\Models\\Model;\n\nclass User extends Model\n{\n    protected $visible = ['cn', 'mail', 'sn'];\n}\n</code></pre>"},{"location":"docs/core/v1/models/#converting-attributes-to-json","title":"Converting Attributes to JSON","text":"<p>Depending on the type of LDAP directory and model you are working with, you may need to convert some attributes to a string before it can be properly serialized. For example, if you your model is from Active Directory, you will need to convert the <code>objectguid</code> property to a string since it is in binary, otherwise <code>json_encode()</code> will throw an exception.</p> <p>This can be done by adding a <code>convertAttributesForJson()</code> method to your model:</p> <p>By default, the <code>objectguid</code> and <code>objectsid</code> attributes are converted for you when using the built-in Active Directory models.</p> <pre><code>&lt;?php\n\nuse LdapRecord\\Models\\Model;\n\nclass User extends Model\n{\n    protected function convertAttributesForJson(array $attributes = [])\n    {\n        if ($this-&gt;hasAttribute('objectguid')) {\n            // If the model has a GUID set, we need to convert it due to it being in\n            // binary. Otherwise we will receive a JSON serialization exception.\n            return array_replace($attributes, [\n                'objectguid' =&gt; [$this-&gt;getConvertedGuid()]\n            ]);\n        }\n\n        return $attributes;\n    }\n}\n</code></pre>"},{"location":"docs/core/v1/quickstart/","title":"Quick Start","text":"<p>Install LdapRecord using composer:</p> <pre><code>composer require directorytree/ldaprecord\n</code></pre> <p>Use LdapRecord:</p> <pre><code>use LdapRecord\\Container;\nuse LdapRecord\\Connection;\nuse LdapRecord\\Models\\Entry;\n\n// Create a new connection:\n$connection = new Connection([\n    'hosts' =&gt; ['192.168.1.1'],\n    'port' =&gt; 389,\n    'base_dn' =&gt; 'dc=local,dc=com',\n    'username' =&gt; 'cn=user,dc=local,dc=com',\n    'password' =&gt; 'secret',\n]);\n\n// Add the connection into the container:\nContainer::addConnection($connection);\n\n// Get all objects:\n$objects = Entry::get();\n\n// Get a single object:\n$object = Entry::find('cn=John Doe,dc=local,dc=com');\n\n// Getting attributes:\nforeach ($object-&gt;memberof as $group) {\n    echo $group;\n}\n\n// Modifying attributes:\n$object-&gt;company = 'My Company';\n\n// Saving changes:\n$object-&gt;save();\n</code></pre>"},{"location":"docs/core/v1/searching-api/","title":"Available Search Methods (API)","text":""},{"location":"docs/core/v1/searching-api/#method-listing","title":"Method Listing","text":""},{"location":"docs/core/v1/searching-api/#addcontrol","title":"<code>addControl</code>","text":"<p>Add a server control to be executed with the LDAP search query:</p> <pre><code>$query = $connection-&gt;query();\n\n$query-&gt;addControl(\n    $oid = '1.2.840.113556.1.4.417', $isCritical = true, $value = null\n);\n\n// array:1 [\u25bc\n//  \"1.2.840.113556.1.4.417\" =&gt; array:3 [\u25bc\n//    \"oid\" =&gt; \"1.2.840.113556.1.4.417\"\n//    \"isCritical\" =&gt; true\n//    \"value\" =&gt; null\n//  ]\n// ]\nvar_dump($query-&gt;controls);\n</code></pre>"},{"location":"docs/core/v1/searching-api/#addfilter","title":"<code>addFilter</code>","text":"<p>Add a filter with its bindings to the query:</p> <p>Available types are <code>and</code>, <code>or</code> and <code>raw</code>.</p> <pre><code>$query = $connection-&gt;query();\n\n$bindings = [\n    'field' =&gt; 'cn',\n    'operator' =&gt; '=',\n    'value' =&gt; 'Steve Bauman',\n];\n\n$query-&gt;addFilter($type = 'and', $bindings);\n</code></pre>"},{"location":"docs/core/v1/searching-api/#addselect","title":"<code>addSelect</code>","text":"<p>Add an attribute to be selected for the query:</p> <pre><code>$query = $connection-&gt;query();\n\n// Using arguments:\n$query-&gt;addSelect('cn');\n$query-&gt;addSelect('foo', 'bar', 'baz');\n\n// Using an array:\n$query-&gt;addSelect(['sn', 'givenname']);\n\n// array:7 [\u25bc\n//   0 =&gt; \"cn\"\n//   1 =&gt; \"foo\"\n//   2 =&gt; \"bar\"\n//   3 =&gt; \"baz\"\n//   4 =&gt; \"sn\"\n//   5 =&gt; \"givenname\"\n//   6 =&gt; \"objectclass\"\n// ]\nvar_dump($query-&gt;getSelects());\n</code></pre>"},{"location":"docs/core/v1/searching-api/#andfilter","title":"<code>andFilter</code>","text":"<p>Add a nested \"and\" filter to the query:</p> <pre><code>$query = $connection-&gt;query();\n\n$query-&gt;andFilter(function (\\LdapRecord\\Query\\Builder $q) {\n    $q-&gt;where('foo', '=', 'bar');\n    $q-&gt;where('baz', '=', 'zal');\n});\n\n// \"(&amp;(foo=bar)(baz=zal))\"\necho $query-&gt;getUnescapedQuery();\n</code></pre>"},{"location":"docs/core/v1/searching-api/#cache","title":"<code>cache</code>","text":"<p>Cache the executed query until the given date has passed:</p> <p>Pass <code>true</code> as the second argument to force flush the cache if the query has been executed before.</p> <pre><code>$query = $connection-&gt;query();\n\n$until = new \\DateTime('+1 day');\n\n$query-&gt;cache($until, $flush = false);\n</code></pre>"},{"location":"docs/core/v1/searching-api/#clearfilters","title":"<code>clearFilters</code>","text":"<p>Reset / clear all filters that have been added to the query:</p> <pre><code>$query = $connection-&gt;query();\n\n$query-&gt;where('foo', '=', 'bar');\n\n$query-&gt;clearFilters();\n\n// array:3 [\u25bc\n//   \"and\" =&gt; []\n//   \"or\" =&gt; []\n//   \"raw\" =&gt; []\n// ]\nvar_dump($query-&gt;getFilters());\n</code></pre>"},{"location":"docs/core/v1/searching-api/#delete","title":"<code>delete</code>","text":"<p>Delete an entry from the directory:</p> <pre><code>$query = $connection-&gt;query();\n\n$query-&gt;delete('cn=John Doe,ou=Users,dc=local,dc=com');\n</code></pre>"},{"location":"docs/core/v1/searching-api/#deleteattributes","title":"<code>deleteAttributes</code>","text":"<p>Delete an attributes values from the directory:</p> <pre><code>$query = $connection-&gt;query();\n\n$entry = 'cn=Accounting Users,ou=Groups,dc=local,dc=com';\n\n// Delete all values from an attribute, for example,\n// removing all members from a particular group:\n$query-&gt;deleteAttributes($entry, ['member' =&gt; []]);\n\n// Delete a specific value from an attribute, for example,\n// removing a specific member from a particular group:\n$member = 'cn=John Doe,ou=Users,dc=local,dc=com';\n\n$query-&gt;deleteAttributes($entry, ['member' =&gt; [$member]]);\n</code></pre>"},{"location":"docs/core/v1/searching-api/#escape","title":"<code>escape</code>","text":"<p>Prepare a value to be escaped:</p> <p>This method accepts the same parameters as the built in PHP <code>ldap_escape</code> method.</p> <pre><code>$query = $connection-&gt;query();\n\n// Returns instance of:\n// LdapRecord\\Models\\Attributes\\EscapedValue\n$value = $query-&gt;escape('value', $ignore = '', $flags = 0);\n\n// Prepare the value to be escaped for use in a distinguished name:\n$value-&gt;dn();\n\n// Prepare the value to be escaped for use in a filter:\n$value-&gt;filter();\n\n// Prepare the value to be escaped for use in a distinguished name and filter:\n$value-&gt;both();\n\n// Set the characters to ignore:\n$value-&gt;ignore('/*');\n\n// Get the escaped value:\n$value-&gt;get();\n\n// Can also be casted to string:\n(string) $value;\n</code></pre>"},{"location":"docs/core/v1/searching-api/#find","title":"<code>find</code>","text":"<p>Find an entry in the directory by its distinguished name:</p> <pre><code>$query = $connection-&gt;query();\n\nif ($entry = $query-&gt;find('cn=John Doe,dc=local,dc=com')) {\n    // Found entry!\n} else {\n    // Not found.\n}\n</code></pre>"},{"location":"docs/core/v1/searching-api/#findby","title":"<code>findBy</code>","text":"<p>Find the first matching entry in the directory by the given attribute and value:</p> <pre><code>$query = $connection-&gt;query();\n\nif ($entry = $query-&gt;findBy('samaccountname', 'johndoe')) {\n    // Found entry!\n} else {\n    // Not found.\n}\n</code></pre>"},{"location":"docs/core/v1/searching-api/#findbyorfail","title":"<code>findByOrFail</code>","text":"<p>Find the first matching entry in the directory by the given attribute and value or fail:</p> <pre><code>$query = $connection-&gt;query();\n\ntry {\n    $entry = $query-&gt;findByOrFail('samaccountname', 'johndoe');\n} catch (\\LdapRecord\\Models\\ModelNotFoundException $ex) {\n    // Not found.\n}\n</code></pre>"},{"location":"docs/core/v1/searching-api/#findmany","title":"<code>findMany</code>","text":"<p>Find many entries in the directory by an array of Distinguished Names:</p> <pre><code>$query = $connection-&gt;query();\n\n$entries = $query-&gt;findMany([\n    'cn=John Doe,dc=local,dc=com',\n    'ou=Accounting,dc=local,dc=com',\n]);\n</code></pre>"},{"location":"docs/core/v1/searching-api/#findmanyby","title":"<code>findManyBy</code>","text":"<p>Find many entries in the directory by the given attribute and values:</p> <pre><code>$query = $connection-&gt;query();\n\n$entries = $query-&gt;findManyBy('samaccountname', ['johndoe', 'janedoe', 'sbauman']);\n</code></pre>"},{"location":"docs/core/v1/searching-api/#findorfail","title":"<code>findOrFail</code>","text":"<p>Find an entry in the directory by its distinguished name or fail:</p> <pre><code>$query = $connection-&gt;query();\n\ntry {\n    $entry = $query-&gt;findOrFail('cn=John Doe,dc=local,dc=com');\n} catch (\\LdapRecord\\Models\\ModelNotFoundException $ex) {\n    // Not found.\n}\n</code></pre>"},{"location":"docs/core/v1/searching-api/#first","title":"<code>first</code>","text":"<p>Get the first resulting entry of a query from the directory:</p> <pre><code>$query = $connection-&gt;query();\n\n$entry = $query-&gt;whereStartsWith('cn', 'Steve')-&gt;first();\n</code></pre>"},{"location":"docs/core/v1/searching-api/#firstorfail","title":"<code>firstOrFail</code>","text":"<p>Get the first resulting entry of a query from the directory or fail:</p> <pre><code>$query = $connection-&gt;query();\n\ntry {\n    $entry = $query-&gt;whereStartsWith('cn', 'Steve')-&gt;first();\n} catch (\\LdapRecord\\Models\\ModelNotFoundException $ex) {\n    // Not entries returned.\n}\n</code></pre>"},{"location":"docs/core/v1/searching-api/#get","title":"<code>get</code>","text":"<p>Get the resulting entries of a query from the directory:</p> <p>Important: If you expect to have more than 1000 entries returned from your query, use the paginate method instead, which will return all entries.</p> <pre><code>$query = $connection-&gt;query();\n\n$entries = $query-&gt;where('company', '=', 'Acme')-&gt;get();\n</code></pre>"},{"location":"docs/core/v1/searching-api/#getcache","title":"<code>getCache</code>","text":"<p>Get the query cache (if set):</p> <pre><code>$query = $connection-&gt;query();\n\n// Returns null or instance of LdapRecord\\Query\\Cache:\n$cache = $query-&gt;getCache();\n</code></pre>"},{"location":"docs/core/v1/searching-api/#getconnection","title":"<code>getConnection</code>","text":"<p>Get the underlying connection the query is executing on:</p> <pre><code>$query = $connection-&gt;query();\n\n// Returns instance of LdapRecord\\Connection:\n$conn = $query-&gt;getConnection();\n</code></pre>"},{"location":"docs/core/v1/searching-api/#getdn","title":"<code>getDn</code>","text":"<p>Get the base Distinguished Name that the query is executing on:</p> <pre><code>$query = $connection-&gt;query();\n\n$query-&gt;setDn('ou=Users,dc=local,dc=com');\n\n// Returns 'ou=Users,dc=local,dc=com':\n$base = $query-&gt;getDn();\n</code></pre>"},{"location":"docs/core/v1/searching-api/#getfilters","title":"<code>getFilters</code>","text":"<p>Get the filters that have been added to the query:</p> <pre><code>$query = $connection-&gt;query();\n\n$query-&gt;where('company', '=', 'Acme');\n\n// array:3 [\u25bc\n//   \"and\" =&gt; array:1 [\u25bc\n//     0 =&gt; array:3 [\u25bc\n//       \"field\" =&gt; \"company\"\n//       \"operator\" =&gt; \"=\"\n//       \"value\" =&gt; LdapRecord\\Models\\Attributes\\EscapedValue\n//     ]\n//   ]\n//   \"or\" =&gt; []\n//   \"raw\" =&gt; []\n// ]\nvar_dump($query-&gt;getFilters());\n</code></pre>"},{"location":"docs/core/v1/searching-api/#getgrammar","title":"<code>getGrammar</code>","text":"<p>Get the underlying query grammar instance:</p> <pre><code>$query = $connection-&gt;query();\n\n// Returns instance of LdapRecord\\Query\\Grammar:\n$grammar = $query-&gt;getGrammar();\n</code></pre>"},{"location":"docs/core/v1/searching-api/#getquery","title":"<code>getQuery</code>","text":"<p>Get the raw, escaped LDAP query filter:</p> <pre><code>$query = $connection-&gt;query();\n\n$query-&gt;where('company', '=', 'Acme');\n\n// Returns '(company=\\41\\63\\6d\\65)'\n$filter = $query-&gt;getQuery();\n</code></pre>"},{"location":"docs/core/v1/searching-api/#getselects","title":"<code>getSelects</code>","text":"<p>Get the selected attributes of the query:</p> <p>Important: <code>objectclass</code> will always be included in the returned array.</p> <pre><code>$query = $connection-&gt;query();\n\n// array:1 [\u25bc\n//   0 =&gt; \"objectclass\"\n// ]\nvar_dump($query-&gt;getSelects());\n\n$query-&gt;select(['cn', 'mail', 'givenname']);\n\n// array:4 [\u25bc\n//   0 =&gt; \"cn\"\n//   1 =&gt; \"mail\"\n//   2 =&gt; \"givenname\"\n//   3 =&gt; \"objectclass\"\n// ]\nvar_dump($query-&gt;getSelects());\n</code></pre>"},{"location":"docs/core/v1/searching-api/#gettype","title":"<code>getType</code>","text":"<p>Get the type of LDAP query to be executed, either <code>search</code>, <code>listing</code> or <code>read</code>:</p> <pre><code>$query = $connection-&gt;query();\n\n// Returns 'search':\n$query-&gt;getType();\n\n// Returns 'listing':\n$query-&gt;listing()-&gt;getType();\n\n// Returns 'read':\n$query-&gt;read()-&gt;getType();\n</code></pre>"},{"location":"docs/core/v1/searching-api/#getunescapedquery","title":"<code>getUnescapedQuery</code>","text":"<p>Get the raw, unescaped LDAP query filter:</p> <pre><code>$query = $connection-&gt;query();\n\n$query-&gt;where('company', '=', 'Acme');\n\n// Returns '(company=Acme)'\n$filter = $query-&gt;getUnescapedQuery();\n</code></pre>"},{"location":"docs/core/v1/searching-api/#hascontrol","title":"<code>hasControl</code>","text":"<p>Determine if the query has a specific LDAP control OID added:</p> <pre><code>$query = $connection-&gt;query();\n\nif ($query-&gt;hasControl($oid = '1.2.840.113556.1.4.417')) {\n    // The query has a control added for the OID.\n}\n</code></pre>"},{"location":"docs/core/v1/searching-api/#hasselects","title":"<code>hasSelects</code>","text":"<p>Determine if the query has any selects added:</p> <pre><code>$query = $connection-&gt;query();\n\n// Returns false:\n$query-&gt;hasSelects();\n\n$query-&gt;select(['cn', 'sn']);\n\n// Returns true:\n$query-&gt;hasSelects();\n</code></pre>"},{"location":"docs/core/v1/searching-api/#in","title":"<code>in</code>","text":"<p>Sets the base Distinguished Name to perform a search upon.</p> <p>Alias for the setDn method.</p> <pre><code>$query = $connection-&gt;query();\n\n// Get all entries below the 'Users' OU:\n$query-&gt;in('ou=Users,dc=local,dc=com')-&gt;get();\n</code></pre>"},{"location":"docs/core/v1/searching-api/#insert","title":"<code>insert</code>","text":"<p>Insert a new entry in the directory:</p> <pre><code>$query = $connection-&gt;query();\n\n$dn = 'cn=John Doe,dc=local,dc=com';\n\n$attributes = [\n    'cn' =&gt; 'John Doe',\n    'objectclass' =&gt; [\n       'top',\n        'person',\n        'organizationalperson',\n        'user',\n    ],\n];\n\n$query-&gt;insert($dn, $attributes);\n</code></pre>"},{"location":"docs/core/v1/searching-api/#insertattributes","title":"<code>insertAttributes</code>","text":"<p>Create attributes on an existing entry in the directory:</p> <pre><code>$query = $connection-&gt;query();\n\n$dn = 'cn=John Doe,dc=local,dc=com';\n\n$attributes = [\n    'company' =&gt; 'Acme',\n];\n\n$query-&gt;insertAttributes($dn, $attributes);\n</code></pre>"},{"location":"docs/core/v1/searching-api/#isnested","title":"<code>isNested</code>","text":"<p>Determine if a query builder is nested:</p> <pre><code>$query = $connection-&gt;query();\n\n// Returns false:\n$query-&gt;isNested();\n\n$query-&gt;andFilter(function ($q) {\n    // Returns true:\n    $q-&gt;isNested();\n});\n</code></pre>"},{"location":"docs/core/v1/searching-api/#ispaginated","title":"<code>isPaginated</code>","text":"<p>Determine if a query builder has been paginated:</p> <pre><code>$query = $connection-&gt;query();\n\n// Returns false:\n$query-&gt;isPaginated();\n\n$results = $query-&gt;paginate();\n\n// Returns true:\n$query-&gt;isPaginated();\n</code></pre>"},{"location":"docs/core/v1/searching-api/#limit","title":"<code>limit</code>","text":"<p>Set the maxmimum number of entries to be returned from the directory:</p> <pre><code>$query = $connection-&gt;query();\n\n$results = $query-&gt;whereHas('cn')-&gt;limit(200)-&gt;get();\n</code></pre>"},{"location":"docs/core/v1/searching-api/#listing","title":"<code>listing</code>","text":"<p>Perform an LDAP <code>listing</code> operation, requesting only immediate children / leaf nodes of the query base:</p> <pre><code>$query = $connection-&gt;query();\n\n// Only retrieve the immediate children / leaf nodes of the 'Groups' OU:\n$groups = $query-&gt;in('ou=Groups,dc=local,dc=com')-&gt;listing()-&gt;get();\n</code></pre>"},{"location":"docs/core/v1/searching-api/#model","title":"<code>model</code>","text":"<p>Create a new query builder instance for the given model:</p> <pre><code>use LdapRecord\\Models\\ActiveDirectory\\User;\n\n$query = $connection-&gt;query();\n\n$modelQuery = $query-&gt;model(new User);\n</code></pre>"},{"location":"docs/core/v1/searching-api/#nested","title":"<code>nested</code>","text":"<p>Whether to mark the current query as nested:</p> <p>Important: This affects how the query filter is generated.</p> <pre><code>$query = $connection-&gt;query();\n\n// Returns \"(cn=John)(sn=Doe)\":\n$query-&gt;nested()\n    -&gt;where('cn', '=', 'John')\n    -&gt;where('sn', '=', 'Doe')\n    -&gt;getUnescapedQuery();\n\n// Returns \"(&amp;(cn=John)(sn=Doe))\"\n$query-&gt;nested(false)\n    -&gt;where('cn', '=', 'John')\n    -&gt;where('sn', '=', 'Doe')\n    -&gt;getUnescapedQuery();\n</code></pre>"},{"location":"docs/core/v1/searching-api/#newinstance","title":"<code>newInstance</code>","text":"<p>Create a new query instance:</p> <pre><code>$query = $connection-&gt;query();\n\n// Create and inherit the base DN from the previous instance:\n$newQuery = $query-&gt;newInstace();\n\n// Use a new base DN:\n$newQuery = $query-&gt;newInstace('ou=Users,dc=local,dc=com');\n</code></pre>"},{"location":"docs/core/v1/searching-api/#newnestedinstance","title":"<code>newNestedInstance</code>","text":"<p>Create a new nested query instance:</p> <pre><code>$query = $connection-&gt;query();\n\n// New nested query builder:\n$nested = $query-&gt;newNestedInstance();\n\n// New nested query builder With a closure:\n$nested = $query-&gt;newNestedInstance(function (Builder $query) {\n    //\n});\n</code></pre>"},{"location":"docs/core/v1/searching-api/#notfilter","title":"<code>notFilter</code>","text":"<p>Add a nested 'not' filter to the current query:</p> <pre><code>$query = $connection-&gt;query();\n\n// Returns \"(!(cn=John Doe))\":\n$query-&gt;notFilter(function ($query) {\n    $query-&gt;where('cn', '=', 'John Doe');\n})-&gt;getUnescapedQuery();\n</code></pre>"},{"location":"docs/core/v1/searching-api/#orfilter","title":"<code>orFilter</code>","text":"<p>Add a nested 'or' filter to the current query:</p> <pre><code>$query = $connection-&gt;query();\n\n// Returns \"(|(cn=John Doe))\":\n$query-&gt;orFilter(function ($query) {\n    $query-&gt;where('cn', '=', 'John Doe');\n})-&gt;getUnescapedQuery();\n</code></pre>"},{"location":"docs/core/v1/searching-api/#orwhere","title":"<code>orWhere</code>","text":"<p>Add an 'or where' clause to the query:</p> <p>Important: If only a single \"or\" is added to the query with no other filters, it will be converted to a single filter instead.</p> <pre><code>// Returns \"(cn=John)\":\n$connection-&gt;query()\n    -&gt;orWhere('cn', '=', 'John')\n    -&gt;getUnescapedQuery();\n\n// Returns \"(|(cn=John)(sn=Doe))\":\n$connection-&gt;query()\n    -&gt;where('cn', '=', 'John')\n    -&gt;orWhere('sn', '=', 'Doe')\n    -&gt;getUnescapedQuery();\n</code></pre>"},{"location":"docs/core/v1/searching-api/#orwhereapproximatelyequals","title":"<code>orWhereApproximatelyEquals</code>","text":"<p>Add an 'or where approximately equals' clause to the query:</p> <pre><code>// Returns \"(cn~=John)\"\n$connection-&gt;query()\n    -&gt;orWhereApproximatelyEquals('cn', 'John')\n    -&gt;getUnescapedQuery();\n\n// Returns \"(|(cn~=Sue)(cn~=John))\"\n$connection-&gt;query()\n    -&gt;whereApproximatelyEquals('cn', 'Sue')\n    -&gt;orWhereApproximatelyEquals('cn', 'John')\n    -&gt;getUnescapedQuery();\n</code></pre>"},{"location":"docs/core/v1/searching-api/#orwherecontains","title":"<code>orWhereContains</code>","text":"<p>Add an 'or where contains' clause to the query:</p> <pre><code>// Returns \"(cn=*John*)\"\n$connection-&gt;query()\n    -&gt;orWhereContains('cn', 'John')\n    -&gt;getUnescapedQuery();\n\n// Returns \"(|(cn=*Sue*)(cn=*John*))\"\n$connection-&gt;query()\n    -&gt;whereContains('cn', 'Sue')\n    -&gt;orWhereContains('cn', 'John')\n    -&gt;getUnescapedQuery();\n</code></pre>"},{"location":"docs/core/v1/searching-api/#orwhereendswith","title":"<code>orWhereEndsWith</code>","text":"<p>Add an 'or where ends with' clause to the query:</p> <pre><code>// Returns \"(cn=*Doe)\"\n$connection-&gt;query()\n    -&gt;orWhereEndsWith('cn', 'Doe')\n    -&gt;getUnescapedQuery();\n\n// Returns \"(|(cn=*Betty)(cn=*Doe))\"\n$connection-&gt;query()\n    -&gt;whereEndsWith('cn', 'Betty')\n    -&gt;orWhereEndsWith('cn', 'Doe')\n    -&gt;getUnescapedQuery();\n</code></pre>"},{"location":"docs/core/v1/searching-api/#orwhereequals","title":"<code>orWhereEquals</code>","text":"<p>Add an 'or where equals' clause to the query:</p> <pre><code>// Returns \"(cn=John Doe)\"\n$connection-&gt;query()\n    -&gt;orWhereEquals('cn', 'John Doe')\n    -&gt;getUnescapedQuery();\n\n// Returns \"(|(cn=Suzy Doe)(cn=John Doe))\"\n$connection-&gt;query()\n    -&gt;whereEquals('cn', 'Suzy Doe')\n    -&gt;orWhereEquals('cn', 'John Doe')\n    -&gt;getUnescapedQuery();\n</code></pre>"},{"location":"docs/core/v1/searching-api/#orwherehas","title":"<code>orWhereHas</code>","text":"<p>Add an 'or where has' clause to the query:</p> <pre><code>// Returns \"(title=*)\"\n$connection-&gt;query()\n    -&gt;orWhereHas('title')\n    -&gt;getUnescapedQuery();\n\n// Returns \"(|(title=*)(department=*))\"\n$connection-&gt;query()\n    -&gt;whereHas('title')\n    -&gt;orWhereHas('department')\n    -&gt;getUnescapedQuery();\n</code></pre>"},{"location":"docs/core/v1/searching-api/#orwherenotcontains","title":"<code>orWhereNotContains</code>","text":"<p>Add an 'or where not contains' clause to the query:</p> <pre><code>// Returns \"(!(title=*Accountant*))\"\n$connection-&gt;query()\n    -&gt;orWhereNotContains('title', 'Accountant')\n    -&gt;getUnescapedQuery();\n\n// Returns \"(|(!(title=*Accountant*))(!(department=*Accounting*)))\"\n$connection-&gt;query()\n    -&gt;whereNotContains('title', 'Accountant')\n    -&gt;orWhereNotContains('department', 'Accounting')\n    -&gt;getUnescapedQuery();\n</code></pre>"},{"location":"docs/core/v1/searching-api/#orwherenotendswith","title":"<code>orWhereNotEndsWith</code>","text":"<p>Add an 'or where not ends with' clause to the query:</p> <pre><code>// Returns \"(!(cn=*Doe))\"\n$connection-&gt;query()\n    -&gt;orWhereNotEndsWith('cn', 'Doe')\n    -&gt;getUnescapedQuery();\n\n// Returns \"(|(!(cn=*Betty))(!(cn=*Doe)))\"\n$connection-&gt;query()\n    -&gt;whereNotEndsWith('cn', 'Betty')\n    -&gt;orWhereNotEndsWith('cn', 'Doe')\n    -&gt;getUnescapedQuery();\n</code></pre>"},{"location":"docs/core/v1/searching-api/#orwherenotequals","title":"<code>orWhereNotEquals</code>","text":"<p>Add an 'or where not equals' clause to the query:</p> <pre><code>// Returns \"(!(cn=John Doe))\"\n$connection-&gt;query()\n    -&gt;orWhereNotEquals('cn', 'John Doe')\n    -&gt;getUnescapedQuery();\n\n// Returns \"(|(!(cn=Suzy Betty))(!(cn=John Doe)))\"\n$connection-&gt;query()\n    -&gt;whereNotEquals('cn', 'Suzy Betty')\n    -&gt;orWhereNotEquals('cn', 'John Doe')\n    -&gt;getUnescapedQuery();\n</code></pre>"},{"location":"docs/core/v1/searching-api/#orwherenothas","title":"<code>orWhereNotHas</code>","text":"<p>Add an 'or where not has' clause to the query:</p> <pre><code>// Returns \"(!(title=*))\"\n$connection-&gt;query()\n    -&gt;orWhereNotHas('title')\n    -&gt;getUnescapedQuery();\n\n// Returns \"(|(!(title=*))(!(department=*)))\"\n$connection-&gt;query()\n    -&gt;whereNotHas('title')\n    -&gt;orWhereNotHas('department')\n    -&gt;getUnescapedQuery();\n</code></pre>"},{"location":"docs/core/v1/searching-api/#orwherenotstartswith","title":"<code>orWhereNotStartsWith</code>","text":"<p>Add an 'or where not starts with' clause to the query:</p> <pre><code>// Returns \"(!(cn=John*))\"\n$connection-&gt;query()\n    -&gt;orWhereNotStartsWith('cn', 'John')\n    -&gt;getUnescapedQuery();\n\n// Returns \"(|(!(cn=Suzy*))(!(cn=John*)))\"\n$connection-&gt;query()\n    -&gt;whereNotStartsWith('cn', 'Suzy')\n    -&gt;orWhereNotStartsWith('cn', 'John')\n    -&gt;getUnescapedQuery();\n</code></pre>"},{"location":"docs/core/v1/searching-api/#orwhereraw","title":"<code>orWhereRaw</code>","text":"<p>Add a \"or where\" clause to the query without escaping the value, useful when values can contain distinguished names or GUIDs:</p> <pre><code>$query = $connection-&gt;query();\n\n$query\n    -&gt;whereRaw('objectguid', '=', '270db4d0-249d-46a7-9cc5-eb695d9af9ac')\n    -&gt;orWhereRaw('objectguid', '=', '878ce8b7-2713-41a9-a765-5e3905ab5ef2');\n</code></pre> <p>Add an 'or where starts with' clause to the query:</p> <pre><code>// Returns \"(cn=John*)\"\n$connection-&gt;query()\n    -&gt;orWhereStartsWith('cn', 'John')\n    -&gt;getUnescapedQuery();\n\n// Returns \"(|(cn=Suzy*)(cn=John*))\"\n$connection-&gt;query()\n    -&gt;whereStartsWith('cn', 'Suzy')\n    -&gt;orWhereStartsWith('cn', 'John')\n    -&gt;getUnescapedQuery();\n</code></pre>"},{"location":"docs/core/v1/searching-api/#orwherestartswith","title":"<code>orWhereStartsWith</code>","text":"<p>Add an 'or where starts with' clause to the query:</p> <pre><code>// Returns \"(cn=John*)\"\n$connection-&gt;query()\n    -&gt;orWhereStartsWith('cn', 'John')\n    -&gt;getUnescapedQuery();\n\n// Returns \"(|(cn=Suzy*)(cn=John*))\"\n$connection-&gt;query()\n    -&gt;whereStartsWith('cn', 'Suzy')\n    -&gt;orWhereStartsWith('cn', 'John')\n    -&gt;getUnescapedQuery();\n</code></pre>"},{"location":"docs/core/v1/searching-api/#paginate","title":"<code>paginate</code>","text":"<p>Paginate the query by the given limit, returning all results from the LDAP directory:</p> <p>This will allow you to exceed the LDAP max result limit of (usually) 1000.</p> <pre><code>$query = $connection-&gt;query();\n\n// Paginate by default 1000:\n$results = $query-&gt;paginate();\n\n// Paginate by a specific amount:\n$results = $query-&gt;paginate(500);\n</code></pre>"},{"location":"docs/core/v1/searching-api/#query","title":"<code>query</code>","text":"<p>Execute a raw filter query on the connection:</p> <pre><code>$query = $connection-&gt;query();\n\n$results = $query-&gt;query('(cn=John Doe)');\n</code></pre>"},{"location":"docs/core/v1/searching-api/#rawfilter","title":"<code>rawFilter</code>","text":"<p>Add a raw LDAP search filter to the query:</p> <pre><code>$query = $connection-&gt;query();\n\n// Returns \"(&amp;(cn=Contoso)(sn=Doe*))\"\n$query\n    -&gt;rawFilter('(company=Contoso)')\n    -&gt;rawFilter('(sn=Doe*)')\n    -&gt;getUnescapedQuery();\n</code></pre>"},{"location":"docs/core/v1/searching-api/#read","title":"<code>read</code>","text":"<p>Set the query to read a single search result using the query's base DN (using <code>ldap_read</code>):</p> <p>Queries executed with <code>read()</code> will only return a maximum of one result.</p> <pre><code>$query = $connection-&gt;query();\n\n$entry = $query-&gt;setDn('cn=John Doe,dc=local,dc=com')-&gt;read()-&gt;first();\n</code></pre>"},{"location":"docs/core/v1/searching-api/#recursive","title":"<code>recursive</code>","text":"<p>Set the query to include recursive search results (using <code>ldap_search</code>):</p> <p>This is the default search query operation.</p> <pre><code>$query = $connection-&gt;query();\n\n$results = $query-&gt;recursive()-&gt;get();\n</code></pre>"},{"location":"docs/core/v1/searching-api/#rename","title":"<code>rename</code>","text":"<p>Rename or move an object. Performs an <code>ldap_rename</code> under the hood:</p> <pre><code>// Rename an object:\n$connection-&gt;query()-&gt;rename(\n    $dn = 'cn=John Doe,dc=local,dc=com',\n    $newRdn = 'cn=Johnathon Doe',\n    $newParentDn = 'dc=local,dc=com'\n);\n\n// Move an object:\n$connection-&gt;query()-&gt;rename(\n    $dn = 'cn=John Doe,dc=local,dc=com',\n    $newRdn = 'cn=John Doe',\n    $newParentDn = 'ou=Users,dc=local,dc=com'\n);\n</code></pre>"},{"location":"docs/core/v1/searching-api/#select","title":"<code>select</code>","text":"<p>Set the attributes to return from the directory:</p> <p>Important: By selecting only the attributes you need, you can effectively reduce memory usage on large query result sets.</p> <pre><code>$query = $connection-&gt;query();\n\n// Only return the 'cn' and 'sn' attributes in result\n$query-&gt;select(['cn', 'sn'])-&gt;get();\n</code></pre>"},{"location":"docs/core/v1/searching-api/#setcache","title":"<code>setCache</code>","text":"<p>Set the cache instance to use for the query:</p> <p>The cache instance must extend <code>LdapRecord\\Query\\Cache</code>.</p> <pre><code>$query = $connection-&gt;query();\n\n$query-&gt;setCache($cache);\n</code></pre>"},{"location":"docs/core/v1/searching-api/#setconnection","title":"<code>setConnection</code>","text":"<p>Set the connection instance to use for the query:</p> <pre><code>$query = $connection-&gt;query();\n\n$newConnection = new Connection($config = ['...']);\n\n$query-&gt;setConnection($newConnection);\n</code></pre>"},{"location":"docs/core/v1/searching-api/#setdn","title":"<code>setDn</code>","text":"<p>Sets the base Distinguished Name to perform a search upon.</p> <pre><code>$query = $connection-&gt;query();\n\n// Get all entries below the 'Users' OU:\n$query-&gt;setDn('ou=Users,dc=local,dc=com')-&gt;get();\n</code></pre>"},{"location":"docs/core/v1/searching-api/#setgrammar","title":"<code>setGrammar</code>","text":"<p>Set the underlying query <code>Grammar</code> instance:</p> <p>The given instance must extend the built-in <code>LdapRecord\\Query\\Grammar</code>.</p> <pre><code>$query = $connection-&gt;query();\n\n$myGrammarInstance = new Grammar();\n\n$query-&gt;setGrammar($myGrammarInstance);\n</code></pre>"},{"location":"docs/core/v1/searching-api/#update","title":"<code>update</code>","text":"<p>Update an entry with the given modifications. Performs an <code>ldap_modify_batch</code> under the hood:</p> <pre><code>$query = $connection-&gt;query();\n\n$dn = 'cn=John Doe,dc=local,dc=com';\n\n$modifs = [\n    [\n        'attrib'  =&gt; 'telephoneNumber',\n        'modtype' =&gt; LDAP_MODIFY_BATCH_ADD,\n        'values'  =&gt; ['+1 555 555 1717'],\n    ],\n];\n\n$query-&gt;update($dn, $modifs);\n</code></pre>"},{"location":"docs/core/v1/searching-api/#updateattributes","title":"<code>updateAttributes</code>","text":"<p>Update / replace an entry's attribute with the given values. Performs an <code>ldap_mod_replace</code> under the hood:</p> <pre><code>$query = $connection-&gt;query();\n\n$dn = 'cn=John Doe,dc=local,dc=com';\n\n// Remove the users telephone number:\n$query-&gt;updateAttributes($dn, ['telephoneNumber' =&gt; []]);\n\n// Update / replace the users telephone number:\n$query-&gt;updateAttributes($dn, ['telephoneNumber' =&gt; ['+1 555 555 1717']]);\n</code></pre>"},{"location":"docs/core/v1/searching-api/#where","title":"<code>where</code>","text":"<p>Add a \"where\" clause to the query, searching for objects using the given attribute, operator, and value:</p> <pre><code>$query = $connection-&gt;query();\n\n// Returns \"(cn=John Doe)\"\n$query-&gt;where('cn', '=', 'John Doe')-&gt;getUnescapedQuery();\n</code></pre>"},{"location":"docs/core/v1/searching-api/#whereapproximatelyequals","title":"<code>whereApproximatelyEquals</code>","text":"<p>Add a \"where approximately equals\" clause to the query, searching for objects where the attribute is around the given value:</p> <pre><code>$query = $connection-&gt;query();\n\n$query-&gt;whereApproximatelyEquals('givenName', 'John');\n\n// Returns \"(givenName~=John)\"\n$query-&gt;getUnescapedQuery();\n</code></pre> <p>The approximately equals operator is great for performing \"sounds like\" search operations.</p> <p>For example, the above query would match entries with <code>givenName</code> values of either <code>John</code> or <code>Jon</code>.</p>"},{"location":"docs/core/v1/searching-api/#wherebetween","title":"<code>whereBetween</code>","text":"<p>Add a \"where between\" clause to the query, searching for objects where the attribute is between the given values:</p> <pre><code>$query = $connection-&gt;query();\n\n$from = (new DateTime('October 1st 2016'))-&gt;format('YmdHis.0\\Z');\n$to = (new DateTime('January 1st 2017'))-&gt;format('YmdHis.0\\Z');\n\n$query-&gt;whereBetween('whencreated', [$from, $to]);\n\n// Returns \"(&amp;(whencreated&gt;=20161001000000.0Z)(whencreated&lt;=20170101000000.0Z))\"\n$query-&gt;getUnescapedQuery();\n</code></pre>"},{"location":"docs/core/v1/searching-api/#wherecontains","title":"<code>whereContains</code>","text":"<p>Add a \"where contains\" clause to the query, searching for objects where the attribute contains the given value:</p> <pre><code>$query = $connection-&gt;query();\n\n// Returns \"(title=*Accountant*)\"\n$query-&gt;whereContains('title', 'Accountant')-&gt;getUnescapedQuery();\n</code></pre>"},{"location":"docs/core/v1/searching-api/#wheredeleted","title":"<code>whereDeleted</code>","text":"<p>Set an OID server control that will be sent with the query to instruct the LDAP server to include deleted objects in the result set, and add a <code>(isDeleted=TRUE)</code> clause to the query, effectively returning only deleted objects.</p> <pre><code>$query = $connection-&gt;query();\n\n$onlyDeleted = $query-&gt;whereDeleted()-&gt;get();\n</code></pre>"},{"location":"docs/core/v1/searching-api/#whereendswith","title":"<code>whereEndsWith</code>","text":"<p>Add a \"where ends with\" clause to the query, searching for objects where the attribute ends with the given value:</p> <pre><code>$query = $connection-&gt;query();\n\n// Returns \"(title=*Accountant)\"\n$query-&gt;whereEndsWith('title', 'Accountant')-&gt;getUnescapedQuery();\n</code></pre>"},{"location":"docs/core/v1/searching-api/#whereequals","title":"<code>whereEquals</code>","text":"<p>Add a \"where equals\" clause to the query, searching for objects where the attribute equals the given value:</p> <pre><code>$query = $connection-&gt;query();\n\n// Returns \"(department=Accounting)\"\n$query-&gt;whereEquals('department', 'Accounting')-&gt;getUnescapedQuery();\n</code></pre>"},{"location":"docs/core/v1/searching-api/#wherehas","title":"<code>whereHas</code>","text":"<p>Add a \"where has\" clause to the query, searching for objects where the attribute exists, or is not empty:</p> <pre><code>$query = $connection-&gt;query();\n\n// Returns \"(department=*)\"\n$query-&gt;whereHas('department')-&gt;getUnescapedQuery();\n</code></pre>"},{"location":"docs/core/v1/searching-api/#wherein","title":"<code>whereIn</code>","text":"<p>Add a \"where in\" clause to the query, searching for objects where the attribute does not contain any of the one given values:</p> <pre><code>$query = $connection-&gt;query();\n\n// Returns \"(|(name=john)(name=mary)(name=sue))\"\n$query-&gt;whereIn('name', ['john', 'mary', 'sue'])-&gt;getUnescapedQuery();\n</code></pre>"},{"location":"docs/core/v1/searching-api/#wherenotcontains","title":"<code>whereNotContains</code>","text":"<p>Add a \"where doesn't contain\" clause to the query, searching for objects where the attribute does not contain the given value:</p> <pre><code>$query = $connection-&gt;query();\n\n// Returns \"(!(telephoneNumber=*555*))\"\n$query-&gt;whereNotContains('telephoneNumber', '555')-&gt;getUnescapedQuery();\n</code></pre>"},{"location":"docs/core/v1/searching-api/#wherenotendswith","title":"<code>whereNotEndsWith</code>","text":"<p>Add a \"where doesn't end with\" clause to the query, searching for objects where the attribute does not end with the given value:</p> <pre><code>$query = $connection-&gt;query();\n\n// Returns \"(!(mail=@local.com))\"\n$query-&gt;whereNotEndsWith('mail', '@local.com')-&gt;getUnescapedQuery();\n</code></pre>"},{"location":"docs/core/v1/searching-api/#wherenotequals","title":"<code>whereNotEquals</code>","text":"<p>Add a \"where doesn't equal\" clause to the query, searching for objects where the attribute does not contain the given value:</p> <pre><code>$query = $connection-&gt;query();\n\n// Returns \"(!(department=Accounting))\"\n$query-&gt;whereNotEquals('department', 'Accounting')-&gt;getUnescapedQuery();\n</code></pre>"},{"location":"docs/core/v1/searching-api/#wherenothas","title":"<code>whereNotHas</code>","text":"<p>Add a \"where doesn't have\" clause to the query, searching for objects where the attribute does not exist, or is empty:</p> <pre><code>$query = $connection-&gt;query();\n\n// Returns \"(!(mail=*))\"\n$query-&gt;whereNotHas('mail')-&gt;getUnescapedQuery();\n</code></pre>"},{"location":"docs/core/v1/searching-api/#wherenotstartswith","title":"<code>whereNotStartsWith</code>","text":"<p>Add a \"where doesn't start with\" clause to the query, searching for objects where the attribute does not start with the given value:</p> <pre><code>$query = $connection-&gt;query();\n\n// Returns \"(!(cn=John*))\"\n$query-&gt;whereNotStartsWith('cn', 'John')-&gt;getUnescapedQuery();\n</code></pre>"},{"location":"docs/core/v1/searching-api/#whereraw","title":"<code>whereRaw</code>","text":"<p>Add a \"where\" clause to the query without escaping the value, useful when values can contain distinguished names or GUIDs:</p> <pre><code>$query = $connection-&gt;query();\n\n$query-&gt;whereRaw('objectguid', '=', '270db4d0-249d-46a7-9cc5-eb695d9af9ac');\n</code></pre>"},{"location":"docs/core/v1/searching-api/#wherestartswith","title":"<code>whereStartsWith</code>","text":"<p>Add a \"starts with\" clause to the query, searching for objects where the attribute starts with the given value:</p> <pre><code>$query = $connection-&gt;query();\n\n// Returns \"(cn=John*)\"\n$query-&gt;whereStartsWith('cn', 'John')-&gt;getUnescapedQuery();\n</code></pre>"},{"location":"docs/core/v1/searching-api/#withdeleted","title":"<code>withDeleted</code>","text":"<p>Set an OID server control that will be sent with the query to instruct the LDAP server to include deleted objects in the result set:</p> <pre><code>$query = $connection-&gt;query();\n\n$resultsWithDeleted = $query-&gt;withDeleted()-&gt;get();\n</code></pre>"},{"location":"docs/core/v1/searching/","title":"Searching","text":""},{"location":"docs/core/v1/searching/#introduction","title":"Introduction","text":"<p>Using the LdapRecord query builder makes building LDAP queries feel effortless.</p> <p>It allows you to generate LDAP filters using a fluent and convenient interface, similar to Eloquent in Laravel.</p> <p>The LdapRecord query builder escapes all fields &amp; values given to its <code>where()</code> methods. There is no need to clean or escape strings before passing them into the query builder.</p>"},{"location":"docs/core/v1/searching/#creating-a-new-query","title":"Creating a new Query","text":"<p>To create a new search query, call the <code>query()</code> method on your <code>Connection</code> instance:</p> <pre><code>$query = $connection-&gt;query();\n</code></pre> <p>Or you can chain all your methods if you'd prefer:</p> <pre><code>$results = $connection-&gt;query()-&gt;where('cn', '=', 'John Doe')-&gt;get();\n</code></pre> <p>Querying your LDAP connection manually will return raw LDAP results in a <code>Collection</code>. You must query using models themselves if you would like them to be returned instead.</p>"},{"location":"docs/core/v1/searching/#selects","title":"Selects","text":"<p>Fields are case in-sensitive. For example, you can insert <code>CN</code>, <code>cn</code> or <code>cN</code>, they will return the same result.</p> <p>Selecting only the LDAP attributes you need will increase the speed of your queries.</p> <pre><code>// Passing in an array of attributes\n$query-&gt;select(['cn', 'samaccountname', 'telephone', 'mail']);\n\n// Passing in each attribute as an argument\n$query-&gt;select('cn', 'samaccountname', 'telephone', 'mail');\n</code></pre>"},{"location":"docs/core/v1/searching/#executing-searches","title":"Executing Searches","text":""},{"location":"docs/core/v1/searching/#finding-a-record","title":"Finding a record","text":"<p>If you're trying to find a single record, you must use the <code>find()</code> method and insert the distinguished name of the record you are looking for:</p> <pre><code>$record = $query-&gt;find('cn=John Doe,dc=acme,dc=org');\n\nif ($record) {\n    // Record was found!\n} else {\n    // Hmm, looks like we couldn't find anything...\n}\n</code></pre>"},{"location":"docs/core/v1/searching/#finding-a-record-or-failing","title":"Finding a record (or failing)","text":"<p>If you'd like to try and find a single record and throw an exception when it hasn't been found, use the <code>findOrFail()</code> method:</p> <pre><code>try {\n    $record = $query-&gt;findOrFail('cn=John Doe,dc=acme,dc=org');\n} catch (LdapRecord\\Models\\ModelNotFoundException $e) {\n    // Record wasn't found!\n}\n</code></pre>"},{"location":"docs/core/v1/searching/#finding-a-record-by-a-specific-attribute","title":"Finding a record by a specific attribute","text":"<p>If you're looking for a single record with a specific attribute, use the <code>findBy()</code> method:</p> <pre><code>// We're looking for a record with the 'samaccountname' of 'jdoe'.\n$record = $query-&gt;findBy('samaccountname', 'jdoe');\n</code></pre> <p>You can also use <code>findByOrFail()</code> to generate an exception when a record is not found.</p>"},{"location":"docs/core/v1/searching/#retrieving-results","title":"Retrieving results","text":"<p>To get the results from a search, simply call the <code>get()</code> method:</p> <pre><code>$results = $query-&gt;select(['cn', 'samaccountname'])-&gt;get();\n</code></pre> <p>Results will be returned inside of an <code>LdapRecord\\Query\\Collection</code> instance.</p>"},{"location":"docs/core/v1/searching/#retrieving-the-first-record","title":"Retrieving the first record","text":"<p>To retrieve the first record of a search, call the <code>first()</code> method:</p> <pre><code>$record = $query-&gt;first();\n</code></pre> <p>Results will return the model instance only.</p> <p>You can also use <code>firstOrFail()</code> to generate an exception when no records are found.</p>"},{"location":"docs/core/v1/searching/#limit","title":"Limit","text":"<p>To limit the results records returned from your LDAP server and increase the speed of your queries, you can use the <code>limit()</code> method:</p> <pre><code>// This will only return 5 records that contain the name of 'John':\n$records = $query-&gt;where('cn', 'contains', 'John')-&gt;limit(5)-&gt;get();\n</code></pre>"},{"location":"docs/core/v1/searching/#wheres","title":"Wheres","text":"<p>To perform a where clause on the search object, use the <code>where()</code> function:</p> <pre><code>$query-&gt;where('cn', '=', 'John Doe');\n</code></pre> <p>This query would look for a record with the common name of 'John Doe' and return the results.</p> <p>We can also perform a 'where equals' without including the operator:</p> <pre><code>$query-&gt;whereEquals('cn', 'John Doe');\n</code></pre> <p>We can also supply an array of key - value pairs to quickly add multiple wheres:</p> <pre><code>$wheres = [\n    'givenname' =&gt; 'John',\n    'company'   =&gt; 'Acme',\n];\n\n$query-&gt;where($wheres);\n</code></pre> <p>Or, if you require conditionals, you can quickly add multiple wheres with nested arrays:</p> <pre><code>$query-&gt;where([\n   ['cn', '=', 'John Doe'],\n   ['manager', '!', 'Suzy Doe'],\n]);\n</code></pre>"},{"location":"docs/core/v1/searching/#where-starts-with","title":"Where Starts With","text":"<p>We could also perform a search for all objects beginning with the common name of 'John' using the <code>starts_with</code> operator:</p> <pre><code>$results = $query-&gt;where('cn', 'starts_with', 'John')-&gt;get();\n\n// Or:\n\n$results = $query-&gt;whereStartsWith('cn', 'John')-&gt;get();\n</code></pre>"},{"location":"docs/core/v1/searching/#where-ends-with","title":"Where Ends With","text":"<p>We can also search for all objects that end with the common name of <code>Doe</code> using the <code>ends_with</code> operator:</p> <pre><code>$results = $query-&gt;where('cn', 'ends_with', 'Doe')-&gt;get();\n\n// Or:\n\n$results = $query-&gt;whereEndsWith('cn', 'Doe')-&gt;get();\n</code></pre>"},{"location":"docs/core/v1/searching/#where-between","title":"Where Between","text":"<p>To search for records between two values, use the <code>whereBetween</code> method.</p> <p>For the example below, we'll retrieve all records that were created between two dates:</p> <pre><code>$from = (new DateTime('October 1st 2016'))-&gt;format('YmdHis.0\\Z');\n$to = (new DateTime('January 1st 2017'))-&gt;format('YmdHis.0\\Z');\n\n$users = $query-&gt;whereBetween('whencreated', [$from, $to])-&gt;get();\n</code></pre>"},{"location":"docs/core/v1/searching/#where-contains","title":"Where Contains","text":"<p>We can also search for all objects with a common name that contains <code>John Doe</code> using the <code>contains</code> operator:</p> <pre><code>$results = $query-&gt;where('cn', 'contains', 'John Doe')-&gt;get();\n\n// Or:\n\n$results = $query-&gt;whereContains('cn', 'John Doe')-&gt;get();\n</code></pre>"},{"location":"docs/core/v1/searching/#where-not-contains","title":"Where Not Contains","text":"<p>You can use a 'where not contains' to perform the inverse of a 'where contains':</p> <pre><code>$results = $query-&gt;where('cn', 'not_contains', 'John Doe')-&gt;get();\n\n// Or:\n\n$results = $query-&gt;whereNotContains('cn', 'John Doe');\n</code></pre>"},{"location":"docs/core/v1/searching/#where-has","title":"Where Has","text":"<p>Or we can retrieve all objects that have a common name attribute using the wildcard operator (<code>*</code>):</p> <pre><code>$results = $query-&gt;where('cn', '*')-&gt;get();\n\n// Or:\n\n$results = $query-&gt;whereHas('cn')-&gt;get();\n</code></pre> <p>This type of filter syntax allows you to clearly see what your searching for.</p>"},{"location":"docs/core/v1/searching/#where-not-has","title":"Where Not Has","text":"<p>You can use a 'where not has' to perform the inverse of a 'where has':</p> <pre><code>$results = $query-&gt;where('cn', '!*')-&gt;get();\n\n// Or:\n\n$results = $query-&gt;whereNotHas($field)-&gt;get();\n</code></pre>"},{"location":"docs/core/v1/searching/#where-deleted","title":"Where Deleted","text":"<p>To retrieve only deleted models from your LDAP server, use the <code>whereDeleted</code> method:</p> <pre><code>$results = $query-&gt;whereDeleted()-&gt;get();\n</code></pre> <p>If you would like to include deleted models from your LDAP server in your query results, use the <code>withDeleted</code> method:</p> <pre><code>$results = $query-&gt;withDeleted()-&gt;get();\n</code></pre>"},{"location":"docs/core/v1/searching/#or-wheres","title":"Or Wheres","text":"<p>To perform an <code>or where</code> clause on the search object, use the <code>orWhere()</code> method.</p> <p>For example:</p> <pre><code>$results = $query-&gt;where('cn', '=', 'John Doe')\n                 -&gt;orWhere('cn', '=', 'Suzy Doe')\n                 -&gt;get();\n</code></pre> <p>This query will return objects that have the common name of <code>John Doe</code> or <code>Suzy Doe</code>.</p> <p>You can also use all <code>where</code> methods as an or where, for example: <code>orWhereHas()</code>, <code>orWhereContains()</code>, <code>orWhereStartsWith()</code>, <code>orWhereEndsWith()</code></p>"},{"location":"docs/core/v1/searching/#dynamic-wheres","title":"Dynamic Wheres","text":"<p>To perform a dynamic where, simply suffix a <code>where</code> with the field you're looking for.</p> <p>This feature was directly ported from Laravel's Eloquent.</p> <p>Here's an example:</p> <pre><code>// This query:\n$result = $query-&gt;where('cn', '=', 'John Doe')-&gt;first();\n\n// Can be converted to:\n$result = $query-&gt;whereCn('John Doe')-&gt;first();\n</code></pre> <p>You can perform this on any attribute:</p> <pre><code>$result = $query-&gt;whereTelephonenumber('555-555-5555')-&gt;first();\n</code></pre> <p>You can also chain them:</p> <pre><code>$result = $query-&gt;whereTelephonenumber('555-555-5555')\n                -&gt;whereGivenname('John Doe')\n                -&gt;whereSn('Doe')\n                -&gt;first();\n</code></pre> <p>You can even perform multiple dynamic wheres by separating your fields by an <code>And</code>:</p> <pre><code>// This would perform a search for a user with the\n// first name of 'John' and last name of 'Doe'.\n$result = $query-&gt;whereGivennameAndSn('John', 'Doe')-&gt;first();\n</code></pre>"},{"location":"docs/core/v1/searching/#nested-filters","title":"Nested Filters","text":"<p>By default, the LdapRecord query builder automatically wraps your queries in <code>and</code> / <code>or</code> filters for you. However, if any further complexity is required, nested filters allow you to construct any query fluently and easily.</p>"},{"location":"docs/core/v1/searching/#andfilter","title":"andFilter","text":"<p>The <code>andFilter</code> method accepts a closure which allows you to construct a query inside of an <code>and</code> LDAP filter:</p> <pre><code>// Creates the filter: (&amp;(givenname=John)(sn=Doe))\n$results = $query-&gt;andFilter(function (LdapRecord\\Query\\Builder $q) {\n    $q-&gt;where('givenname', '=', 'John')\n      -&gt;where('sn', '=', 'Doe');\n})-&gt;get();\n</code></pre> <p>The above query would return records that contain the first name <code>John</code> and the last name <code>Doe</code>.</p>"},{"location":"docs/core/v1/searching/#orfilter","title":"orFilter","text":"<p>The <code>orFilter</code> method accepts a closure which allows you to construct a query inside of an <code>or</code> LDAP filter:</p> <pre><code>// Creates the filter: (|(givenname=John)(sn=Doe))\n$results = $query-&gt;orFilter(function (LdapRecord\\Query\\Builder $q) {\n    $q-&gt;where('givenname', '=', 'John')\n      -&gt;where('sn', '=', 'Doe');\n})-&gt;get();\n</code></pre> <p>The above query would return records that contain the first name <code>John</code> or the last name <code>Doe</code>.</p>"},{"location":"docs/core/v1/searching/#notfilter","title":"notFilter","text":"<p>The <code>notFilter</code> method accepts a closure which allows you to construct a query inside a <code>not</code> LDAP filter:</p> <pre><code>// Creates the filter: (!(givenname=John)(sn=Doe))\n$results = $query-&gt;notFilter(function (LdapRecord\\Query\\Builder $q) {\n    $q-&gt;where('givenname', '=', 'John')\n      -&gt;where('sn', '=', 'Doe');\n})-&gt;get();\n</code></pre> <p>The above query would return records that do not contain the first name <code>John</code> or the last name <code>Doe</code>.</p>"},{"location":"docs/core/v1/searching/#complex-nesting","title":"Complex Nesting","text":"<p>The above methods <code>andFilter</code> / <code>orFilter</code> can be chained together and nested as many times as you'd like for larger complex queries:</p> <pre><code>$query = $query-&gt;orFilter(function (LdapRecord\\Query\\Builder $q) {\n    $q-&gt;where('givenname', '=', 'John')-&gt;where('sn', '=', 'Doe');\n})-&gt;andFilter(function (LdapRecord\\Query\\Builder $q) {\n    $q-&gt;where('department', '=', 'Accounting')-&gt;where('title', '=', 'Manager');\n})-&gt;getUnescapedQuery();\n\necho $query; // Returns '(&amp;(|(givenname=John)(sn=Doe))(&amp;(department=Accounting)(title=Manager)))'\n</code></pre>"},{"location":"docs/core/v1/searching/#raw-filters","title":"Raw Filters","text":"<p>Raw filters are not escaped. Do not accept user input into the raw filter method.</p> <p>Sometimes you might just want to add a raw filter without using the query builder. You can do so by using the <code>rawFilter()</code> method:</p> <pre><code>$results = $query-&gt;rawFilter('(samaccountname=jdoe)')-&gt;get();\n\n// Or use an array\n$filters = [\n    '(samaccountname=jdoe)',\n    '(surname=Doe)',\n];\n\n$results = $query-&gt;rawFilter($filters)-&gt;get();\n\n// Or use multiple arguments\n$results = $query-&gt;rawFilter($filters[0], $filters[1])-&gt;get();\n\n// Multiple raw filters will be automatically wrapped into an `and` filter:\n$query = $query-&gt;getUnescapedQuery();\n\necho $query; // Returns (&amp;(samaccountname=jdoe)(surname=Doe))\n</code></pre>"},{"location":"docs/core/v1/searching/#paginating","title":"Paginating","text":"<p>Paginating your search results will allow you to return more results than your LDAP cap (usually 1000).</p> <p>For example, if your LDAP server contains 10,000 records and you paginate by 1000, 10 queries will be executed.</p> <p>Calling <code>paginate()</code> will retrieve all records from your LDAP server for the current query. Be careful with large result sets, as you may run out of memory.</p> <pre><code>// Perform global \"all\" search, paginating by 1000 records:\n$results = $query-&gt;paginate(1000);\n\nforeach ($results as $result) {\n    //\n}\n</code></pre>"},{"location":"docs/core/v1/searching/#base-dn","title":"Base DN","text":"<p>To set the base DN of your search you can use one of two methods:</p> <pre><code>// Using the `in()` method:\n$results = $query-&gt;in('ou=Accounting,dc=acme,dc=org')-&gt;get();\n\n// Using the `setDn()` method:\n$results = $query-&gt;setDn('ou=Accounting,dc=acme,dc=org')-&gt;get();\n</code></pre> <p>Either option will return the same results. Use which ever method you prefer to be more readable.</p>"},{"location":"docs/core/v1/searching/#root-dse","title":"Root DSE","text":"<p>To fetch the Root DSE object in your directory, execute the below query:</p> <pre><code>$rootDse = $query-&gt;query()\n    -&gt;in(null)\n    -&gt;read()\n    -&gt;whereHas('objectclass')\n    -&gt;first();\n</code></pre>"},{"location":"docs/core/v1/searching/#search-options","title":"Search Options","text":""},{"location":"docs/core/v1/searching/#recursive","title":"Recursive","text":"<p>By default, all searches performed are recursive.</p> <p>If you'd like to disable recursive search and perform a single level search, use the <code>listing()</code> method:</p> <pre><code>$result = $query-&gt;listing()-&gt;get();\n</code></pre> <p>This would perform an <code>ldap_listing()</code> instead of an <code>ldap_search()</code>.</p>"},{"location":"docs/core/v1/searching/#read","title":"Read","text":"<p>If you'd like to perform a read instead of a listing or a recursive search, use the <code>read()</code> method:</p> <pre><code>$result = $query-&gt;read()-&gt;where('objectClass', '*')-&gt;get();\n</code></pre> <p>This would perform an <code>ldap_read()</code> instead of an <code>ldap_listing()</code> or an <code>ldap_search()</code>.</p> <p>Performing a <code>read()</code> will always return one record in your result.</p>"},{"location":"docs/core/v1/searching/#custom-controls","title":"Custom Controls","text":"<p>If you'd like to add server controls to your query, use the <code>addControl</code> method:</p> <pre><code>$result = $query-&gt;addControl('1.2.840.113556.1.4.417', $isCritical = true)-&gt;get();\n</code></pre>"},{"location":"docs/core/v1/searching/#retrieving-the-ran-query","title":"Retrieving the ran query","text":"<p>If you'd like to retrieve the current query to save or run it at another time, use the <code>getQuery()</code> method on the query builder.</p> <p>This will return the escaped filter.</p> <pre><code>$query = $query-&gt;where('cn', '=', 'John Doe')-&gt;getQuery();\n\necho $query; // Returns '(cn=\\4a\\6f\\68\\6e\\20\\44\\6f\\65)'\n</code></pre> <p>To retrieve the unescaped filter, call the <code>getUnescapedQuery()</code> method:</p> <pre><code>$query = $query-&gt;where('cn', '=', 'John Doe')-&gt;getUnescapedQuery();\n\necho $query; // Returns '(cn=John Doe)'\n</code></pre> <p>Now that you know how to search your directory, lets move onto creating / modifying LDAP records.</p>"},{"location":"docs/core/v1/testing/","title":"Testing","text":""},{"location":"docs/core/v1/testing/#introduction","title":"Introduction","text":"<p>LdapRecord comes with a utility that allow you to test bind attempts against a fake server and return custom error codes &amp; responses.</p> <p>This allows you to test how your application responds to authentication failures and error messages.</p>"},{"location":"docs/core/v1/testing/#test-case-setup","title":"Test Case Setup","text":"<p>To begin, initialize the fake directory using the <code>DirectoryFake::setup</code> method. This method accepts the name of your LDAP connection that you initialize in your application.</p> <p>If you do not provide a name, your default LDAP connection name will be used.</p> <p>Upon calling the <code>setup</code> method, your LDAP connection will be swapped out of the connection <code>Container</code> and replaced with a <code>ConnectionFake</code>.</p> <p>Let's walk through an example of testing an application that uses LDAP authentication.</p> <p>Here's our example controller:</p> <pre><code>class AuthController\n{\n    public function __construct()\n    {\n        Container::addConnection([\n            'hosts' =&gt; ['10.0.0.1']\n        ]);\n    }\n\n    public function login()\n    {\n        $connection = Container::getDefaultConnection();\n\n        $username = $_POST['username'];\n        $password = $_POST['password'];\n\n        if ($connection-&gt;auth()-&gt;attempt($username, $password)) {\n            return \"Your password is valid!\";\n        }\n\n        return \"Username or password is incorrect.\";\n    }\n}\n</code></pre> <p>Now let's test it:</p> <pre><code>use LdapRecord\\Testing\\DirectoryFake;\n\nclass LoginTest extends TestCase\n{\n    public function test_login()\n    {\n        $user = 'cn=User,dc=local,dc=com';\n\n        DirectoryFake::setup()-&gt;actingAs($user);\n\n        // Execute HTTP post request somehow in your testing framework...\n\n        $this-&gt;post('/login', [\n            'username' =&gt; $user,\n            'password' =&gt; 'secret',\n        ])-&gt;assertSee(\"Your password is valid!\");\n\n        $this-&gt;post('/login', [\n            'username' =&gt; 'invalid',\n            'password' =&gt; 'secret',\n        ])-&gt;assertSee(\"Username or password is incorrect.\");\n    }\n}\n</code></pre> <p>This is a small example of how you can test bind attempts to your LDAP server.</p>"},{"location":"docs/core/v1/testing/#responses-and-error-codes","title":"Responses and Error Codes","text":"<p>When testing connectivity to your LDAP server, you may wish to test error codes and messages that may be returned when a bind attempt fails. To do this, you can use the <code>ConnectionFake</code> to retrieve a fake LDAP connection to return error codes when a bind attempt fails.</p> <p>Let's walk through an example of an authentication controller that will retrieve the last LDAP error and determine the cause of the bind failure.</p> <p>Let's walk through an example of testing an application that uses LDAP authentication.</p> <p>Here's our example controller:</p> <pre><code>class AuthController\n{\n    public function __construct()\n    {\n        Container::addConnection([\n            'hosts' =&gt; ['10.0.0.1']\n        ]);\n    }\n\n    public function login()\n    {\n        $connection = Container::getDefaultConnection();\n\n        $username = $_POST['username'];\n        $password = $_POST['password'];\n\n        if ($connection-&gt;auth()-&gt;attempt($username, $password)) {\n            return \"Your password is valid!\";\n        }\n\n        $error = $connection-&gt;getLdapConnection()-&gt;getDiagnosticMessage();\n\n        if (strpos($error, '532') !== false) {\n            return \"Your password has expired.\";\n        } elseif (strpos($error, '533') !== false) {\n            return \"Your account is disabled.\";\n        } elseif (strpos($error, '701') !== false) {\n             return \"Your account has expired.\";\n        } elseif (strpos($error, '775') !== false) {\n             return \"Your account is locked.\";\n        }\n\n        return \"Username or password is incorrect.\";\n    }\n}\n</code></pre> <p>You can see above that we are pulling the diagnostic message of the last failed bind attempt.</p> <p>This diagnostic message contains an error code that you can use to tell the user why they failed logging in.</p> <p>Here is how we would test the above controller:</p> <pre><code>use LdapRecord\\Testing\\DirectoryFake;\n\nclass LoginTest extends TestCase\n{\n    public function test_login()\n    {\n        $user = 'cn=User,dc=local,dc=com';\n\n        $fake = DirectoryFake::setup()-&gt;actingAs($user);\n\n        $fake-&gt;getLdapConnection()-&gt;shouldReturnDiagnosticMessage('Failed: 775');\n\n        // Execute HTTP post request somehow in your testing framework...\n\n        $this-&gt;post('/login', [\n            'username' =&gt; $user,\n            'password' =&gt; 'secret',\n        ])-&gt;assertSee(\"Your account is locked.\");\n    }\n}\n</code></pre>"},{"location":"docs/core/v1/versioning/","title":"Versioning","text":"<p>LdapRecord is versioned under the Semantic Versioning guidelines as much as possible.</p> <p>Releases will be numbered with the following format:</p> <p><code>&lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;</code></p> <p>And constructed with the following guidelines:</p> <ul> <li>Breaking backward compatibility bumps the major and resets the minor and patch.</li> <li>New additions without breaking backward compatibility bumps the minor and resets the patch.</li> <li>Bug fixes and misc changes bumps the patch.</li> </ul> <p>Minor versions are not maintained individually, and you're encouraged to upgrade through to the next minor version.</p> <p>Major versions are maintained individually through separate branches.</p>"},{"location":"docs/core/v1/active-directory/groups/","title":"Group Management (Active Directory)","text":""},{"location":"docs/core/v1/active-directory/groups/#creation","title":"Creation","text":"<p>To create a new Active Directory group, only a common name is required (<code>cn</code>):</p> <pre><code>&lt;?php\n\nuse LdapRecord\\Models\\ActiveDirectory\\Group;\n\n$group = Group::create(['cn' =&gt; 'Accounting']);\n</code></pre> <p>To create a group inside of a particular Organizational Unit (OU), call the <code>inside()</code> method:</p> <pre><code>$group = (new Group)-&gt;inside('ou=Office Groups,dc=local,dc=com');\n\n$group-&gt;cn = 'Accounting';\n\n$group-&gt;save();\n</code></pre>"},{"location":"docs/core/v1/active-directory/groups/#members","title":"Members","text":"<p>When you create or locate a group on your directory, the <code>members</code> relationship is available to you on the model instance.</p>"},{"location":"docs/core/v1/active-directory/groups/#getting-members","title":"Getting Members","text":"<p>To get the immediate members of a group on your directory call the <code>members</code> relationship, and then <code>get()</code>:</p> <pre><code>$group = Group::find('cn=Accounting,dc=local,dc=com');\n\n$members = $group-&gt;members()-&gt;get();\n</code></pre> <p>When getting members, a collection of various model objects may be returned, such as:</p> <ul> <li><code>LdapRecord\\Models\\ActiveDirectory\\User</code></li> <li><code>LdapRecord\\Models\\ActiveDirectory\\Group</code></li> <li><code>LdapRecord\\Models\\ActiveDirectory\\Contact</code></li> </ul> <p>To use different models, override the <code>members</code> relationship.</p>"},{"location":"docs/core/v1/active-directory/groups/#getting-members-recursively","title":"Getting Members Recursively","text":"<p>Very often we use groups that are apart of other groups, that include members.</p> <p>To retrieve these nested members, call the <code>recursive()</code> method, prior to <code>get()</code>:</p> <pre><code>$group = Group::find('cn=Accounting,dc=local,dc=com');\n\n$allMembers = $group-&gt;members()-&gt;recursive()-&gt;get();\n</code></pre>"},{"location":"docs/core/v1/active-directory/groups/#adding-members","title":"Adding Members","text":"<p>In Active Directory, valid group members are other groups, users and contacts.</p> <p>To add members to a group, call the <code>members</code> relationship, and then the <code>attach()</code> method:</p> <p>You must provide a <code>Model</code> instance into the <code>attach()</code> method.</p> <pre><code>$group = Group::find('cn=Accounting,dc=local,dc=com');\n\n$user = User::find('cn=John Doe,dc=local,dc=com');\n\n$group-&gt;members()-&gt;attach($user);\n</code></pre> <p>If the model was successfully added, or the model is already a member of the group, the <code>attach()</code> method will return the model instance you passed into it:</p> <pre><code>$office = $accounting-&gt;members()-&gt;attach(\n    Group::create(['cn' =&gt; 'Office'])\n);\n\n// Displays 'cn=Office,dc=local,dc=com'\necho $office-&gt;getDn();\n</code></pre>"},{"location":"docs/core/v1/active-directory/groups/#adding-multiple-members","title":"Adding Multiple Members","text":"<p>To add multiple members at once, provide an array of models to the <code>attachMany()</code> method:</p> <pre><code>$accounting = Group::find('cn=Accounting,dc=local,dc=com');\n\n$accountants = User::in('ou=Accountants,ou=Users,dc=local,dc=com')-&gt;get();\n\n$accounting-&gt;members()-&gt;attachMany($accountants);\n</code></pre>"},{"location":"docs/core/v1/active-directory/groups/#removing-members","title":"Removing Members","text":"<p>To remove members on a group, call the <code>members</code> relationship, and then <code>detach()</code>:</p> <p>You must provide a <code>Model</code> instance into the <code>detach()</code> method.</p> <pre><code>$group = Group::find('cn=Accounting,dc=local,dc=com');\n\n$user = $group-&gt;members()-&gt;where('cn', '=', 'Steve Bauman')-&gt;first();\n\n$group-&gt;members()-&gt;detach($user);\n</code></pre>"},{"location":"docs/core/v1/active-directory/groups/#removing-multiple-members","title":"Removing Multiple Members","text":"<p>To remove multiple members at once, provide an array of models to the <code>detachMany()</code> method:</p> <pre><code>$group = Group::find('cn=Accounting,dc=local,dc=com');\n\n$members = $group-&gt;members()\n                 -&gt;where('department', 'contains', 'Office')\n                 -&gt;get();\n\n$group-&gt;members()-&gt;detachMany($members);\n</code></pre>"},{"location":"docs/core/v1/active-directory/groups/#removing-all-members","title":"Removing All Members","text":"<p>To remove all immediate members from the group, call the <code>detachAll()</code> method:</p> <p>A collection of all removed members will be returned.</p> <pre><code>$group = Group::find('cn=Accounting,dc=local,dc=com');\n\n$removed = $group-&gt;members()-&gt;detachAll();\n\nforeach ($removed as $member) {\n    echo \"Removed: \" . $member-&gt;getDn();\n}\n</code></pre>"},{"location":"docs/core/v1/active-directory/groups/#groups","title":"Groups","text":"<p>When you create or locate a group on your directory, the <code>groups</code> relationship is available to you on the model instance.</p>"},{"location":"docs/core/v1/active-directory/groups/#getting-groups","title":"Getting Groups","text":"<p>To get the immediate groups that a particular group is apart of on your directory call the <code>groups</code> relationship, and then <code>get()</code>:</p> <pre><code>$group = Group::find('cn=Accounting,dc=local,dc=com');\n\n$groups = $group-&gt;groups()-&gt;get();\n</code></pre>"},{"location":"docs/core/v1/active-directory/groups/#getting-groups-recursively","title":"Getting Groups Recursively","text":"<p>When you have a group that is apart of many parent groups in a hierarchy, you may need to retrieve these.</p> <p>Call the <code>recursive()</code> method, prior to <code>get()</code> to retrieve them:</p> <pre><code>$group = Group::find('cn=Accounting,dc=local,dc=com');\n\n$allGroups = $group-&gt;groups()-&gt;recursive()-&gt;get();\n</code></pre>"},{"location":"docs/core/v1/active-directory/groups/#adding-groups","title":"Adding Groups","text":"<p>To add groups to a particular group, call the <code>attach()</code> method on the <code>groups</code> relation:</p> <p>You must provide a <code>Model</code> instance into the <code>attach()</code> method.</p> <pre><code>$accounting = Group::find('cn=Accounting,dc=local,dc=com');\n\n$office = Group::find('cn=Office,dc=local,dc=com');\n\n$accounting-&gt;groups()-&gt;attach($office);\n</code></pre>"},{"location":"docs/core/v1/active-directory/groups/#adding-multiple-groups","title":"Adding Multiple Groups","text":"<p>To add multiple groups at once, provide an array of models to the <code>attachMany()</code> method:</p> <pre><code>$accounting = Group::find('cn=Accounting,dc=local,dc=com');\n\n$officeGroups = Group::in('ou=Office,ou=Groups,dc=local,dc=com')-&gt;get();\n\n$accounting-&gt;groups()-&gt;attachMany($officeGroups);\n</code></pre>"},{"location":"docs/core/v1/active-directory/groups/#removing-groups","title":"Removing Groups","text":"<p>To remove groups on a particular group, call the <code>groups</code> relationship, and then <code>detach()</code>:</p> <p>You must provide a <code>Model</code> instance into the <code>detach()</code> method.</p> <pre><code>$accounting = Group::find('cn=Accounting,dc=local,dc=com');\n\n$officeGroup = $accounting-&gt;groups()-&gt;where('cn', '=', 'Office')-&gt;first();\n\n$accounting-&gt;groups()-&gt;detach($officeGroup);\n</code></pre>"},{"location":"docs/core/v1/active-directory/groups/#removing-multiple-groups","title":"Removing Multiple Groups","text":"<p>To remove multiple groups at once, provide an array of models to the <code>detachMany()</code> method:</p> <pre><code>$accounting = Group::find('cn=Accounting,dc=local,dc=com');\n\n$officeGroups = $accounting-&gt;groups()\n                           -&gt;in('ou=Office,ou=Groups,dc=local,dc=com')\n                           -&gt;get();\n\n$accounting-&gt;groups()-&gt;detachMany($officeGroups);\n</code></pre>"},{"location":"docs/core/v1/active-directory/groups/#removing-all-groups","title":"Removing All Groups","text":"<p>To remove all immediate groups of a particular group, call the <code>detachAll()</code> method:</p> <p>A collection of all removed groups will be returned.</p> <pre><code>$accounting = Group::find('cn=Accounting,dc=local,dc=com');\n\n$removed = $accounting-&gt;groups()-&gt;detachAll();\n\nforeach ($removed as $group) {\n    echo \"Removed: \" . $group-&gt;getDn();\n}\n</code></pre>"},{"location":"docs/core/v1/active-directory/users/","title":"User Management (Active Directory)","text":""},{"location":"docs/core/v1/active-directory/users/#creation","title":"Creation","text":"<p>Let's walk through the basics of user creation for Active Directory. There are some requirements you must know prior to creation:</p> Requirement You must connect to your server via TLS or SSL if you set the the users password (<code>unicodepwd</code>) attribute You must connect to your server with an account that has permission to create users You must set a common name (<code>cn</code>) for the user You must set the <code>unicodePwd</code> attribute as a non-encoded string (more on this below) To set the users <code>userAccountControl</code>, it must be set after the user has been created <p>Attributes that are set below can be cased in any manor. They can be <code>UPPERCASED</code>, <code>lowercased</code>, <code>camelCased</code>, etc. Use whichever casing you prefer to be most readable in your application.</p> <pre><code>&lt;?php\n\nuse LdapRecord\\Models\\ActiveDirectory\\User;\n\n$user = (new User)-&gt;inside('ou=Users,dc=local,dc=com');\n\n$user-&gt;cn = 'John Doe';\n$user-&gt;unicodePwd = 'SecretPassword';\n$user-&gt;samaccountname = 'jdoe';\n$user-&gt;userPrincipalName = 'jdoe@acme.org';\n\n$user-&gt;save();\n\n// Enable the user.\n$user-&gt;userAccountControl = 512;\n\ntry {\n    $user-&gt;save();\n} catch (\\LdapRecord\\LdapRecordException $e) {\n    // Failed saving user.\n}\n</code></pre> <p>It is wise to encapsulate saving your user in a try / catch block, so if it fails you can determine if the cause of failure is due to your domains password policy.</p>"},{"location":"docs/core/v1/active-directory/users/#password-management","title":"Password Management","text":""},{"location":"docs/core/v1/active-directory/users/#setting-passwords","title":"Setting Passwords","text":"<p>Using the included <code>LdapRecord\\Models\\ActiveDirectory\\User</code> model, an attribute mutator has been added that assists in the setting and changing of passwords on user objects. Feel free to take a peek into the source code to see how it all works.</p> <p>The password string you set on the users <code>unicodePwd</code> attribute is automatically encoded. You do not need to encode it yourself. Doing so will cause an error or exception upon saving the user.</p> <p>Once you have set a password on a user object, this generates a modification on the user model equal to a <code>LDAP_MODIFY_BATCH_REPLACE</code>:</p> <pre><code>&lt;?php\n\nuse LdapRecord\\Models\\ActiveDirectory\\User;\n\n$user = new User();\n\n$user-&gt;unicodepwd = 'secret';\n\n$modification = $user-&gt;getModifications()[0];\n\nvar_dump($modification);\n\n// \"attrib\" =&gt; \"unicodepwd\"\n// \"modtype\" =&gt; 3\n// \"values\" =&gt; array:1 [\n//    0 =&gt; \"\"\\x00s\\x00e\\x00c\\x00r\\x00e\\x00t\\x00\"\\x00\"\n// ]\n</code></pre> <p>As you can see, a batch modification has been automatically generated for the user. Upon calling <code>save()</code>, it will be sent to your LDAP server.</p>"},{"location":"docs/core/v1/active-directory/users/#changing-passwords","title":"Changing Passwords","text":"<p>To change a user's password, you must either:</p> <ol> <li>Bind to your LDAP server with a user that has permissions to reset passwords</li> <li>Or; bind as the user whose password you are trying to change.</li> </ol> <p>There are some prerequisites you must know for changing passwords:</p> Prerequisites You must provide the correct user's old password You must provide a new password that abides by your password policy, such as history, complexity, and length You must set the <code>unicodepwd</code> attribute with an array containing two (2) values (old &amp; new password) <p>Let's walk through an example:</p> <p>You must use a try / catch block upon saving. An <code>LdapRecord\\LdapRecordException</code> will always be thrown when an incorrect old password has been given, or the new password does not abide by your password policy.</p> <pre><code>&lt;?php\n\nuse LdapRecord\\Models\\ActiveDirectory\\User;\n\n$user = User::find('cn=John Doe,ou=Users,dc=local,dc=com');\n\n$user-&gt;unicodepwd = ['old-password', 'new-password'];\n\ntry {\n    $user-&gt;save();\n\n    // User password changed!\n} catch (\\LdapRecord\\Exceptions\\InsufficientAccessException $ex) {\n    // The currently bound LDAP user does not\n    // have permission to change passwords.\n} catch (\\LdapRecord\\Exceptions\\ConstraintException $ex) {\n    // The users new password does not abide\n    // by the domains password policy.\n} catch (\\LdapRecord\\LdapRecordException $ex) {\n    // Failed changing password. Get the last LDAP\n    // error to determine the cause of failure.\n    $error = $ex-&gt;getDetailedError();\n\n    echo $error-&gt;getErrorCode();\n    echo $error-&gt;getErrorMessage();\n    echo $error-&gt;getDiagnosticMessage();\n}\n</code></pre>"},{"location":"docs/core/v1/active-directory/users/#resetting-passwords","title":"Resetting Passwords","text":"<p>To reset a users password, you must be bound to your LDAP directory with a user whom has permission to do so on your directory.</p> <p>You can perform a password reset by simply setting the users <code>unicodepwd</code> attribute as a string, and then calling the <code>save()</code> method, similarly to how it is done during user creation:</p> <pre><code>&lt;?php\n\nuse LdapRecord\\Models\\ActiveDirectory\\User;\n\n$user = User::find('cn=John Doe,ou=Users,dc=local,dc=com');\n\n$user-&gt;unicodepwd = 'new-password';\n\ntry {\n    $user-&gt;save();\n\n    // User password reset!\n} catch (\\LdapRecord\\Exceptions\\InsufficientAccessException $ex) {\n    // The currently bound LDAP user does not\n    // have permission to reset passwords.\n} catch (\\LdapRecord\\Exceptions\\ConstraintException $ex) {\n    // The users new password does not abide\n    // by the domains password policy.\n} catch (\\LdapRecord\\LdapRecordException $ex) {\n    // Failed resetting password. Get the last LDAP\n    // error to determine the cause of failure.\n    $error = $ex-&gt;getDetailedError();\n\n    echo $error-&gt;getErrorCode();\n    echo $error-&gt;getErrorMessage();\n    echo $error-&gt;getDiagnosticMessage();\n}\n</code></pre>"},{"location":"docs/core/v1/active-directory/users/#password-policy-errors","title":"Password Policy Errors","text":"<p>Active Directory will return diagnostic error codes when a password modification fails.</p> <p>To determine the cause, you can check this diagnostic message to see if it contains any of the following codes:</p> Code Meaning <code>525</code> User not found <code>52e</code> Invalid credentials <code>530</code> Not permitted to logon at this time <code>531</code> Not permitted to logon at this workstation <code>532</code> Password expired <code>533</code> Account disabled <code>701</code> Account expired <code>773</code> User must reset password <code>775</code> User account locked <pre><code>&lt;?php\n\nuse LdapRecord\\Models\\ActiveDirectory\\User;\n\n$user = User::find('cn=John Doe,ou=Users,dc=local,dc=com');\n\n$user-&gt;unicodepwd = ['old-password', 'new-password'];\n\ntry {\n    $user-&gt;save();\n\n    // User password changed!\n} catch (\\LdapRecord\\LdapRecordException $ex) {\n    // Failed changing password. Get the last LDAP\n    // error to determine the cause of failure.\n    $error = $ex-&gt;getDetailedError();\n\n    echo $error-&gt;getErrorCode(); // 49\n    echo $error-&gt;getErrorMessage(); // 'Invalid credentials'\n    echo $error-&gt;getDiagnosticMessage(); // '80090308: LdapErr: DSID-0C09042A, comment: AcceptSecurityContext error, data 52e, v3839'\n\n    if (strpos($error-&gt;getDiagnosticMessage(), '52e')) {\n        // This is an invalid credentials error.\n    }\n}\n</code></pre>"},{"location":"docs/core/v1/active-directory/users/#unlock-locked-out-user-account","title":"Unlock Locked Out User Account","text":"<p>If a user has been locked out, set the <code>lockouttime</code> attribute to <code>0</code> (zero):</p> <pre><code>$user = User::find('cn=John Doe,ou=Users,dc=local,dc=com');\n\n$user-&gt;update(['lockouttime' =&gt; 0]);\n</code></pre>"},{"location":"docs/core/v1/active-directory/users/#extend-user-password-expiration","title":"Extend User Password Expiration","text":"<p>Sometimes you may wish to extend a user's password expiration for the full duration of your domains password expiry time.</p> <p>To do this, you must update the user's <code>pwdLastSet</code> time to <code>0</code>, then to <code>-1</code>:</p> <pre><code>$user = User::find('cn=John Doe,ou=Users,dc=local,dc=com');\n\n// Set password last set to 'Never':\n$user-&gt;update(['pwdlastset' =&gt; 0]);\n\n// Set password last set to the current date / time:\n$user-&gt;update(['pwdlastset' =&gt; -1]);\n\n// User password expiration successfully extended.\n</code></pre>"},{"location":"docs/core/v1/active-directory/users/#user-must-change-password-at-next-logon","title":"User Must Change Password at Next Logon","text":"<p>To toggle the \"User Must Change Password at Next Logon\" checkbox that is available in the Active Directory GUI - you must set the <code>pwdlastset</code> attribute to one of the below values:</p> Value Meaning <code>0</code> Toggled on. The user will be required to change their password. <code>-1</code> Toggled off. The user will not be required to change their password. <p>Important:</p> <ul> <li>The <code>pwdlastset</code> attribute can only be modified by domain administrators</li> <li>If toggled on, the Active Directory user will not pass LDAP authentication   until they visit a domain joined computer and update their password</li> </ul> <pre><code>$user = User::find('cn=John Doe,ou=Users,dc=local,dc=com');\n\n// The user must change their password on next login.\n$user-&gt;pwdlastset = 0;\n\n$user-&gt;save();\n</code></pre>"},{"location":"docs/core/v1/active-directory/users/#user-account-control","title":"User Account Control","text":"<p>A users <code>userAccountControl</code> attribute stores an integer value.</p> <p>This integer value contains the sums of various integer flags. These flags control the accessibility and behaviour of an Active Directory user account, such as account disablement, password expiry, the ability to change passwords, and more.</p> <p>For example, setting a users <code>userAccountControl</code> to <code>512</code> would mean that the user account is a default account type that represents a typical user. Setting it to <code>2</code>, would mean the account has been disabled.</p> <p>Combining both to <code>514</code> (<code>512 + 2 = 514</code>) would mean the users account is a typical user account, that is also disabled.</p>"},{"location":"docs/core/v1/active-directory/users/#usage","title":"Usage","text":"<p>You can manipulate a users <code>userAccountControl</code> manually by simply setting the <code>userAccountControl</code> property on an existing user using the raw integer value, or you can use the account control builder <code>LdapRecord\\Models\\Attributes\\AccountControl</code>:</p> <pre><code>&lt;?php\n\nuse LdapRecord\\Models\\ActiveDirectory\\User;\nuse LdapRecord\\Models\\Attributes\\AccountControl;\n\n$user = User::find('cn=John Doe,ou=Users,dc=local,dc=com');\n\n// Setting the UAC value manually:\n$user-&gt;userAccountControl = 512; // Normal, enabled account.\n\n// Or, using the UAC builder:\n$user-&gt;userAccountControl = (new AccountControl)-&gt;accountIsNormal();\n\n$user-&gt;save();\n</code></pre> <p>Using the <code>AccountControl</code> builder, methods called will automatically sum the integer value.</p> <p>For example, let's set an account control for a user with the following controls:</p> <ul> <li>The user account is normal</li> <li>The user account password does not expire</li> <li>The user account password cannot be changed</li> </ul> <pre><code>$user = User::find('cn=John Doe,ou=Users,dc=local,dc=com');\n\n$uac = new AccountControl();\n\n$uac-&gt;accountIsNormal();\n$uac-&gt;passwordDoesNotExpire();\n$uac-&gt;passwordCannotBeChanged();\n\n$user-&gt;userAccountControl = $uac;\n\n$user-&gt;save();\n</code></pre> <p>The <code>AccountControl</code> builder also allows you to determine which flags are set.</p> <p>This can be done with the <code>has</code> and <code>doesntHave</code> methods.</p> <p>Create an <code>AccountControl</code> with the users <code>userAccountControl</code> value in the constructor:</p> <pre><code>$user = User::find('cn=John Doe,ou=Users,dc=local,dc=com');\n\n$uac = new AccountControl(\n    $user-&gt;getFirstAttribute('userAccountControl')\n);\n\nif ($uac-&gt;has(AccountControl::LOCKOUT)) {\n    // This account is locked out.\n}\n\nif ($uac-&gt;doesntHave(AccountControl::LOCKOUT)) {\n    // The account is not locked out.\n}\n</code></pre>"},{"location":"docs/core/v1/active-directory/users/#available-constants","title":"Available Constants","text":"<p>The Account Control builder has constants for every possible value:</p> Constant Value <code>AccountControl::SCRIPT</code> <code>1</code> <code>AccountControl::ACCOUNTDISABLE</code> <code>2</code> <code>AccountControl::HOMEDIR_REQUIRED</code> <code>8</code> <code>AccountControl::LOCKOUT</code> <code>16</code> <code>AccountControl::PASSWD_NOTREQD</code> <code>32</code> <code>AccountControl::PASSWD_CANT_CHANGE</code> <code>64</code> <code>AccountControl::ENCRYPTED_TEXT_PWD_ALLOWED</code> <code>128</code> <code>AccountControl::TEMP_DUPLICATE_ACCOUNT</code> <code>256</code> <code>AccountControl::NORMAL_ACCOUNT</code> <code>512</code> <code>AccountControl::INTERDOMAIN_TRUST_ACCOUNT</code> <code>2048</code> <code>AccountControl::WORKSTATION_TRUST_ACCOUNT</code> <code>4096</code> <code>AccountControl::SERVER_TRUST_ACCOUNT</code> <code>8192</code> <code>AccountControl::DONT_EXPIRE_PASSWORD</code> <code>65536</code> <code>AccountControl::MNS_LOGON_ACCOUNT</code> <code>131072</code> <code>AccountControl::SMARTCARD_REQUIRED</code> <code>262144</code> <code>AccountControl::TRUSTED_FOR_DELEGATION</code> <code>524288</code> <code>AccountControl::NOT_DELEGATED</code> <code>1048576</code> <code>AccountControl::USE_DES_KEY_ONLY</code> <code>2097152</code> <code>AccountControl::DONT_REQ_PREAUTH</code> <code>4194304</code> <code>AccountControl::PASSWORD_EXPIRED</code> <code>8388608</code> <code>AccountControl::TRUSTED_TO_AUTH_FOR_DELEGATION</code> <code>16777216</code> <code>AccountControl::PARTIAL_SECRETS_ACCOUNT</code> <code>67108864</code>"},{"location":"docs/core/v1/active-directory/users/#available-methods","title":"Available Methods","text":"<p>The Account Control builder has methods to apply every possible value:</p> Method Constant Applied <code>AccountControl::runLoginScript()</code> <code>AccountControl::SCRIPT</code> <code>AccountControl::accountIsDisabled()</code> <code>AccountControl::ACCOUNTDISABLE</code> <code>AccountControl::homeFolderIsRequired()</code> <code>AccountControl::HOMEDIR_REQUIRED</code> <code>AccountControl::accountIsLocked()</code> <code>AccountControl::LOCKOUT</code> <code>AccountControl::passwordIsNotRequired()</code> <code>AccountControl::PASSWD_NOTREQD</code> <code>AccountControl::passwordCannotBeChanged()</code> <code>AccountControl::PASSWD_CANT_CHANGE</code> <code>AccountControl::allowEncryptedTextPassword()</code> <code>AccountControl::ENCRYPTED_TEXT_PWD_ALLOWED</code> <code>AccountControl::accountIsTemporary()</code> <code>AccountControl::TEMP_DUPLICATE_ACCOUNT</code> <code>AccountControl::accountIsNormal()</code> <code>AccountControl::NORMAL_ACCOUNT</code> <code>AccountControl::accountIsForInterdomain()</code> <code>AccountControl::INTERDOMAIN_TRUST_ACCOUNT</code> <code>AccountControl::accountIsForWorkstation()</code> <code>AccountControl::WORKSTATION_TRUST_ACCOUNT</code> <code>AccountControl::accountIsForServer()</code> <code>AccountControl::SERVER_TRUST_ACCOUNT</code> <code>AccountControl::passwordDoesNotExpire()</code> <code>AccountControl::DONT_EXPIRE_PASSWORD</code> <code>AccountControl::accountIsMnsLogon()</code> <code>AccountControl::MNS_LOGON_ACCOUNT</code> <code>AccountControl::accountRequiresSmartCard()</code> <code>AccountControl::SMARTCARD_REQUIRED</code> <code>AccountControl::trustForDelegation()</code> <code>AccountControl::TRUSTED_FOR_DELEGATION</code> <code>AccountControl::doNotTrustForDelegation()</code> <code>AccountControl::NOT_DELEGATED</code> <code>AccountControl::useDesKeyOnly()</code> <code>AccountControl::USE_DES_KEY_ONLY</code> <code>AccountControl::accountDoesNotRequirePreAuth()</code> <code>AccountControl::DONT_REQ_PREAUTH</code> <code>AccountControl::passwordIsExpired()</code> <code>AccountControl::PASSWORD_EXPIRED</code> <code>AccountControl::trustToAuthForDelegation()</code> <code>AccountControl::TRUSTED_TO_AUTH_FOR_DELEGATION</code> <code>AccountControl::accountIsReadOnly()</code> <code>AccountControl::PARTIAL_SECRETS_ACCOUNT</code>"},{"location":"docs/core/v1/active-directory/users/#group-management","title":"Group Management","text":"<p>If you are utilizing the included <code>LdapRecord\\Models\\ActiveDirectory\\User</code> model, the <code>groups()</code> relationship exists for easily removing / adding groups to users.</p>"},{"location":"docs/core/v1/active-directory/users/#getting-groups","title":"Getting Groups","text":"<p>To get the groups that a user is a member of, call the <code>groups()</code> relationship method. This will return the immediate groups that the user is a member of:</p> <pre><code>&lt;?php\n\nuse LdapRecord\\Models\\ActiveDirectory\\User;\n\n$user = User::find('cn=John Doe,ou=Users,dc=local,dc=com');\n\n// Get immediate groups the user is apart of:\n$groups = $user-&gt;groups()-&gt;get();\n\nforeach ($groups as $group) {\n    echo $group-&gt;getName();\n}\n</code></pre> <p>You may also want to retrieve groups that are members of groups that the user is apart of. This is called a recursive relationship query.</p> <p>To retrieve groups of groups, call the <code>recursive()</code> method following the <code>groups()</code> relation call:</p> <pre><code>&lt;?php\n\nuse LdapRecord\\Models\\ActiveDirectory\\User;\n\n$user = User::find('cn=John Doe,ou=Users,dc=local,dc=com');\n\n// Get nested groups the user is apart of:\n$groups = $user-&gt;groups()-&gt;recursive()-&gt;get();\n\nforeach ($groups as $group) {\n    echo $group-&gt;getName();\n}\n</code></pre>"},{"location":"docs/core/v1/active-directory/users/#filtering-groups","title":"Filtering Groups","text":"<p>Relations in LdapRecord act as query builders, so you can chain query methods on the <code>groups()</code> relation itself:</p> <pre><code>&lt;?php\n\nuse LdapRecord\\Models\\ActiveDirectory\\User;\n\n$user = User::find('cn=John Doe,ou=Users,dc=local,dc=com');\n\n// Get all groups the user is apart of that contain 'Accounting':\n$groups = $user-&gt;groups()-&gt;whereContains('cn', 'Accounting')-&gt;get();\n\n// Get all groups the user is apart of that are members of the 'Office' group:\n$groups = $user-&gt;groups()-&gt;whereMemberOf('cn=Office,ou=Groups,dc=local,dc=com')-&gt;get();\n</code></pre>"},{"location":"docs/core/v1/active-directory/users/#checking-existence","title":"Checking Existence","text":"<p>To check if a user is a member of any group, call the <code>exists()</code> method on the <code>groups()</code> relationship:</p> <pre><code>&lt;?php\n\nuse LdapRecord\\Models\\ActiveDirectory\\User;\n\n$user = User::find('cn=John Doe,ou=Users,dc=local,dc=com');\n\nif ($user-&gt;groups()-&gt;exists()) {\n    // The user is a member of at least one group.\n}\n</code></pre> <p>To check if a user is an immediate member of a specific group, pass a model into the <code>exists()</code> method:</p> <pre><code>&lt;?php\n\nuse LdapRecord\\Models\\ActiveDirectory\\User;\nuse LdapRecord\\Models\\ActiveDirectory\\Group;\n\n$group = Group::find('cn=Accounting,dc=local,dc=com');\n\n$user = User::find('cn=John Doe,ou=Users,dc=local,dc=com');\n\nif ($user-&gt;groups()-&gt;exists($group)) {\n    // The user is an immediate member of the 'Accounting' group.\n}\n</code></pre> <p>To check if a user is a member of a group that could be nested in a sub-group, call the <code>recursive()</code> method before calling <code>exists()</code>:</p> <pre><code>&lt;?php\n\nuse LdapRecord\\Models\\ActiveDirectory\\User;\nuse LdapRecord\\Models\\ActiveDirectory\\Group;\n\n$group = Group::find('cn=Accounting,dc=local,dc=com');\n\n$user = User::find('cn=John Doe,ou=Users,dc=local,dc=com');\n\nif ($user-&gt;groups()-&gt;recursive()-&gt;exists($group)) {\n    // The user is a member of the 'Accounting' group.\n}\n</code></pre>"},{"location":"docs/core/v1/active-directory/users/#adding-groups","title":"Adding Groups","text":"<p>To add groups to a user, call the <code>groups()</code> relationship method, then <code>attach()</code>:</p> <pre><code>&lt;?php\n\nuse LdapRecord\\Models\\ActiveDirectory\\User;\nuse LdapRecord\\Models\\ActiveDirectory\\Group;\n\n$group = Group::findOrFail('cn=Accounting,ou=Groups,dc=local,dc=com');\n\n$user = User::find('cn=John Doe,ou=Users,dc=local,dc=com');\n\nif ($user-&gt;groups()-&gt;attach($group)) {\n    // Successfully added the group to the user.\n}\n</code></pre>"},{"location":"docs/core/v1/active-directory/users/#removing-groups","title":"Removing Groups","text":"<p>To remove groups on user, call the <code>groups()</code> relationship method, then <code>detach()</code>:</p> <pre><code>&lt;?php\n\nuse LdapRecord\\Models\\ActiveDirectory\\User;\nuse LdapRecord\\Models\\ActiveDirectory\\Group;\n\n$group = Group::findOrFail('cn=Accounting,ou=Groups,dc=local,dc=com');\n\n$user = User::find('cn=John Doe,ou=Users,dc=local,dc=com');\n\nif ($user-&gt;groups()-&gt;detach($group)) {\n    // Successfully removed the group from the user.\n}\n</code></pre> <p>The <code>detach()</code> method will return <code>true</code> if the user is already not apart of the given group. This does not indicate that the user was previously a member.</p> <p>You may want to locate groups on the user prior removal to ensure they are a member:</p> <pre><code>&lt;?php\n\nuse LdapRecord\\Models\\ActiveDirectory\\User;\n\n$user = User::find('cn=John Doe,ou=Users,dc=local,dc=com');\n\n$group = $user-&gt;groups()-&gt;first();\n\nif ($group &amp;&amp; $user-&gt;groups()-&gt;detach($group)) {\n    // Successfully removed the first group from the user.\n}\n</code></pre>"},{"location":"docs/core/v2/","title":"Overview","text":"<p>LdapRecord is a PHP package that provides you with a full ActiveRecord implementation for working with your LDAP server. Each LDAP object type has a corresponding \"Model\" which is used to interact with that type. An LDAP object type is determined by its object classes.</p> <p>Models allow you to execute search operations on your LDAP server as well as create and modify objects.</p> <p>PHP applications that require LDAP integration are very tricky to setup. Creating these integrations yourself can take days or even weeks due to the amount of learning you must take on to understand how LDAP works.</p> <p>LdapRecord sweats the small stuff so you can get up and running as fast as possible.</p> <p>If you require support or assistance getting set up, consider becoming a sponsor to receive issue priority so you get up and running as fast as possible.</p>"},{"location":"docs/core/v2/authentication/","title":"Authentication","text":""},{"location":"docs/core/v2/authentication/#introduction","title":"Introduction","text":"<p>Before we get started, it's paramount to know that LdapRecord does not set up any sort of PHP session that persists through every request. This is up to you to implement, as every project may vary with session usage.</p>"},{"location":"docs/core/v2/authentication/#basic-authentication","title":"Basic Authentication","text":"<p>The most widely used feature of any LDAP library is authentication. Let's walk through this step by step using LdapRecord.</p> <p>Firstly, we need to define a <code>Connection</code> for your LDAP server that you would like users to authenticate against. Then, we will call the <code>auth()-&gt;attempt()</code> method:</p> <p>If you only need to authenticate users against your LDAP server, you do not need to provide a <code>base_dn</code>. This is only used for performing searches on your directory.</p> <p>Similarly with the <code>username</code> and <code>password</code> configuration options, these are only used for performing operations on your LDAP server that require permission - such as resetting passwords, modifying LDAP objects, and more.</p> <pre><code>$connection = new \\LdapRecord\\Connection([\n    'hosts' =&gt; ['127.0.0.1'],\n]);\n\nif ($connection-&gt;auth()-&gt;attempt('cn=john doe,dc=local,dc=com', 'p@ssw0rd', $stayAuthenticated = true)) {\n    // Successfully authenticated user.\n} else {\n    // Username or password is incorrect.\n}\n</code></pre> <p>As you can see from the above, the first parameter of the <code>attempt()</code> method is the users Distinguished Name. If you're running Active Directory, you can use the users <code>userPrincipalName</code> instead, which (in the case above) would be in the format of <code>jdoe@acme.org</code>.</p> <p>You may have also noticed we added a third parameter named <code>$stayAuthenticated = true</code>. This means, that throughout the entire lifecycle of the current request, you can perform further operations on your LDAP server as the successfully authenticated user.</p>"},{"location":"docs/core/v2/authentication/#determining-auth-bind-failure-cause","title":"Determining Auth / Bind Failure Cause","text":"<p>This will only work when binding to an Active Directory server.</p> <p>It's a common scenario to require showing why a user's password failed, whether it be an expired password, or account lockout. You can do this one of two ways:</p> <ul> <li>Using <code>auth()-&gt;attempt()</code> with an event listener:</li> </ul> <pre><code>use LdapRecord\\Container;\nuse LdapRecord\\Auth\\Events\\Failed;\n\n$dispatcher = Container::getEventDispatcher();\n\n$message = '';\n\n$dispatcher-&gt;listen(Failed::class, function (Failed $event) use (&amp;$message) {\n    $ldap = $event-&gt;getConnection();\n\n    // The diagnostic message will be available here.\n    $error = $ldap-&gt;getDiagnosticMessage();\n\n    if (strpos($error, '532') !== false) {\n        $message = 'Your password has expired.';\n    } elseif (strpos($error, '533') !== false) {\n        $message = 'Your account is disabled.';\n    } elseif (strpos($error, '701') !== false) {\n        $message = 'Your account has expired.';\n    } elseif (strpos($error, '775') !== false) {\n        $message = 'Your account is locked.';\n    } else {\n        $message = 'Username or password is incorrect.';\n    }\n});\n\nif ($connection-&gt;auth()-&gt;attempt($username, $password)) {\n    // The users credentials are valid.\n} else {\n    // Invalid credentials.\n    return $message;\n}\n</code></pre> <ul> <li>Using <code>auth()-&gt;bind()</code> and catching the thrown exception:</li> </ul> <pre><code>try {\n    $connection-&gt;auth()-&gt;bind($username, $password);\n\n    // Further bound operations...\n} catch (\\LdapRecord\\Auth\\BindException $e) {\n    $error = $e-&gt;getDetailedError()-&gt;getDiagnosticMessage();\n\n    if (strpos($error, '532') !== false) {\n        return 'Your password has expired.';\n    } elseif (strpos($error, '533') !== false) {\n        return 'Your account is disabled.';\n    } elseif (strpos($error, '701') !== false) {\n        return 'Your account has expired';\n    } elseif (strpos($error, '775') !== false) {\n        return 'Your account is locked.';\n    }\n\n    return 'Username or password is incorrect.';\n}\n</code></pre> <p>However, please be aware of the differences of the above methods as described in the connection binding documentation:</p> <ul> <li><code>auth()-&gt;attempt()</code> will automatically rebind the user you have in your configuration,   unless you have specified <code>true</code> in the third parameter to stay bound. </li> <li><code>auth()-&gt;bind()</code> will not automatically rebind the user you have in your configuration,   and will allow <code>null</code> usernames and passwords (anonymous binds).</li> </ul>"},{"location":"docs/core/v2/authentication/#authenticating-with-other-username-attributes","title":"Authenticating with other username attributes","text":"<p>No user wants to type in their full Distinguished Name to login to an application. It's cumbersome, and will likely change over the years due to IT administrators moving objects in the LDAP directory for organization purposes.</p> <p>However, LDAP only supports binding (authenticating) users using their Distinguished Name (unless you're using Active Directory). How do we get around this limitation? Well, we can first connect to our LDAP directory and then retrieve their account information - including their Distinguished Name. Let's walk through this.</p> <p>Since we will first be searching our LDAP directory for the user that is attempting to authenticate, we have two options:</p> <ul> <li>Providing a <code>username</code> and <code>password</code> to our connection</li> <li>Anonymously bind to our connection, by not providing a <code>username</code> and <code>password</code> (if enabled in your directory)</li> </ul> <p>Since we will be searching our directory, we must provide a <code>base_dn</code>, so LdapRecord knows where to begin searching for objects.</p> <pre><code>// Connecting with an an account...\n$connection = new \\LdapRecord\\Connection([\n    'hosts' =&gt; ['127.0.0.1'],\n    'base_dn' =&gt; 'dc=local,dc=com',\n    'username' =&gt; 'cn=WebApi,dc=local,dc=com',\n    'password' =&gt; 'super-secret',\n]);\n\n$connection-&gt;connect();\n\n// Anonymously binding...\n$connection = new \\LdapRecord\\Connection([\n    'hosts' =&gt; ['127.0.0.1'],\n    'base_dn' =&gt; 'dc=local,dc=com',\n]);\n\n$connection-&gt;connect();\n</code></pre> <p>It's recommended to create and use an account in your LDAP directory that is specifically for your web application(s), rather than using your own account or a domain administrator.</p> <p>Once we're connected, we can then search for the user who is trying to authenticate.</p> <p>For this example, we're wanting users to login using their <code>sAMAccountName</code>:</p> <pre><code>$connection = new \\LdapRecord\\Connection(['...']);\n\n$connection-&gt;connect();\n\n$user = $connection-&gt;query()\n    -&gt;where('samaccountname', '=', $_POST['username'])\n    -&gt;firstOrFail();\n\nif ($connection-&gt;auth()-&gt;attempt($user['distinguishedname'][0], $_POST['password'])) {\n    // User has been successfully authenticated.\n} else {\n    // Username or password is incorrect.\n}\n</code></pre>"},{"location":"docs/core/v2/authentication/#restricting-authentication","title":"Restricting Authentication","text":"<p>Sometimes you only want certain users allowed to login to your application. You can do this in a couple ways.</p>"},{"location":"docs/core/v2/authentication/#group-memberships","title":"Group Memberships","text":"<p>To restrict who can authenticate in your application using groups that users will be members of, we will perform the same as above, except we will check if the returned <code>memberof</code> array of the user contains the allowed groups.</p> <p>In this example, we will limit users who are members of <code>Accounting</code> and <code>IT</code>.</p> <pre><code>$connection = new \\LdapRecord\\Connection(['...']);\n\n$connection-&gt;connect();\n\n$user = $connection-&gt;query()\n    -&gt;where('samaccountname', '=', $_POST['username'])\n    -&gt;firstOrFail();\n\n// Get the groups from the user.\n$userGroups = $user['memberof'];\n\n// Set up our allowed groups.\n$allowed = [\n    'cn=Accounting,ou=Groups,dc=local,dc=com',\n    'cn=IT,ou=Groups,dc=local,dc=com',\n];\n\n// Normalize the group distinguished names and determine if\n// the user is a member of any of the allowed groups:\n$difference = array_intersect(\n    array_map('strtolower', $userGroups),\n    array_map('strtolower', $allowed)\n);\n\nif (count($difference) &gt; 0) {\n    // Our user is a member of one of the allowed groups.\n    // Continue with authentication.\n    if ($connection-&gt;auth()-&gt;attempt($user['distinguishedname'], $_POST['password'])) {\n        // User has been successfully authenticated.\n    } else {\n        // Username or password is incorrect.\n    }\n}\n\n// User is not a member of any of the allowed groups.\n</code></pre>"},{"location":"docs/core/v2/authentication/#organizational-units","title":"Organizational Units","text":"<p>Using Organizational Units to determine which users are allowed to authenticate is easier than using groups.</p> <p>In this scenario, we will limit our search to a single Organization Unit that contain users who are allowed to authenticate.</p> <p>We can simply determine if a result is returned, we know the user exists inside:</p> <pre><code>$connection = new \\LdapRecord\\Connection(['...']);\n\n$connection-&gt;connect();\n\n$organizationalUnit = 'ou=AllowedUsers,dc=local,dc=com';\n\n$user = $connection-&gt;query()\n    -&gt;in($organizationalUnit)\n    -&gt;where('samaccountname', '=', $_POST['username'])\n    -&gt;first();\n\nif ($user) {\n    // Our user is a member of one of the allowed groups.\n    // Continue with authentication.\n    if ($connection-&gt;auth()-&gt;attempt($user['distinguishedname'], $_POST['password'])) {\n        // User has been successfully authenticated.\n    } else {\n        // Username or password is incorrect.\n    }\n}\n\n// No user found. They are not inside the OU.\n</code></pre>"},{"location":"docs/core/v2/caching/","title":"Query Caching","text":""},{"location":"docs/core/v2/caching/#introduction","title":"Introduction","text":"<p>LdapRecord supports caching LDAP search operations. This is useful when running expensive queries. A <code>pagination</code> query on the root of your LDAP directory may take several seconds to complete.</p> <p>Caching allows you to store the entire result so it is not retrieved again from the server until the cache is set to expire.</p>"},{"location":"docs/core/v2/caching/#requirements","title":"Requirements","text":"<p>Your application must have a caching implementation that uses the PSR Simple Cache interface.</p> <p>For example, the Laravel cache system implements this interface.</p>"},{"location":"docs/core/v2/caching/#getting-started","title":"Getting Started","text":"<p>To setup caching, you must add your cache implementation to your LDAP connection instance.</p> <p>This is done by the <code>setCache</code> method:</p> <pre><code>use LdapRecord\\Connection;\n\n$connection = new Connection(['...']);\n\n$connection-&gt;setCache($myAppCache);\n</code></pre>"},{"location":"docs/core/v2/caching/#usage","title":"Usage","text":"<p>Once you've added your caching implementation to your LdapRecord connection, you can start caching queries on plain queries or queries on LdapRecord models.</p> <p>This is done via the <code>cache</code> method. This method accepts two parameters.</p> <p>The first is a <code>DateTimeInterface</code> - which is an instance of a PHP Date object set in the future as to when the cache for the query must expire.</p> <p>The second is a boolean indicating whether the cache must be flushed prior to running the query. This allows you to have control over manually cache flushing for the query.</p> <pre><code>$until = new \\DateTime('tomorrow');\n\n$results = $connection-&gt;query()-&gt;cache($until)-&gt;paginate();\n\n// Manually flushing the cache...\n$results = $connection-&gt;query()-&gt;cache($until, $flush = true)-&gt;paginate();\n</code></pre> <p>The above example will cache results at the time of running until the next the day. Once the existing cache has expired, it will be re-cached again.</p> <p>To cache model query results, call the same method upon your model query:</p> <pre><code>use LdapRecord\\Models\\ActiveDirectory\\User;\n\n$until = new \\DateTime('tomorrow');\n\n$users = User::cache($until)-&gt;get();\n</code></pre>"},{"location":"docs/core/v2/common-queries/","title":"Common Queries","text":"<p>Most applications will require retrieving certain set / type of objects from a directory.</p>"},{"location":"docs/core/v2/common-queries/#using-models","title":"Using Models","text":"<p>Utilizing LdapRecord's built in models allow you to easily query specific types of objects in your directory.</p> <p>The examples below assume you have created a <code>Connection</code> and have added them into the Container.</p>"},{"location":"docs/core/v2/common-queries/#active-directory","title":"Active Directory","text":""},{"location":"docs/core/v2/common-queries/#generic-queries","title":"Generic Queries","text":"<pre><code>// All Active Directory objects:\n// Note: We use 'paginate' here so over 1000 results can be returned.\n$objects = \\LdapRecord\\Models\\ActiveDirectory\\Entry::paginate();\n\n// All Active Directory users:\n$users = \\LdapRecord\\Models\\ActiveDirectory\\User::get();\n\n// All Active Directory contacts:\n$contacts = \\LdapRecord\\Models\\ActiveDirectory\\Contact::get();\n\n// All Active Directory groups:\n$groups = \\LdapRecord\\Models\\ActiveDirectory\\Group::get();\n\n// All Active Directory organizational units:\n$ous = \\LdapRecord\\Models\\ActiveDirectory\\OrganizationalUnit::get();\n\n// All Active Directory printers:\n$printers = \\LdapRecord\\Models\\ActiveDirectory\\Printer::get();\n\n// All Active Directory computers:\n$computers = \\LdapRecord\\Models\\ActiveDirectory\\Computer::get();\n\n// All foreign security principals:\n$foreignPrincipals = \\LdapRecord\\Models\\ActiveDirectory\\ForeignSecurityPrincipal::get();\n</code></pre>"},{"location":"docs/core/v2/common-queries/#users-created-after-a-date","title":"Users Created After a Date","text":"<pre><code>$date = (new DateTime('October 1st 2016'))-&gt;format('YmdHis.0\\Z');\n\n$users = User::where('whencreated', '&gt;=', $date)-&gt;get();\n</code></pre>"},{"location":"docs/core/v2/common-queries/#openldap","title":"OpenLDAP","text":""},{"location":"docs/core/v2/common-queries/#generic-queries_1","title":"Generic Queries","text":"<pre><code>// All OpenLDAP objects:\n// Note: We use 'paginate' here so over 1000 results can be returned.\n$objects = \\LdapRecord\\Models\\OpenLDAP\\Entry::paginate();\n\n// All OpenLDAP users:\n$users = \\LdapRecord\\Models\\OpenLDAP\\User::get();\n\n// All OpenLDAP groups:\n$groups = \\LdapRecord\\Models\\OpenLDAP\\Group::get();\n\n// All OpenLDAP organizational units:\n$ous = \\LdapRecord\\Models\\OpenLDAP\\OrganizationalUnit::get();\n</code></pre>"},{"location":"docs/core/v2/common-queries/#without-models","title":"Without Models","text":"<p>If you do not want to use LdapRecord models, you can still use the query builder and retrieve raw LDAP results.</p> <pre><code>use LdapRecord\\Connection;\n\n$connection = new Connection(['...']);\n\n// All LDAP objects:\n// Note: We use 'paginate' here so over 1000 results can be returned.\n$objects = $connection-&gt;query()-&gt;paginate();\n</code></pre>"},{"location":"docs/core/v2/common-queries/#active-directory_1","title":"Active Directory","text":"<pre><code>use LdapRecord\\Connection;\n\n$connection = new Connection(['...']);\n\n// All Active Directory Users:\n$users = $connection-&gt;query()-&gt;where([\n    ['objectclass', '=', 'top'],\n    ['objectclass', '=', 'person'],\n    ['objectclass', '=', 'organizationalperson'],\n    ['objectclass', '=', 'user'],\n])-&gt;get();\n\n// All Active Directory contacts:\n$contacts = $connection-&gt;query()-&gt;where([\n    ['objectclass', '=', 'top'],\n    ['objectclass', '=', 'person'],\n    ['objectclass', '=', 'organizationalperson'],\n    ['objectclass', '=', 'contact'],\n])-&gt;get();\n\n// All Active Directory groups:\n$groups = $connection-&gt;query()-&gt;where([\n    ['objectclass', '=', 'top'],\n    ['objectclass', '=', 'group'],\n])-&gt;get();\n\n// All Active Directory organizational units:\n$ous = $connection-&gt;query()-&gt;where([\n    ['objectclass', '=', 'top'],\n    ['objectclass', '=', 'organizationalunit'],\n])-&gt;get();\n\n// All Active Directory printers:\n$printers = $connection-&gt;query()\n    -&gt;where('objectclass', '=', 'printqueue')\n    -&gt;get();\n\n// All Active Directory computers:\n$computers = $connection-&gt;query()-&gt;where([\n    ['objectclass', '=', 'top'],\n    ['objectclass', '=', 'person'],\n    ['objectclass', '=', 'organizationalperson'],\n    ['objectclass', '=', 'user'],\n    ['objectclass', '=', 'computer'],\n])-&gt;get();\n\n// All foreign security principals:\n$foreignPrincipals = $connection-&gt;query()\n    -&gt;where('objectclass', '=', 'foreignsecurityprincipal')\n    -&gt;get();\n</code></pre>"},{"location":"docs/core/v2/common-queries/#openldap_1","title":"OpenLDAP","text":"<pre><code>// All OpenLDAP users:\n$users = $connection-&gt;query()-&gt;where([\n    ['objectclass', '=', 'top'],\n    ['objectclass', '=', 'person'],\n    ['objectclass', '=', 'organizationalperson'],\n    ['objectclass', '=', 'inetorgperson'],\n])-&gt;get();\n\n// All OpenLDAP groups:\n$groups = $connection-&gt;query()-&gt;where([\n    ['objectclass', '=', 'top'],\n    ['objectclass', '=', 'groupofuniquenames'],\n])-&gt;get();\n\n// All OpenLDAP organizational units:\n$ous = $connection-&gt;query()-&gt;where([\n    ['objectclass', '=', 'top'],\n    ['objectclass', '=', 'organizationalunit'],\n])-&gt;get();\n</code></pre>"},{"location":"docs/core/v2/configuration/","title":"Configuration","text":"<p>To configure your LDAP connections, you must provide an array to the <code>Connection</code> class with key-value pairs to set various options.</p> <p>Below is a list of all available options:</p> <pre><code>use LdapRecord\\Connection;\n\n$connection = new Connection([\n    // Mandatory Configuration Options\n    'hosts'            =&gt; ['192.168.1.1'],\n    'base_dn'          =&gt; 'dc=local,dc=com',\n    'username'         =&gt; 'cn=admin,dc=local,dc=com',\n    'password'         =&gt; 'password',\n\n    // Optional Configuration Options\n    'port'             =&gt; 389,\n    'use_ssl'          =&gt; false,\n    'use_tls'          =&gt; false,\n    'version'          =&gt; 3,\n    'timeout'          =&gt; 5,\n    'follow_referrals' =&gt; false,\n\n    // Custom LDAP Options\n    'options' =&gt; [\n        // See: http://php.net/ldap_set_option\n        LDAP_OPT_X_TLS_REQUIRE_CERT =&gt; LDAP_OPT_X_TLS_HARD\n    ]\n]);\n</code></pre>"},{"location":"docs/core/v2/configuration/#hosts","title":"Hosts","text":"<p>The hosts option is an array of IP addresses or host names located on your network that serve an LDAP directory.</p> <p>You insert as many or as little as you'd like depending on your forest (with the minimum of one of course).</p> <p>The first host in the array will always be used as the primary server. This means, all operations will take place underneath this host.</p> <p>If the primary host fails to complete an operation (bind, query, modification, etc.), or the server does not respond in the configured <code>timeout</code>, the same operation will be attempted on the following host in the array.</p> <p>This automated fail-over process will continue for each host address, until a successful response is received.</p> <p>Important:</p> <ul> <li>Do not append your port (<code>:389</code>, <code>:636</code>, etc.) to your hosts.  Use the <code>port</code> configuration option instead.</li> <li>Do not prepend your protocol (<code>ldap://</code> or <code>ldaps://</code>) to your hosts.  Use the <code>use_ssl</code> configuration option instead.</li> </ul>"},{"location":"docs/core/v2/configuration/#base-distinguished-name","title":"Base Distinguished Name","text":"<p>A 'Distinguished Name' is a string based identifier in LDAP that is used to indicate hierarchy.</p> <p>Each object in your domain is assigned a Distinguished Name.</p> <p>An example Distinguished Name would be <code>cn=John Doe,ou=Users,dc=local,dc=com</code>.</p> <p>The above can be broken into the following 'Relative Distinguished Names' (RDN for short):</p> RDN Meaning <code>cn=John Doe</code> The object has a 'Common Name' of <code>John Doe</code> <code>ou=Users</code> The object resides in the 'Organizational Unit' <code>Users</code> <code>dc=local,dc=com</code> The object resides in the 'Domain' <code>local.com</code> <p>A 'Base Distinguished Name' is the distinguished name that you would like to be used as the root of all searches and object creations using LdapRecord.</p> <p>An example base DN would be <code>dc=local,dc=com</code>.</p> <p>This means, that all searches executed with LdapRecord will start at <code>dc=local,dc=com</code> as the root. This would allow all objects below it to be retrieved from results.</p> <p>Important:</p> <ul> <li>If you do not define a base DN, you will not retrieve any search results from queries.</li> <li>Your base DN is case insensitive. You do not need to worry about incorrect casing.</li> </ul>"},{"location":"docs/core/v2/configuration/#username-password","title":"Username &amp; Password","text":"<p>To connect to your LDAP server, a username and password is required to be able to query and run operations on your server(s).</p> <p>Important:</p> <ul> <li>The <code>username</code> option must be a users Distinguished Name</li> <li>If however you are connecting to an Active Directory server, you may use:</li> <li>userPrincipalName (<code>username@domain.com</code>)</li> <li>Down-Level Logon Name (<code>DOMAIN\\\\username</code>)</li> <li>To run administration level operations, such as resetting passwords, this account must have the permissions to do so on your directory.</li> </ul>"},{"location":"docs/core/v2/configuration/#port","title":"Port","text":"<p>The port option is used for opening a connection and binding to your LDAP server.</p> <p>Default ports are already used for non SSL and SSL connections (<code>389</code> and <code>636</code>).</p> <p>Only insert a port if your LDAP server uses a unique port.</p> <p>Important:</p> <ul> <li>If enabling SSL, and <code>port</code> is set to <code>389</code>, it will be automatically overridden to use <code>636</code>.</li> <li>If enabling TLS, you must use the default port for your LDAP server (<code>389</code>). SSL ports cannot be used.</li> </ul>"},{"location":"docs/core/v2/configuration/#ssl-tls","title":"SSL &amp; TLS","text":"<p>These boolean options enable an TLS or SSL connection to your LDAP server.</p> <p>It is recommended to use one of these options if you have the ability to. This ensures secure connectivity.</p> <p>Important:</p> <ul> <li>Only one can be set to <code>true</code>. You must chose either or.</li> <li>You must enable SSL or TLS to set / change / reset passwords in Active Directory.</li> <li>TLS is recommended over SSL. SSL is labelled as a deprecated mechanism for securely running LDAP operations.</li> </ul>"},{"location":"docs/core/v2/configuration/#debugging","title":"Debugging","text":"<p>If you're having connectivity issues over SSL or TLS, you may have to create an <code>ldap.conf</code> file and add the following inside:</p> <pre><code>TLS_REQCERT never\n</code></pre> <p>The <code>ldap.conf</code> file will likely not exist by default. Create it inside the location for your OS:</p> OS Location Windows <code>C:\\OpenLDAP\\sysconf\\ldap.conf</code> Linux <code>/etc/ldap/ldap.conf</code> or <code>/etc/openldap/ldap.conf</code> macOS <code>/usr/local/etc/openldap/ldap.conf</code> <p>The above directories may not exist - you will need to create them in such case.</p> <p>Important:</p> <ul> <li>You must restart your web server after making changes to the <code>ldap.conf</code> file.</li> <li>In some cases, you may even have to restart your workstation or server for the changes to take effect.</li> </ul> <p>If you can connect using <code>TLS_REQCERT never</code> inside of your <code>ldap.conf</code> file, you may want to copy your domain CA certificate to your web server, as it can be a bit of a security risk as it will ignore invalid certificates.</p> <p>Copy your domain CA certificate to the following location:</p> OS Location Windows <code>C:\\OpenLDAP\\sysconf</code> Linux / macOS <code>/etc/ssl/certs</code> <p>Then, reference it in your <code>ldap.conf</code> with the full file path using (replace <code>my-custom-path</code> with the location of the file):</p> <pre><code>TLS_CACERT my-custom-path/ca.pem\nTLS_REQCERT hard\n</code></pre> <p>Windows Example:</p> <pre><code>TLS_CACERT C:\\OpenLDAP\\sysconf\\ca.pem\nTLS_REQCERT hard\n</code></pre> <p>Linux / macOS Example:</p> <pre><code>TLS_CACERT /etc/ssl/certs/ca.pem\nTLS_REQCERT hard\n</code></pre>"},{"location":"docs/core/v2/configuration/#timeout","title":"Timeout","text":"<p>The timeout option allows you to configure the amount of seconds to wait until your application receives a response from your LDAP server.</p> <p>The default is five (<code>5</code>) seconds.</p> <p>Important: If the timeout is reached performing an LDAP operation and you have specified multiple hosts in your configuration, the same timeout will be used for each host.  This means, if you have three (3) hosts in your configuration and two (2) of them do not respond (or fail), the operation will take ten (10) seconds + the amount of time the third (3rd) host takes to respond.</p>"},{"location":"docs/core/v2/configuration/#version","title":"Version","text":"<p>The LDAP version to use for your connection.</p> <p>Must be an integer, and can either be two (<code>2</code>) or three (<code>3</code>).</p> <p>Important: It's heavily recommended to use version three (<code>3</code>). You may experience issues using version two (<code>2</code>).</p>"},{"location":"docs/core/v2/configuration/#follow-referrals","title":"Follow Referrals","text":"<p>The follow referrals option is a boolean to tell Active Directory to follow a referral to another server on your network if the server queried knows the information your asking for exists, but does not yet contain a copy of it locally.</p> <p>This option is defaulted to <code>false</code>.</p> <p>Important: Disable this option if you're experiencing search / connectivity issues.  For more information, visit: Microsoft Docs - LDAP Referrals</p>"},{"location":"docs/core/v2/configuration/#options","title":"Options","text":"<p>Arbitrary options can be set for the connection to fine-tune TLS and connection behavior.</p> <p>Important: The following options will be ignored if set:</p> <ul> <li><code>LDAP_OPT_PROTOCOL_VERSION</code></li> <li><code>LDAP_OPT_NETWORK_TIMEOUT</code></li> <li><code>LDAP_OPT_REFERRALS</code></li> </ul> <p>These are instead set with the <code>version</code>, <code>timeout</code> and <code>follow_referrals</code> keys.</p> <p>Valid LDAP options are listed in the ldap_set_option PHP documentation.</p>"},{"location":"docs/core/v2/connections/","title":"Connections","text":""},{"location":"docs/core/v2/connections/#introduction","title":"Introduction","text":"<p>Once you've defined your configuration, you must then create a connection and insert your configuration into it:</p> <pre><code>use LdapRecord\\Connection;\n\n$connection = new Connection([\n     'hosts'    =&gt; ['192.168.1.1'],\n     'username' =&gt; 'cn=user,dc=local,dc=com',\n     'password' =&gt; 'secret',\n]);\n</code></pre>"},{"location":"docs/core/v2/connections/#connecting","title":"Connecting","text":"<p>Once you have your connection, call <code>connect()</code> to bind to your LDAP server:</p> <pre><code>try {\n    $connection-&gt;connect();\n\n    echo \"Successfully connected!\";\n} catch (\\LdapRecord\\Auth\\BindException $e) {\n    $error = $e-&gt;getDetailedError();\n\n    echo $error-&gt;getErrorCode();\n    echo $error-&gt;getErrorMessage();\n    echo $error-&gt;getDiagnosticMessage();\n}\n</code></pre>"},{"location":"docs/core/v2/connections/#connecting-anonymously","title":"Connecting Anonymously","text":"<p>If you'd like to connect/bind anonymously to your LDAP server, simply set your <code>username</code> and <code>password</code> configuration parameters to <code>null</code>:</p> <pre><code>use LdapRecord\\Connection;\n\n$connection = new Connection([\n     'hosts'    =&gt; ['192.168.1.1'],\n     'username' =&gt; null,\n     'password' =&gt; null,\n]);\n\n$connection-&gt;connect();\n</code></pre>"},{"location":"docs/core/v2/connections/#binding","title":"Binding","text":"<p>Using the connection instance, you can execute a bind request to perform LDAP authentication to see if a username and password is valid.</p> <pre><code>$user = 'cn=user,dc=local,dc=com';\n$password = 'secret';\n\nif ($connection-&gt;auth()-&gt;attempt($user, $password))\n{\n    echo \"Username and password are correct!\";\n}\n</code></pre> <p>Important: After calling the above, the user you have configured in your connection configuration will be rebound to your LDAP server. This is to ensure you can continue to execute LDAP operations underneath a working user during the same request.</p> <p>If you would like to run all further LDAP operations underneath the authenticated user for the duration of the request, pass in <code>true</code> in the third parameter in the <code>attempt()</code> method:</p> <pre><code>$user = 'cn=user,dc=local,dc=com';\n$password = 'secret';\n\nif ($connection-&gt;auth()-&gt;attempt($user, $password, $stayBound = true))\n{\n    echo \"Username and password are correct!\";\n\n    // Run further LDAP operations under this user.\n}\n</code></pre> <p>Important: Binding as the user will not persist LDAP connectivity between requests. PHP is stateless - which means a new LDAP connection is created upon every request to your application. LdapRecord does not and will not store user credentials to persist connectivity.</p>"},{"location":"docs/core/v2/connections/#container","title":"Container","text":"<p>You must add your LDAP connections into the container if you would like to use LdapRecord models. Models pull the connection that they use from this container by their name.</p>"},{"location":"docs/core/v2/connections/#adding-connections","title":"Adding Connections","text":"<pre><code>use LdapRecord\\Container;\nuse LdapRecord\\Connection;\n\n$connection = new Connection(['...']);\n\n$connection-&gt;connect();\n\nContainer::addConnection($connection);\n</code></pre> <p>If you do not call <code>connect</code> on your connection prior to adding it into the <code>Container</code>, it will be connected to automatically when you attempt to retrieve query results.</p> <p>Each connection you add can have it's own name. This is required for connecting to multiple LDAP servers at one time. To set the name of a connection in the container, pass it into the second parameter:</p> <pre><code>Container::addConnection($connection, 'domain-b');\n</code></pre> <p>Without passing in a name, the name of the connection is set to <code>default</code>. Passing in multiple connections without providing a name will overwrite the previously added connection, so be sure to identify them differently if needed:</p> <pre><code>use LdapRecord\\Container;\nuse LdapRecord\\Connection;\n\n$connectionAlpha = new Connection(['...']);\n$connectionBravo = new Connection(['...']);\n\nContainer::addConnection($connectionAlpha);\n\n// This will overwrite $connectionAlpha:\nContainer::addConnection($connectionBravo);\n</code></pre> <p>If you do not define a <code>$connection</code> property inside of your LdapRecord models, they will use your default connection.</p>"},{"location":"docs/core/v2/connections/#getting-connections","title":"Getting Connections","text":"<p>To get the default connection, call the <code>getDefaultConnection</code> method:</p> <pre><code>$connection = Container::getDefaultConnection();\n</code></pre> <p>To get a differently named connection, call the <code>getConnection</code> method:</p> <pre><code>$connection = Container::getConnection('domain-b');\n</code></pre>"},{"location":"docs/core/v2/connections/#setting-default-connection","title":"Setting Default Connection","text":"<p>To set the name of the default connection, call the <code>setDefaultConnection</code> method prior to adding a connection:</p> <pre><code>Container::setDefaultConnection('domain-a');\n\nContainer::addConnection(new Connection(['...']));\n\n// Returns the `domain-a` connection.\n$connection = Container::getDefaultConnection();\n</code></pre>"},{"location":"docs/core/v2/connections/#checking-connection-existence","title":"Checking Connection Existence","text":"<p>To check if a connection exists, call the <code>exists()</code> method on the container instance:</p> <pre><code>if (Container::getInstance()-&gt;exists('domain-b')) {\n    // The 'domain-b' connection exists!\n}\n</code></pre>"},{"location":"docs/core/v2/credits/","title":"Credits","text":"<p>LdapRecord was based heavily on Laravel's fantastic ORM Eloquent which was created by Taylor Otwell. Many of its features and documentation are direct ports to be used for LDAP.</p> <p>Without its battle tested infrastructure already built, this package would not have the stability and usability that was granted from his thousands of hours of hard work, and of course the hundreds to thousands of contributors that has brought continuous improvements to the Laravel framework.</p> <p>If you can, please support Taylor Otwell's work. He has made web development with PHP a fun and exciting experience - without costing developers a dime.</p> <p>I must also mention Chad Sikorra and his library LdapTools. His open source work with LDAP on GitHub and Stackoverflow has helped me tremendously in understanding nuances in the LDAP protocol and Active Directory itself. Without his advanced expertise and knowledge, Adldap2 and LdapRecord would not be here today.</p>"},{"location":"docs/core/v2/events/","title":"Events","text":""},{"location":"docs/core/v2/events/#introduction","title":"Introduction","text":"<p>LdapRecord events provide a method of listening for certain LDAP actions that are called and execute tasks for that specific event.</p> <p>The LdapRecord event dispatcher was actually derived from the Laravel Framework with Broadcasting &amp; Queuing omitted to remove extra dependencies that would be required with implementing those features.</p> <p>If you've worked with Laravel's event system before, this will feel very familiar.</p>"},{"location":"docs/core/v2/events/#registering-listeners","title":"Registering Listeners","text":"<p>Before we get to registering listeners, it's crucial to know that events throughout LdapRecord are fired irrespective of the current connection or provider in use.</p> <p>This means that when using multiple LDAP connections, the same events will be fired. This allows you to set listeners on events that occur for all LDAP connections you utilize.</p> <p>If you are required to determine which events are fired from alternate connections, see below.</p> <p>To register a listener on an event, retrieve the event dispatcher and call the <code>listen()</code> method:</p> <pre><code>$dispatcher = \\LdapRecord\\Container::getEventDispatcher();\n\n$dispatcher-&gt;listen(Binding::class, function (Binding $event) {\n    $event-&gt;connection; // LdapRecord\\Connections\\Ldap instance\n    $event-&gt;username; // 'jdoe@acme.org'\n    $event-&gt;password; // 'super-secret'\n});\n</code></pre> <p>The first argument is the event name you would like to listen for, and the second is either a closure or class name that should handle the event.</p>"},{"location":"docs/core/v2/events/#using-a-class-based-listener","title":"Using a Class Based Listener","text":"<p>When using just a class name, the class must contain a public <code>handle()</code> method that will handle the event.</p> <pre><code>$dispatcher = \\LdapRecord\\Container::getEventDispatcher();\n\n$dispatcher-&gt;listen(Binding::class, MyApp\\BindingEventHandler::class);\n</code></pre> <pre><code>namespace MyApp;\n\nuse LdapRecord\\Auth\\Events\\Binding;\n\nclass BindingEventHandler\n{\n    public function handle(Binding $event)\n    {\n        // Handle the event...\n    }\n}\n</code></pre>"},{"location":"docs/core/v2/events/#model-events","title":"Model Events","text":"<p>Model events are handled the same way as authentication events.</p> <p>Simply call the event dispatcher <code>listen()</code> method with the model event you are wanting to listen for:</p> <pre><code>use LdapRecord\\Container;\nuse LdapRecord\\Models\\Events\\Saving;\n\n$dispatcher = Container::getEventDispatcher();\n\n$dispatcher-&gt;listen(Saving::class, function (Saving $event) {\n    // Returns the model instance being saved,\n    // eg. `LdapRecord\\Models\\Entry`\n    $event-&gt;getModel();\n});\n</code></pre>"},{"location":"docs/core/v2/events/#wildcard-event-listeners","title":"Wildcard Event Listeners","text":"<p>You can register listeners using the <code>*</code> as a wildcard parameter to catch multiple events with the same listener.</p> <p>Wildcard listeners will receive the event name as their first argument, and the entire event data array as their second argument:</p> <pre><code>use LdapRecord\\Container;\n\n$dispatcher = Container::getEventDispatcher();\n\n// Listen for all model events.\n$dispatcher-&gt;listen('LdapRecord\\Models\\Events\\*', function ($eventName, array $data) {\n    // Returns 'LdapRecord\\Models\\Events\\Updating'\n    echo $eventName;\n\n    // Returns [0] =&gt; (object) LdapRecord\\Models\\Events\\Updating;\n    var_dump($data);\n});\n\n$connection = Container::getDefaultConnection();\n\n$user = $connection-&gt;query()-&gt;find('cn=User,dc=local,dc=com');\n\n$user-&gt;company = 'New Company';\n\n$user-&gt;save();\n</code></pre>"},{"location":"docs/core/v2/events/#determining-the-connection","title":"Determining the Connection","text":"<p>If you're using multiple LDAP connections and you require the ability to determine which events belong to a certain connection, you can do so by verifying the host of the LDAP connection.</p> <p>Here's an example:</p> <pre><code>use LdapRecord\\Container;\nuse LdapRecord\\Models\\Events\\Creating;\n\n$dispatcher = Container::getEventDispatcher();\n\n$dispatcher-&gt;listen(Creating::class, function ($event) {\n    $connection = $event-&gt;model-&gt;getConnection();\n\n    $host = $connection-&gt;getHost();\n\n    echo $host; // Displays 'ldap://192.168.1.1:386'\n});\n</code></pre> <p>Example with authentication events:</p> <pre><code>use LdapRecord\\Container;\nuse LdapRecord\\Auth\\Events\\Binding;\n\n$dispatcher = Container::getEventDispatcher();\n\n$dispatcher-&gt;listen(Binding::class, function ($event) {\n    $connection = $event-&gt;connection;\n\n    $host = $connection-&gt;getHost();\n\n    echo $host; // Displays 'ldap://192.168.1.1:386'\n});\n</code></pre>"},{"location":"docs/core/v2/events/#list-of-events","title":"List of Events","text":""},{"location":"docs/core/v2/events/#authentication-events","title":"Authentication Events","text":"<p>There are several events that are fired during initial and subsequent binds to your configured LDAP server. Here is a list of all events that are fired:</p> Event Fired <code>LdapRecord\\Auth\\Events\\Attempting</code>                  When any authentication attempt is called via:                 <ul><li><code>$connection-&gt;auth()-&gt;attempt()</code></li></ul> <code>LdapRecord\\Auth\\Events\\Passed</code>                  When any authentication attempts pass via:                 <ul><li><code>$connection-&gt;auth()-&gt;attempt()</code></li></ul> <code>LdapRecord\\Auth\\Events\\Failed</code>                  When any authentication attempts fail via:                 <ul> <li><code>$connection-&gt;auth()-&gt;attempt()</code></li> <li><code>$connection-&gt;auth()-&gt;bind()</code></li> </ul> <code>LdapRecord\\Auth\\Events\\Binding</code>                  When any LDAP bind attempts occur via:                 <ul> <li><code>$connection-&gt;auth()-&gt;attempt()</code></li> <li><code>$connection-&gt;auth()-&gt;bind()</code></li> </ul> <code>LdapRecord\\Auth\\Events\\Bound</code>                  When any LDAP bind attempts are successful via:                 <ul> <li><code>$connection-&gt;auth()-&gt;attempt()</code></li> <li><code>$connection-&gt;auth()-&gt;bind()</code></li> </ul>"},{"location":"docs/core/v2/events/#model-events_1","title":"Model Events","text":"<p>There are several events that are fired during the creation, updating and deleting of all models.</p> <p>Here is a list of all events that are fired:</p> Event Fired <code>LdapRecord\\Models\\Events\\Saving</code>                  When a model is in the process of being saved via:                 <ul> <li><code>$model-&gt;save()</code></li> </ul> <code>LdapRecord\\Models\\Events\\Saved</code>                  When a model has been successfully saved via:                 <ul> <li><code>$model-&gt;save()</code></li> </ul> <code>LdapRecord\\Models\\Events\\Creating</code>                  When a model is being created via:                 <ul> <li><code>$model-&gt;save()</code></li> <li><code>$model-&gt;create()</code></li> </ul> <code>LdapRecord\\Models\\Events\\Created</code>                  When a model has been successfully created via:                 <ul> <li><code>$model-&gt;save()</code></li> <li><code>$model-&gt;create()</code></li> </ul> <code>LdapRecord\\Models\\Events\\Updating</code>                  When a model is being updated via:                 <ul> <li><code>$model-&gt;save()</code></li> <li><code>$model-&gt;update()</code></li> </ul> <code>LdapRecord\\Models\\Events\\Updated</code>                  When a model has been successfully updated via:                 <ul> <li><code>$model-&gt;save()</code></li> <li><code>$model-&gt;update()</code></li> </ul> <code>LdapRecord\\Models\\Events\\Deleting</code>                  When a model is being deleted via:                 <ul> <li><code>$model-&gt;delete()</code></li> </ul> <code>LdapRecord\\Models\\Events\\Deleted</code>                  When a model has been successfully deleted via:                 <ul> <li><code>$model-&gt;delete()</code></li> </ul>"},{"location":"docs/core/v2/filter-parser/","title":"Filter Parser","text":""},{"location":"docs/core/v2/filter-parser/#introduction","title":"Introduction","text":"<p>LdapRecord comes with a built-in LDAP filter parser, giving you the ability to read the nodes within to extract all of their attributes.</p> <p>Important: This feature is available as of v2.13.0.</p> <p>Let's start with a small example by parsing the filter <code>(cn=Steve)</code>:</p> <pre><code>use LdapRecord\\Query\\Filter\\Parser;\n\n// array: [\n//  0 =&gt; LdapRecord\\Query\\Filter\\ConditionNode\n// ]\n$nodes = Parser::parse('(cn=Steve)');\n\n$condition = $nodes[0];\n\n$condition-&gt;getAttribute(); // \"cn\"\n$condition-&gt;getOperator(); // \"=\"\n$condition-&gt;getValue(); // \"Steve\"\n</code></pre> <p>When group filters have been detected, you will recieve a <code>GroupNode</code> instead.</p> <p>With a <code>GroupNode</code>, you can retrieve all nested nodes via the <code>getNodes()</code> method:</p> <pre><code>// array: [\n//  0 =&gt; LdapRecord\\Query\\Filter\\GroupNode\n// ]\n$nodes = Parser::parse('(&amp;(cn=Steve)(sn=Bauman))');\n\n$group = $nodes[0];\n\n$group-&gt;getOperator(); // \"&amp;\"\n\n// array: [\n//  0 =&gt; LdapRecord\\Query\\Filter\\ConditionNode\n//  1 =&gt; LdapRecord\\Query\\Filter\\ConditionNode\n// ]\n$group-&gt;getNodes();\n</code></pre> <p>Important: The parser will always return an array of <code>Node</code> instances.</p>"},{"location":"docs/core/v2/filter-parser/#parsing-from-user-input","title":"Parsing From User Input","text":"<p>If you're accepting user input input to parse, make sure you use a try/catch block to catch any potential <code>ParserException</code> that may be thrown:</p> <pre><code>$input = '(&amp;(cn=Steve)(sn=Bauman))(mail=sbauman@local.com';\n\ntry {\n    $nodes = Parser::parse($input);\n} catch (\\LdapRecord\\Query\\Filter\\ParserException $e) {\n    $e-&gt;getMessage(); // \"Unclosed filter group. Missing \")\" parenthesis\"\n}\n</code></pre>"},{"location":"docs/core/v2/filter-parser/#parsing-bad-filters","title":"Parsing Bad Filters","text":"<p>The filter parser should not be considered as a filter validator. Filters that would otherwise fail to execute on an LDAP server can still be parsed.</p> <p>For example, this filter that would otherwise fail due to not being enclosed by a surrounding and/or (<code>&amp;</code> / <code>|</code>) statement, can still be parsed by the filter parser:</p> <pre><code>// array: [\n//  0 =&gt; LdapRecord\\Query\\Filter\\ConditionNode\n//  1 =&gt; LdapRecord\\Query\\Filter\\ConditionNode\n// ]\n$result = Parser::parse('(cn=Steve)(sn=Bauman)');\n</code></pre> <p>As you can see, an array of nodes is returned, allowing you to parse each nested node individually.</p>"},{"location":"docs/core/v2/filter-parser/#assembling-nodes","title":"Assembling Nodes","text":"<p>The filter parser can also re-assemble nodes into their string based format. This can help when you want to process a filter to remove any unneeded spacing:</p> <pre><code>$nodes = Parser::parse('(&amp;  (cn=Steve   ) ( sn= Bauman) )  ');\n\n// Returns: \"(&amp;(cn=Steve)(sn= Bauman))\"\n$filter = Parser::assemble($nodes);\n</code></pre> <p>Important: As you can see above, the parser will not trim spaces inside of condition values, in order to preserve the true value.</p>"},{"location":"docs/core/v2/filter-parser/#display-filter-tree","title":"Display Filter Tree","text":"<p>If you're looking to display a tree of parsed LDAP filters, here's a recursive function to get you started:</p> <pre><code>use LdapRecord\\Query\\Filter\\Parser;\nuse LdapRecord\\Query\\Filter\\GroupNode;\nuse LdapRecord\\Query\\Filter\\ConditionNode;\n\nfunction tree($node)\n{\n    if ($node instanceof GroupNode) {\n        return \"&lt;ul&gt;\n            &lt;li&gt;\n                {$node-&gt;getOperator()}\n\n                &lt;ul&gt;\" . tree($node-&gt;getNodes()) . \"&lt;/ul&gt;\n            &lt;/li&gt;\n        &lt;/ul&gt;\";\n    }\n\n    if ($node instanceof ConditionNode) {\n        return \"&lt;li&gt;{$node-&gt;getAttribute()} {$node-&gt;getOperator()} {$node-&gt;getValue()}&lt;/li&gt;\";\n    }\n\n    if (is_array($node)) {\n        return array_reduce($node, function ($carry, $node) {\n            return $carry .= tree($node);\n        });\n    }\n};\n\n$input = '(|(&amp;(cn=Steve)(sn=Bauman))(mail=sbauman@local.com))';\n\n$group = Parser::parse($input);\n\necho tree($group);\n\n// Result:\n// &lt;ul&gt;\n//   &lt;li&gt;\n//       |\n//       &lt;ul&gt;\n//         &lt;ul&gt;\n//             &lt;li&gt;\n//               &amp;\n//               &lt;ul&gt;\n//                   &lt;li&gt;cn = Steve&lt;/li&gt;\n//                   &lt;li&gt;sn = Bauman&lt;/li&gt;\n//               &lt;/ul&gt;\n//             &lt;/li&gt;\n//         &lt;/ul&gt;\n//       &lt;/ul&gt;\n//   &lt;/li&gt;\n// &lt;/ul&gt;\n</code></pre>"},{"location":"docs/core/v2/filter-parser/#available-methods","title":"Available Methods","text":""},{"location":"docs/core/v2/filter-parser/#ldaprecordqueryfilterparser","title":"<code>LdapRecord\\Query\\Filter\\Parser</code>","text":"<pre><code>Parser::parse($filter); // (ConditionNode|GroupNode)[]\n\nParser::assemble($nodes); // string\n</code></pre>"},{"location":"docs/core/v2/filter-parser/#ldaprecordqueryfilterconditionnode","title":"<code>LdapRecord\\Query\\Filter\\ConditionNode</code>","text":"<pre><code>$condition-&gt;getAttribute(); // string\n$condition-&gt;getOperator(); // string\n$condition-&gt;getValue(); // string\n$condition-&gt;getRaw(); // string\n</code></pre>"},{"location":"docs/core/v2/filter-parser/#ldaprecordqueryfiltergroupnode","title":"<code>LdapRecord\\Query\\Filter\\GroupNode</code>","text":"<pre><code>$group-&gt;getOperator(); // string (\"&amp;\", \"|\", \"!\")\n$group-&gt;getNodes(); // (ConditionNode|GroupNode)[]\n$group-&gt;getRaw(); // string\n</code></pre>"},{"location":"docs/core/v2/helpers/","title":"Helpers","text":"<p>LdapRecord provides some helper classes and utility functions you may find useful in your application.</p>"},{"location":"docs/core/v2/helpers/#distinguished-names","title":"Distinguished Names","text":"<pre><code>use LdapRecord\\Models\\Attributes\\DistinguishedName;\n</code></pre> <p>The <code>DistinguishedName</code> utility class allows you to parse Distinguished Name's, and perform various operations.</p> <p>Important: All comparison based operations are case insensitive.</p>"},{"location":"docs/core/v2/helpers/#make","title":"<code>make</code>","text":"<p>Make a new Distinguished Name instance:</p> <pre><code>$dn = DistinguishedName::make('cn=John Doe,dc=local,dc=com');\n</code></pre>"},{"location":"docs/core/v2/helpers/#build","title":"<code>build</code>","text":"<p>Make a new Distinguished Name Builder instance:</p> <pre><code>// Pre-populate a builder:\n$builder = DistinguishedName::build('cn=John Doe,dc=local,dc=com');\n\n// Start from scratch:\n$builder = DistinguishedName::build();\n</code></pre>"},{"location":"docs/core/v2/helpers/#of","title":"<code>of</code>","text":"<p>Alias of the <code>build</code> method:</p> <pre><code>// Pre-populate a builder:\n$builder = DistinguishedName::of('cn=John Doe,dc=local,dc=com');\n\n// Start from scratch:\n$builder = DistinguishedName::of();\n</code></pre>"},{"location":"docs/core/v2/helpers/#isvalid","title":"<code>isValid</code>","text":"<p>Determine if the given string is a valid Distinguished Name:</p> <pre><code>// true\nDistinguishedName::isValid('cn=John Doe,dc=local,dc=com');\n\n// true\nDistinguishedName::isValid('cn=John');\n\n// false\nDistinguishedName::isValid('String containing rdn cn=John');\n\n// false\nDistinguishedName::isValid(null);\n\n// false\nDistinguishedName::isValid('');\n</code></pre>"},{"location":"docs/core/v2/helpers/#get","title":"<code>get</code>","text":"<p>Get the full value of the Distinguished Name:</p> <pre><code>$dn = DistinguishedName::make('cn=John Doe,dc=local,dc=com');\n\n// \"cn=John Doe,dc=local,dc=com\"\n$dn-&gt;get();\n</code></pre>"},{"location":"docs/core/v2/helpers/#set","title":"<code>set</code>","text":"<p>Set the value of the Distinguished Name:</p> <pre><code>$dn = DistinguishedName::make('cn=other,dc=local,dc=com');\n\n$dn-&gt;set('cn=John Doe,dc=local,dc=com');\n\n// \"cn=John Doe,dc=local,dc=com\"\n$dn-&gt;get();\n</code></pre>"},{"location":"docs/core/v2/helpers/#explode","title":"<code>explode</code>","text":"<p>Explode a Distinguished Name string:</p> <pre><code>$dn = DistinguishedName::explode('cn=john doe,dc=local,dc=com');\n\n// [\n//   \"cn=john doe\",\n//   \"dc=local\",\n//   \"dc=com\",\n// ]\nvar_dump($dn);\n</code></pre>"},{"location":"docs/core/v2/helpers/#exploderdn","title":"<code>explodeRdn</code>","text":"<p>Explode a Relative Distinguished Name string:</p> <pre><code>[$attribute, $value] = DistinguishedName::explodeRdn('cn=john doe');\n\n// \"cn\"\necho $attribute;\n\n// \"john doe\"\necho $value;\n</code></pre>"},{"location":"docs/core/v2/helpers/#makerdn","title":"<code>makeRdn</code>","text":"<p>Make a Relative Distinguished Name string:</p> <pre><code>$rdn = DistinguishedName::makeRdn(['cn', 'john doe']);\n\n// \"cn=john doe\"\necho $rdn;\n</code></pre>"},{"location":"docs/core/v2/helpers/#unescape","title":"<code>unescape</code>","text":"<pre><code>$unescaped = DistinguishedName::unescape('\\6a\\6f\\68\\6e\\2c\\64\\6f\\65');\n\n// \"doe, john\"\necho $unescaped;\n</code></pre>"},{"location":"docs/core/v2/helpers/#name","title":"<code>name</code>","text":"<p>Get the Relative Distinguished Name's value:</p> <pre><code>$dn = DistinguishedName::make('cn=John Doe,dc=local,dc=com');\n\n// \"John Doe\"\n$dn-&gt;name();\n</code></pre>"},{"location":"docs/core/v2/helpers/#head","title":"<code>head</code>","text":"<p>Get the Relative Distinguished Name's attribute:</p> <pre><code>$dn = DistinguishedName::make('cn=John Doe,dc=local,dc=com');\n\n// \"cn\"\n$dn-&gt;head();\n</code></pre>"},{"location":"docs/core/v2/helpers/#relative","title":"<code>relative</code>","text":"<p>Get the Relative Distinguished Name:</p> <pre><code>$dn = DistinguishedName::make('cn=John Doe,dc=local,dc=com');\n\n// \"cn=John Doe\"\n$dn-&gt;relative();\n</code></pre>"},{"location":"docs/core/v2/helpers/#parent","title":"<code>parent</code>","text":"<p>Get the parent Distinguished Name:</p> <pre><code>$dn = DistinguishedName::make('cn=John Doe,dc=local,dc=com');\n\n// \"dc=local,dc=com\"\n$dn-&gt;parent();\n</code></pre>"},{"location":"docs/core/v2/helpers/#values","title":"<code>values</code>","text":"<p>Get the values of each DN component:</p> <pre><code>$dn = DistinguishedName::make('cn=John Doe,dc=local,dc=com');\n\n// array:3 [\n//  0 =&gt; \"John Doe\"\n//  1 =&gt; \"local\"\n//  2 =&gt; \"com\"\n// ]\n$dn-&gt;values();\n</code></pre>"},{"location":"docs/core/v2/helpers/#components","title":"<code>components</code>","text":"<p>Get the Relative Distinguished Name's of each DN component:</p> <pre><code>$dn = DistinguishedName::make('cn=John Doe,dc=local,dc=com');\n\n// array:3 [\n//  0 =&gt; \"cn=John Doe\"\n//  1 =&gt; \"dc=local\"\n//  2 =&gt; \"dc=com\"\n// ]\n$dn-&gt;components();\n</code></pre>"},{"location":"docs/core/v2/helpers/#assoc","title":"<code>assoc</code>","text":"<p>Get an associative array of the Distinguished Name component's, grouping them using their attribute name:</p> <pre><code>$dn = DistinguishedName::make('cn=John Doe,dc=local,dc=com');\n\n// array:2 [\n//  \"cn\" =&gt; array:1 [\n//    0 =&gt; \"John Doe\"\n//  ]\n//  \"dc\" =&gt; array:2 [\n//    0 =&gt; \"local\"\n//    1 =&gt; \"com\"\n//  ]\n// ]\n$dn-&gt;assoc();\n</code></pre>"},{"location":"docs/core/v2/helpers/#multi","title":"<code>multi</code>","text":"<p>Split the Relative Distinguished Name's of each DN component into an associative array:</p> <pre><code>$dn = DistinguishedName::make('cn=John Doe,dc=local,dc=com');\n\n// array: 3 [\n//   0 =&gt; ['cn', 'John'],\n//   1 =&gt; ['ou', 'local'],\n//   2 =&gt; ['dc', 'local'],\n// ]\n$dn-&gt;multi();\n</code></pre>"},{"location":"docs/core/v2/helpers/#isempty","title":"<code>isEmpty</code>","text":"<p>Determine if the Distinguished Name has any values:</p> <pre><code>// false\nDistinguishedName::make('cn=John Doe,dc=local,dc=com')-&gt;isEmpty();\n\n// false\nDistinguishedName::make('cn=John Doe')-&gt;isEmpty();\n\n// true\nDistinguishedName::make(null)-&gt;isEmpty();\n\n// true\nDistinguishedName::make('')-&gt;isEmpty();\n</code></pre>"},{"location":"docs/core/v2/helpers/#isparentof","title":"<code>isParentOf</code>","text":"<p>Determine if the Distinguished Name is a direct parent of the given child:</p> <pre><code>$dn = DistinguishedName::make('ou=users,dc=local,dc=com');\n\n// false\n$dn-&gt;isParentOf(\n  DistinguishedName::make('ou=accounting,dc=local,dc=com')\n);\n\n// true\n$dn-&gt;isParentOf(\n  DistinguishedName::make('ou=office,ou=users,dc=local,dc=com')\n);\n</code></pre>"},{"location":"docs/core/v2/helpers/#ischildof","title":"<code>isChildOf</code>","text":"<p>Determine if the Distinguished Name is a direct child of the given parent:</p> <pre><code>$dn = DistinguishedName::make('cn=John Doe,dc=local,dc=com');\n\n// false\n$dn-&gt;isChildOf(\n  DistinguishedName::make('ou=users,dc=local,dc=com')\n);\n\n// true\n$dn-&gt;isChildOf(\n  DistinguishedName::make('dc=local,dc=com')\n);\n</code></pre>"},{"location":"docs/core/v2/helpers/#isancestorof","title":"<code>isAncestorOf</code>","text":"<p>Determine if the Distinguished Name is an ancestor of the given descendant/child:</p> <pre><code>$dn = DistinguishedName::make('ou=users,dc=local,dc=com');\n\n// false\n$dn-&gt;isAncestorOf(\n  DistinguishedName::make('dc=local,dc=com')\n);\n\n// true\n$dn-&gt;isAncestorOf(\n  DistinguishedName::make('ou=accounting,ou=users,dc=local,dc=com')\n);\n\n// true\n$dn-&gt;isAncestorOf(\n  DistinguishedName::make('ou=other,ou=accounting,ou=users,dc=local,dc=com')\n);\n</code></pre>"},{"location":"docs/core/v2/helpers/#isdescendantof","title":"<code>isDescendantOf</code>","text":"<p>Determine if the Distinguished Name is an descendant of the given ancestor/parent:</p> <pre><code>$dn = DistinguishedName::make('cn=John Doe,ou=accounting,ou=users,dc=local,dc=com')\n\n// false\n$dn-&gt;isDescendantOf(\n  DistinguishedName::make('ou=admin,dc=local,dc=com')\n);\n\n// true\n$dn-&gt;isDescendantOf(\n  DistinguishedName::make('ou=users,dc=local,dc=com')\n);\n\n// true\n$dn-&gt;isDescendantOf(\n  DistinguishedName::make('ou=accounting,ou=users,dc=local,dc=com')\n);\n</code></pre>"},{"location":"docs/core/v2/helpers/#distinguished-name-building","title":"Distinguished Name Building","text":"<p>The Distinguished Name Builder allows you to build and transform Distinguished Names.</p> <pre><code>use LdapRecord\\Models\\Attributes\\DistinguishedNameBuilder;\n</code></pre> <p>Important:</p> <ul> <li>All transformation methods can be chained.</li> <li>Values given to the <code>prepend</code> and <code>append</code> are escaped.</li> <li>Missing method calls are forwarded to a <code>DistinguishedName</code> instance.</li> </ul>"},{"location":"docs/core/v2/helpers/#components_1","title":"<code>components</code>","text":"<p>Get all of the components of the DN.</p> <pre><code>$dn = DistinguishedName::build('cn=john doe,ou=users,dc=local,dc=com');\n\n// array:4 [\n//   0 =&gt; array:2 [\n//     0 =&gt; \"cn\"\n//     1 =&gt; \"john doe\"\n//   ]\n//   1 =&gt; array:2 [\n//     0 =&gt; \"ou\"\n//     1 =&gt; \"users\"\n//   ]\n//   2 =&gt; array:2 [\n//     0 =&gt; \"dc\"\n//     1 =&gt; \"local\"\n//   ]\n//   3 =&gt; array:2 [\n//     0 =&gt; \"dc\"\n//     1 =&gt; \"com\"\n//   ]\n// ]\n$dn-&gt;components();\n</code></pre> <p>Get the components of a particular type:</p> <pre><code>$dn = DistinguishedName::build('cn=john doe,ou=users,dc=local,dc=com');\n\n// array:2 [\n//   0 =&gt; array:2 [\n//     0 =&gt; \"dc\"\n//     1 =&gt; \"local\"\n//   ]\n//   1 =&gt; array:2 [\n//     0 =&gt; \"dc\"\n//     1 =&gt; \"com\"\n//   ]\n// ]\n$dn-&gt;components('dc');\n</code></pre>"},{"location":"docs/core/v2/helpers/#prepend","title":"<code>prepend</code>","text":"<p>Prepend an RDN onto the DN.</p> <pre><code>$dn = DistinguishedName::build('dc=com');\n\n// Use an attribute and value:\n$dn-&gt;prepend('dc', 'local');\n\n// Use an RDN:\n$dn-&gt;prepend('cn=john');\n\n// \"cn=john,dc=local,dc=com\"\n$dn-&gt;get();\n</code></pre>"},{"location":"docs/core/v2/helpers/#append","title":"<code>append</code>","text":"<p>Append an RDN onto the DN.</p> <pre><code>$dn = DistinguishedName::build('cn=john');\n\n// Use an attribute and value:\n$dn-&gt;append('dc', 'local');\n\n// Use an RDN:\n$dn-&gt;append('dc=com');\n\n// \"cn=john,dc=local,dc=com\"\n$dn-&gt;get();\n</code></pre>"},{"location":"docs/core/v2/helpers/#pop","title":"<code>pop</code>","text":"<p>Pop an RDN off of the end of the DN.</p> <pre><code>// \"cn=john,dc=local\"\nDistinguishedName::build('cn=john,dc=local,dc=com')\n  -&gt;pop()\n  -&gt;get();\n\n// \"cn=john\"\nDistinguishedName::build('cn=john,dc=local,dc=com')\n  -&gt;pop(2)\n  -&gt;get();\n\n// \"cn=john\"\nDistinguishedName::build('cn=john,dc=local,dc=com')\n  -&gt;pop(2, $removed)\n  -&gt;get();\n\n// array:2 [\n//   0 =&gt; \"dc=local\"\n//   1 =&gt; \"dc=com\"\n// ]\nvar_dump($removed);\n</code></pre>"},{"location":"docs/core/v2/helpers/#shift","title":"<code>shift</code>","text":"<p>Shift an RDN off of the beginning of the DN.</p> <pre><code>// \"dc=local,dc=com\"\nDistinguishedName::build('cn=john,dc=local,dc=com')\n  -&gt;shift()\n  -&gt;get();\n\n// \"dc=com\"\nDistinguishedName::build('cn=john,dc=local,dc=com')\n  -&gt;shift(2)\n  -&gt;get();\n\n// \"dc=com\"\nDistinguishedName::build('cn=john,dc=local,dc=com')\n  -&gt;shift(2, $removed)\n  -&gt;get();\n\n// array:2 [\n//   0 =&gt; \"cn=john\"\n//   1 =&gt; \"dc=local\"\n// ]\nvar_dump($removed);\n</code></pre>"},{"location":"docs/core/v2/helpers/#reverse","title":"<code>reverse</code>","text":"<p>Whether to output the DN in reverse.</p> <pre><code>// \"dc=com,dc=local,cn=john\"\nDistinguishedName::build('cn=john,dc=local,dc=com')\n  -&gt;reverse()\n  -&gt;get();\n</code></pre>"},{"location":"docs/core/v2/helpers/#long-chain-example","title":"Long Chain Example","text":"<pre><code>$dn = DistinguishedName::of('cn=John Doe,dc=local,dc=com')\n    -&gt;shift(1, $removed)\n    -&gt;prepend('ou', 'users')\n    -&gt;prepend($removed)\n    -&gt;pop(1, $removed)\n    -&gt;append('dc', 'org')\n    -&gt;append($removed)\n    -&gt;get();\n\n// \"cn=John Doe,ou=users,dc=local,dc=org,dc=com\"\necho $dn;\n</code></pre>"},{"location":"docs/core/v2/helpers/#passwords","title":"Passwords","text":"<pre><code>use LdapRecord\\Models\\Attributes\\Password;\n</code></pre> <p>The Password helper allows you to create hashed passwords, as well as encode them for transmission to your LDAP server.</p> <p>Important: You do not need to use any of these utilities when connecting to an Active Directory server. Password encoding is done for you with the included <code>User</code> model.</p>"},{"location":"docs/core/v2/helpers/#encode","title":"<code>encode</code>","text":"<p>Make an encoded password for transmission over LDAP.</p> <pre><code>// \"\\x00s\\x00e\\x00c\\x00r\\x00e\\x00t\\x00\"\\x00\"\nPassword::encode('secret');\n</code></pre>"},{"location":"docs/core/v2/helpers/#smd5","title":"<code>smd5</code>","text":"<p>Make a salted md5 password.</p> <pre><code>// \"{SMD5}i3f4A6FAN0MDFaaZU23fu8FcHw4=\"\nPassword::smd5('secret');\n\n// \"{SMD5}mc0uWpXVVe5747A4pKhGJXNhbHQ=\"\nPassword::smd5('secret', 'salt');\n</code></pre>"},{"location":"docs/core/v2/helpers/#ssha","title":"<code>ssha</code>","text":"<p>Make a salted SHA password.</p> <pre><code>// \"{SSHA}L8EHaF8fyBVlTrvHbdE5/7MnCN1sR4az\"\nPassword::ssha('secret');\n\n// \"{SSHA}gVK8WC9YyFT1gMsQHTGCgT3sSv5zYWx0\"\nPassword::ssha('secret', 'salt');\n</code></pre>"},{"location":"docs/core/v2/helpers/#ssha256","title":"<code>ssha256</code>","text":"<p>Make a salted SSHA256 password.</p> <pre><code>// \"{SSHA256}f30+bbvnM24awEIG2iLZ12TcsjFT7e+OP3/fFmmqMZNdQRP/\"\nPassword::ssha256('secret');\n\n// \"{SSHA256}+E+iFJ27Yu1ODPH1UNKUmzOmUT06dwfghQJRHHnMsO5zYWx0\"\nPassword::ssha256('secret', 'salt');\n</code></pre>"},{"location":"docs/core/v2/helpers/#ssha384","title":"<code>ssha384</code>","text":"<p>Make a salted SSHA384 password.</p> <pre><code>// \"{SSHA384}x57dAvYd0LnqXDLxgmCqgrR585r2Ej4Lyxm+SQqY2fr1yzgIGz/t48MlKwEy+96jeShdcg==\"\nPassword::ssha384('secret');\n\n// \"{SSHA384}BPdC1qPVnOtOWlZBhlNvMSsThLk7gG0moXRB2Ulg+UGkFToChXZ4jNzGfK5Uh3Otc2FsdA==\"\nPassword::ssha384('secret', 'salt');\n</code></pre>"},{"location":"docs/core/v2/helpers/#ssha512","title":"<code>ssha512</code>","text":"<p>Make a salted SSHA512 password.</p> <pre><code>// \"{SSHA512}udY8kkohMXfh4YKmrMWbXk1CWf2xpzarDAOLTPBezod5JSwbgMvgCAjeJiYvmfrsfyHlVqc/4nmfaH7Hlvumo/cB2Jg=\"\nPassword::ssha512('secret');\n\n// \"{SSHA512}E491yrR9AdCoE7rbOPYS3EZgSuZpVE65AD9xko08s6floNesY/Zpe9zMVvLix4S2FiQSJ99RIkNvhHomNO9uL3NhbHQ=\"\nPassword::ssha512('secret', 'salt');\n</code></pre>"},{"location":"docs/core/v2/helpers/#sha","title":"<code>sha</code>","text":"<p>Make a non-salted SHA password.</p> <pre><code>// \"{SHA}5en6G6MezRroT3XKqkdPOmY/BfQ=\"\nPassword::sha('secret');\n</code></pre>"},{"location":"docs/core/v2/helpers/#sha256","title":"<code>sha256</code>","text":"<p>Make a non-salted SHA256 password.</p> <pre><code>// \"{SHA256}K7gNU3sdo+OL0wNhqoVWhr3g6s1xYv72ol/pe/Unols=\"\nPassword::sha256('secret');\n</code></pre>"},{"location":"docs/core/v2/helpers/#sha384","title":"<code>sha384</code>","text":"<p>Make a non-salted SHA384 password.</p> <pre><code>// \"{SHA384}WKd1ukESvjAFrkQHznV9iP2nHUBJe7gCbsrFTU4//HIyzo3jq1rLMK45dg/ufFPt\"\nPassword::sha384('secret');\n</code></pre>"},{"location":"docs/core/v2/helpers/#sha512","title":"<code>sha512</code>","text":"<p>Make a non-salted SHA512 password.</p> <pre><code>// \"SHA512}vSsar3708Jvp9Szi2NWZZ02Bqp1qRCFpbcTZPdBhnWgs5WtNZKnvCXdhztmeD2cmW192CF5bDufKRpayrW/isg==\"\nPassword::sha512('secret');\n</code></pre>"},{"location":"docs/core/v2/helpers/#md5","title":"<code>md5</code>","text":"<p>Make a non-salted md5 password.</p> <pre><code>// \"{MD5}Xr4ilOzQ4PCOq3aQ0qbuaQ==\"\nPassword::md5('secret');\n</code></pre>"},{"location":"docs/core/v2/helpers/#md5crypt","title":"<code>md5Crypt</code>","text":"<p>Crypt password with an MD5 salt.</p> <pre><code>// \"{CRYPT}$1$hYstY89O$EHfOOWhp4qJ0.lDJ2owwb.\"\nPassword::md5Crypt('secret');\n\n// \"{CRYPT}saHW9GdxihkGQ\"\nPassword::md5Crypt('secret', 'salt');\n</code></pre>"},{"location":"docs/core/v2/helpers/#sha256crypt","title":"<code>sha256Crypt</code>","text":"<p>Crypt password with a SHA256 salt.</p> <pre><code>// \"{CRYPT}$5$aRmWk3iiWxTdJ$iTy8QAfarSnilA3nM6SSH67qB2VpZiRbxXkA4FddfdD\"\nPassword::sha256Crypt('secret');\n\n// \"{CRYPT}saHW9GdxihkGQ\"\nPassword::sha256Crypt('secret', 'salt');\n</code></pre>"},{"location":"docs/core/v2/helpers/#sha512crypt","title":"<code>sha512Crypt</code>","text":"<p>Crypt a password with a SHA512 salt.</p> <pre><code>// \"{CRYPT}$6$GcGAYPV4NIvbC$odXh0cW4xldt2YUTqCaxjwFvRjiLA4CyDsQYaY1zLEfB4XXzsq6MFru9TAMbzR8hs0nJjmi5fFHrAB9hmaFF..\"\nPassword::sha512Crypt('secret');\n\n// \"{CRYPT}saHW9GdxihkGQ\"\nPassword::sha512Crypt('secret', 'salt');\n</code></pre>"},{"location":"docs/core/v2/helpers/#utilities","title":"Utilities","text":"<pre><code>use LdapRecord\\Utilities;\n</code></pre> <p>Provides methods for various LDAP related tasks.</p>"},{"location":"docs/core/v2/helpers/#explodedn","title":"<code>explodeDn</code>","text":"<p>Converts a DN string into an array of RDNs. Returns <code>false</code> if an invalid DN is given.</p> <pre><code>// array:3 [\n//   0 =&gt; \"john\"\n//   1 =&gt; \"local\"\n//   2 =&gt; \"com\"\n// ]\nUtilities::explodeDn('cn=john,dc=local,dc=com');\n\n// array:3 [\n//   0 =&gt; \"cn=john\"\n//   1 =&gt; \"dc=local\"\n//   2 =&gt; \"dc=com\"\n// ]\nUtilities::explodeDn('cn=john,dc=local,dc=com', $removeAttributePrefixes = false);\n</code></pre>"},{"location":"docs/core/v2/helpers/#unescape_1","title":"<code>unescape</code>","text":"<p>Un-escapes a hexadecimal string into its original string representation.</p> <pre><code>$value = \"\\44\\6f\\65\\2c\\20\\4a\\6f\\68\\6e\"\n\n// \"Doe, John\"\nUtilities::unescape($value);\n</code></pre>"},{"location":"docs/core/v2/helpers/#binarysidtostring","title":"<code>binarySidToString</code>","text":"<p>Convert a binary SID to a string SID.</p> <pre><code>Utilities::binarySidToString($binarySID);\n</code></pre>"},{"location":"docs/core/v2/helpers/#binaryguidtostring","title":"<code>binaryGuidToString</code>","text":"<p>Convert a binary GUID to a string GUID.</p> <pre><code>Utilities::binaryGuidToString($binaryGUID);\n</code></pre>"},{"location":"docs/core/v2/helpers/#stringguidtohex","title":"<code>stringGuidToHex</code>","text":"<p>Converts a string GUID to it's hex variant.</p> <pre><code>$guid = '270db4d0-249d-46a7-9cc5-eb695d9af9ac';\n\n// \"\\d0\\b4\\0d\\27\\9d\\24\\a7\\46\\9c\\c5\\eb\\69\\5d\\9a\\f9\\ac\"\nUtilities::stringGuidToHex($guid);\n</code></pre>"},{"location":"docs/core/v2/helpers/#convertwindowstimetounixtime","title":"<code>convertWindowsTimeToUnixTime</code>","text":"<p>Round a Windows timestamp down to seconds and remove the seconds between 1601-01-01 and 1970-01-01.</p> <pre><code>Utilities::convertWindowsTimeToUnixTime($windowsTimestamp);\n</code></pre>"},{"location":"docs/core/v2/helpers/#convertunixtimetowindowstime","title":"<code>convertUnixTimeToWindowsTime</code>","text":"<p>Convert a Unix timestamp to Windows timestamp.</p> <pre><code>Utilities::convertUnixTimeToWindowsTime($unixTimestamp);\n</code></pre>"},{"location":"docs/core/v2/helpers/#isvalidsid","title":"<code>isValidSid</code>","text":"<p>Validates that the inserted string is an object SID.</p> <pre><code>// Returns \"true\"\nUtilities::isValidSid('S-1-5-21-362381101-336104434-3030082-101');\nUtilities::isValidSid('S-1-5-21-362381101-336104434');\nUtilities::isValidSid('S-1-5-21-362381101');\nUtilities::isValidSid('S-1-5-21');\nUtilities::isValidSid('S-1-5');\n\n// Returns \"false\"\nUtilities::isValidSid('Invalid SID');\nUtilities::isValidSid('S-1');\nUtilities::isValidSid('');\n</code></pre>"},{"location":"docs/core/v2/helpers/#isvalidguid","title":"<code>isValidGuid</code>","text":"<p>Validates that the inserted string is an object GUID.</p> <pre><code>// Returns \"true\"\nUtilities::isValidGuid('59e5e143-a50e-41a9-bf2b-badee699a577');\nUtilities::isValidGuid('8be90b30-0bbb-4638-b468-7aaeb32c74f9');\nUtilities::isValidGuid('17bab266-05ac-4e30-9fad-1c7093e4dd83');\n\n// Returns \"false\"\nUtilities::isValidGuid('Invalid GUID');\nUtilities::isValidGuid('17bab266-05ac-4e30-9fad');\nUtilities::isValidGuid('');\n</code></pre>"},{"location":"docs/core/v2/installation/","title":"Installation","text":"<p>LdapRecord requires the following:</p> Requirements PHP &gt;= 7.3 PHP LDAP extension enabled An LDAP server (Active Directory, OpenLDAP, FreeIPA etc.) <p>LdapRecord uses Composer for installation.</p> <p>After installing Composer, run the following command in the root directory of your project:</p> <pre><code>composer require directorytree/ldaprecord\n</code></pre> <p>If your application doesn't already require Composer's autoload, you will need to do it manually.</p> <p>Insert the following line at the top of your projects PHP script (usually <code>index.php</code>):</p> <pre><code>require __DIR__ . '/vendor/autoload.php';\n</code></pre>"},{"location":"docs/core/v2/license/","title":"License","text":"<p>LdapRecord is open-sourced software licensed under the MIT license.</p>"},{"location":"docs/core/v2/logging/","title":"Logging","text":"<p>LdapRecord includes an implementation of PSR's widely supported Logger interface.</p> <p>By default, all of LdapRecord's events will call the logger you have set to utilize.</p> <p>LdapRecord does not include a file / text logger. You must implement your own.</p>"},{"location":"docs/core/v2/logging/#registering-enabling-a-logger","title":"Registering &amp; Enabling a Logger","text":"<p>To register a logger call <code>LdapRecord\\Container::setLogger()</code>. The logger must implement the <code>Psr\\Log\\LoggerInterface</code>.</p> <pre><code>\\LdapRecord\\Container::setLogger($myLogger);\n</code></pre>"},{"location":"docs/core/v2/logging/#disabling-logging","title":"Disabling Logging","text":"<p>If you need to disable the event logger after a certain set of operations, simply pass in <code>null</code> and logging will be disabled:</p> <pre><code>\\LdapRecord\\Container::setLogger($myLogger);\n\n$connection = new \\LdapRecord\\Connection(['...']);\n\ntry {\n    $connection-&gt;connect();\n\n    // Disable logging anything else.\n    \\LdapRecord\\Container::setLogger(null);\n} catch (\\LdapRecord\\Auth\\BindException $e) {\n    //\n}\n</code></pre>"},{"location":"docs/core/v2/logging/#logged-information","title":"Logged Information","text":"<p>After enabling LdapRecord logging, the following events are logged:</p>"},{"location":"docs/core/v2/logging/#ldaprecordautheventsattempting","title":"<code>LdapRecord\\Auth\\Events\\Attempting</code>","text":"<pre><code>LDAP (ldap://192.168.1.1:389) - Operation: LdapRecord\\Auth\\Events\\Attempting - Username: CN=Steve Bauman,OU=Users,DC=local,DC=com\n</code></pre>"},{"location":"docs/core/v2/logging/#ldaprecordautheventsbinding","title":"<code>LdapRecord\\Auth\\Events\\Binding</code>","text":"<pre><code>LDAP (ldap://192.168.1.1:389) - Operation: LdapRecord\\Auth\\Events\\Binding - Username: CN=Steve Bauman,OU=Users,DC=local,DC=com\n</code></pre>"},{"location":"docs/core/v2/logging/#ldaprecordautheventsbound","title":"<code>LdapRecord\\Auth\\Events\\Bound</code>","text":"<pre><code>LDAP (ldap://192.168.1.1:389) - Operation: LdapRecord\\Auth\\Events\\Bound - Username: CN=Steve Bauman,OU=Users,DC=local,DC=com\n</code></pre>"},{"location":"docs/core/v2/logging/#ldaprecordautheventspassed","title":"<code>LdapRecord\\Auth\\Events\\Passed</code>","text":"<pre><code>LDAP (ldap://192.168.1.1:389) - Operation: LdapRecord\\Auth\\Events\\Passed - Username: CN=Steve Bauman,OU=Users,DC=local,DC=com\n</code></pre>"},{"location":"docs/core/v2/logging/#ldaprecordautheventsfailed","title":"<code>LdapRecord\\Auth\\Events\\Failed</code>","text":"<pre><code>LDAP (ldap://192.168.1.1:389) - Operation: LdapRecord\\Auth\\Events\\Failed - Username: CN=Steve Bauman,OU=Users,DC=local,DC=com - Result: Invalid Credentials\n</code></pre>"},{"location":"docs/core/v2/logging/#ldaprecordmodelseventssaving","title":"<code>LdapRecord\\Models\\Events\\Saving</code>","text":"<pre><code>LDAP (ldap://192.168.1.1:389) - Operation: Saving - On: LdapRecord\\Models\\Entry - Distinguished Name: cn=John Doe,DC=local,DC=com\n</code></pre>"},{"location":"docs/core/v2/logging/#ldaprecordmodelseventssaved","title":"<code>LdapRecord\\Models\\Events\\Saved</code>","text":"<pre><code>LDAP (ldap://192.168.1.1:389) - Operation: Saved - On: LdapRecord\\Models\\Entry - Distinguished Name: cn=John Doe,DC=local,DC=com\n</code></pre>"},{"location":"docs/core/v2/logging/#ldaprecordmodelseventscreating","title":"<code>LdapRecord\\Models\\Events\\Creating</code>","text":"<pre><code>LDAP (ldap://192.168.1.1:389) - Operation: Creating - On: LdapRecord\\Models\\Entry - Distinguished Name: cn=John Doe,DC=local,DC=com\n</code></pre>"},{"location":"docs/core/v2/logging/#ldaprecordmodelseventscreated","title":"<code>LdapRecord\\Models\\Events\\Created</code>","text":"<pre><code>LDAP (ldap://192.168.1.1:389) - Operation: Created - On: LdapRecord\\Models\\Entry - Distinguished Name: cn=John Doe,DC=local,DC=com\n</code></pre>"},{"location":"docs/core/v2/logging/#ldaprecordmodelseventsupdating","title":"<code>LdapRecord\\Models\\Events\\Updating</code>","text":"<pre><code>LDAP (ldap://192.168.1.1:389) - Operation: Updating - On: LdapRecord\\Models\\Entry - Distinguished Name: cn=John Doe,DC=local,DC=com\n</code></pre>"},{"location":"docs/core/v2/logging/#ldaprecordmodelseventsupdated","title":"<code>LdapRecord\\Models\\Events\\Updated</code>","text":"<pre><code>LDAP (ldap://192.168.1.1:389) - Operation: Updated - On: LdapRecord\\Models\\Entry - Distinguished Name: cn=John Doe,DC=local,DC=com\n</code></pre>"},{"location":"docs/core/v2/logging/#ldaprecordmodelseventsdeleting","title":"<code>LdapRecord\\Models\\Events\\Deleting</code>","text":"<pre><code>LDAP (ldap://192.168.1.1:389) - Operation: Deleting - On: LdapRecord\\Models\\Entry - Distinguished Name: cn=John Doe,DC=local,DC=com\n</code></pre>"},{"location":"docs/core/v2/logging/#ldaprecordmodelseventsdeleted","title":"<code>LdapRecord\\Models\\Events\\Deleted</code>","text":"<pre><code>LDAP (ldap://192.168.1.1:389) - Operation: Deleted - On: LdapRecord\\Models\\Entry - Distinguished Name: cn=John Doe,DC=local,DC=com\n</code></pre>"},{"location":"docs/core/v2/model-api/","title":"Available Model Methods (API)","text":""},{"location":"docs/core/v2/model-api/#method-listing","title":"Method Listing","text":""},{"location":"docs/core/v2/model-api/#addattributevalue","title":"<code>addAttributeValue</code>","text":"<p>Add a value into an array of attribute values:</p> <pre><code>$model-&gt;proxyaddresses = ['SMTP:sbauman@microsoft.com'];\n\n$model-&gt;addAttributeValue('proxyaddresses', 'smtp:sbauman@local.com');\n\n// Displays:\n// [\n//     'SMTP:sbauman@microsoft.com',\n//     'smtp:sbauman@local.com'\n// ]\nvar_dump($model-&gt;proxyaddresses);\n</code></pre>"},{"location":"docs/core/v2/model-api/#addhidden","title":"<code>addHidden</code>","text":"<p>Add an attribute to hide when encoding a model using <code>json_encode</code>:</p> <pre><code>$model-&gt;addHidden('userpassword');\n\n$model-&gt;addHidden(['userpassword', 'mail']);\n\n// 'userpassword' and 'mail' will be omitted:\n$attributes = json_encode($model);\n</code></pre>"},{"location":"docs/core/v2/model-api/#addmodification","title":"<code>addModification</code>","text":"<p>Add a batch modification to the model to be executed upon <code>save()</code>:</p> <pre><code>// Using an array...\n$modification = [\n    'attrib'  =&gt; 'telephoneNumber',\n    'modtype' =&gt; LDAP_MODIFY_BATCH_ADD,\n    'values'  =&gt; ['+1 555 555 1717'],\n];\n\n$model-&gt;addModification($modification);\n\n// Using a BatchModification...\n$mod = new \\LdapRecord\\Models\\BatchModification(\n    $attrib = 'telephoneNumber',\n    $modType = LDAP_MODIFY_BATCH_ADD,\n    $values = ['+1 555 555 1717']\n);\n\n$model-&gt;addModification($mod);\n\n$model-&gt;save();\n</code></pre>"},{"location":"docs/core/v2/model-api/#addvisible","title":"<code>addVisible</code>","text":"<p>Add an attribute to include that is being hidden when encoding a model using <code>json_encode</code>:</p> <pre><code>$model-&gt;addVisible('userpassword');\n\n$model-&gt;addVisible(['userpassword', 'mail']);\n</code></pre>"},{"location":"docs/core/v2/model-api/#ancestors","title":"<code>ancestors</code>","text":"<p>Begin querying the direct ancestors of the model:</p> <pre><code>$ancestors = $model-&gt;ancestors()-&gt;get();\n</code></pre>"},{"location":"docs/core/v2/model-api/#asdatetime","title":"<code>asDateTime</code>","text":"<p>Convert an LDAP timestamp to a <code>Carbon\\Carbon</code> instance:</p> <pre><code>$carbon = $model-&gt;asDateTime('20200508184557Z', 'ldap');\n\n$carbon = $model-&gt;asDateTime('20200508184533.0Z', 'windows');\n\n$carbon = $model-&gt;asDateTime(132334371140000000, 'windows-int');\n</code></pre>"},{"location":"docs/core/v2/model-api/#attributestoarray","title":"<code>attributesToArray</code>","text":"<p>Convert all the models attributes to their JSON encodable value:</p> <pre><code>$attributes = $model-&gt;attributesToArray();\n</code></pre> <p>Important: LDAP date attributes specified via the <code>$dates</code> model property will be converted in the returned array.</p>"},{"location":"docs/core/v2/model-api/#convert","title":"<code>convert</code>","text":"<p>Convert a model into another by copying its attributes, connection and distinguished name:</p> <p>Important: This will also set <code>$model-&gt;exists</code> property to <code>true</code> if the model being converted exists.</p> <pre><code>$into = new \\LdapRecord\\Models\\ActiveDirectory\\User();\n\n// Returns instance of \\LdapRecord\\Models\\ActiveDirectory\\User\n$user = $model-&gt;convert($into);\n</code></pre>"},{"location":"docs/core/v2/model-api/#countattributes","title":"<code>countAttributes</code>","text":"<p>Get the total number of attributes on a model:</p> <p>Important: This does not count attribute values.</p> <pre><code>$model-&gt;fill([\n    'cn' =&gt; 'Steve Bauman',\n    'sn' =&gt; 'Bauman',\n]);\n\n// Returns '2'\n$model-&gt;countAttributes();\n</code></pre>"},{"location":"docs/core/v2/model-api/#createattribute","title":"<code>createAttribute</code>","text":"<p>Immediately inserts a new attribute value on the model.</p> <p>Performs an <code>ldap_mod_add</code> under the hood.</p> <p>Important: This does not create attributes that do not exist on your LDAP schema for the object.</p> <pre><code>$model-&gt;createAttribute('telephonenumber', '+1 555 555 1717');\n</code></pre>"},{"location":"docs/core/v2/model-api/#delete","title":"<code>delete</code>","text":"<p>Immediately delete an existing model instance:</p> <pre><code>$model-&gt;delete();\n\n// Returns false.\n$model-&gt;exists;\n</code></pre> <p>To delete nested objects contained in the model recursively, pass in <code>true</code>:</p> <pre><code>$model-&gt;delete($recursive = true);\n</code></pre>"},{"location":"docs/core/v2/model-api/#deleteattribute","title":"<code>deleteAttribute</code>","text":"<p>Immediately delete an attribute on a model.</p> <p>Performs an <code>ldap_mod_del</code> under the hood.</p> <pre><code>$model-&gt;deleteAttribute('telephonenumber');\n\n$model-&gt;telephonenumber; // Returns null\n</code></pre>"},{"location":"docs/core/v2/model-api/#descendants","title":"<code>descendants</code>","text":"<p>Begin querying the direct descendants of the model:</p> <pre><code>$descendants = $model-&gt;descendants()-&gt;get();\n</code></pre>"},{"location":"docs/core/v2/model-api/#escape","title":"<code>escape</code>","text":"<p>Prepare a value to be escaped:</p> <pre><code>// Returns \\LdapRecord\\Models\\Attributes\\EscapedValue;\n$escapedValue = $model-&gt;escape($value, $ignore = '', $flags = 0);\n\n// Cast to string for immediate return of escaped value:\n$escapedValue = (string) $model-&gt;escape($value, $ignore = '', $flags = 0);\n</code></pre>"},{"location":"docs/core/v2/model-api/#fill","title":"<code>fill</code>","text":"<p>Fill a model with attributes and values:</p> <pre><code>$model-&gt;fill([\n    'cn' =&gt; 'Steve Bauman',\n    'proxyAddresses' =&gt; ['foo', 'bar'],\n]);\n\n$model-&gt;save();\n</code></pre>"},{"location":"docs/core/v2/model-api/#fresh","title":"<code>fresh</code>","text":"<p>Get a fresh new instance of the existing model.</p> <p>The model will be re-retrieved from the LDAP directory. The existing model will not be affected:</p> <pre><code>$fresh = $model-&gt;fresh();\n</code></pre>"},{"location":"docs/core/v2/model-api/#fromdatetime","title":"<code>fromDateTime</code>","text":"<p>Convert a <code>DateTime</code>, <code>Carbon</code> or <code>string</code> to the specified LDAP timestamp type:</p> <pre><code>$date = new \\DateTime('now');\n\n$ldapTimestamp = $model-&gt;fromDateTime('ldap', $date);\n\n$windowsTimestamp = $model-&gt;fromDateTime('windows', $date);\n\n$windowsIntTimestamp = $model-&gt;fromDateTime('windows-int', $date);\n</code></pre>"},{"location":"docs/core/v2/model-api/#getanrattributes","title":"<code>getAnrAttributes</code>","text":"<p>Get an array of ANR attributes defined on the model:</p> <pre><code>$attributes = $model-&gt;getAnrAttributes();\n\n// Displays:\n// [\n//    'cn',\n//    'sn',\n//    'uid',\n//    'name',\n//    'mail',\n//    'givenname',\n//    'displayname'\n// ]\nvar_dump($attributes);\n</code></pre>"},{"location":"docs/core/v2/model-api/#getappends","title":"<code>getAppends</code>","text":"<p>Get the accessors being appended to the models array form:</p> <pre><code>$model-&gt;setAppends(['foo-bar']);\n\n// Displays:\n// [\n//    'foo-bar',\n// ]\nvar_dump($model-&gt;getAppends());\n</code></pre>"},{"location":"docs/core/v2/model-api/#getattribute","title":"<code>getAttribute</code>","text":"<p>Get the value of the specified attribute.</p> <p>This will return an <code>array</code> if the attribute exists and <code>null</code> if non-existent:</p> <p>Important: If a mutator exists for the attribute (such as a date, or custom attribute mutator method), it's value will be returned instead.</p> <pre><code>// Returns array:\n$values = $model-&gt;getAttribute('cn');\n\n// Returns first value:\n$value = $model-&gt;getAttribute('cn')[0];\n\n// Returns null:\n$null = $model-&gt;getAttribute('non-existent');\n</code></pre>"},{"location":"docs/core/v2/model-api/#getattributevalue","title":"<code>getAttributeValue</code>","text":"<p>Performs the same as above.</p>"},{"location":"docs/core/v2/model-api/#getattributes","title":"<code>getAttributes</code>","text":"<p>Get all the models raw attributes:</p> <p>Important: Mutator attribute values will not be included in this array.</p> <pre><code>$attributes = $model-&gt;getAttributes();\n\nforeach ($attributes as $attribute =&gt; $values) {\n    //\n}\n</code></pre>"},{"location":"docs/core/v2/model-api/#getconnection","title":"<code>getConnection</code>","text":"<p>Resolve the underlying <code>LdapRecord\\Connection</code>:</p> <pre><code>$connection = $model-&gt;getConnection();\n\n$config = $connection-&gt;getConfiguration();\n</code></pre>"},{"location":"docs/core/v2/model-api/#getconnectionname","title":"<code>getConnectionName</code>","text":"<p>Get the connection name from the model:</p> <p>Important: If no connection is set on the model, <code>null</code> will be returned.</p> <pre><code>class Entry extends Model\n{\n    protected $connection = 'domain-b';\n}\n\n// Returns 'domain-b'\n$connectionName = (new Entry)-&gt;getConnectionName();\n</code></pre>"},{"location":"docs/core/v2/model-api/#getconvertedguid","title":"<code>getConvertedGuid</code>","text":"<p>Get the models string GUID:</p> <pre><code>// Example: bf9679e7-0de6-11d0-a285-00aa003049e2\n$guid = $model-&gt;getConvertedGuid();\n</code></pre>"},{"location":"docs/core/v2/model-api/#getcreatabledn","title":"<code>getCreatableDn</code>","text":"<p>Get the models creatable Distinguished Name:</p> <pre><code>$model = new Entry(['cn' =&gt; 'John Doe']);\n\n// Returns: 'cn=John Doe,dc=local,dc=com'\n$creatableDn = $model-&gt;getCreatableDn();\n\n$model-&gt;cn = 'Jane Doe';\n\n// Returns: 'cn=Jane Doe,dc=local,dc=com'\n$creatableDn = $model-&gt;getCreatableDn();\n</code></pre>"},{"location":"docs/core/v2/model-api/#getcreatablerdn","title":"<code>getCreatableRdn</code>","text":"<p>Get the models creatable relative Distinguished Name:</p> <pre><code>$model = new Entry(['cn' =&gt; 'John Doe']);\n\n// Returns: 'cn=John Doe'\n$creatableDn = $model-&gt;getCreatableRdn();\n\n$model-&gt;cn = 'Jane Doe';\n\n// Returns: 'cn=Jane Doe'\n$creatableDn = $model-&gt;getCreatableRdn();\n</code></pre>"},{"location":"docs/core/v2/model-api/#getdateformat","title":"<code>getDateFormat</code>","text":"<p>Get the format that dates are serialized to:</p> <pre><code>// Returns: 'Y-m-d\\TH:i:sO'\n$model-&gt;getDateFormat();\n</code></pre>"},{"location":"docs/core/v2/model-api/#getdates","title":"<code>getDates</code>","text":"<p>Get an array of attributes that should be mutated to dates:</p> <pre><code>$dates = $model-&gt;getDates();\n\n// Displays:\n// [\n//    'createtimestamp' =&gt; 'ldap',\n//    'modifytimestamp' =&gt; 'ldap',\n// ]\nvar_dump($dates);\n</code></pre>"},{"location":"docs/core/v2/model-api/#getdirty","title":"<code>getDirty</code>","text":"<p>Get the attributes that have been changed:</p> <pre><code>$model-&gt;cn = 'Changed';\n\nforeach ($model-&gt;getDirty() as $attribute =&gt; $values) {\n    // Displays: 'cn'\n    echo $attribute;\n\n    // Displays: ['Changed']\n    var_dump($values);\n}\n</code></pre>"},{"location":"docs/core/v2/model-api/#getdn","title":"<code>getDn</code>","text":"<p>Get the models Distinguished Name:</p> <pre><code>// Displays: 'cn=John Doe,dc=local,dc=com'\necho $model-&gt;getDn();\n</code></pre>"},{"location":"docs/core/v2/model-api/#getfirstattribute","title":"<code>getFirstAttribute</code>","text":"<p>Get the first value of an attribute:</p> <pre><code>$model-&gt;proxyaddresses = ['first', 'second'];\n\n// Returns: 'first'\n$value = $model-&gt;getFirstAttribute('proxyaddresses');\n</code></pre>"},{"location":"docs/core/v2/model-api/#getglobalscopes","title":"<code>getGlobalScopes</code>","text":"<p>Get the global scopes set on the model:</p> <pre><code>Model::addGlobalScope('my-scope', function () {\n    // ...\n});\n\n// Returns: ['my-scope' =&gt; \\Closure]\n$scopes = $model-&gt;getGlobalScopes();\n</code></pre>"},{"location":"docs/core/v2/model-api/#getguidkey","title":"<code>getGuidKey</code>","text":"<p>Get the attribute key that contains the objects GUID:</p> <pre><code>// Returns: 'objectguid'\n$model-&gt;getGuidKey();\n</code></pre>"},{"location":"docs/core/v2/model-api/#gethidden","title":"<code>getHidden</code>","text":"<p>Get the hidden attributes for the model:</p> <pre><code>$model-&gt;addHidden('cn');\n\n// Returns: ['cn']\n$model-&gt;getHidden();\n</code></pre>"},{"location":"docs/core/v2/model-api/#getmodifications","title":"<code>getModifications</code>","text":"<p>Get the models batch modifications to be processed:</p> <pre><code>$model-&gt;cn = 'Changed';\n\n// Returns:\n// [\n//      [\n//      'attrib' =&gt; 'cn',\n//      'modtype' =&gt; 1,\n//      'values' =&gt; ['Changed'],\n//     ]\n// ]\n$mods = $model-&gt;getModifications();\n</code></pre>"},{"location":"docs/core/v2/model-api/#getname","title":"<code>getName</code>","text":"<p>Get the name of a model:</p> <pre><code>$model-&gt;setDn('cn=John Doe,dc=local,dc=com');\n\n// Returns: 'John Doe'\n$name = $model-&gt;getName();\n</code></pre>"},{"location":"docs/core/v2/model-api/#getobjectguid","title":"<code>getObjectGuid</code>","text":"<p>Get the raw binary object GUID:</p> <p>Important:</p> <ul> <li>The raw binary GUID will be returned when connecting to Active Directory.</li> <li>The raw string GUID will be returned with other LDAP directories.</li> </ul> <pre><code>$rawBinary = $model-&gt;getObjectGuid();\n</code></pre>"},{"location":"docs/core/v2/model-api/#getoriginal","title":"<code>getOriginal</code>","text":"<p>Get the original, un-modified attributes on a model:</p> <pre><code>$model = Model::findBy('cn', 'Steve Bauman');\n\n$model-&gt;cn = 'Changed';\n\n// Returns:\n// [\n//    'cn' =&gt; ['Steve Bauman']\n//    ...\n// ]\n$model-&gt;getOriginal();\n</code></pre>"},{"location":"docs/core/v2/model-api/#getparentdn","title":"<code>getParentDn</code>","text":"<p>Get the direct parent Distinguished Name of a model:</p> <pre><code>$model = Model::find('cn=John Doe,dc=local,dc=com');\n\n// Returns: 'dc=local,dc=com'\n$model-&gt;getParentDn();\n\n// Returns: 'ou=Users,dc=local,dc=com'\n$model-&gt;getParentDn('cn=Steve Bauman,ou=Users,dc=local,dc=com');\n</code></pre>"},{"location":"docs/core/v2/model-api/#getrdn","title":"<code>getRdn</code>","text":"<p>Get the models Relative Distinguished Name:</p> <pre><code>$model = Model::find('cn=John Doe,dc=local,dc=com');\n\n// Returns: 'cn=John Doe'\n$model-&gt;getRdn();\n\n// Returns: 'cn=Steve Bauman'\n$model-&gt;getRdn('cn=Steve Bauman,ou=Users,dc=local,dc=com');\n</code></pre>"},{"location":"docs/core/v2/model-api/#getvisible","title":"<code>getVisible</code>","text":"<p>Get the attributes that should be visible when encoding a model using <code>json_encode</code>:</p> <pre><code>$model-&gt;addVisible('cn', 'sn');\n\n// Returns: ['cn', 'sn']\n$visibleAttributes = $model-&gt;getVisible();\n</code></pre>"},{"location":"docs/core/v2/model-api/#hasappended","title":"<code>hasAppended</code>","text":"<p>Determine if the model has an accessor attribute being appended:</p> <pre><code>$model-&gt;setAppends(['foo-bar']);\n\n// Returns: true\n$model-&gt;hasAppended('foo-bar');\n</code></pre>"},{"location":"docs/core/v2/model-api/#hasattribute","title":"<code>hasAttribute</code>","text":"<p>Determine if the model has an attribute with a value:</p> <pre><code>$model = Model::findBy('cn', 'Steve Bauman');\n\n// Returns: true\n$model-&gt;hasAttribute('cn');\n\n// Returns: false\n$model-&gt;hasAttribute('non-existent');\n</code></pre>"},{"location":"docs/core/v2/model-api/#hasgetmutator","title":"<code>hasGetMutator</code>","text":"<p>Determine if the model has a 'get' mutator for the given attribute:</p> <pre><code>class Entry extends Model\n{\n    public function getCnAttribute($values)\n    {\n        // ...\n    }\n}\n\n$model = new Entry();\n\n// Returns: true\n$model-&gt;hasGetMutator('cn');\n</code></pre>"},{"location":"docs/core/v2/model-api/#hassetmutator","title":"<code>hasSetMutator</code>","text":"<p>Determine if the model has a 'set' mutator for the given attribute:</p> <pre><code>class Entry extends Model\n{\n    public function setCnAttribute($values)\n    {\n        // ...\n    }\n}\n\n$model = new Entry();\n\n// Returns: true\n$model-&gt;hasSetAttribute('cn');\n</code></pre>"},{"location":"docs/core/v2/model-api/#inside","title":"<code>inside</code>","text":"<p>Set the container that the model should be created inside:</p> <p>Important: Calling <code>inside()</code> on an existing model will not perform any move / rename operation. Use move or rename instead.</p> <pre><code>$model = new Model();\n\n// ...\n\n$model-&gt;inside('ou=Container,dc=local,dc=com');\n\n$model-&gt;save();\n</code></pre>"},{"location":"docs/core/v2/model-api/#is","title":"<code>is</code>","text":"<p>Determine if a model is the same by comparing their Distinguished Names and connections:</p> <pre><code>// Returns: bool\n$model-&gt;is($another);\n</code></pre>"},{"location":"docs/core/v2/model-api/#isancestorof","title":"<code>isAncestorOf</code>","text":"<p>Determine if a model is an ancestor of another:</p> <pre><code>$user = User::find('cn=John Doe,ou=Accounting,ou=Accounts,dc=local,dc=com');\n$ou = OrganizationalUnit::find('ou=Accounts,dc=local,dc=com');\n\n// Returns: true\n$ou-&gt;isAncestorOf($user);\n</code></pre>"},{"location":"docs/core/v2/model-api/#ischildof","title":"<code>isChildOf</code>","text":"<p>Determine if a model is an immediate child of another:</p> <pre><code>$ou = OrganizationalUnit::find('ou=Accounts,dc=local,dc=com');\n$user = User::find('cn=John Doe,ou=Accounts,dc=local,dc=com');\n\n// Returns: true\n$user-&gt;isChildOf($ou);\n</code></pre>"},{"location":"docs/core/v2/model-api/#isdateattribute","title":"<code>isDateAttribute</code>","text":"<p>Determine if given attribute is a date attribute on the model:</p> <pre><code>class Entry extends Model\n{\n    protected $dates = ['whenchanged' =&gt; 'windows'];\n}\n\n$model = new Entry();\n\n// Returns: true\n$model-&gt;isDateAttribute('whenchanged');\n</code></pre>"},{"location":"docs/core/v2/model-api/#isdescendantof","title":"<code>isDescendantOf</code>","text":"<p>Determine if a model is a descendent of another:</p> <pre><code>$ou = OrganizationalUnit::find('ou=Accounts,dc=local,dc=com');\n$user = User::find('cn=John Doe,ou=Accounting,ou=Accounts,dc=local,dc=com');\n\n// Returns: true\n$user-&gt;isDescendantOf($ou);\n</code></pre>"},{"location":"docs/core/v2/model-api/#isdirty","title":"<code>isDirty</code>","text":"<p>Determine if the given attribute has been changed:</p> <pre><code>$model = Model::findBy('cn', 'Steve Bauman');\n\n// Returns: false\n$model-&gt;isDirty('cn');\n\n$model-&gt;cn = 'Changed';\n\n// Returns: true\n$model-&gt;isDirty('cn');\n</code></pre>"},{"location":"docs/core/v2/model-api/#isparentof","title":"<code>isParentOf</code>","text":"<p>Determine if a model is an immediate parent of another:</p> <pre><code>$ou = OrganizationalUnit::find('ou=Accounts,dc=local,dc=com');\n$user = User::find('cn=John Doe,ou=Accounts,dc=local,dc=com');\n\n// Returns: true\n$ou-&gt;isParentOf($user);\n</code></pre>"},{"location":"docs/core/v2/model-api/#makehidden","title":"<code>makeHidden</code>","text":"<p>Make the given, typically visible, attributes hidden on the model:</p> <pre><code>class Entry extends Model\n{\n    protected $visible = ['cn'];\n}\n\n// This will override the above:\n$model-&gt;makeHidden('cn');\n</code></pre>"},{"location":"docs/core/v2/model-api/#makevisible","title":"<code>makeVisible</code>","text":"<p>Make the given, typically hidden, attributes visible on the model:</p> <pre><code>class Entry extends Model\n{\n    protected $hidden = ['cn'];\n}\n\n// This will override the above:\n$model-&gt;makeVisible('cn');\n</code></pre>"},{"location":"docs/core/v2/model-api/#move","title":"<code>move</code>","text":"<p>Move a model into the specified container:</p> <pre><code>$user = User::find('cn=Steve Bauman,dc=local,dc=com');\n\n$ou = OrganizationalUnit::find('ou=Office Users,dc=local,dc=com');\n\n$user-&gt;move($ou);\n\n// Returns: 'cn=Steve Bauman,ou=Office Users,dc=local,d=com'\n$user-&gt;getDn();\n</code></pre>"},{"location":"docs/core/v2/model-api/#newbatchmodification","title":"<code>newBatchModification</code>","text":"<p>Create a new <code>LdapRecord\\Models\\BatchModification</code> instance:</p> <pre><code>// Returns instance of: BatchModification\n$mod = $model-&gt;newBatchModification(\n    'cn', LDAP_MODIFY_BATCH_ADD, ['Steve Bauman']\n);\n</code></pre>"},{"location":"docs/core/v2/model-api/#newcollection","title":"<code>newCollection</code>","text":"<p>Create a new <code>Tightenco\\Collect\\Support\\Collection</code>:</p> <pre><code>$collection = $model-&gt;newCollection($items = []);\n</code></pre>"},{"location":"docs/core/v2/model-api/#newinstance","title":"<code>newInstance</code>","text":"<p>Create a new model instance:</p> <pre><code>$model = Model::findByAnr('sbauman');\n\n$new = $model-&gt;newInstance();\n</code></pre>"},{"location":"docs/core/v2/model-api/#newquery","title":"<code>newQuery</code>","text":"<p>Create a new model query:</p> <p>Important: Global scopes and object classes will be applied to this query.</p> <pre><code>$results = $model-&gt;newQuery()-&gt;where('cn', 'contains', 'Steve')-&gt;get();\n</code></pre>"},{"location":"docs/core/v2/model-api/#newquerywithoutscopes","title":"<code>newQueryWithoutScopes</code>","text":"<p>Create a new model query without global scopes:</p> <p>Important: Global scopes and object classes will not be applied to this query.</p> <pre><code>$results = $model-&gt;newQueryWithoutScopes()-&gt;get();\n</code></pre>"},{"location":"docs/core/v2/model-api/#refresh","title":"<code>refresh</code>","text":"<p>Refresh a models attributes by re-retrieving them from your LDAP directory.</p> <p>This will affect the current model instance:</p> <pre><code>$model-&gt;refresh();\n</code></pre>"},{"location":"docs/core/v2/model-api/#rename","title":"<code>rename</code>","text":"<p>Rename a model and keep it's container location:</p> <p>Important: When renaming is successful, the models distinguished name is automatically updated to reflect its new name in the directory, so you may run further operations on it during the same request.</p> <pre><code>$user = Model::find('cn=John Doe,dc=local,dc=com');\n\n$user-&gt;rename('Jane Doe');\n\n// Returns: 'cn=Jane Doe,dc=local,dc=com'\n$user-&gt;getDn();\n</code></pre>"},{"location":"docs/core/v2/model-api/#save","title":"<code>save</code>","text":"<p>Persist the new or existing model to the directory:</p> <pre><code>// Save a new model:\n$model = new Model(['cn' =&gt; 'John Doe']);\n\n$model-&gt;save();\n\n// Updating an existing model:\n$model = Model::findBy('cn', 'John Doe');\n\n$model-&gt;cn = 'Jane Doe';\n\n$model-&gt;save();\n</code></pre> <p>You may also pass an array of attributes to persist to your LDAP directory:</p> <pre><code>$model-&gt;save(['cn' =&gt; 'Steve Bauman']);\n</code></pre>"},{"location":"docs/core/v2/model-api/#setappends","title":"<code>setAppends</code>","text":"<p>Set the accessors to append to model arrays:</p> <pre><code>$model-&gt;setAppends(['foo-bar']);\n\n// Displays:\n// [\n//     'foo-bar',\n// ]\nvar_dump($model-&gt;getAppends());\n</code></pre>"},{"location":"docs/core/v2/model-api/#setattribute","title":"<code>setAttribute</code>","text":"<p>Set the value of an existing or non-existing attribute:</p> <pre><code>$model-&gt;setAttribute('attribute', 'value');\n\n$model-&gt;setAttribute('attribute', ['foo', 'bar']);\n</code></pre>"},{"location":"docs/core/v2/model-api/#setconnection","title":"<code>setConnection</code>","text":"<p>Set the name of the connection for the model to use:</p> <pre><code>$model = new Model();\n\n// ...\n\n$model-&gt;setConnection('domain-b');\n\n// Model will be saved to 'domain-b'\n$model-&gt;save();\n</code></pre>"},{"location":"docs/core/v2/model-api/#setdateformat","title":"<code>setDateFormat</code>","text":"<p>Set the date format to use when serializing LDAP dates:</p> <pre><code>$model = Model::findByAnr('sbauman');\n\n$model-&gt;setDateFormat('Y-m-d H:i');\n\n$attributes = json_encode($model);\n</code></pre>"},{"location":"docs/core/v2/model-api/#setdn","title":"<code>setDn</code>","text":"<p>Set the Distinguished Name of the model to be created with:</p> <pre><code>$model = new Model();\n\n$model-&gt;setDn('cn=John Doe,dc=local,dc=com');\n\n$model-&gt;save();\n</code></pre>"},{"location":"docs/core/v2/model-api/#setfirstattribute","title":"<code>setFirstAttribute</code>","text":"<p>Set the first value of an existing or non-existing attribute:</p> <pre><code>$model = new Model();\n\n$model-&gt;setFirstAttribute('cn', 'John Doe');\n\n// Returns ['cn' =&gt; ['John Doe']]\n$model-&gt;getAttributes();\n\n$model-&gt;proxyaddresses = ['foo', 'bar'];\n\n// Overwrites 'foo' with 'baz':\n$model-&gt;setFirstAttribute('proxyaddresses', ['baz']);\n</code></pre>"},{"location":"docs/core/v2/model-api/#sethidden","title":"<code>setHidden</code>","text":"<p>Clear defined hidden attributes and set the attributes that should be hidden during serialization:</p> <pre><code>$model-&gt;setHidden(['cn', 'sn']);\n\n// Attributes 'cn' and 'sn' will be removed:\n$attributes = json_encode($model);\n</code></pre>"},{"location":"docs/core/v2/model-api/#setmodifications","title":"<code>setModifications</code>","text":"<p>Set the models batch modifications to be processed upon save:</p> <pre><code>$mods = [\n    [\n        'attrib'  =&gt; 'telephoneNumber',\n        'modtype' =&gt; LDAP_MODIFY_BATCH_ADD,\n        'values'  =&gt; ['+1 555 555 1717'],\n    ]\n];\n\n$model-&gt;setModifications($mods);\n\n$model-&gt;save();\n</code></pre>"},{"location":"docs/core/v2/model-api/#setvisible","title":"<code>setVisible</code>","text":"<p>Clear defined visible attributes and set the attributes that should be visible during serialization:</p> <pre><code>$model-&gt;setVisible(['cn', 'sn']);\n\n// Only attributes 'cn' and 'sn' will be included:\n$attributes = json_encode($model);\n</code></pre>"},{"location":"docs/core/v2/model-api/#siblings","title":"<code>siblings</code>","text":"<p>Create a new query to retrieve a models siblings:</p> <p>Important: The existing model instance will be included in the query results.</p> <pre><code>$siblings = $model-&gt;siblings()-&gt;get();\n</code></pre>"},{"location":"docs/core/v2/model-api/#update","title":"<code>update</code>","text":"<p>Persist the changes of a model to the LDAP directory.</p> <p>Important: The save method should be used instead of <code>update</code> to persist new or existing models. If the model does not exist in the directory, an exception will be thrown.</p> <pre><code>$model-&gt;cn = 'John Doe';\n\n$model-&gt;update();\n</code></pre> <p>You may also provide an array of attributes to persist to your LDAP directory:</p> <pre><code>$model-&gt;update(['cn' =&gt; 'John Doe']);\n</code></pre>"},{"location":"docs/core/v2/model-api/#updateattribute","title":"<code>updateAttribute</code>","text":"<p>Immediately updates an attribute value on the model.</p> <p>Performs an <code>ldap_mod_replace</code> under the hood.</p> <pre><code>$model-&gt;updateAttribute('proxyaddresses', ['foo', 'bar']);\n</code></pre>"},{"location":"docs/core/v2/model-mutators/","title":"Models: Accessors &amp; Mutators","text":""},{"location":"docs/core/v2/model-mutators/#introduction","title":"Introduction","text":"<p>Accessors and mutators allow you to modify attribute values when you retrieve or set them on model instances. If you'd ever used Laravel accessors or mutators, you'll feel right at home.</p>"},{"location":"docs/core/v2/model-mutators/#accessors-mutators","title":"Accessors &amp; Mutators","text":""},{"location":"docs/core/v2/model-mutators/#defining-an-accessor","title":"Defining An Accessor","text":"<p>For an example, lets say we are working with Active Directory and we want to encode the <code>thumbnailPhoto</code> attribute whenever we retrieve it from our <code>User</code> model.</p> <p>To define an accessor for this attribute, we define a method named <code>getThumbnailphotoAttribute()</code>:</p> <pre><code>&lt;?php\n\nuse LdapRecord\\Models\\Model;\n\nclass User extends Model\n{\n    public function getThumbnailphotoAttribute($value)\n    {\n        // Due to LDAP's multi-valued nature, all values will be\n        // contained inside of an array. We will attempt to\n        // retrieve the first one, or supply a default.\n        $data = $value[0] ?? file_get_contents('images/default_photo.jpg');\n\n        $image = base64_encode($data);\n\n        $mime = 'image/jpeg';\n\n        if (function_exists('finfo_open')) {\n            $finfo = finfo_open();\n\n            $mime = finfo_buffer($finfo, $data, FILEINFO_MIME_TYPE);\n\n            return \"data:$mime;base64,$image\";\n        }\n\n        return \"data:$mime;base64,$image\";\n    }\n}\n</code></pre> <p>As you can see from the above, the attribute name we want to create an accessor for, must be between <code>get</code> and <code>Attribute</code>.</p> <p>The casing of <code>get</code> and <code>Attribute</code> are very important. This casing difference is how LdapRecord detects accessor and mutator methods.</p> <p>If your attribute contains a hyphen, use must use alternate casing to indicate this. For example, lets create an accessor for the <code>apple-user-homeurl</code> attribute:</p> <pre><code>&lt;?php\n\nuse LdapRecord\\Models\\Model;\n\nclass User extends Model\n{\n    public function getAppleUserHomeurlAttribute($value)\n    {\n        // Do something with its value.\n        return $value;\n    }\n}\n</code></pre> <p>As you can see, alternate casing indicates to LdapRecord that the attribute we are looking for contains hyphens.</p>"},{"location":"docs/core/v2/model-mutators/#defining-a-mutator","title":"Defining A Mutator","text":"<p>A mutator does the opposite of an accessor. A mutator is a function you define that accepts the value of the attribute you are setting so you can transform it before it is set onto the model.</p> <p>To define a mutator, we use the above accessor syntax with <code>set</code> instead of <code>get</code>.</p> <p>For example, let's define a <code>unicodepwd</code> mutator that automatically encodes a password by setting the attribute:</p> <pre><code>&lt;?php\n\nuse LdapRecord\\Utilities;\nuse LdapRecord\\Models\\Model;\n\nclass User extends Model\n{\n    public function setUnicodepwdAttribute($password)\n    {\n        $this-&gt;attributes['unicodepwd'] = [Utilities::encodePassword($password)];\n    }\n}\n</code></pre> <p>Now once we set the attribute, it will automatically encode the password we are setting on the <code>User</code> model:</p> <pre><code>$user = new User();\n\n$user-&gt;unicodepwd = 'secret';\n</code></pre>"},{"location":"docs/core/v2/model-mutators/#date-mutators","title":"Date Mutators","text":"<p>By default, LdapRecord will convert the attributes <code>createtimestamp</code> and <code>modifytimestamp</code> to instances of Carbon.</p> <p>If you extend from <code>ActiveDirectory</code> models, the attributes <code>whenchanged</code> and <code>whencreated</code> will be converted instead.</p> <p>When you define an attribute as a date, you can set its value to an instance of <code>DateTime</code> / <code>Carbon</code> instance, a UNIX timestamp, or a date string (<code>Y-m-d</code>). Upon saving your model, these will be converted properly to be stored in your directory.</p> <p>To define a mutator for an attribute that contains a timestamp, we must set the <code>$dates</code> property on the model. However, since LDAP directories have different timestamp formats for some attributes, we must tell LdapRecord what kind of format to use for proper conversion.</p> <p>For example, let's define a date mutator for the <code>accountexpires</code> attribute that exists on Active Directory. To do so, we must set the <code>$dates</code> property to a key / value pair, where the key is the attribute that contains the timestamp and the value is the type of LDAP format to convert to and from:</p> <pre><code>&lt;?php\n\nuse LdapRecord\\Models\\Model;\n\nclass User extends Model\n{\n    protected $dates = [\n        'accountexpires' =&gt; 'windows-int',\n    ];\n}\n</code></pre> <p>Now lets have our user's account expire at the same time tomorrow:</p> <pre><code>$user = User::find('cn=John Doe,dc=local,dc=com');\n\n$user-&gt;accountexpires = new \\DateTime('+1 day');\n\n$user-&gt;save();\n</code></pre> <p>Once we've saved the model, the attribute will now automatically be converted to a Carbon instance so you can use any of Carbon's methods on the attribute:</p> <pre><code>$user = User::find('cn=John Doe,dc=local,dc=com');\n\nif ($user-&gt;accountexpires-&gt;isPast()) {\n    // The user account is expired.\n}\n</code></pre>"},{"location":"docs/core/v2/model-mutators/#available-types","title":"Available Types","text":"<p>Currently, there are 3 built-in date mutator types. They are:</p> <ul> <li><code>ldap</code></li> <li><code>windows</code></li> <li><code>windows-int</code></li> </ul>"},{"location":"docs/core/v2/model-mutators/#ldap-type","title":"LDAP Type","text":"<p>The <code>ldap</code> type is the most common format for LDAP timestamps - outside of Active Directory. This format converts LDAP timestamps in the format of <code>YYYYMMDDHHMMSST</code>. T is the time zone which is usually 'Z' (Zulu Time Zone = UTC/GMT).</p>"},{"location":"docs/core/v2/model-mutators/#windows-type","title":"Windows Type","text":"<p>The <code>windows</code> type is similar to the <code>ldap</code> type, however it differs slightly so it requires its own conversion type. Its timestamp is in the format of <code>YYYYMMDDHHMMSS.0T</code>. T is the time zone which is usually 'Z' (Zulu Time Zone = UTC/GMT).</p>"},{"location":"docs/core/v2/model-mutators/#windows-integer-type","title":"Windows Integer Type","text":"<p>The <code>windows-int</code> type handles the 18-digit Active Directory timestamp format, also named 'Windows NT time format', 'Win32 FILETIME or SYSTEMTIME' or NTFS file time. An example of this would be the <code>accountexpires</code> attribute that exists on users:</p> <pre><code>132131246410000000\n</code></pre> <p>Which equals:</p> <pre><code>Monday, September 16, 2019 4:24:01 PM\n</code></pre>"},{"location":"docs/core/v2/model-mutators/#attribute-casting","title":"Attribute Casting","text":"<p>Similarly with Laravel's Eloquent, the <code>$casts</code> property on your model provides a convenient method of converting attributes to common data types. The <code>$casts</code> property should be an array where the key is the name of the attribute being cast and the value is the type you wish to cast the column to.</p> <p>The supported cast types are:</p> <ul> <li><code>integer</code></li> <li><code>real</code></li> <li><code>float</code></li> <li><code>double</code></li> <li><code>decimal:&lt;digits&gt;</code></li> <li><code>string</code></li> <li><code>boolean</code></li> <li><code>object</code></li> <li><code>array</code></li> <li><code>collection</code></li> <li><code>datetime:&lt;ldap/windows/windows-int&gt;</code></li> </ul> <p>To demonstrate attribute casting, let's cast the <code>msExchHideFromAddressList</code> Active Directory attribute, which determines whether a user account is shown in the Global Address List in Outlook.</p> <p>This attribute is stored as a string in Active Directory, with the value <code>TRUE</code> or <code>FALSE</code>.</p> <pre><code>namespace App\\Models\\Ldap;\n\nuse LdapRecord\\Models\\ActiveDirectory\\User as BaseUser;\n\nclass User extends BaseUser\n{\n    protected $casts = [\n        'msExchHideFromAddressList' =&gt; 'boolean',\n    ];\n}\n</code></pre> <p>Then, we can utilize it when we retrieve users from our directory:</p> <pre><code>$user = User::find('cn=John Doe,dc=local,dc=com');\n\nif ($user-&gt;msExchHideFromAddressList) {\n    // This user is being hidden from the Global Address list.\n}\n</code></pre>"},{"location":"docs/core/v2/model-mutators/#appending-accessors","title":"Appending Accessors","text":"<p>Ported directly from Laravel's Eloquent, the <code>$appends</code> array property can be set directly on the model class to add an accessor's value to the models array form.</p> <p>Important: LDAP attributes cannot contain underscores (<code>_</code>). Therefore, all accessors that are PascalCased must be defined in their hyphenated format, and will appear in their hyphenated format in the model's array form.</p> <pre><code>namespace App\\Models\\Ldap;\n\nuse LdapRecord\\Models\\ActiveDirectory\\User as BaseUser;\n\nclass User extends BaseUser\n{\n    protected $appends = ['full-name'];\n\n    public function getFullNameAttribute()\n    {\n        return 'John Doe';\n    }\n}\n</code></pre> <pre><code>$user = User::find('cn=john,dc=local,dc=com');\n\n// Displays: \"John Doe\"\necho $user-&gt;full_name;\n\n// Displays: \"{\"full-name\":[\"John Doe\"]}\"\necho json_encode($user);\n</code></pre>"},{"location":"docs/core/v2/model-relationships/","title":"Models: Relationships","text":""},{"location":"docs/core/v2/model-relationships/#introduction","title":"Introduction","text":"<p>LDAP objects often contain attributes that reference other LDAP objects in your directory. An example of this would be the <code>member</code> attribute on LDAP groups that contain a list of distinguished names whom are members of the group.</p> <p>Using LdapRecord relationships, we can define what models contain references to other objects and easily retrieve the referenced models to perform operations upon. There are several relationship types that LdapRecord supports:</p> Relationship Type Has One Indicates a one-to-one relation, such as a user having one manager Has Many Indicates a one-to-many relation, such as a user having many groups Has Many (Inverse) Indicates an inverse one-to-many relation, such as a group having many members Has Many In Indicates a one-to-many relation, but with virtual attributes that cannot be modified"},{"location":"docs/core/v2/model-relationships/#defining-relationships","title":"Defining Relationships","text":""},{"location":"docs/core/v2/model-relationships/#has-one","title":"Has One","text":"<p>A has one relationship is a basic relationship to work with. An example of a \"has one\" relationship would be a <code>User</code> having one <code>manager</code>. To define this relationship, we place a <code>manager()</code> method on our <code>User</code> model, and call the <code>hasOne()</code> method and return the result:</p> <pre><code>&lt;?php\n\nuse LdapRecord\\Models\\Model;\n\nclass User extends Model\n{\n    /**\n     * Retrieve the manager of the current user.\n     */\n    public function manager()\n    {\n        return $this-&gt;hasOne(User::class, 'manager');\n    }\n}\n</code></pre> <p>The first argument that is passed into the relation is the name of the related model. The second is the LDAP attribute on the current user that contains the relationships distinguished name.</p> <p>If the relationships attribute you are defining does not contain a distinguished name, you can alter this and define a foreign key using the third parameter. For example, if our manager attribute actually contains a <code>uid</code>, we can change this so the related model is retrieved by a UID, instead of a distinguished name:</p> <pre><code>&lt;?php\n\nuse LdapRecord\\Models\\Model;\n\nclass User extends Model\n{\n    /**\n     * Retrieve the manager of the current user.\n     */\n    public function manager()\n    {\n        return $this-&gt;hasOne(User::class, 'manager', 'uid');\n    }\n}\n</code></pre>"},{"location":"docs/core/v2/model-relationships/#has-many","title":"Has Many","text":"<p>Defining a has many relationship indicates that the model can be apart of many of the given model.</p> <p>For example, a <code>User</code> \"has many\" <code>groups</code>:</p> <pre><code>&lt;?php\n\nuse LdapRecord\\Models\\Model;\n\nclass User extends Model\n{\n    /**\n     * Retrieve the groups the user is apart of.\n     */\n    public function groups()\n    {\n        return $this-&gt;hasMany(Group::class, 'member');\n    }\n}\n</code></pre> <p>In the above example, LdapRecord will construct a query to locate all of the groups that the user is apart of using the users distinguished name. This users distinguished name will automatically be escaped to be able to properly locate all of the groups.</p> <p>For example, this is the query filter that will be used in the search:</p> <pre><code>(member=cn\\3dJohn Doe\\2cdc\\3dacme\\2cdc\\3dorg)\n</code></pre> <p>If you're using an alternate LDAP server or a different attribute to locate group membership, you may change the relation key. For example, you may want to use <code>uniquemember</code> for this relationship:</p> <pre><code>/**\n * Retrieve the groups the user is apart of.\n */\npublic function groups()\n{\n    return $this-&gt;hasMany(Group::class, 'uniquemember');\n}\n</code></pre> <p>You may also define a foreign key in third parameter if the attribute you are using is not a distinguished name.</p>"},{"location":"docs/core/v2/model-relationships/#has-many-inverse","title":"Has Many (Inverse)","text":"<p>Now that we have setup a <code>User</code> model that can access of their groups, lets define a <code>Group</code> model to be able to access its members.</p> <p>Since an LDAP group can contain various types of objects (such as contacts, users, and other groups), we must pass in an array of models that are potential members of the group. This allows the relationship to properly create the models that are returned from the query results.</p> <p>LdapRecord will return plain <code>Entry</code> models when it cannot locate the correct model in the given array.</p> <pre><code>&lt;?php\n\nuse LdapRecord\\Models\\Model;\n\nclass Group extends Model\n{\n    /**\n     * Retrieve the members of the group.\n     */\n    public function members()\n    {\n        return $this-&gt;hasMany([\n            Group::class, User::class, Contact::class\n        ], 'memberof')-&gt;using($this, 'member');\n    }\n}\n</code></pre> <p>For brevity, we have not shown the creation of the <code>Contact</code> model.</p> <p>You can see from the above example, we have passed an array of models that are possible members of the group. The difference of this definition is the usage of the <code>using()</code> method.</p> <p>Since LDAP does not offer bi-directional relationships, we must add the <code>using()</code> method. This method defines which model and attribute to use for attaching and detaching related models.</p> <p>In this case, we pass in <code>$this</code> to indicate that the current model instance (the <code>Group</code>) contains the <code>member</code> attribute to add and remove models you pass into the <code>attach()</code> and <code>detach()</code> methods.</p> <p>This method is paramount to be able to properly utilize this relationship.</p> <p>When querying the above relationship, LdapRecord will construct the following filter:</p> <pre><code>(memberof=cn\\3dAccounting\\2cdc\\3dacme\\2cdc\\3dorg)\n</code></pre>"},{"location":"docs/core/v2/model-relationships/#has-many-in","title":"Has Many In","text":"<p>The has many in relationship allows you to retrieve related models from the given parent models virtual attribute such as <code>memberof</code>.</p> <p>Since this relationship uses virtual attributes, you cannot use <code>attach()</code> or <code>detach()</code> methods. This also means that for each entry that is contained in the virtual attribute, they will be queried for individually which can be very resource intensive depending on the group size.</p> <p>Lets define a <code>groups()</code> relationship that utilizes the <code>hasManyIn()</code> method:</p> <pre><code>&lt;?php\n\nuse LdapRecord\\Models\\Model;\n\nclass User extends Model\n{\n    public function groups()\n    {\n        return $this-&gt;hasManyIn(Group::class, 'memberof');\n    }\n}\n</code></pre>"},{"location":"docs/core/v2/model-relationships/#important-note-for-querying","title":"Important Note for Querying","text":"<p>When using the above relationship from query results, you must ensure you select the LDAP property you have defined as the foreign key in the relationship. This attribute contains the values needed to locate the related models.</p> <p>For example, the following relationship query below will return no results because we have explicitly requested attributes excluding <code>memberof</code>:</p> <pre><code>// Selecting only the 'cn', and 'sn' attributes:\n$user = User::select(['cn', 'sn'])-&gt;find('cn=John Doe,dc=local,dc=com');\n\n// Returns an empty collection.\n$groups = $user-&gt;groups()-&gt;get();\n</code></pre>"},{"location":"docs/core/v2/model-relationships/#returning-only-matching-models","title":"Returning Only Matching Models","text":"<p>Important: This feature was added in v2.19.0.</p> <p>When querying relationships on your LdapRecord models, you may receive plain <code>LdapRecord\\Models\\Entry</code> instances if none of the models you have provided in the relationship definition match the result's object classes.</p> <p>For example, an LDAP group may contain users, as well as other groups. To explicitly return only users, you may call the method <code>onlyRelated()</code> to filter the underlying query to match only <code>User</code> instances:</p> <pre><code>class Group extends Model\n{\n    public function users()\n    {\n        return $this-&gt;hasMany(User::class, 'memberof')-&gt;onlyRelated();\n    }\n}\n</code></pre>"},{"location":"docs/core/v2/model-relationships/#querying-relationships","title":"Querying Relationships","text":"<p>LdapRecord relationships also serve as query builders. This means you can chain query builder methods onto relationship methods to add constraints to the relationship query prior to retrieving the results from your directory.</p> <p>For example, lets define a <code>User</code> model that can be a member of many groups:</p> <pre><code>&lt;?php\n\nuse App\\Group;\nuse LdapRecord\\Models\\Model;\n\nclass User extends Model\n{\n    /**\n     * Retrieve groups that the current user is apart of.\n     */\n    public function groups()\n    {\n        return $this-&gt;hasMany(Group::class, 'member');\n    }\n}\n</code></pre> <p>Now, lets retrieve a user's groups, but only return those groups that have a common name starting with 'Admin':</p> <pre><code>$user = User::find('cn=John Doe,dc=local,dc=com');\n\n$adminGroups = $user-&gt;groups()-&gt;whereStartsWith('cn', 'Admin')-&gt;get();\n</code></pre> <p>By default, querying relations will not include recursive results. More on this below.</p>"},{"location":"docs/core/v2/model-relationships/#recursive-queries","title":"Recursive Queries","text":"<p>To request all of the relationships results, such as nested groups in groups, call the <code>recursive()</code> method, prior to retrieving results via <code>get()</code>:</p> <pre><code>$user = User::find('cn=John Doe,dc=local,dc=com');\n\n$allGroups = $user-&gt;groups()-&gt;recursive()-&gt;get();\n</code></pre> <p>Be careful when calling <code>recursive</code> on large sets of group memberships. If you are not careful, you could run out of memory due to thousands of models being returned.</p> <p>The <code>recursive</code> method sets a flag on the LdapRecord relationship indicating you would like recursive results included (groups of groups).</p> <p>Recursive results are gathered by first retrieving the groups that the user is a member of, then retrieving the groups that are members of each resulting parent group. This means an LDAP search query is executed for each group that your user is apart of.</p> <p>Circular group dependencies are rejected automatically to prevent infinite looping.</p>"},{"location":"docs/core/v2/model-relationships/#attaching-detatching-relationships","title":"Attaching &amp; Detatching Relationships","text":"<p>Using relationships you define, you can easily attach and detach related models from each other. For example, you may want to attach a <code>Group</code> to a <code>User</code>, or vice-versa.</p>"},{"location":"docs/core/v2/model-relationships/#attaching","title":"Attaching","text":"<p>Using the above relationship examples, lets walk through attaching a user to a group:</p> <pre><code>$user = User::find('cn=John Doe,dc=local,dc=com');\n$group = Group::find('cn=Accounting,dc=local,dc=com');\n\n// Attaching a group to a user:\n$user-&gt;groups()-&gt;attach($group);\n\n// Attaching a user to a group:\n$group-&gt;members()-&gt;attach($user);\n</code></pre> <p>You may also use the <code>attachMany()</code> method to attach many models at once.</p> <p>For this example, let's say we have an organizational unit that contains groups all new users must be apart of:</p> <pre><code>$ou = OrganizationalUnit::find('ou=Groups,dc=local,dc=com');\n\n$groups = Group::in($ou)-&gt;get();\n\n$user = User::find('cn=John Doe,ou=Users,dc=local,dc=com');\n\n$user-&gt;groups()-&gt;attachMany($groups);\n</code></pre> <p>As you can see above, we took a complex LDAP operation and completed it in just 4 lines of code.</p>"},{"location":"docs/core/v2/model-relationships/#detach","title":"Detach","text":"<p>Using the above relationship examples, lets walk through detaching a user from a group:</p> <pre><code>$user = User::find('cn=John Doe,dc=local,dc=com');\n\n// Retrieve the first group that the user is apart of:\n$group = $user-&gt;groups()-&gt;get()-&gt;first();\n\n$user-&gt;groups()-&gt;detach($group);\n</code></pre> <p>You may also want to detach a user from all groups, if for example they are leaving the company and you it is apart of your off-boarding process.</p> <p>You may accomplish this task by using the <code>detachAll()</code> method:</p> <pre><code>$user = User::find('cn=John Doe,ou=Users,dc=local,dc=com');\n\n$user-&gt;groups()-&gt;detachAll();\n</code></pre>"},{"location":"docs/core/v2/model-relationships/#checking-relationship-existence","title":"Checking Relationship Existence","text":"<p>To check if a model exists inside of a relationship, use the <code>exists()</code> relationship method.</p> <p>If you're using Active Directory and are simply looking to check if a user is inside of a particular group, utilize the <code>Model::whereMemberOf</code> method that is available on all Active Directory models to locate users whom are members of that group.</p> <p>For example, lets determine if a <code>User</code> is a member of a <code>Group</code>:</p> <pre><code>$user = User::find('cn=John Doe,dc=local,dc=com');\n$group = Group::find('cn=Accounting,dc=local,dc=com');\n\nif ($user-&gt;groups()-&gt;exists($group)) {\n    // This user is a member of the 'Accounting' group.\n}\n</code></pre> <p>This method can be used on all relationship types.</p> <p>For another example, lets determine if a <code>User</code> is a <code>manager</code> of another:</p> <pre><code>$user = User::find('cn=John Doe,dc=local,dc=com');\n$manager = User::find('cn=Jane Doe,dc=local,dc=com');\n\nif ($user-&gt;manager()-&gt;exists($manager)) {\n    // Jane Doe is John Doe's manager.\n}\n</code></pre> <p>You can also determine if the model has any groups or members by simply calling <code>exists()</code>:</p> <pre><code>$user = User::find('cn=John Doe,dc=local,dc=com');\n\nif ($user-&gt;manager()-&gt;exists()) {\n    // This user has a manager.\n}\n\nif ($user-&gt;groups()-&gt;exists()) {\n    // This user is a member of at least one group.\n}\n</code></pre>"},{"location":"docs/core/v2/model-scopes/","title":"Models: Scopes","text":""},{"location":"docs/core/v2/model-scopes/#introduction","title":"Introduction","text":"<p>Model \"scoping\" allows you to define functions or classes that dynamically add filters to a model query. There are two types of scopes you may add to models, and there are benefits and drawbacks to each type:</p> <p>Local Scopes:</p> <ul> <li>Applied conditionally on model queries, being called explicitly</li> <li>Can accept parameters</li> </ul> <p>Global Scopes:</p> <ul> <li>Applied globally on model queries</li> <li>Cannot accept parameters</li> </ul>"},{"location":"docs/core/v2/model-scopes/#local-query-scopes","title":"Local Query Scopes","text":""},{"location":"docs/core/v2/model-scopes/#creating-a-local-scope","title":"Creating a local scope","text":"<p>Local scopes allow you to add constraints to LDAP queries created from models dynamically.</p> <p>To define a local scope, create a new <code>public</code> method, prefix it with <code>scope</code>, followed by the name you would like to call the scope by.</p> <p>Local scopes must also accept the <code>LdapRecord\\Query\\Model\\Builder</code> as the first parameter.</p> <p>For this example, let's create a local model scope that will return Active Directory locked out users:</p> <pre><code>use LdapRecord\\Models\\Model;\nuse LdapRecord\\Query\\Model\\Builder;\n\nclass User extends Model\n{\n    // ...\n\n    /**\n     * Apply the scope to the query.\n     *\n     * @param Builder $builder\n     *\n     * @return Builder\n     */\n    public function scopeLockedOut(Builder $query)\n    {\n        return $query-&gt;where('lockouttime', '&gt;', 1);\n    }\n}\n</code></pre>"},{"location":"docs/core/v2/model-scopes/#using-a-local-scope","title":"Using a local scope","text":"<p>Now that we have defined a local scope inside of our model, we can call it like so:</p> <pre><code>$usersLockedOut = User::lockedOut()-&gt;get();\n</code></pre> <p>Local scopes may also be chained, and accept parameters. This allows you further narrowing down your search results.</p> <p>Let's add another scope to our example model that will only return users of a particular company:</p> <pre><code>// User.php\n\npublic function scopeLockedOut(Builder $query)\n{\n    return $query-&gt;where('lockouttime', '&gt;', 1);\n}\n\npublic function scopeCompany(Builder $query, $companyName)\n{\n    return $query-&gt;where('company', '=', $companyName);\n}\n</code></pre> <p>Now we can use both of these scopes in succession:</p> <pre><code>$users = User::company('acme')-&gt;lockedOut()-&gt;get();\n</code></pre> <p>Local scopes are very powerful, allowing you to generate readable, understandable queries!</p>"},{"location":"docs/core/v2/model-scopes/#global-query-scopes","title":"Global Query Scopes","text":"<p>Global scopes allow you to add constraints to all LDAP queries that are created on a particular model. Writing a query scope allows you to be certain that a particular filter is always applied, rather than adding constraints every time you query the model.</p>"},{"location":"docs/core/v2/model-scopes/#creating-a-global-scope","title":"Creating a global scope","text":"<p>To create a global query scope, create a class in your application that implements the <code>LdapRecord\\Models\\Scope</code> interface. This interface will require you to add an <code>apply</code> method. The <code>apply</code> method accepts the query <code>Builder</code> in the first parameter, and the <code>Model</code> in second parameter.</p> <p>For an example, let's say our application must only retrieve user accounts whom are employees of a particular company. We will create a file in our application in the directory <code>app/Ldap/Scopes</code> with the file name <code>CompanyScope</code>:</p> <pre><code>&lt;?php\n\nnamespace App\\Ldap\\Scopes;\n\nuse LdapRecord\\Models\\Scope;\nuse LdapRecord\\Models\\Model;\nuse LdapRecord\\Query\\Model\\Builder;\n\nclass CompanyScope implements Scope\n{\n    /**\n     * Apply the scope to the query.\n     *\n     * @param Builder $builder\n     * @param Model   $model\n     */\n    public function apply(Builder $builder, Model $model)\n    {\n        $builder-&gt;where('company', '=', 'Acme Company');\n    }\n}\n</code></pre> <p>If you are looking to select additional attributes in your scope using the <code>select</code> method, use <code>addSelect</code> instead so your query selects are not overwritten.</p>"},{"location":"docs/core/v2/model-scopes/#apply-the-global-scope","title":"Apply the global scope","text":"<p>Now that we've written our global scope, we can apply it to our users model.</p> <p>We will do this by adding an override to the models <code>boot</code> method and using the <code>addGlobalScope</code> method:</p> <pre><code>&lt;?php\n\nnamespace App\\Ldap;\n\nuse LdapRecord\\Models\\Model;\nuse App\\Ldap\\Scopes\\CompanyScope;\n\nclass User extends Model\n{\n    /**\n     * The \"booting\" method of the model.\n     *\n     * @return void\n     */\n    protected static function boot()\n    {\n        parent::boot();\n\n        static::addGlobalScope(new CompanyScope);\n    }\n}\n</code></pre> <p>After adding the scope, queries ran on the <code>User</code> model will always add the filter:</p> <pre><code>(company=\\41\\63\\6d\\65\\20\\43\\6f\\6d\\70\\61\\6e\\79)\n</code></pre> <p>Which your LDAP server will read as:</p> <pre><code>(company=Acme Company)\n</code></pre> <p>This is due to all values being automatically escaped using the LdapRecord query builder.</p>"},{"location":"docs/core/v2/model-scopes/#anonymous-global-scopes","title":"Anonymous global scopes","text":"<p>Instead of creating a class scope, you may also define global scopes using Closures. This is useful for simple scopes that do not warrant a separate class:</p> <pre><code>&lt;?php\n\nnamespace App\\Ldap;\n\nuse LdapRecord\\Models\\Model;\nuse LdapRecord\\Query\\Model\\Builder;\n\nclass User extends Model\n{\n    /**\n     * The \"booting\" method of the model.\n     *\n     * @return void\n     */\n    protected static function boot()\n    {\n        parent::boot();\n\n        static::addGlobalScope('manager', function (Builder $builder) {\n            $builder-&gt;where('manager', '=', 'cn=John Doe,dc=local,dc=com');\n        });\n    }\n}\n</code></pre>"},{"location":"docs/core/v2/model-scopes/#removing-global-scopes","title":"Removing Global Scopes","text":"<p>If you would like to remove a global scope for a particular query, you may use the <code>withoutGlobalScope</code> method. The method accepts the class name of the global scope as its argument:</p> <pre><code>User::withoutGlobalScope(CompanyScope::class)-&gt;get();\n</code></pre> <p>Or, if you've defined a global scope using a Closure:</p> <pre><code>User::withoutGlobalScope('manager')-&gt;get();\n</code></pre> <p>If you would like to remove several or even all of the global scopes, you may use the <code>withoutGlobalScopes</code> method:</p> <pre><code>// Remove all of the global scopes:\nUser::withoutGlobalScopes()-&gt;get();\n\n// Remove some of the global scopes:\nUser::withoutGlobalScopes([\n    CompanyScope::class, 'manager'\n])-&gt;get();\n</code></pre>"},{"location":"docs/core/v2/model-searching/","title":"Available Model Query Methods (API)","text":"<p>Important: The model query builder extends the base query builder. </p> <p>All of its methods are available on model queries.</p>"},{"location":"docs/core/v2/model-searching/#method-listing","title":"Method Listing","text":""},{"location":"docs/core/v2/model-searching/#appliedscopes","title":"<code>appliedScopes</code>","text":"<p>Get an array of the global scopes that were applied to the model query:</p> <pre><code>$scopes = User::query()-&gt;appliedScopes();\n</code></pre>"},{"location":"docs/core/v2/model-searching/#findbyanr","title":"<code>findByAnr</code>","text":"<p>Find the first matching model by ambiguous naming resolution:</p> <p>Important: If your LDAP server does not support ANR, an equivalent filter will be generated automatically.</p> <pre><code>use LdapRecord\\Models\\ActiveDirectory\\User;\n\nif ($user = User::findByAnr('John Doe')) {\n    // Found user!\n} else {\n    // Not found.\n}\n</code></pre>"},{"location":"docs/core/v2/model-searching/#findbyanrorfail","title":"<code>findByAnrOrFail</code>","text":"<p>Find the first matching model by ambiguous naming resolution or fail:</p> <p>Important: If your LDAP server does not support ANR, an equivalent filter will be generated automatically.</p> <pre><code>use LdapRecord\\Models\\ActiveDirectory\\User;\n\ntry {\n    $user = User::findByAnrOrFail('John Doe');\n} catch (\\LdapRecord\\Models\\ModelNotFoundException $ex) {\n    // Not found.\n}\n</code></pre>"},{"location":"docs/core/v2/model-searching/#findbyguid","title":"<code>findByGuid</code>","text":"<p>Find a model by its string GUID:</p> <pre><code>use LdapRecord\\Models\\ActiveDirectory\\User;\n\n$guid = 'f53c7b48-e8d1-425f-a23a-d1b98d7abfe8';\n\nif ($user = User::findByGuid($guid)) {\n    // Found user!\n} else {\n    // Not found.\n}\n</code></pre>"},{"location":"docs/core/v2/model-searching/#findbyguidorfail","title":"<code>findByGuidOrFail</code>","text":"<p>Find a model by its string GUID or fail:</p> <pre><code>use LdapRecord\\Models\\ActiveDirectory\\User;\n\n$guid = 'f53c7b48-e8d1-425f-a23a-d1b98d7abfe8';\n\ntry {\n    $user = User::findByGuidOrFail($guid);\n} catch (\\LdapRecord\\Models\\ModelNotFoundException $ex) {\n    // Not found.\n}\n</code></pre>"},{"location":"docs/core/v2/model-searching/#findmanybyanr","title":"<code>findManyByAnr</code>","text":"<p>Find multiple models using ambiguous naming resolution or fail:.</p> <pre><code>use LdapRecord\\Models\\ActiveDirectory\\User;\n\n$users = User::findManyByAnr(['Jane', 'John', 'Jack', 'Josh']);\n</code></pre>"},{"location":"docs/core/v2/model-searching/#removedscopes","title":"<code>removedScopes</code>","text":"<p>Get an array of global scopes that were removed from the model query:</p> <pre><code>use LdapRecord\\Models\\ActiveDirectory\\User;\n\n$scopes = User::query()-&gt;withoutGlobalScope(\n    OnlyAccountants::class\n)-&gt;removedScopes();\n</code></pre>"},{"location":"docs/core/v2/model-searching/#withglobalscope","title":"<code>withGlobalScope</code>","text":"<p>Apply a new global scope on the model query:</p> <pre><code>use LdapRecord\\Models\\ActiveDirectory\\User;\n\n// Using a closure...\n$users = User::withGlobalScope('accountants', function ($query) {\n    // ...\n})-&gt;get();\n\n// Using a scope class...\n$users = User::withGlobalScope(\n    Accountants::class, new Accountants\n)-&gt;get();\n</code></pre>"},{"location":"docs/core/v2/model-searching/#withoutglobalscope","title":"<code>withoutGlobalScope</code>","text":"<p>Query a model without a registered global scope:</p> <pre><code>use LdapRecord\\Models\\ActiveDirectory\\User;\n\n$users = User::withoutGlobalScope(Accountants::class)-&gt;get();\n</code></pre>"},{"location":"docs/core/v2/model-searching/#withoutglobalscopes","title":"<code>withoutGlobalScopes</code>","text":"<p>Query a model without all registered global scopes:</p> <pre><code>use LdapRecord\\Models\\ActiveDirectory\\User;\n\n$users = User::withoutGlobalScopes()-&gt;get();\n</code></pre>"},{"location":"docs/core/v2/models/","title":"Models: Getting Started","text":""},{"location":"docs/core/v2/models/#introduction","title":"Introduction","text":"<p>The LdapRecord ORM provides a beautiful and simple ActiveRecord implementation for working with your LDAP server. Each \"Model\" represents a type of LDAP object that resides in your directory.</p> <p>Models allow you query your directory as well as create, update, and delete objects.</p> <p>Before getting started, ensure you've added at least one connection to the container.</p> <p>By default, there are models included with LdapRecord for popular LDAP directories  so you can get up and running as fast as possible. More on this below.</p>"},{"location":"docs/core/v2/models/#defining-models","title":"Defining Models","text":"<p>To get started, you must create a new class that represents the LDAP object you would like to query.</p> <p>For example, let's create a model that represents Active Directory users:</p> <pre><code>&lt;?php\n\nuse LdapRecord\\Models\\Model;\n\nclass User extends Model\n{\n    public static $objectClasses = [\n        'top',\n        'person',\n        'organizationalperson',\n        'user',\n    ];\n}\n</code></pre> <p>As you can see above, we must add a public static property that contains the object classes of the LDAP record.</p> <p>These object classes are used to locate the proper objects in your LDAP directory.</p> <p>If you do not provide any object classes, global directory searches will be performed when retrieving models.</p>"},{"location":"docs/core/v2/models/#predefined-models","title":"Predefined Models","text":"<p>LdapRecord comes with many predefined models that allow you to get started right away.</p> <p>You may extend these built-in models and add your own methods &amp; functionality, as well as override built-in functionality.</p> <p>Important: Make sure you import the classes with the exact casing shown below. PHP imports in Linux environments are case sensitive.</p>"},{"location":"docs/core/v2/models/#entry-model","title":"Entry Model","text":"<p>Use the <code>LdapRecord\\Models\\Entry</code> model for retrieving all objects from your directory - regardless of type.</p>"},{"location":"docs/core/v2/models/#active-directory-models","title":"Active Directory Models","text":"<p>Each below model references a type of object in Active Directory.</p> Model <code>LdapRecord\\Models\\ActiveDirectory\\Entry</code> <code>LdapRecord\\Models\\ActiveDirectory\\User</code> <code>LdapRecord\\Models\\ActiveDirectory\\Group</code> <code>LdapRecord\\Models\\ActiveDirectory\\Computer</code> <code>LdapRecord\\Models\\ActiveDirectory\\Contact</code> <code>LdapRecord\\Models\\ActiveDirectory\\Container</code> <code>LdapRecord\\Models\\ActiveDirectory\\OrganizationalUnit</code> <code>LdapRecord\\Models\\ActiveDirectory\\Printer</code> <code>LdapRecord\\Models\\ActiveDirectory\\ForeignSecurityPrincipal</code>"},{"location":"docs/core/v2/models/#openldap-models","title":"OpenLDAP Models","text":"Model <code>LdapRecord\\Models\\OpenLDAP\\Entry</code> <code>LdapRecord\\Models\\OpenLDAP\\User</code> <code>LdapRecord\\Models\\OpenLDAP\\Group</code> <code>LdapRecord\\Models\\OpenLDAP\\OrganizationalUnit</code>"},{"location":"docs/core/v2/models/#freeipa-models","title":"FreeIPA Models","text":"Model <code>LdapRecord\\Models\\FreeIPA\\Entry</code> <code>LdapRecord\\Models\\FreeIPA\\User</code> <code>LdapRecord\\Models\\FreeIPA\\Group</code> <p>Don't see a model for the LDAP server you're using? Create a pull request!</p>"},{"location":"docs/core/v2/models/#connections","title":"Connections","text":"<p>By default, all models you create will try to use your <code>default</code> LDAP connection that resides in the connection container. To set your model to use an alternate connection, define a <code>$connection</code> property equal to the name of your other connection.</p> <pre><code>&lt;?php\n\nuse LdapRecord\\Models\\Model;\n\nclass User extends Model\n{\n    protected $connection = 'domain-b';\n}\n</code></pre>"},{"location":"docs/core/v2/models/#changing-connections","title":"Changing Connections","text":"<p>Important: When changing connections, be sure that the connection you swap to is of the same type (i.e. Active Directory, OpenLDAP, etc.), otherwise you may have unintended results when performing operations.</p> <p>You may also swap the connection to use on a per-query basis by using <code>Model::on($connectionName)</code>:</p> <pre><code>// Users will be retrieved from the \"domain-b\"\n// connection defined in the configuration,\n// and have this connection set:\n$users = User::on('domain-b')-&gt;get();\n</code></pre> <p>You may also swap the connection to use on a per-model basis by using <code>$model-&gt;setConnection($connectionName)</code>:</p> <pre><code>$user = User::find('cn=john doe,dc=local,dc=com');\n\n// All further operations executed on the user\n// model will be performed on the \"domain-b\"\n// connection defined in the configuration:\n$user-&gt;setConnection('domain-b');\n\n$user-&gt;rename('...');\n</code></pre>"},{"location":"docs/core/v2/models/#distinguished-names","title":"Distinguished Names","text":"<p>To get an objects full distinguished name call the <code>getDn</code> method:</p> <pre><code>$user = User::find('cn=user,dc=local,dc=com');\n\n// Returns 'cn=user,dc=local,dc=com'\n$user-&gt;getDn();\n</code></pre> <p>To get an objects relative distinguished name, call the <code>getRdn</code> method:</p> <pre><code>$user = User::find('cn=user,dc=local,dc=com');\n\n// Returns 'cn=user'\n$user-&gt;getRdn();\n</code></pre> <p>To get an objects parent distinguished name, call the <code>getParentDn</code> method:</p> <pre><code>$user = User::find('cn=user,dc=local,dc=com');\n\n// Returns 'dc=local,dc=com'\n$user-&gt;getParentDn();\n</code></pre> <p>To get an objects name, call the <code>getName</code> method:</p> <pre><code>$user = User::find('cn=user,dc=local,dc=com');\n\n// Returns 'user'\n$user-&gt;getName();\n</code></pre>"},{"location":"docs/core/v2/models/#object-guids","title":"Object GUIDs","text":"<p>To retrieve a models Object GUID (globally unique identifier) call the <code>getConvertedGuid</code> method.</p> <p>This method will return the string variant of your models GUID. Some LDAP directories (namely Active Directory) use hexadecimal byte arrays to store these, so conversion is necessary.</p> <pre><code>$user = User::find('cn=user,dc=local,dc=com');\n\n$user-&gt;getConvertedGuid();\n</code></pre> <p>To retrieve the raw GUID value, use the <code>getObjectGuid</code> method.</p> <p>By default, LdapRecord models will use the <code>objectguid</code> attribute in the above methods. If your directory stores GUIDs in a different attribute, define a <code>$guidKey</code> attribute inside of your model:</p> <pre><code>class User extends Model\n{\n    protected $guidKey = 'entryuuid';\n}\n</code></pre>"},{"location":"docs/core/v2/models/#default-attribute-values","title":"Default Attribute Values","text":"<p>If you would like to define the default values for some of your model's attributes, you may define an <code>$attributes</code> property on your model. This helps you to assign static default values when creating objects in your directory:</p> <p>Due to LDAP's multi-valued nature, each attribute value you define must be an array, regardless if it is single-valued or or multi-valued.</p> <pre><code>class User extends Model\n{\n    protected $attributes = [\n        'company' =&gt; ['Acme'],\n        'description' =&gt; ['User Account'],\n        'manager' =&gt; ['cn=John Doe,dc=local,dc=com']\n    ];\n}\n</code></pre>"},{"location":"docs/core/v2/models/#retrieving-models","title":"Retrieving Models","text":"<p>Once you've created an LdapRecord model you're ready to start retrieving data from your directory. If you've used Laravel's Eloquent ORM, you'll feel right at home.</p> <p>You can think of a model as a powerful query builder allowing you to query your directory for objects fluently and easily.</p> <pre><code>&lt;?php\n\n$users = User::get();\n\nforeach ($users as $user) {\n    $user-&gt;getFirstAttribute('cn');\n}\n</code></pre>"},{"location":"docs/core/v2/models/#adding-constraints","title":"Adding Constraints","text":"<p>Each model serves as a query builder for the object classes you've defined inside. You can add constraints to your queries and then call <code>get()</code> to retrieve the results.</p> <pre><code>&lt;?php\n\n$users = User::whereStartsWith('cn', 'John')\n            -&gt;whereEndsWith('sn', 'Doe')\n            -&gt;limit(10)\n            -&gt;get();\n</code></pre> <p>Since models are query builders, it's a good idea to review the query builder methods so you can utilize them to their full potential.</p>"},{"location":"docs/core/v2/models/#model-constraints","title":"Model Constraints","text":"<p>Models come with some built in constraint methods that you may find useful.</p> <p>The below constraints will only retrieve the models that are equal to the type you have retrieved. For example, retrieving the descendants of an organizational unit will only return organizational units that are direct descendants.</p> <p>If you would like to avoid this, use the default <code>LdapRecord\\Models\\Entry</code> model, which provides no <code>objectclass</code> constraints on queries.</p>"},{"location":"docs/core/v2/models/#ancestors","title":"Ancestors","text":"<p>To retrieve the direct ancestors of a model, call the <code>ancestors()</code> constraint on a retrieved model:</p> <pre><code>$ou = OrganizationalUnit::find('ou=Accountants,ou=Users,dc=local,dc=com');\n\n$ancestors = $ou-&gt;ancestors()-&gt;get();\n</code></pre> <p>The above example will execute a <code>listing</code> on your LDAP directory in the distinguished name <code>dc=local,dc=com</code>. This effectively pulls the ancestors of the model.</p>"},{"location":"docs/core/v2/models/#siblings","title":"Siblings","text":"<p>To retrieve the siblings of a model, call the <code>siblings()</code> constraint on a retrieved model:</p> <pre><code>$ou = OrganizationalUnit::find('ou=Accountants,ou=Users,dc=local,dc=com');\n\n$siblings = $ou-&gt;siblings()-&gt;get();\n</code></pre> <p>The above example will execute a <code>listing</code> on your LDAP directory in the distinguished name <code>ou=Users,dc=local,dc=com</code>. This effectively pulls the siblings of the model. The current model will also be included in the resulting collection.</p>"},{"location":"docs/core/v2/models/#descendants","title":"Descendants","text":"<p>To retrieve the descendants of a model, call the <code>descendants()</code> constraint on a retrieved model:</p> <pre><code>$ou = OrganizationalUnit::find('ou=Accountants,ou=Users,dc=local,dc=com');\n\n$descendants = $ou-&gt;descendants()-&gt;get();\n</code></pre> <p>The above example will execute a <code>listing</code> on your LDAP directory in the distinguished name <code>ou=Accountants,ou=Users,dc=local,dc=com</code>. This effectively pulls the descendants of the model.</p>"},{"location":"docs/core/v2/models/#refreshing-models","title":"Refreshing Models","text":"<p>To re-retrieve a new model from your directory, call the <code>fresh()</code> method. Doing so will not affect the existing instance you already have:</p> <pre><code>$user = User::where('cn', '=', 'jdoe')-&gt;first();\n\n$freshUser = $user-&gt;fresh();\n</code></pre> <p>If you would like to re-retrieve the existing model, call the <code>refresh()</code> method. This will re-retrieve the models attributes from the directory:</p> <pre><code>$user = User::where('cn', '=', 'jdoe')-&gt;first();\n\n$user-&gt;refresh();\n</code></pre>"},{"location":"docs/core/v2/models/#collections","title":"Collections","text":"<p>When you query your models, returned results will be contained inside of a <code>LdapRecord\\Query\\Collection</code>. The <code>Collection</code> class directly extends Laravel's collection. Be sure to check out its documentation for all of the available helpful methods.</p> <pre><code>&lt;?php\n\n$users = User::get();\n\n$usersWithEmail = $users-&gt;filter(function (User $user) {\n    return $user-&gt;hasAttribute('mail');\n});\n</code></pre>"},{"location":"docs/core/v2/models/#retrieving-single-models","title":"Retrieving Single Models","text":"<p>If you would like to retrieve a single model from your directory, you can utilize a variety of methods. Here is a list and usage of each:</p> Method <code>first()</code> <code>find($distinguishedName)</code> <code>findBy($attributeName, $attributeValue)</code> <code>findByAnr($attributeValue)</code> <code>findByGuid($objectGuid)</code> <pre><code>// Retrieve the first model of a global LDAP search...\n$user = User::first();\n\n// Retrieve a model by its distinguished name...\n$user = User::find('cn=John Doe,dc=local,dc=com');\n\n// Retrieve the first model that matches the attribute...\n$user = User::findBy('cn', 'John Doe');\n\n// Retrieve the first model that matches an array of ANR attributes...\n$user = User::findByAnr('John Doe');\n\n// Retrieve a model by its object guid...\n$user = User::findByGuid('bf9679e7-0de6-11d0-a285-00aa003049e2');\n</code></pre>"},{"location":"docs/core/v2/models/#not-found-exceptions","title":"Not Found Exceptions","text":"<p>Occasionally you may want to throw an exception if a specific record you're looking for cannot be found on your directory. You can substitute the above methods with <code>OrFail()</code> variants:</p> Method <code>firstOrFail()</code> <code>findOrFail($distinguishedName)</code> <code>findByOrFail($attributeName, $attributeValue)</code> <code>findByAnrOrFail($attributeValue)</code> <code>findByGuidOrFail($objectGuid)</code> <pre><code>try {\n    // Retrieve the first model of a global LDAP search or fail...\n    $user = User::firstOrFail();\n\n    // Retrieve a model by its distinguished name or fail...\n    $user = User::findOrFail('cn=John Doe,dc=local,dc=com');\n\n    // Retrieve the first model that matches the attribute or fail...\n    $user = User::findByOrFail('cn', 'John Doe');\n\n    // Retrieve the first model that matches an array of ANR attributes or fail...\n    $user = User::findByAnrOrFail('John Doe');\n\n    // Retrieve a model by its object guid or fail...\n    $user = User::findByGuidOrFail('bf9679e7-0de6-11d0-a285-00aa003049e2');\n} catch (\\LdapRecord\\Models\\ModelNotFoundException $e) {\n    // One of the models could not be located...\n}\n</code></pre>"},{"location":"docs/core/v2/models/#creating-updating-models","title":"Creating &amp; Updating Models","text":""},{"location":"docs/core/v2/models/#creating","title":"Creating","text":"<p>Before we begin it is paramount to know that LDAP objects require a Distinguished Name to be created successfully in your LDAP directory. LdapRecord will always attempt to generate a Distinguished Name for models that do not have one upon <code>save</code>. In addition, some LDAP objects require more attributes to be set for successful creation.</p> <p>For example, to create a <code>User</code> object in Active Directory, the <code>cn</code> (Common Name) attribute is required. If you do not set this attribute, an exception will be thrown upon saving your LDAP model. For another example, <code>OrganizationlUnit</code>'s must have the <code>ou</code> attribute set.</p> <p>LdapRecord cannot validate this for you as LDAP objects differ widely in their attribute requirements.</p> <p>To create a new record in your directory, create a new model instance and call the <code>save()</code> method. Upon calling <code>save()</code>, if no Distinguished Name is set on a new model, one will be generated based on your configured <code>base_dn</code> that you have set inside your connections configuration:</p> <pre><code>$conn = new Connection([\n    // ...\n    'base_dn' =&gt; 'dc=local,dc=com',\n]);\n\n$conn-&gt;connect();\n\n$user = new User();\n\n$user-&gt;cn = 'John Doe';\n\n// User will be saved with the DN: 'cn=John Doe,dc=local,dc=com\n$user-&gt;save();\n</code></pre>"},{"location":"docs/core/v2/models/#dynamic-distinguished-name-generation","title":"Dynamic Distinguished Name Generation","text":"<p>LdapRecord generates a models distinguished name via the model method <code>getCreatableRdn</code>. This method is responsible for generating the \"Relative Distinguished Name\" which is the true name of the object inside of your LDAP directory that does not include your base Distinguished Name.</p> <p>Since most LDAP objects require a Common Name (<code>cn</code>) this is defaulted to:</p> <pre><code>/**\n * Get a creatable RDN for the model.\n *\n * @return string\n */\npublic function getCreatableRdn()\n{\n    $name = $this-&gt;escape($this-&gt;getFirstAttribute('cn'))-&gt;dn();\n\n    return \"cn=$name\";\n}\n</code></pre> <p>As you can see above, the attribute is escaped before being passed into the RDN string. You must do this, otherwise if commas or other reserved characters are inside the attribute you are using, it will generate a malformed distinguished name.</p> <p>You may override this method to allow your models Distinguished Name's to be dynamically generated rather than creating them yourself manually. For example, here is how we would set the Relative Distinguished Name (RDN) for an Active Directory <code>OrganizationalUnit</code> model:</p> <pre><code>public function getCreatableRdn()\n{\n    $name = $this-&gt;escape($this-&gt;getFirstAttribute('ou'))-&gt;dn();\n\n    return \"ou=$name\";\n}\n</code></pre> <p>This then gets prepended onto your connections configured <code>base_dn</code>, for a resulting \"Full\" Distinguished Name:</p> <pre><code>ou=MyOrganizationalUnitName,dc=local,dc=com\n</code></pre> <p>You may set the base DN of where you would like the object to be created inside by using the <code>inside()</code> method, rather than your <code>base_dn</code> from your configuration:</p> <pre><code>$user = new User(['cn' =&gt; 'John Doe']);\n\n$user-&gt;inside('ou=Users,dc=local,dc=com');\n\n$user-&gt;save();\n</code></pre> <p>You may also pass in an LdapRecord <code>Model</code> instance. This is convenient so you know the container / organizational unit distinguished name is valid:</p> <pre><code>$ou = OrganizationalUnit::findOrFail('ou=Users,dc=local,dc=com');\n\n$user = new User(['cn' =&gt; 'John Doe']);\n\n$user-&gt;inside($ou)-&gt;save();\n</code></pre> <p>The above examples will save the user inside the <code>Users</code> OU resulting in the full distinguished name:</p> <pre><code>cn=John Doe,ou=Users,dc=local,dc=com\n</code></pre>"},{"location":"docs/core/v2/models/#setting-a-distinguished-name","title":"Setting A Distinguished Name","text":"<p>To set the models distinguished name, call the <code>setDn()</code> method on your model and populate it with any organization unit or container that you would like it to be created inside:</p> <pre><code>$user = new User();\n\n$user-&gt;cn = 'John Doe';\n\n$user-&gt;setDn('cn=John Doe,ou=Users,dc=local,dc=com');\n\n$user-&gt;save();\n</code></pre>"},{"location":"docs/core/v2/models/#updating","title":"Updating","text":"<p>Updating models is as easy as creating them. When you have a model returned from a query, set its attributes as you would for creating and call the <code>save()</code> method:</p> <pre><code>$user = User::first();\n\n$user-&gt;company = 'My Company';\n$user-&gt;samaccountname = 'jdoe';\n$user-&gt;department = 'Accounting';\n$user-&gt;displayname = 'Johnathan Doe';\n\n$user-&gt;save();\n</code></pre>"},{"location":"docs/core/v2/models/#moving","title":"Moving","text":"<p>To move existing models into Organizational Units or Containers, call the <code>move()</code> method:</p> <p>When moving a model is successful, the users distinguished name will be automatically updated to reflect its new location in your directory, so you may continue to run operations on it during the same request.</p> <pre><code>$user = User::find('cn=Steve Bauman,dc=local,dc=com');\n\n$ou = OrganizationalUnit::find('ou=Office Users,dc=local,dc=com');\n\n$user-&gt;move($ou);\n\n// Displays 'cn=Steve Bauman,ou=Office Users,dc=local,d=com'\necho $user-&gt;getDn();\n</code></pre>"},{"location":"docs/core/v2/models/#renaming","title":"Renaming","text":"<p>To rename existing models, call the <code>rename()</code> method and supply the new objects name:</p> <p>When renaming is successful, the users distinguished name is automatically updated to reflect its new name in the directory, so you may run further operations on it during the same request.</p> <pre><code>$user = User::find('cn=John Doe,dc=local,dc=com');\n\n$user-&gt;rename('Jane Doe');\n\n// Displays 'cn=Jane Doe,dc=local,dc=com'\necho $user-&gt;getDn();\n</code></pre>"},{"location":"docs/core/v2/models/#restoring-deleted-models","title":"Restoring Deleted Models","text":"<p>Important: This feature is only possible when connecting to an Active Directory server.</p> <p>To restore a deleted object, we must first query the directory for deleted objects by using the <code>whereDeleted</code> method:</p> <pre><code>use LdapRecord\\LdapRecordException;\nuse LdapRecord\\Models\\ActiveDirectory\\User;\n\n$user = User::whereDeleted()\n            -&gt;where('mail', '=', 'sbauman@local.com')\n            -&gt;first();\n\ntry {\n    $user-&gt;restore();\n\n    // Successfully restored user.\n} catch (LdapRecordException $ex) {\n    // Failed restoring user.\n}\n</code></pre> <p>If you're including deleted results in your queries using the <code>withDeleted</code> clause, you can call the <code>isDeleted</code> method to check if an object has been deleted:</p> <pre><code>$users = User::withDeleted()-&gt;get();\n\nforeach ($users as $user) {\n    if ($user-&gt;isDeleted()) {\n        $user-&gt;restore();\n    }\n}\n</code></pre> <p>If you call <code>restore</code> on a non-deleted object, it will simply return <code>false</code>:</p> <pre><code>$user = User::where('cn', '=', 'Steve Bauman')-&gt;first();\n\n$result = $user-&gt;restore();\n\n// Displays bool(false)\nvar_dump($result);\n</code></pre>"},{"location":"docs/core/v2/models/#attributes","title":"Attributes","text":""},{"location":"docs/core/v2/models/#methods","title":"Methods","text":"<p>There are many built-in methods on models you may utilize.</p> <p><code>Model::getAttributes()</code></p> <p>The <code>getAttributes</code> method returns all of the values on the model:</p> <pre><code>$user = User::first();\n\n$attributes = $user-&gt;getAttributes();\n\nforeach ($attributes as $name =&gt; $values) {\n    //\n}\n</code></pre> <p>In the above example, <code>$values</code> will always be an array.</p> <p><code>Model::getAttribute($name)</code></p> <p>The <code>getAttribute</code> method returns all of the values inside the given key. This will return an <code>array</code> if the attribute exists:</p> <pre><code>$group = Group::first();\n\n$members = $group-&gt;getAttribute('member');\n\nforeach ($members ?? [] as $member) {\n    echo $member;\n}\n</code></pre> <p><code>Model::getFirstAttribute($name)</code></p> <p>The <code>getFirstAttribute</code> method returns the first value of the given key. This will always return <code>null</code> or <code>string</code>:</p> <pre><code>$group = Group::first();\n\n$firstMember = $group-&gt;getFirstAttribute('member');\n</code></pre> <p><code>Model::hasAttribute()</code></p> <p>The <code>hasAttribute</code> method determines whether the model contains the key in the models attributes:</p> <pre><code>$user = User::first();\n\nif ($user-&gt;hasAttribute('company')) {\n    //\n}\n</code></pre> <p><code>Model::addAttributeValue($name, $value)</code></p> <p>To add a value to an attribute without clearing it, use the <code>addAttributeValue</code> method:</p> <pre><code>$user = User::first();\n\n$user-&gt;addAttributeValue('proxyaddresses', 'SMTP:sbauman@local.com');\n</code></pre> <p><code>Model::countAttributes()</code></p> <p>The <code>countAttributes</code> method returns the number of attributes the model contains:</p> <pre><code>$user = User::first();\n\necho $user-&gt;countAttributes();\n</code></pre>"},{"location":"docs/core/v2/models/#array-conversion","title":"Array Conversion","text":"<p>Attributes you retrieve from an LdapRecord model will always return and array. This is due to LDAP's multi-valued nature.</p> <p>For example, if you would like to retrieve the users <code>mail</code> attribute, you must request the first key from it:</p> <pre><code>$user = User::find('cn=John Doe,dc=local,dc=com');\n\n// Get the users email address.\necho $user-&gt;mail[0] ?? null;\n</code></pre> <p>Or if you'd prefer, use the <code>getFirstAttribute()</code> method:</p> <pre><code>$user = User::find('cn=John Doe,dc=local,dc=com');\n\n// Get the users email address.\necho $user-&gt;getFirstAttribute('mail');\n</code></pre> <p>When setting attributes on models, they will automatically be converted to an array for you if you do not provide one.</p> <pre><code>$user = User::find('cn=John Doe,dc=local,dc=com');\n\n// Both approaches will set the attribute identically:\n$user-&gt;mail = 'jdoe@acme.org';\n$user-&gt;mail = ['jdoe@acme.org'];\n</code></pre> <p>Similarly, you can use the <code>setFirstAttribute()</code> method to set the attributes first value in its array, even if it does not currently exist on the model:</p> <pre><code>$user = User::find('cn=John Doe,dc=local,dc=com');\n\n// Set the users email address.\n$user-&gt;setFirstAttribute('mail', 'jdoe@acme.org');\n</code></pre>"},{"location":"docs/core/v2/models/#determining-attribute-existence","title":"Determining Attribute Existence","text":"<p>To check if a model has an attribute, you can use the <code>hasAttribute()</code> method:</p> <pre><code>if ($user-&gt;hasAttribute('mail')) {\n    // This user has an email address.\n}\n</code></pre> <p>As with all other attribute methods, this check is case-insensitive. You may pass any type of casing of the attribute you are looking for:</p> <pre><code>// Both will return 'true':\n$user-&gt;hasAttribute('samaccountname');\n$user-&gt;hasAttribute('sAMAccountname');\n</code></pre>"},{"location":"docs/core/v2/models/#casing-hyphens","title":"Casing &amp; Hyphens","text":""},{"location":"docs/core/v2/models/#attribute-casing","title":"Attribute Casing","text":"<p>LdapRecord automatically normalizes all attribute keys to lowercase. This means when setting or getting model attributes, you can use alternate casing and the same attribute will be set or retrieved.</p> <p>This is extremely handy so you do not have to look up the casing of each attribute every time you want to set or retrieve one. This also means you can use your own attribute convention:</p> <pre><code>$user = new User();\n\n// Each will set the same attribute:\n$user-&gt;samaccountname = 'John Doe';\n$user-&gt;sAMAccountName = 'John Doe';\n$user-&gt;samAccountName = 'John Doe';\n</code></pre>"},{"location":"docs/core/v2/models/#attribute-hyphens","title":"Attribute Hyphens","text":"<p>Since LDAP does not support underscores in LDAP attributes but does support using hyphens, anytime you would like to set an attribute that contains a hypen, set it using an underscore instead. LdapRecord will automatically convert the underscore to a hyphen dynamically:</p> <pre><code>$user = new User();\n\n$user-&gt;some_attribute = 'Value';\n</code></pre> <p>Similarly, when retrieving attributes that contain a hyphen, use an underscore instead:</p> <pre><code>$user = User::find('cn=John Doe,dc=local,dc=com');\n\n// Each method below will act identically:\necho $user-&gt;some_attribute[0];\necho $user-&gt;getAttribute('some-attribute')[0];\necho $user-&gt;getFirstAttribute('some-attribute');\n</code></pre>"},{"location":"docs/core/v2/models/#deleting-models","title":"Deleting Models","text":"<p>To delete a record from your directory, call the <code>delete()</code> method on a model you have retrieved:</p> <pre><code>&lt;?php\n\n$user = User::first();\n\n$user-&gt;delete();\n</code></pre> <p>The account you have configured to bind to your LDAP server must have permission to delete the record you have retrieved. If it does not, you will receive an exception upon deletion.</p>"},{"location":"docs/core/v2/models/#deleting-models-by-distinguished-name","title":"Deleting Models By Distinguished Name","text":"<p>In the example above, we are retrieving the record from the directory prior to deletion. However, if you'd like to simply delete a model by its distinguished name, call the <code>destroy()</code> method. The number of deleted models will be returned from this method:</p> <pre><code>&lt;?php\n\n// Deleting single object...\n$deleted = User::destroy('cn=John Doe,dc=local,dc=com');\n\n// Deleting multiple objects...\n$deleted = User::destroy([\n    'cn=John Doe,dc=local,dc=com',\n    'cn=Jane Doe,dc=local,dc=com',\n]);\n</code></pre> <p>You may also pass in <code>true</code> into the second parameter to recursively delete leaf entries if a record is located by the distinguished name you have given.</p>"},{"location":"docs/core/v2/models/#recursive-deleting","title":"Recursive Deleting","text":"<p>Sometimes you will be working with containers or organizational units that contain nested objects inside of them. Calling <code>delete()</code> on these objects will generate an exception without first deleting the objects inside. If you would like to delete all objects contained inside of another model, pass in <code>true</code> in the first parameter of the <code>delete()</code> method:</p> <pre><code>&lt;?php\n\n$ou = OrganizationalUnit::find('ou=Users,dc=local,dc=com');\n\n$ou-&gt;delete($recursive = true);\n</code></pre>"},{"location":"docs/core/v2/models/#comparing-models","title":"Comparing Models","text":"<p>If you ever need to compare to models to see if they are the same, call the the <code>is()</code> method. This method will determine if the models have the same distinguished name and connection:</p> <pre><code>if ($user-&gt;is($anotherUser)) {\n    //\n}\n</code></pre> <p>To see if a model is contained inside an organizational unit or another type of container, call the <code>isDescendantOf()</code> method:</p> <pre><code>$ou = OrganizationalUnit::find('ou=User Accounts,dc=local,dc=com');\n$user = User::find('cn=John Doe,ou=User Accounts,dc=local,dc=com');\n\nif ($user-&gt;isDescendantOf($ou)) {\n    // This user is contained inside this organizational unit.\n}\n</code></pre> <p>You may also want to know whether a model is an ancestor of another. To do so, call the <code>isAncestorOf()</code> method:</p> <pre><code>$user = User::find('cn=John Doe,ou=User Accounts,dc=local,dc=com');\n$ou = OrganizationalUnit::find('ou=User Accounts,dc=local,dc=com');\n\nif ($ou-&gt;isAncestorOf($user)) {\n    // This OU is an ancestor of this user.\n}\n</code></pre> <p>Calling <code>isDescendantOf()</code> or <code>isAncestorOf()</code> performs recursive checks. If a model is contained in a nested OU / container of the one you are checking, the methods will return <code>true</code>.</p> <pre><code>$ou = OrganizationalUnit::find('ou=User Accounts,dc=local,dc=com');\n$user = User::find('cn=John Doe,ou=Accounting,ou=User Accounts,dc=local,dc=com');\n\n// This will return true:\nif ($user-&gt;isDescendantOf($ou)) {\n    //\n}\n\n// This will return true:\nif ($ou-&gt;isAncestorOf($user)) {\n    //\n}\n</code></pre> <p>To perform non-recursive checks, such as checking if a model is a direct child of another model, call the <code>isChildOf</code> method:</p> <pre><code>$ou = OrganizationalUnit::find('ou=User Accounts,dc=local,dc=com');\n$user = User::find('cn=John Doe,ou=User Accounts,dc=local,dc=com');\n\nif ($user-&gt;isChildOf($ou)) {\n    //\n}\n</code></pre> <p>To perform the opposite, such as checking if a model is a parent of another, call the <code>isParentOf</code> method:</p> <pre><code>$officeOu = OrganizationalUnit::find('ou=Office,ou=User Accounts,dc=local,dc=com');\n$userAccountsOu = OrganizationalUnit::find('ou=User Accounts,dc=local,dc=com');\n\nif ($userAccountsOu-&gt;isParentOf($officeOu)) {\n    //\n}\n</code></pre>"},{"location":"docs/core/v2/models/#events","title":"Events","text":"<p>LdapRecord models fire several different events during the creation, updating and deletion. Here is a list of all the events you can listen for:</p> Event <code>LdapRecord\\Models\\Events\\Creating</code> <code>LdapRecord\\Models\\Events\\Created</code> <code>LdapRecord\\Models\\Events\\Updating</code> <code>LdapRecord\\Models\\Events\\Updated</code> <code>LdapRecord\\Models\\Events\\Saving</code> <code>LdapRecord\\Models\\Events\\Saved</code> <code>LdapRecord\\Models\\Events\\Deleting</code> <code>LdapRecord\\Models\\Events\\Deleted</code> <p>To listen for these events, call the <code>getEventDispatcher()</code> on the <code>LdapRecord\\Container</code> to retrieve the dispatcher, then call <code>listen()</code> on the returned dispatcher:</p> <pre><code>&lt;?php\n\nuse LdapRecord\\Container;\nuse LdapRecord\\Models\\Events\\Creating;\n\n$dispatcher = Container::getEventDispatcher();\n\n$dispatcher-&gt;listen(Creating::class, function ($event) {\n    $model = $event-&gt;getModel();\n});\n</code></pre> <p>You will want to setup any listeners prior to making changes to models, otherwise your listener will not be executed due to them not existing yet.</p>"},{"location":"docs/core/v2/models/#serialization","title":"Serialization","text":"<p>All model instances can be converted to an array for JSON serialization. To serialize a model instance, simply pass the model into <code>json_encode()</code>. This calls <code>jsonSerialize()</code> on the model to retrieve is serializable data:</p> <pre><code>&lt;?php\n\n$user = User::first();\n\necho json_encode($user);\n</code></pre>"},{"location":"docs/core/v2/models/#hiding-attributes","title":"Hiding Attributes","text":"<p>You may want to exclude certain attributes from being included in the serialization of your model, such as <code>userPassword</code> for OpenLDAP.</p> <p>To do this, add a <code>$hidden</code> property to your model:</p> <pre><code>use LdapRecord\\Models\\Model;\n\nclass User extends Model\n{\n    protected $hidden = ['userPassword'];\n}\n</code></pre> <p>Now when you <code>json_encode($model)</code>, all attributes will be included except the <code>userPassword</code> attribute.</p> <p>If you'd prefer a white-list of attributes, you can add a <code>$visible</code> property instead, which will ensure only the attributes specified will be included in serialization:</p> <pre><code>use LdapRecord\\Models\\Model;\n\nclass User extends Model\n{\n    protected $visible = ['cn', 'mail', 'sn'];\n}\n</code></pre>"},{"location":"docs/core/v2/models/#converting-attributes-to-json","title":"Converting Attributes to JSON","text":"<p>Depending on the type of LDAP directory and model you are working with, you may need to convert some attributes to a string before it can be properly serialized. For example, if you your model is from Active Directory, you will need to convert the <code>objectguid</code> property to a string since it is in binary, otherwise <code>json_encode()</code> will throw an exception.</p> <p>This can be done by adding a <code>convertAttributesForJson()</code> method to your model:</p> <p>By default, the <code>objectguid</code> and <code>objectsid</code> attributes are converted for you when using the built-in Active Directory models.</p> <pre><code>&lt;?php\n\nuse LdapRecord\\Models\\Model;\n\nclass User extends Model\n{\n    protected function convertAttributesForJson(array $attributes = [])\n    {\n        if ($this-&gt;hasAttribute('objectguid')) {\n            // If the model has a GUID set, we need to convert it due to it being in\n            // binary. Otherwise we will receive a JSON serialization exception.\n            return array_replace($attributes, [\n                'objectguid' =&gt; [$this-&gt;getConvertedGuid()]\n            ]);\n        }\n\n        return $attributes;\n    }\n}\n</code></pre>"},{"location":"docs/core/v2/quickstart/","title":"Quick Start","text":"<p>Install LdapRecord using composer:</p> <pre><code>composer require directorytree/ldaprecord\n</code></pre> <p>Use LdapRecord:</p> <pre><code>use LdapRecord\\Container;\nuse LdapRecord\\Connection;\nuse LdapRecord\\Models\\Entry;\n\n// Create a new connection:\n$connection = new Connection([\n    'hosts' =&gt; ['192.168.1.1'],\n    'port' =&gt; 389,\n    'base_dn' =&gt; 'dc=local,dc=com',\n    'username' =&gt; 'cn=user,dc=local,dc=com',\n    'password' =&gt; 'secret',\n]);\n\n// Add the connection into the container:\nContainer::addConnection($connection);\n\n// Get all objects:\n$objects = Entry::get();\n\n// Get a single object:\n$object = Entry::find('cn=John Doe,dc=local,dc=com');\n\n// Getting attributes:\nforeach ($object-&gt;memberof as $group) {\n    echo $group;\n}\n\n// Modifying attributes:\n$object-&gt;company = 'My Company';\n\n// Saving changes:\n$object-&gt;save();\n</code></pre>"},{"location":"docs/core/v2/searching-api/","title":"Available Search Methods (API)","text":""},{"location":"docs/core/v2/searching-api/#method-listing","title":"Method Listing","text":""},{"location":"docs/core/v2/searching-api/#addcontrol","title":"<code>addControl</code>","text":"<p>Add a server control to be executed with the LDAP search query:</p> <pre><code>$query = $connection-&gt;query();\n\n$query-&gt;addControl(\n    $oid = '1.2.840.113556.1.4.417', $isCritical = true, $value = null\n);\n\n// array:1 [\u25bc\n//  \"1.2.840.113556.1.4.417\" =&gt; array:3 [\u25bc\n//    \"oid\" =&gt; \"1.2.840.113556.1.4.417\"\n//    \"isCritical\" =&gt; true\n//    \"value\" =&gt; null\n//  ]\n// ]\nvar_dump($query-&gt;controls);\n</code></pre>"},{"location":"docs/core/v2/searching-api/#addfilter","title":"<code>addFilter</code>","text":"<p>Add a filter with its bindings to the query:</p> <p>Available types are <code>and</code>, <code>or</code> and <code>raw</code>.</p> <pre><code>$query = $connection-&gt;query();\n\n$bindings = [\n    'field' =&gt; 'cn',\n    'operator' =&gt; '=',\n    'value' =&gt; 'Steve Bauman',\n];\n\n$query-&gt;addFilter($type = 'and', $bindings);\n</code></pre>"},{"location":"docs/core/v2/searching-api/#addselect","title":"<code>addSelect</code>","text":"<p>Add an attribute to be selected for the query:</p> <pre><code>$query = $connection-&gt;query();\n\n// Using arguments:\n$query-&gt;addSelect('cn');\n$query-&gt;addSelect('foo', 'bar', 'baz');\n\n// Using an array:\n$query-&gt;addSelect(['sn', 'givenname']);\n\n// array:7 [\u25bc\n//   0 =&gt; \"cn\"\n//   1 =&gt; \"foo\"\n//   2 =&gt; \"bar\"\n//   3 =&gt; \"baz\"\n//   4 =&gt; \"sn\"\n//   5 =&gt; \"givenname\"\n//   6 =&gt; \"objectclass\"\n// ]\nvar_dump($query-&gt;getSelects());\n</code></pre>"},{"location":"docs/core/v2/searching-api/#andfilter","title":"<code>andFilter</code>","text":"<p>Add a nested \"and\" filter to the query:</p> <pre><code>$query = $connection-&gt;query();\n\n$query-&gt;andFilter(function (\\LdapRecord\\Query\\Builder $q) {\n    $q-&gt;where('foo', '=', 'bar');\n    $q-&gt;where('baz', '=', 'zal');\n});\n\n// \"(&amp;(foo=bar)(baz=zal))\"\necho $query-&gt;getUnescapedQuery();\n</code></pre>"},{"location":"docs/core/v2/searching-api/#cache","title":"<code>cache</code>","text":"<p>Cache the executed query until the given date has passed:</p> <p>Pass <code>true</code> as the second argument to force flush the cache if the query has been executed before.</p> <pre><code>$query = $connection-&gt;query();\n\n$until = new \\DateTime('+1 day');\n\n$query-&gt;cache($until, $flush = false);\n</code></pre>"},{"location":"docs/core/v2/searching-api/#chunk","title":"<code>chunk</code>","text":"<p>Chunk a query</p> <p>Important: This method is excellent for keeping memory usage low, since only the number of requested objects per chunk is kept in memory, not the entire result.</p> <pre><code>$connection-&gt;query()-&gt;chunk(1000, function ($objects) {\n    foreach ($objects as $object) {\n        // ...\n    }\n});\n</code></pre> <p>You may also stop further chunks from being processed by returning false from the closure:</p> <pre><code>$connection-&gt;query()-&gt;chunk(1000, function ($objects) {\n    // ...\n\n    return false;\n});\n</code></pre> <p>If you need to execute sub-queries inside of your chunk callback and  you're working with an LDAP server that does not support it, you may  pass in a fourth argument (or via the parameters name <code>isolate</code>) to  run the chunk operation on it's own connection instance:</p> <p>Important: This feature was added in v2.20.0.</p> <pre><code>$connection-&gt;query()-&gt;chunk(1000, function ($objects) {\n    // Model::where('...')-&gt;get();\n}, isolate: true);\n</code></pre> <p>Once the chunk finishes (or an exception occurs), the  dynamically created connection will be auto-closed.</p>"},{"location":"docs/core/v2/searching-api/#clearfilters","title":"<code>clearFilters</code>","text":"<p>Reset / clear all filters that have been added to the query:</p> <pre><code>$query = $connection-&gt;query();\n\n$query-&gt;where('foo', '=', 'bar');\n\n$query-&gt;clearFilters();\n\n// array:3 [\u25bc\n//   \"and\" =&gt; []\n//   \"or\" =&gt; []\n//   \"raw\" =&gt; []\n// ]\nvar_dump($query-&gt;getFilters());\n</code></pre>"},{"location":"docs/core/v2/searching-api/#delete","title":"<code>delete</code>","text":"<p>Delete an entry from the directory:</p> <pre><code>$query = $connection-&gt;query();\n\n$query-&gt;delete('cn=John Doe,ou=Users,dc=local,dc=com');\n</code></pre>"},{"location":"docs/core/v2/searching-api/#deleteattributes","title":"<code>deleteAttributes</code>","text":"<p>Delete an attributes values from the directory:</p> <pre><code>$query = $connection-&gt;query();\n\n$entry = 'cn=Accounting Users,ou=Groups,dc=local,dc=com';\n\n// Delete all values from an attribute, for example,\n// removing all members from a particular group:\n$query-&gt;deleteAttributes($entry, ['member' =&gt; []]);\n\n// Delete a specific value from an attribute, for example,\n// removing a specific member from a particular group:\n$member = 'cn=John Doe,ou=Users,dc=local,dc=com';\n\n$query-&gt;deleteAttributes($entry, ['member' =&gt; [$member]]);\n</code></pre>"},{"location":"docs/core/v2/searching-api/#each","title":"<code>each</code>","text":"<p>Execute a callback over each object from a chunked query (default <code>1000</code> per chunk):</p> <pre><code>$connection-&gt;query()-&gt;each(function ($object) {\n    // ...\n});\n</code></pre> <p>You may also specify a chunk size in the method's second parameter:</p> <pre><code>$connection-&gt;query()-&gt;each(function ($object) {\n    // ...\n}, $chunk = 500);\n</code></pre> <p>Similarly with <code>chunk</code>, you may pass in a fourth argument  (or via its named parameter <code>isolate</code>), to run the chunk  operation on it's own connection instance:</p> <p>Important: This feature was added in v2.20.0.</p> <pre><code>$connection-&gt;query()-&gt;each(function ($object) {\n    // Model::where('...')-&gt;get();\n}, isolate: true);\n</code></pre> <p>Once the underlying chunk finishes (or an exception occurs),  the dynamically created connection will be auto-closed.</p>"},{"location":"docs/core/v2/searching-api/#escape","title":"<code>escape</code>","text":"<p>Prepare a value to be escaped:</p> <p>This method accepts the same parameters as the built in PHP <code>ldap_escape</code> method.</p> <pre><code>$query = $connection-&gt;query();\n\n// Returns instance of:\n// LdapRecord\\Models\\Attributes\\EscapedValue\n$value = $query-&gt;escape('value', $ignore = '', $flags = 0);\n\n// Prepare the value to be escaped for use in a distinguished name:\n$value-&gt;dn();\n\n// Prepare the value to be escaped for use in a filter:\n$value-&gt;filter();\n\n// Prepare the value to be escaped for use in a distinguished name and filter:\n$value-&gt;both();\n\n// Set the characters to ignore:\n$value-&gt;ignore('/*');\n\n// Get the escaped value:\n$value-&gt;get();\n\n// Can also be casted to string:\n(string) $value;\n</code></pre>"},{"location":"docs/core/v2/searching-api/#find","title":"<code>find</code>","text":"<p>Find an entry in the directory by its distinguished name:</p> <pre><code>$query = $connection-&gt;query();\n\nif ($entry = $query-&gt;find('cn=John Doe,dc=local,dc=com')) {\n    // Found entry!\n} else {\n    // Not found.\n}\n</code></pre>"},{"location":"docs/core/v2/searching-api/#findby","title":"<code>findBy</code>","text":"<p>Find the first matching entry in the directory by the given attribute and value:</p> <pre><code>$query = $connection-&gt;query();\n\nif ($entry = $query-&gt;findBy('samaccountname', 'johndoe')) {\n    // Found entry!\n} else {\n    // Not found.\n}\n</code></pre>"},{"location":"docs/core/v2/searching-api/#findbyorfail","title":"<code>findByOrFail</code>","text":"<p>Find the first matching entry in the directory by the given attribute and value or fail:</p> <pre><code>$query = $connection-&gt;query();\n\ntry {\n    $entry = $query-&gt;findByOrFail('samaccountname', 'johndoe');\n} catch (\\LdapRecord\\Models\\ModelNotFoundException $ex) {\n    // Not found.\n}\n</code></pre>"},{"location":"docs/core/v2/searching-api/#findmany","title":"<code>findMany</code>","text":"<p>Find many entries in the directory by an array of Distinguished Names:</p> <pre><code>$query = $connection-&gt;query();\n\n$entries = $query-&gt;findMany([\n    'cn=John Doe,dc=local,dc=com',\n    'ou=Accounting,dc=local,dc=com',\n]);\n</code></pre>"},{"location":"docs/core/v2/searching-api/#findmanyby","title":"<code>findManyBy</code>","text":"<p>Find many entries in the directory by the given attribute and values:</p> <pre><code>$query = $connection-&gt;query();\n\n$entries = $query-&gt;findManyBy('samaccountname', ['johndoe', 'janedoe', 'sbauman']);\n</code></pre>"},{"location":"docs/core/v2/searching-api/#findorfail","title":"<code>findOrFail</code>","text":"<p>Find an entry in the directory by its distinguished name or fail:</p> <pre><code>$query = $connection-&gt;query();\n\ntry {\n    $entry = $query-&gt;findOrFail('cn=John Doe,dc=local,dc=com');\n} catch (\\LdapRecord\\Models\\ModelNotFoundException $ex) {\n    // Not found.\n}\n</code></pre>"},{"location":"docs/core/v2/searching-api/#first","title":"<code>first</code>","text":"<p>Get the first resulting entry of a query from the directory:</p> <pre><code>$query = $connection-&gt;query();\n\n$entry = $query-&gt;whereStartsWith('cn', 'Steve')-&gt;first();\n</code></pre>"},{"location":"docs/core/v2/searching-api/#firstorfail","title":"<code>firstOrFail</code>","text":"<p>Get the first resulting entry of a query from the directory or fail:</p> <pre><code>$query = $connection-&gt;query();\n\ntry {\n    $entry = $query-&gt;whereStartsWith('cn', 'Steve')-&gt;first();\n} catch (\\LdapRecord\\Models\\ModelNotFoundException $ex) {\n    // Not entries returned.\n}\n</code></pre>"},{"location":"docs/core/v2/searching-api/#forpage","title":"<code>forPage</code>","text":"<p>Important: Your LDAP server must support Virtual List View.</p> <p>The <code>forPage</code> supports the same arguments and executes the same underlying query as the slice method, but it will  return query results directly, instead of being wrapped in a <code>Slice</code> object:</p> <pre><code>$query = $connection-&gt;query();\n\n$results = $query-&gt;forPage($page = 1, $perPage = 1000);\n</code></pre>"},{"location":"docs/core/v2/searching-api/#get","title":"<code>get</code>","text":"<p>Get the resulting entries of a query from the directory:</p> <p>Important: If you expect to have more than 1000 entries returned from your query, use the paginate method instead, which will return all entries.</p> <pre><code>$query = $connection-&gt;query();\n\n$entries = $query-&gt;where('company', '=', 'Acme')-&gt;get();\n</code></pre>"},{"location":"docs/core/v2/searching-api/#getcache","title":"<code>getCache</code>","text":"<p>Get the query cache (if set):</p> <pre><code>$query = $connection-&gt;query();\n\n// Returns null or instance of LdapRecord\\Query\\Cache:\n$cache = $query-&gt;getCache();\n</code></pre>"},{"location":"docs/core/v2/searching-api/#getconnection","title":"<code>getConnection</code>","text":"<p>Get the underlying connection the query is executing on:</p> <pre><code>$query = $connection-&gt;query();\n\n// Returns instance of LdapRecord\\Connection:\n$conn = $query-&gt;getConnection();\n</code></pre>"},{"location":"docs/core/v2/searching-api/#getdn","title":"<code>getDn</code>","text":"<p>Get the base Distinguished Name that the query is executing on:</p> <pre><code>$query = $connection-&gt;query();\n\n$query-&gt;setDn('ou=Users,dc=local,dc=com');\n\n// Returns 'ou=Users,dc=local,dc=com':\n$base = $query-&gt;getDn();\n</code></pre>"},{"location":"docs/core/v2/searching-api/#getfilters","title":"<code>getFilters</code>","text":"<p>Get the filters that have been added to the query:</p> <pre><code>$query = $connection-&gt;query();\n\n$query-&gt;where('company', '=', 'Acme');\n\n// array:3 [\u25bc\n//   \"and\" =&gt; array:1 [\u25bc\n//     0 =&gt; array:3 [\u25bc\n//       \"field\" =&gt; \"company\"\n//       \"operator\" =&gt; \"=\"\n//       \"value\" =&gt; LdapRecord\\Models\\Attributes\\EscapedValue\n//     ]\n//   ]\n//   \"or\" =&gt; []\n//   \"raw\" =&gt; []\n// ]\nvar_dump($query-&gt;getFilters());\n</code></pre>"},{"location":"docs/core/v2/searching-api/#getgrammar","title":"<code>getGrammar</code>","text":"<p>Get the underlying query grammar instance:</p> <pre><code>$query = $connection-&gt;query();\n\n// Returns instance of LdapRecord\\Query\\Grammar:\n$grammar = $query-&gt;getGrammar();\n</code></pre>"},{"location":"docs/core/v2/searching-api/#getquery","title":"<code>getQuery</code>","text":"<p>Get the raw, escaped LDAP query filter:</p> <pre><code>$query = $connection-&gt;query();\n\n$query-&gt;where('company', '=', 'Acme');\n\n// Returns '(company=\\41\\63\\6d\\65)'\n$filter = $query-&gt;getQuery();\n</code></pre>"},{"location":"docs/core/v2/searching-api/#getselects","title":"<code>getSelects</code>","text":"<p>Get the selected attributes of the query:</p> <p>Important: <code>objectclass</code> will always be included in the returned array.</p> <pre><code>$query = $connection-&gt;query();\n\n// array:1 [\u25bc\n//   0 =&gt; \"objectclass\"\n// ]\nvar_dump($query-&gt;getSelects());\n\n$query-&gt;select(['cn', 'mail', 'givenname']);\n\n// array:4 [\u25bc\n//   0 =&gt; \"cn\"\n//   1 =&gt; \"mail\"\n//   2 =&gt; \"givenname\"\n//   3 =&gt; \"objectclass\"\n// ]\nvar_dump($query-&gt;getSelects());\n</code></pre>"},{"location":"docs/core/v2/searching-api/#gettype","title":"<code>getType</code>","text":"<p>Get the type of LDAP query to be executed, either <code>search</code>, <code>listing</code> or <code>read</code>:</p> <pre><code>$query = $connection-&gt;query();\n\n// Returns 'search':\n$query-&gt;getType();\n\n// Returns 'listing':\n$query-&gt;listing()-&gt;getType();\n\n// Returns 'read':\n$query-&gt;read()-&gt;getType();\n</code></pre>"},{"location":"docs/core/v2/searching-api/#getunescapedquery","title":"<code>getUnescapedQuery</code>","text":"<p>Get the raw, unescaped LDAP query filter:</p> <pre><code>$query = $connection-&gt;query();\n\n$query-&gt;where('company', '=', 'Acme');\n\n// Returns '(company=Acme)'\n$filter = $query-&gt;getUnescapedQuery();\n</code></pre>"},{"location":"docs/core/v2/searching-api/#hascontrol","title":"<code>hasControl</code>","text":"<p>Determine if the query has a specific LDAP control OID added:</p> <pre><code>$query = $connection-&gt;query();\n\nif ($query-&gt;hasControl($oid = '1.2.840.113556.1.4.417')) {\n    // The query has a control added for the OID.\n}\n</code></pre>"},{"location":"docs/core/v2/searching-api/#hasselects","title":"<code>hasSelects</code>","text":"<p>Determine if the query has any selects added:</p> <pre><code>$query = $connection-&gt;query();\n\n// Returns false:\n$query-&gt;hasSelects();\n\n$query-&gt;select(['cn', 'sn']);\n\n// Returns true:\n$query-&gt;hasSelects();\n</code></pre>"},{"location":"docs/core/v2/searching-api/#in","title":"<code>in</code>","text":"<p>Sets the base Distinguished Name to perform a search upon.</p> <p>Alias for the setDn method.</p> <pre><code>$query = $connection-&gt;query();\n\n// Get all entries below the 'Users' OU:\n$query-&gt;in('ou=Users,dc=local,dc=com')-&gt;get();\n</code></pre>"},{"location":"docs/core/v2/searching-api/#insert","title":"<code>insert</code>","text":"<p>Insert a new entry in the directory:</p> <pre><code>$query = $connection-&gt;query();\n\n$dn = 'cn=John Doe,dc=local,dc=com';\n\n$attributes = [\n    'cn' =&gt; 'John Doe',\n    'objectclass' =&gt; [\n       'top',\n        'person',\n        'organizationalperson',\n        'user',\n    ],\n];\n\n$query-&gt;insert($dn, $attributes);\n</code></pre>"},{"location":"docs/core/v2/searching-api/#insertattributes","title":"<code>insertAttributes</code>","text":"<p>Create attributes on an existing entry in the directory:</p> <pre><code>$query = $connection-&gt;query();\n\n$dn = 'cn=John Doe,dc=local,dc=com';\n\n$attributes = [\n    'company' =&gt; 'Acme',\n];\n\n$query-&gt;insertAttributes($dn, $attributes);\n</code></pre>"},{"location":"docs/core/v2/searching-api/#isnested","title":"<code>isNested</code>","text":"<p>Determine if a query builder is nested:</p> <pre><code>$query = $connection-&gt;query();\n\n// Returns false:\n$query-&gt;isNested();\n\n$query-&gt;andFilter(function ($q) {\n    // Returns true:\n    $q-&gt;isNested();\n});\n</code></pre>"},{"location":"docs/core/v2/searching-api/#ispaginated","title":"<code>isPaginated</code>","text":"<p>Determine if a query builder has been paginated:</p> <pre><code>$query = $connection-&gt;query();\n\n// Returns false:\n$query-&gt;isPaginated();\n\n$results = $query-&gt;paginate();\n\n// Returns true:\n$query-&gt;isPaginated();\n</code></pre>"},{"location":"docs/core/v2/searching-api/#limit","title":"<code>limit</code>","text":"<p>Set the maxmimum number of entries to be returned from the directory:</p> <pre><code>$query = $connection-&gt;query();\n\n$results = $query-&gt;whereHas('cn')-&gt;limit(200)-&gt;get();\n</code></pre>"},{"location":"docs/core/v2/searching-api/#listing","title":"<code>listing</code>","text":"<p>Perform an LDAP <code>listing</code> operation, requesting only immediate children / leaf nodes of the query base:</p> <pre><code>$query = $connection-&gt;query();\n\n// Only retrieve the immediate children / leaf nodes of the 'Groups' OU:\n$groups = $query-&gt;in('ou=Groups,dc=local,dc=com')-&gt;listing()-&gt;get();\n</code></pre>"},{"location":"docs/core/v2/searching-api/#model","title":"<code>model</code>","text":"<p>Create a new query builder instance for the given model:</p> <pre><code>use LdapRecord\\Models\\ActiveDirectory\\User;\n\n$query = $connection-&gt;query();\n\n$modelQuery = $query-&gt;model(new User);\n</code></pre>"},{"location":"docs/core/v2/searching-api/#nested","title":"<code>nested</code>","text":"<p>Whether to mark the current query as nested:</p> <p>Important: This affects how the query filter is generated.</p> <pre><code>$query = $connection-&gt;query();\n\n// Returns \"(cn=John)(sn=Doe)\":\n$query-&gt;nested()\n    -&gt;where('cn', '=', 'John')\n    -&gt;where('sn', '=', 'Doe')\n    -&gt;getUnescapedQuery();\n\n// Returns \"(&amp;(cn=John)(sn=Doe))\"\n$query-&gt;nested(false)\n    -&gt;where('cn', '=', 'John')\n    -&gt;where('sn', '=', 'Doe')\n    -&gt;getUnescapedQuery();\n</code></pre>"},{"location":"docs/core/v2/searching-api/#newinstance","title":"<code>newInstance</code>","text":"<p>Create a new query instance:</p> <pre><code>$query = $connection-&gt;query();\n\n// Create and inherit the base DN from the previous instance:\n$newQuery = $query-&gt;newInstace();\n\n// Use a new base DN:\n$newQuery = $query-&gt;newInstace('ou=Users,dc=local,dc=com');\n</code></pre>"},{"location":"docs/core/v2/searching-api/#newnestedinstance","title":"<code>newNestedInstance</code>","text":"<p>Create a new nested query instance:</p> <pre><code>$query = $connection-&gt;query();\n\n// New nested query builder:\n$nested = $query-&gt;newNestedInstance();\n\n// New nested query builder With a closure:\n$nested = $query-&gt;newNestedInstance(function (Builder $query) {\n    //\n});\n</code></pre>"},{"location":"docs/core/v2/searching-api/#notfilter","title":"<code>notFilter</code>","text":"<p>Add a nested 'not' filter to the current query:</p> <pre><code>$query = $connection-&gt;query();\n\n// Returns \"(!(cn=John Doe))\":\n$query-&gt;notFilter(function ($query) {\n    $query-&gt;where('cn', '=', 'John Doe');\n})-&gt;getUnescapedQuery();\n</code></pre>"},{"location":"docs/core/v2/searching-api/#orfilter","title":"<code>orFilter</code>","text":"<p>Add a nested 'or' filter to the current query:</p> <pre><code>$query = $connection-&gt;query();\n\n// Returns \"(|(cn=John Doe))\":\n$query-&gt;orFilter(function ($query) {\n    $query-&gt;where('cn', '=', 'John Doe');\n})-&gt;getUnescapedQuery();\n</code></pre>"},{"location":"docs/core/v2/searching-api/#orwhere","title":"<code>orWhere</code>","text":"<p>Add an 'or where' clause to the query:</p> <p>Important: If only a single \"or\" is added to the query with no other filters, it will be converted to a single filter instead.</p> <pre><code>// Returns \"(cn=John)\":\n$connection-&gt;query()\n    -&gt;orWhere('cn', '=', 'John')\n    -&gt;getUnescapedQuery();\n\n// Returns \"(|(cn=John)(sn=Doe))\":\n$connection-&gt;query()\n    -&gt;where('cn', '=', 'John')\n    -&gt;orWhere('sn', '=', 'Doe')\n    -&gt;getUnescapedQuery();\n</code></pre>"},{"location":"docs/core/v2/searching-api/#orwhereapproximatelyequals","title":"<code>orWhereApproximatelyEquals</code>","text":"<p>Add an 'or where approximately equals' clause to the query:</p> <pre><code>// Returns \"(cn~=John)\"\n$connection-&gt;query()\n    -&gt;orWhereApproximatelyEquals('cn', 'John')\n    -&gt;getUnescapedQuery();\n\n// Returns \"(|(cn~=Sue)(cn~=John))\"\n$connection-&gt;query()\n    -&gt;whereApproximatelyEquals('cn', 'Sue')\n    -&gt;orWhereApproximatelyEquals('cn', 'John')\n    -&gt;getUnescapedQuery();\n</code></pre>"},{"location":"docs/core/v2/searching-api/#orwherecontains","title":"<code>orWhereContains</code>","text":"<p>Add an 'or where contains' clause to the query:</p> <pre><code>// Returns \"(cn=*John*)\"\n$connection-&gt;query()\n    -&gt;orWhereContains('cn', 'John')\n    -&gt;getUnescapedQuery();\n\n// Returns \"(|(cn=*Sue*)(cn=*John*))\"\n$connection-&gt;query()\n    -&gt;whereContains('cn', 'Sue')\n    -&gt;orWhereContains('cn', 'John')\n    -&gt;getUnescapedQuery();\n</code></pre>"},{"location":"docs/core/v2/searching-api/#orwhereendswith","title":"<code>orWhereEndsWith</code>","text":"<p>Add an 'or where ends with' clause to the query:</p> <pre><code>// Returns \"(cn=*Doe)\"\n$connection-&gt;query()\n    -&gt;orWhereEndsWith('cn', 'Doe')\n    -&gt;getUnescapedQuery();\n\n// Returns \"(|(cn=*Betty)(cn=*Doe))\"\n$connection-&gt;query()\n    -&gt;whereEndsWith('cn', 'Betty')\n    -&gt;orWhereEndsWith('cn', 'Doe')\n    -&gt;getUnescapedQuery();\n</code></pre>"},{"location":"docs/core/v2/searching-api/#orwhereequals","title":"<code>orWhereEquals</code>","text":"<p>Add an 'or where equals' clause to the query:</p> <pre><code>// Returns \"(cn=John Doe)\"\n$connection-&gt;query()\n    -&gt;orWhereEquals('cn', 'John Doe')\n    -&gt;getUnescapedQuery();\n\n// Returns \"(|(cn=Suzy Doe)(cn=John Doe))\"\n$connection-&gt;query()\n    -&gt;whereEquals('cn', 'Suzy Doe')\n    -&gt;orWhereEquals('cn', 'John Doe')\n    -&gt;getUnescapedQuery();\n</code></pre>"},{"location":"docs/core/v2/searching-api/#orwherehas","title":"<code>orWhereHas</code>","text":"<p>Add an 'or where has' clause to the query:</p> <pre><code>// Returns \"(title=*)\"\n$connection-&gt;query()\n    -&gt;orWhereHas('title')\n    -&gt;getUnescapedQuery();\n\n// Returns \"(|(title=*)(department=*))\"\n$connection-&gt;query()\n    -&gt;whereHas('title')\n    -&gt;orWhereHas('department')\n    -&gt;getUnescapedQuery();\n</code></pre>"},{"location":"docs/core/v2/searching-api/#orwherenotcontains","title":"<code>orWhereNotContains</code>","text":"<p>Add an 'or where not contains' clause to the query:</p> <pre><code>// Returns \"(!(title=*Accountant*))\"\n$connection-&gt;query()\n    -&gt;orWhereNotContains('title', 'Accountant')\n    -&gt;getUnescapedQuery();\n\n// Returns \"(|(!(title=*Accountant*))(!(department=*Accounting*)))\"\n$connection-&gt;query()\n    -&gt;whereNotContains('title', 'Accountant')\n    -&gt;orWhereNotContains('department', 'Accounting')\n    -&gt;getUnescapedQuery();\n</code></pre>"},{"location":"docs/core/v2/searching-api/#orwherenotendswith","title":"<code>orWhereNotEndsWith</code>","text":"<p>Add an 'or where not ends with' clause to the query:</p> <pre><code>// Returns \"(!(cn=*Doe))\"\n$connection-&gt;query()\n    -&gt;orWhereNotEndsWith('cn', 'Doe')\n    -&gt;getUnescapedQuery();\n\n// Returns \"(|(!(cn=*Betty))(!(cn=*Doe)))\"\n$connection-&gt;query()\n    -&gt;whereNotEndsWith('cn', 'Betty')\n    -&gt;orWhereNotEndsWith('cn', 'Doe')\n    -&gt;getUnescapedQuery();\n</code></pre>"},{"location":"docs/core/v2/searching-api/#orwherenotequals","title":"<code>orWhereNotEquals</code>","text":"<p>Add an 'or where not equals' clause to the query:</p> <pre><code>// Returns \"(!(cn=John Doe))\"\n$connection-&gt;query()\n    -&gt;orWhereNotEquals('cn', 'John Doe')\n    -&gt;getUnescapedQuery();\n\n// Returns \"(|(!(cn=Suzy Betty))(!(cn=John Doe)))\"\n$connection-&gt;query()\n    -&gt;whereNotEquals('cn', 'Suzy Betty')\n    -&gt;orWhereNotEquals('cn', 'John Doe')\n    -&gt;getUnescapedQuery();\n</code></pre>"},{"location":"docs/core/v2/searching-api/#orwherenothas","title":"<code>orWhereNotHas</code>","text":"<p>Add an 'or where not has' clause to the query:</p> <pre><code>// Returns \"(!(title=*))\"\n$connection-&gt;query()\n    -&gt;orWhereNotHas('title')\n    -&gt;getUnescapedQuery();\n\n// Returns \"(|(!(title=*))(!(department=*)))\"\n$connection-&gt;query()\n    -&gt;whereNotHas('title')\n    -&gt;orWhereNotHas('department')\n    -&gt;getUnescapedQuery();\n</code></pre>"},{"location":"docs/core/v2/searching-api/#orwherenotstartswith","title":"<code>orWhereNotStartsWith</code>","text":"<p>Add an 'or where not starts with' clause to the query:</p> <pre><code>// Returns \"(!(cn=John*))\"\n$connection-&gt;query()\n    -&gt;orWhereNotStartsWith('cn', 'John')\n    -&gt;getUnescapedQuery();\n\n// Returns \"(|(!(cn=Suzy*))(!(cn=John*)))\"\n$connection-&gt;query()\n    -&gt;whereNotStartsWith('cn', 'Suzy')\n    -&gt;orWhereNotStartsWith('cn', 'John')\n    -&gt;getUnescapedQuery();\n</code></pre>"},{"location":"docs/core/v2/searching-api/#orwhereraw","title":"<code>orWhereRaw</code>","text":"<p>Add a \"or where\" clause to the query without escaping the value, useful when values can contain distinguished names or GUIDs:</p> <pre><code>$query = $connection-&gt;query();\n\n$query\n    -&gt;whereRaw('objectguid', '=', '270db4d0-249d-46a7-9cc5-eb695d9af9ac')\n    -&gt;orWhereRaw('objectguid', '=', '878ce8b7-2713-41a9-a765-5e3905ab5ef2');\n</code></pre> <p>Add an 'or where starts with' clause to the query:</p> <pre><code>// Returns \"(cn=John*)\"\n$connection-&gt;query()\n    -&gt;orWhereStartsWith('cn', 'John')\n    -&gt;getUnescapedQuery();\n\n// Returns \"(|(cn=Suzy*)(cn=John*))\"\n$connection-&gt;query()\n    -&gt;whereStartsWith('cn', 'Suzy')\n    -&gt;orWhereStartsWith('cn', 'John')\n    -&gt;getUnescapedQuery();\n</code></pre>"},{"location":"docs/core/v2/searching-api/#orwherestartswith","title":"<code>orWhereStartsWith</code>","text":"<p>Add an 'or where starts with' clause to the query:</p> <pre><code>// Returns \"(cn=John*)\"\n$connection-&gt;query()\n    -&gt;orWhereStartsWith('cn', 'John')\n    -&gt;getUnescapedQuery();\n\n// Returns \"(|(cn=Suzy*)(cn=John*))\"\n$connection-&gt;query()\n    -&gt;whereStartsWith('cn', 'Suzy')\n    -&gt;orWhereStartsWith('cn', 'John')\n    -&gt;getUnescapedQuery();\n</code></pre>"},{"location":"docs/core/v2/searching-api/#paginate","title":"<code>paginate</code>","text":"<p>Paginate the query by the given limit, returning all results from the LDAP directory:</p> <p>This will allow you to exceed the LDAP max result limit of (usually) 1000.</p> <pre><code>$query = $connection-&gt;query();\n\n// Paginate by default 1000:\n$results = $query-&gt;paginate();\n\n// Paginate by a specific amount:\n$results = $query-&gt;paginate(500);\n</code></pre>"},{"location":"docs/core/v2/searching-api/#query","title":"<code>query</code>","text":"<p>Execute a raw filter query on the connection:</p> <pre><code>$query = $connection-&gt;query();\n\n$results = $query-&gt;query('(cn=John Doe)');\n</code></pre>"},{"location":"docs/core/v2/searching-api/#rawfilter","title":"<code>rawFilter</code>","text":"<p>Add a raw LDAP search filter to the query:</p> <pre><code>$query = $connection-&gt;query();\n\n// Returns \"(&amp;(cn=Contoso)(sn=Doe*))\"\n$query\n    -&gt;rawFilter('(company=Contoso)')\n    -&gt;rawFilter('(sn=Doe*)')\n    -&gt;getUnescapedQuery();\n</code></pre>"},{"location":"docs/core/v2/searching-api/#read","title":"<code>read</code>","text":"<p>Set the query to read a single search result using the query's base DN (using <code>ldap_read</code>):</p> <p>Queries executed with <code>read()</code> will only return a maximum of one result.</p> <pre><code>$query = $connection-&gt;query();\n\n$entry = $query-&gt;setDn('cn=John Doe,dc=local,dc=com')-&gt;read()-&gt;first();\n</code></pre>"},{"location":"docs/core/v2/searching-api/#recursive","title":"<code>recursive</code>","text":"<p>Set the query to include recursive search results (using <code>ldap_search</code>):</p> <p>This is the default search query operation.</p> <pre><code>$query = $connection-&gt;query();\n\n$results = $query-&gt;recursive()-&gt;get();\n</code></pre>"},{"location":"docs/core/v2/searching-api/#rename","title":"<code>rename</code>","text":"<p>Rename or move an object. Performs an <code>ldap_rename</code> under the hood:</p> <pre><code>// Rename an object:\n$connection-&gt;query()-&gt;rename(\n    $dn = 'cn=John Doe,dc=local,dc=com',\n    $newRdn = 'cn=Johnathon Doe',\n    $newParentDn = 'dc=local,dc=com'\n);\n\n// Move an object:\n$connection-&gt;query()-&gt;rename(\n    $dn = 'cn=John Doe,dc=local,dc=com',\n    $newRdn = 'cn=John Doe',\n    $newParentDn = 'ou=Users,dc=local,dc=com'\n);\n</code></pre>"},{"location":"docs/core/v2/searching-api/#select","title":"<code>select</code>","text":"<p>Set the attributes to return from the directory:</p> <p>Important: By selecting only the attributes you need, you can effectively reduce memory usage on large query result sets.</p> <pre><code>$query = $connection-&gt;query();\n\n// Only return the 'cn' and 'sn' attributes in result\n$query-&gt;select(['cn', 'sn'])-&gt;get();\n</code></pre>"},{"location":"docs/core/v2/searching-api/#setcache","title":"<code>setCache</code>","text":"<p>Set the cache instance to use for the query:</p> <p>The cache instance must extend <code>LdapRecord\\Query\\Cache</code>.</p> <pre><code>$query = $connection-&gt;query();\n\n$query-&gt;setCache($cache);\n</code></pre>"},{"location":"docs/core/v2/searching-api/#setconnection","title":"<code>setConnection</code>","text":"<p>Set the connection instance to use for the query:</p> <pre><code>$query = $connection-&gt;query();\n\n$newConnection = new Connection($config = ['...']);\n\n$query-&gt;setConnection($newConnection);\n</code></pre>"},{"location":"docs/core/v2/searching-api/#setdn","title":"<code>setDn</code>","text":"<p>Sets the base Distinguished Name to perform a search upon.</p> <pre><code>$query = $connection-&gt;query();\n\n// Get all entries below the 'Users' OU:\n$query-&gt;setDn('ou=Users,dc=local,dc=com')-&gt;get();\n</code></pre>"},{"location":"docs/core/v2/searching-api/#setgrammar","title":"<code>setGrammar</code>","text":"<p>Set the underlying query <code>Grammar</code> instance:</p> <p>The given instance must extend the built-in <code>LdapRecord\\Query\\Grammar</code>.</p> <pre><code>$query = $connection-&gt;query();\n\n$myGrammarInstance = new Grammar();\n\n$query-&gt;setGrammar($myGrammarInstance);\n</code></pre>"},{"location":"docs/core/v2/searching-api/#slice","title":"<code>slice</code>","text":"<p>Important: Your LDAP server must support Virtual List View.</p> <p>To get a \"page\" of an LDAP query to conserve memory and retrieve results quickly, you may use the <code>slice()</code> method.</p> <p>A <code>Slice</code> object will always be returned with the query results that can be retrieved via the <code>items()</code> method.</p> <p>Note: Your query must search less than 10,000 records (this is a configurable limit in Active Directory).</p> <pre><code>$query = $connection-&gt;query();\n\n$slice = $query-&gt;slice($page = 1, $perPage = 100): \\LdapRecord\\Query\\Slice;\n\n$slice-&gt;items(): array|\\LdapRecord\\Query\\Collection;\n\n$slice-&gt;total(): int;\n\n$slice-&gt;perPage(): int;\n\n$slice-&gt;currentPage(): int;\n\n$slice-&gt;hasMorePages(): bool;\n\n$slice-&gt;hasPages(): bool;\n\n$slice-&gt;onFirstPage(): bool;\n\n$slice-&gt;onLastPage(): bool;\n\n$slice-&gt;isEmpty(): bool;\n\n$slice-&gt;isNotEmpty(): bool;\n</code></pre>"},{"location":"docs/core/v2/searching-api/#sole","title":"<code>sole</code>","text":"<p>If you want to ensure a query returns only a single matching result, you may use the <code>sole()</code> method.</p> <p>If nothing is returned, an <code>ObjectsNotFoundException</code> will be thrown.</p> <p>If more than one record is returned, a <code>MultipleObjectsFoundException</code> will be thrown.</p> <pre><code>$query = $connection-&gt;query();\n\ntry {\n    $object = $query-&gt;where('cn', '=', 'John Doe')-&gt;sole();\n} catch (\\LdapRecord\\Query\\ObjectsNotFoundException $e) {\n    // Nothing was returned from the query.\n} catch (\\LdapRecord\\Query\\MultipleObjectsFoundException $e) {\n    // Multiple objects were returned from the query.\n}\n</code></pre>"},{"location":"docs/core/v2/searching-api/#update","title":"<code>update</code>","text":"<p>Update an entry with the given modifications. Performs an <code>ldap_modify_batch</code> under the hood:</p> <pre><code>$query = $connection-&gt;query();\n\n$dn = 'cn=John Doe,dc=local,dc=com';\n\n$modifs = [\n    [\n        'attrib'  =&gt; 'telephoneNumber',\n        'modtype' =&gt; LDAP_MODIFY_BATCH_ADD,\n        'values'  =&gt; ['+1 555 555 1717'],\n    ],\n];\n\n$query-&gt;update($dn, $modifs);\n</code></pre>"},{"location":"docs/core/v2/searching-api/#updateattributes","title":"<code>updateAttributes</code>","text":"<p>Update / replace an entry's attribute with the given values. Performs an <code>ldap_mod_replace</code> under the hood:</p> <pre><code>$query = $connection-&gt;query();\n\n$dn = 'cn=John Doe,dc=local,dc=com';\n\n// Remove the users telephone number:\n$query-&gt;updateAttributes($dn, ['telephoneNumber' =&gt; []]);\n\n// Update / replace the users telephone number:\n$query-&gt;updateAttributes($dn, ['telephoneNumber' =&gt; ['+1 555 555 1717']]);\n</code></pre>"},{"location":"docs/core/v2/searching-api/#where","title":"<code>where</code>","text":"<p>Add a \"where\" clause to the query, searching for objects using the given attribute, operator, and value:</p> <pre><code>$query = $connection-&gt;query();\n\n// Returns \"(cn=John Doe)\"\n$query-&gt;where('cn', '=', 'John Doe')-&gt;getUnescapedQuery();\n</code></pre>"},{"location":"docs/core/v2/searching-api/#whereapproximatelyequals","title":"<code>whereApproximatelyEquals</code>","text":"<p>Add a \"where approximately equals\" clause to the query, searching for objects where the attribute is around the given value:</p> <pre><code>$query = $connection-&gt;query();\n\n$query-&gt;whereApproximatelyEquals('givenName', 'John');\n\n// Returns \"(givenName~=John)\"\n$query-&gt;getUnescapedQuery();\n</code></pre> <p>The approximately equals operator is great for performing \"sounds like\" search operations.</p> <p>For example, the above query would match entries with <code>givenName</code> values of either <code>John</code> or <code>Jon</code>.</p>"},{"location":"docs/core/v2/searching-api/#wherebetween","title":"<code>whereBetween</code>","text":"<p>Add a \"where between\" clause to the query, searching for objects where the attribute is between the given values:</p> <pre><code>$query = $connection-&gt;query();\n\n$from = (new DateTime('October 1st 2016'))-&gt;format('YmdHis.0\\Z');\n$to = (new DateTime('January 1st 2017'))-&gt;format('YmdHis.0\\Z');\n\n$query-&gt;whereBetween('whencreated', [$from, $to]);\n\n// Returns \"(&amp;(whencreated&gt;=20161001000000.0Z)(whencreated&lt;=20170101000000.0Z))\"\n$query-&gt;getUnescapedQuery();\n</code></pre>"},{"location":"docs/core/v2/searching-api/#wherecontains","title":"<code>whereContains</code>","text":"<p>Add a \"where contains\" clause to the query, searching for objects where the attribute contains the given value:</p> <pre><code>$query = $connection-&gt;query();\n\n// Returns \"(title=*Accountant*)\"\n$query-&gt;whereContains('title', 'Accountant')-&gt;getUnescapedQuery();\n</code></pre>"},{"location":"docs/core/v2/searching-api/#wheredeleted","title":"<code>whereDeleted</code>","text":"<p>Set an OID server control that will be sent with the query to instruct the LDAP server to include deleted objects in the result set, and add a <code>(isDeleted=TRUE)</code> clause to the query, effectively returning only deleted objects.</p> <pre><code>$query = $connection-&gt;query();\n\n$onlyDeleted = $query-&gt;whereDeleted()-&gt;get();\n</code></pre>"},{"location":"docs/core/v2/searching-api/#whereendswith","title":"<code>whereEndsWith</code>","text":"<p>Add a \"where ends with\" clause to the query, searching for objects where the attribute ends with the given value:</p> <pre><code>$query = $connection-&gt;query();\n\n// Returns \"(title=*Accountant)\"\n$query-&gt;whereEndsWith('title', 'Accountant')-&gt;getUnescapedQuery();\n</code></pre>"},{"location":"docs/core/v2/searching-api/#whereequals","title":"<code>whereEquals</code>","text":"<p>Add a \"where equals\" clause to the query, searching for objects where the attribute equals the given value:</p> <pre><code>$query = $connection-&gt;query();\n\n// Returns \"(department=Accounting)\"\n$query-&gt;whereEquals('department', 'Accounting')-&gt;getUnescapedQuery();\n</code></pre>"},{"location":"docs/core/v2/searching-api/#wherehas","title":"<code>whereHas</code>","text":"<p>Add a \"where has\" clause to the query, searching for objects where the attribute exists, or is not empty:</p> <pre><code>$query = $connection-&gt;query();\n\n// Returns \"(department=*)\"\n$query-&gt;whereHas('department')-&gt;getUnescapedQuery();\n</code></pre>"},{"location":"docs/core/v2/searching-api/#wherein","title":"<code>whereIn</code>","text":"<p>Add a \"where in\" clause to the query, searching for objects where the attribute contains any of the given values:</p> <pre><code>$query = $connection-&gt;query();\n\n// Returns \"(|(name=john)(name=mary)(name=sue))\"\n$query-&gt;whereIn('name', ['john', 'mary', 'sue'])-&gt;getUnescapedQuery();\n</code></pre>"},{"location":"docs/core/v2/searching-api/#wherenotcontains","title":"<code>whereNotContains</code>","text":"<p>Add a \"where doesn't contain\" clause to the query, searching for objects where the attribute does not contain the given value:</p> <pre><code>$query = $connection-&gt;query();\n\n// Returns \"(!(telephoneNumber=*555*))\"\n$query-&gt;whereNotContains('telephoneNumber', '555')-&gt;getUnescapedQuery();\n</code></pre>"},{"location":"docs/core/v2/searching-api/#wherenotendswith","title":"<code>whereNotEndsWith</code>","text":"<p>Add a \"where doesn't end with\" clause to the query, searching for objects where the attribute does not end with the given value:</p> <pre><code>$query = $connection-&gt;query();\n\n// Returns \"(!(mail=@local.com))\"\n$query-&gt;whereNotEndsWith('mail', '@local.com')-&gt;getUnescapedQuery();\n</code></pre>"},{"location":"docs/core/v2/searching-api/#wherenotequals","title":"<code>whereNotEquals</code>","text":"<p>Add a \"where doesn't equal\" clause to the query, searching for objects where the attribute does not contain the given value:</p> <pre><code>$query = $connection-&gt;query();\n\n// Returns \"(!(department=Accounting))\"\n$query-&gt;whereNotEquals('department', 'Accounting')-&gt;getUnescapedQuery();\n</code></pre>"},{"location":"docs/core/v2/searching-api/#wherenothas","title":"<code>whereNotHas</code>","text":"<p>Add a \"where doesn't have\" clause to the query, searching for objects where the attribute does not exist, or is empty:</p> <pre><code>$query = $connection-&gt;query();\n\n// Returns \"(!(mail=*))\"\n$query-&gt;whereNotHas('mail')-&gt;getUnescapedQuery();\n</code></pre>"},{"location":"docs/core/v2/searching-api/#wherenotstartswith","title":"<code>whereNotStartsWith</code>","text":"<p>Add a \"where doesn't start with\" clause to the query, searching for objects where the attribute does not start with the given value:</p> <pre><code>$query = $connection-&gt;query();\n\n// Returns \"(!(cn=John*))\"\n$query-&gt;whereNotStartsWith('cn', 'John')-&gt;getUnescapedQuery();\n</code></pre>"},{"location":"docs/core/v2/searching-api/#whereraw","title":"<code>whereRaw</code>","text":"<p>Add a \"where\" clause to the query without escaping the value, useful when values can contain distinguished names or GUIDs:</p> <pre><code>$query = $connection-&gt;query();\n\n$query-&gt;whereRaw('objectguid', '=', '270db4d0-249d-46a7-9cc5-eb695d9af9ac');\n</code></pre>"},{"location":"docs/core/v2/searching-api/#wherestartswith","title":"<code>whereStartsWith</code>","text":"<p>Add a \"starts with\" clause to the query, searching for objects where the attribute starts with the given value:</p> <pre><code>$query = $connection-&gt;query();\n\n// Returns \"(cn=John*)\"\n$query-&gt;whereStartsWith('cn', 'John')-&gt;getUnescapedQuery();\n</code></pre>"},{"location":"docs/core/v2/searching-api/#withdeleted","title":"<code>withDeleted</code>","text":"<p>Set an OID server control that will be sent with the query to instruct the LDAP server to include deleted objects in the result set:</p> <pre><code>$query = $connection-&gt;query();\n\n$resultsWithDeleted = $query-&gt;withDeleted()-&gt;get();\n</code></pre>"},{"location":"docs/core/v2/searching/","title":"Searching","text":""},{"location":"docs/core/v2/searching/#introduction","title":"Introduction","text":"<p>Using the LdapRecord query builder makes building LDAP queries feel effortless.</p> <p>It allows you to generate LDAP filters using a fluent and convenient interface, similar to Eloquent in Laravel.</p> <p>Important: The LdapRecord query builder escapes all fields &amp; values given to its <code>where()</code> methods. There is no need to clean or escape strings before passing them into the query builder.</p>"},{"location":"docs/core/v2/searching/#creating-a-new-query","title":"Creating a new Query","text":"<p>To create a new search query, call the <code>query()</code> method on your <code>Connection</code> instance:</p> <pre><code>$query = $connection-&gt;query();\n</code></pre> <p>Or you can chain all your methods if you'd prefer:</p> <pre><code>$results = $connection-&gt;query()-&gt;where('cn', '=', 'John Doe')-&gt;get();\n</code></pre> <p>Important: Querying your LDAP connection manually will return raw LDAP results in a <code>Collection</code>. You must query using models themselves if you would like them to be returned instead.</p>"},{"location":"docs/core/v2/searching/#selects","title":"Selects","text":"<p>Important: Fields are case in-sensitive. For example, you can insert <code>CN</code>, <code>cn</code> or <code>cN</code>, they will return the same result.</p> <p>Selecting only the LDAP attributes you need will increase the speed of your queries.</p> <pre><code>// Passing in an array of attributes\n$query-&gt;select(['cn', 'samaccountname', 'telephone', 'mail']);\n\n// Passing in each attribute as an argument\n$query-&gt;select('cn', 'samaccountname', 'telephone', 'mail');\n</code></pre>"},{"location":"docs/core/v2/searching/#executing-searches","title":"Executing Searches","text":""},{"location":"docs/core/v2/searching/#finding-a-record","title":"Finding a record","text":"<p>If you're trying to find a single record, you must use the <code>find()</code> method and insert the distinguished name of the record you are looking for:</p> <pre><code>$record = $query-&gt;find('cn=John Doe,dc=local,dc=com');\n\nif ($record) {\n    // Record was found!\n} else {\n    // Hmm, looks like we couldn't find anything...\n}\n</code></pre>"},{"location":"docs/core/v2/searching/#finding-a-record-or-failing","title":"Finding a record (or failing)","text":"<p>If you'd like to try and find a single record and throw an exception when it hasn't been found, use the <code>findOrFail()</code> method:</p> <pre><code>try {\n    $record = $query-&gt;findOrFail('cn=John Doe,dc=local,dc=com');\n} catch (LdapRecord\\Models\\ModelNotFoundException $e) {\n    // Record wasn't found!\n}\n</code></pre>"},{"location":"docs/core/v2/searching/#finding-a-record-by-a-specific-attribute","title":"Finding a record by a specific attribute","text":"<p>If you're looking for a single record with a specific attribute, use the <code>findBy()</code> method:</p> <pre><code>// We're looking for a record with the 'samaccountname' of 'jdoe'.\n$record = $query-&gt;findBy('samaccountname', 'jdoe');\n</code></pre> <p>You can also use <code>findByOrFail()</code> to generate an exception when a record is not found.</p>"},{"location":"docs/core/v2/searching/#retrieving-results","title":"Retrieving results","text":"<p>To get the results from a search, simply call the <code>get()</code> method:</p> <pre><code>$results = $query-&gt;select(['cn', 'samaccountname'])-&gt;get();\n</code></pre> <p>Results will be returned inside of an <code>LdapRecord\\Query\\Collection</code> instance.</p>"},{"location":"docs/core/v2/searching/#retrieving-the-first-record","title":"Retrieving the first record","text":"<p>To retrieve the first record of a search, call the <code>first()</code> method:</p> <pre><code>$record = $query-&gt;first();\n</code></pre> <p>Results will return the model instance only.</p> <p>You can also use <code>firstOrFail()</code> to generate an exception when no objects are found.</p>"},{"location":"docs/core/v2/searching/#limit","title":"Limit","text":"<p>To limit the results objects returned from your LDAP server and increase the speed of your queries, you can use the <code>limit()</code> method:</p> <pre><code>// This will only return 5 objects that contain the name of 'John':\n$objects = $query-&gt;where('cn', 'contains', 'John')-&gt;limit(5)-&gt;get();\n</code></pre>"},{"location":"docs/core/v2/searching/#wheres","title":"Wheres","text":"<p>To perform a where clause on the search object, use the <code>where()</code> function:</p> <pre><code>$query-&gt;where('cn', '=', 'John Doe');\n</code></pre> <p>This query would look for a record with the common name of 'John Doe' and return the results.</p> <p>We can also perform a 'where equals' without including the operator:</p> <pre><code>$query-&gt;whereEquals('cn', 'John Doe');\n</code></pre> <p>We can also supply an array of key - value pairs to quickly add multiple wheres:</p> <pre><code>$wheres = [\n    'givenname' =&gt; 'John',\n    'company'   =&gt; 'Acme',\n];\n\n$query-&gt;where($wheres);\n</code></pre> <p>Or, if you require conditionals, you can quickly add multiple wheres with nested arrays:</p> <pre><code>$query-&gt;where([\n   ['cn', '=', 'John Doe'],\n   ['manager', '!', 'Suzy Doe'],\n]);\n</code></pre>"},{"location":"docs/core/v2/searching/#all-operators","title":"All Operators","text":"<p>Here is a list of all supported operators:</p> <pre><code>$query-&gt;where('field', '=', 'value');\n\n$query-&gt;where('field', '!', 'value');\n// Alias for above.\n$query-&gt;where('field', '!=', 'value');\n\n$query-&gt;where('field', '*');\n\n$query-&gt;where('field', '!*', 'value');\n\n$query-&gt;where('field', '&gt;=', 'value');\n\n$query-&gt;where('field', '&lt;=', 'value');\n\n$query-&gt;where('field', '~=', 'value');\n\n$query-&gt;where('field', 'starts_with', 'value');\n\n$query-&gt;where('field', 'not_starts_with', 'value');\n\n$query-&gt;where('field', 'ends_with', 'value');\n\n$query-&gt;where('field', 'not_ends_with', 'value');\n\n$query-&gt;where('field', 'contains', 'value');\n\n$query-&gt;where('field', 'not_contains', 'value');\n</code></pre>"},{"location":"docs/core/v2/searching/#where-starts-with","title":"Where Starts With","text":"<p>We could also perform a search for all objects beginning with the common name of 'John' using the <code>starts_with</code> operator:</p> <pre><code>$results = $query-&gt;where('cn', 'starts_with', 'John')-&gt;get();\n\n// Or:\n\n$results = $query-&gt;whereStartsWith('cn', 'John')-&gt;get();\n</code></pre>"},{"location":"docs/core/v2/searching/#where-ends-with","title":"Where Ends With","text":"<p>We can also search for all objects that end with the common name of <code>Doe</code> using the <code>ends_with</code> operator:</p> <pre><code>$results = $query-&gt;where('cn', 'ends_with', 'Doe')-&gt;get();\n\n// Or:\n\n$results = $query-&gt;whereEndsWith('cn', 'Doe')-&gt;get();\n</code></pre>"},{"location":"docs/core/v2/searching/#where-between","title":"Where Between","text":"<p>To search for objects between two values, use the <code>whereBetween</code> method.</p> <p>For the example below, we'll retrieve all objects that were created between two dates:</p> <pre><code>$from = (new DateTime('October 1st 2016'))-&gt;format('YmdHis.0\\Z');\n$to = (new DateTime('January 1st 2017'))-&gt;format('YmdHis.0\\Z');\n\n$users = $query-&gt;whereBetween('whencreated', [$from, $to])-&gt;get();\n</code></pre>"},{"location":"docs/core/v2/searching/#where-contains","title":"Where Contains","text":"<p>We can also search for all objects with a common name that contains <code>John Doe</code> using the <code>contains</code> operator:</p> <pre><code>$results = $query-&gt;where('cn', 'contains', 'John Doe')-&gt;get();\n\n// Or:\n\n$results = $query-&gt;whereContains('cn', 'John Doe')-&gt;get();\n</code></pre>"},{"location":"docs/core/v2/searching/#where-not-contains","title":"Where Not Contains","text":"<p>You can use a 'where not contains' to perform the inverse of a 'where contains':</p> <pre><code>$results = $query-&gt;where('cn', 'not_contains', 'John Doe')-&gt;get();\n\n// Or:\n\n$results = $query-&gt;whereNotContains('cn', 'John Doe');\n</code></pre>"},{"location":"docs/core/v2/searching/#where-has","title":"Where Has","text":"<p>Or we can retrieve all objects that have a common name attribute using the wildcard operator (<code>*</code>):</p> <pre><code>$results = $query-&gt;where('cn', '*')-&gt;get();\n\n// Or:\n\n$results = $query-&gt;whereHas('cn')-&gt;get();\n</code></pre> <p>This type of filter syntax allows you to clearly see what your searching for.</p>"},{"location":"docs/core/v2/searching/#where-not-has","title":"Where Not Has","text":"<p>You can use a 'where not has' to perform the inverse of a 'where has':</p> <pre><code>$results = $query-&gt;where('cn', '!*')-&gt;get();\n\n// Or:\n\n$results = $query-&gt;whereNotHas($field)-&gt;get();\n</code></pre>"},{"location":"docs/core/v2/searching/#where-deleted","title":"Where Deleted","text":"<p>To retrieve only deleted models from your LDAP server, use the <code>whereDeleted</code> method:</p> <pre><code>$results = $query-&gt;whereDeleted()-&gt;get();\n</code></pre> <p>If you would like to include deleted models from your LDAP server in your query results, use the <code>withDeleted</code> method:</p> <pre><code>$results = $query-&gt;withDeleted()-&gt;get();\n</code></pre>"},{"location":"docs/core/v2/searching/#or-wheres","title":"Or Wheres","text":"<p>To perform an <code>or where</code> clause on the search object, use the <code>orWhere()</code> method.</p> <p>For example:</p> <pre><code>$results = $query-&gt;where('cn', '=', 'John Doe')\n                 -&gt;orWhere('cn', '=', 'Suzy Doe')\n                 -&gt;get();\n</code></pre> <p>This query will return objects that have the common name of <code>John Doe</code> or <code>Suzy Doe</code>.</p> <p>You can also use all <code>where</code> methods as an or where, for example: <code>orWhereHas()</code>, <code>orWhereContains()</code>, <code>orWhereStartsWith()</code>, <code>orWhereEndsWith()</code></p>"},{"location":"docs/core/v2/searching/#dynamic-wheres","title":"Dynamic Wheres","text":"<p>To perform a dynamic where, simply suffix a <code>where</code> with the field you're looking for.</p> <p>This feature was directly ported from Laravel's Eloquent.</p> <p>Here's an example:</p> <pre><code>// This query:\n$result = $query-&gt;where('cn', '=', 'John Doe')-&gt;first();\n\n// Can be converted to:\n$result = $query-&gt;whereCn('John Doe')-&gt;first();\n</code></pre> <p>You can perform this on any attribute:</p> <pre><code>$result = $query-&gt;whereTelephonenumber('555-555-5555')-&gt;first();\n</code></pre> <p>You can also chain them:</p> <pre><code>$result = $query-&gt;whereTelephonenumber('555-555-5555')\n                -&gt;whereGivenname('John Doe')\n                -&gt;whereSn('Doe')\n                -&gt;first();\n</code></pre> <p>You can even perform multiple dynamic wheres by separating your fields by an <code>And</code>:</p> <pre><code>// This would perform a search for a user with the\n// first name of 'John' and last name of 'Doe'.\n$result = $query-&gt;whereGivennameAndSn('John', 'Doe')-&gt;first();\n</code></pre>"},{"location":"docs/core/v2/searching/#nested-filters","title":"Nested Filters","text":"<p>By default, the LdapRecord query builder automatically wraps your queries in <code>and</code> / <code>or</code> filters for you. However, if any further complexity is required, nested filters allow you to construct any query fluently and easily.</p>"},{"location":"docs/core/v2/searching/#andfilter","title":"andFilter","text":"<p>The <code>andFilter</code> method accepts a closure which allows you to construct a query inside of an <code>and</code> LDAP filter:</p> <pre><code>// Creates the filter: (&amp;(givenname=John)(sn=Doe))\n$results = $query-&gt;andFilter(function (LdapRecord\\Query\\Builder $q) {\n    $q-&gt;where('givenname', '=', 'John')\n      -&gt;where('sn', '=', 'Doe');\n})-&gt;get();\n</code></pre> <p>The above query would return objects that contain the first name <code>John</code> and the last name <code>Doe</code>.</p>"},{"location":"docs/core/v2/searching/#orfilter","title":"orFilter","text":"<p>The <code>orFilter</code> method accepts a closure which allows you to construct a query inside of an <code>or</code> LDAP filter:</p> <pre><code>// Creates the filter: (|(givenname=John)(sn=Doe))\n$results = $query-&gt;orFilter(function (LdapRecord\\Query\\Builder $q) {\n    $q-&gt;where('givenname', '=', 'John')\n      -&gt;where('sn', '=', 'Doe');\n})-&gt;get();\n</code></pre> <p>The above query would return objects that contain the first name <code>John</code> or the last name <code>Doe</code>.</p>"},{"location":"docs/core/v2/searching/#notfilter","title":"notFilter","text":"<p>The <code>notFilter</code> method accepts a closure which allows you to construct a query inside a <code>not</code> LDAP filter:</p> <pre><code>// Creates the filter: (!(givenname=John)(sn=Doe))\n$results = $query-&gt;notFilter(function (LdapRecord\\Query\\Builder $q) {\n    $q-&gt;where('givenname', '=', 'John')\n      -&gt;where('sn', '=', 'Doe');\n})-&gt;get();\n</code></pre> <p>The above query would return objects that do not contain the first name <code>John</code> or the last name <code>Doe</code>.</p>"},{"location":"docs/core/v2/searching/#complex-nesting","title":"Complex Nesting","text":"<p>The above methods <code>andFilter</code> / <code>orFilter</code> can be chained together and nested as many times as you'd like for larger complex queries:</p> <pre><code>$query = $query-&gt;orFilter(function (LdapRecord\\Query\\Builder $q) {\n    $q-&gt;where('givenname', '=', 'John')-&gt;where('sn', '=', 'Doe');\n})-&gt;andFilter(function (LdapRecord\\Query\\Builder $q) {\n    $q-&gt;where('department', '=', 'Accounting')-&gt;where('title', '=', 'Manager');\n})-&gt;getUnescapedQuery();\n\necho $query; // Returns '(&amp;(|(givenname=John)(sn=Doe))(&amp;(department=Accounting)(title=Manager)))'\n</code></pre>"},{"location":"docs/core/v2/searching/#raw-filters","title":"Raw Filters","text":"<p>Raw filters are not escaped. Do not accept user input into the raw filter method.</p> <p>Sometimes you might just want to add a raw filter without using the query builder. You can do so by using the <code>rawFilter()</code> method:</p> <pre><code>$results = $query-&gt;rawFilter('(samaccountname=jdoe)')-&gt;get();\n\n// Or use an array\n$filters = [\n    '(samaccountname=jdoe)',\n    '(surname=Doe)',\n];\n\n$results = $query-&gt;rawFilter($filters)-&gt;get();\n\n// Or use multiple arguments\n$results = $query-&gt;rawFilter($filters[0], $filters[1])-&gt;get();\n\n// Multiple raw filters will be automatically wrapped into an `and` filter:\n$query = $query-&gt;getUnescapedQuery();\n\necho $query; // Returns (&amp;(samaccountname=jdoe)(surname=Doe))\n</code></pre>"},{"location":"docs/core/v2/searching/#paginating","title":"Paginating","text":"<p>Paginating your search results will allow you to return more results than your LDAP cap (usually 1000).</p> <p>For example, if your LDAP server contains 10,000 objects and you paginate by 1000, 10 queries will be executed.</p> <p>Calling <code>paginate()</code> will retrieve all objects from your LDAP server for the current query. Be careful with large result sets -- as you may run out of memory. Use chunking with large directories to avoid this.</p> <pre><code>// Perform global \"all\" search, paginating by 1000 objects:\n$results = $query-&gt;paginate(1000);\n\nforeach ($results as $result) {\n    //\n}\n</code></pre>"},{"location":"docs/core/v2/searching/#chunking","title":"Chunking","text":"<p>Important: This feature is only available in LdapRecord &gt;= v2.5.0</p> <p>Chunking your search results will prevent you from running out of memory when executing pagination requests on large directories.</p> <p>The <code>chunk</code> method executes a paginated request indentically to the above <code>paginate</code> method, except it will return each \"page\" of objects, passing them into a closure for processing.</p> <pre><code>// Perform global \"all\" search, chunking by 1000 objects:\n$query-&gt;chunk(1000, function ($entries) {\n    foreach ($entries as $entry) {\n        //\n    }\n});\n</code></pre>"},{"location":"docs/core/v2/searching/#slicing","title":"Slicing","text":"<p>Important: </p> <ul> <li>This feature is only available in LdapRecord &gt;= v2.11.0</li> <li>Your LDAP server must support Virtual List View.</li> </ul> <p>Slicing your search results allows you to retrieve only a particular set of results based on an offset, similar to a database offset. This helps in dramatically reducing memory usage and query execution time. However, there are some caveats to be aware of:</p> <ul> <li>You must provide an \"order by\" clause (via <code>$query-&gt;orderBy()</code>) prior to executing <code>slice()</code>. If one is not present on the query builder, then LdapRecord will sort by the <code>cn</code> attribute in an ascending manor. This is required for the LDAP server to process the VLV request.</li> <li>Your query must search less than 10,000 total records (this is a configurable limit in Active Directory).</li> </ul> <pre><code>$query = $connection-&gt;query();\n\n$slice = $query-&gt;slice($page = 1, $perPage = 100): \\LdapRecord\\Query\\Slice;\n\n$slice-&gt;items(): array|\\LdapRecord\\Query\\Collection;\n\n$slice-&gt;total(): int;\n\n$slice-&gt;perPage(): int;\n\n$slice-&gt;currentPage(): int;\n\n$slice-&gt;hasMorePages(): bool;\n\n$slice-&gt;hasPages(): bool;\n\n$slice-&gt;onFirstPage(): bool;\n\n$slice-&gt;onLastPage(): bool;\n\n$slice-&gt;isEmpty(): bool;\n\n$slice-&gt;isNotEmpty(): bool;\n</code></pre>"},{"location":"docs/core/v2/searching/#base-dn","title":"Base DN","text":"<p>To set the base DN of your search you can use one of two methods:</p> <pre><code>// Using the `in()` method:\n$results = $query-&gt;in('ou=Accounting,dc=local,dc=com')-&gt;get();\n\n// Using the `setDn()` method:\n$results = $query-&gt;setDn('ou=Accounting,dc=local,dc=com')-&gt;get();\n</code></pre> <p>Either option will return the same results. Use which ever method you prefer to be more readable.</p>"},{"location":"docs/core/v2/searching/#automatic-base-dn-substitution","title":"Automatic Base DN Substitution","text":"<p>Since your LDAP configuration contains your connection's base DN, LdapRecord can automatically substitute it into the <code>setDn()</code>, <code>in()</code>, or <code>find()</code> methods using a <code>{base}</code> replacement template string.</p> <p>For example, if our configuration contains the <code>base_dn</code> of <code>dc=local,dc=com</code>, we can insert <code>{base}</code> alongside the other RDN's of the LDAP DN we are looking for:</p> <pre><code>// Queries for \"ou=Accounting,dc=local,dc=com\"\n$results = $query-&gt;setDn('ou=Accounting,{base}')-&gt;get();\n\n// Alias for the above.\n$results = $query-&gt;in('ou=Accounting,{base}')-&gt;get();\n\n// Queries for \"ou=John Doe,ou=Users,dc=local,dc=com\"\n$object = $query-&gt;find('cn=John Doe,ou=Users,{base}');\n</code></pre> <p>This helps reduce the possibility for error and also allows you to use a single source of truth for your base DN.</p>"},{"location":"docs/core/v2/searching/#root-dse","title":"Root DSE","text":"<p>To fetch the Root DSE object in your directory, execute the below query:</p> <pre><code>$rootDse = $query-&gt;query()\n    -&gt;in(null)\n    -&gt;read()\n    -&gt;whereHas('objectclass')\n    -&gt;first();\n</code></pre> <p>Or, if you're using models:</p> <pre><code>use LdapRecord\\Models\\Entry;\n\n$rootDse = Entry::getRootDse();\n</code></pre>"},{"location":"docs/core/v2/searching/#search-options","title":"Search Options","text":""},{"location":"docs/core/v2/searching/#recursive","title":"Recursive","text":"<p>By default, all searches performed are recursive.</p> <p>If you'd like to disable recursive search and perform a single level search, use the <code>listing()</code> method:</p> <pre><code>$result = $query-&gt;listing()-&gt;get();\n</code></pre> <p>This would perform an <code>ldap_listing()</code> instead of an <code>ldap_search()</code>.</p>"},{"location":"docs/core/v2/searching/#read","title":"Read","text":"<p>If you'd like to perform a read instead of a listing or a recursive search, use the <code>read()</code> method:</p> <pre><code>$result = $query-&gt;read()-&gt;where('objectClass', '*')-&gt;get();\n</code></pre> <p>This would perform an <code>ldap_read()</code> instead of an <code>ldap_listing()</code> or an <code>ldap_search()</code>.</p> <p>Performing a <code>read()</code> will always return one record in your result.</p>"},{"location":"docs/core/v2/searching/#custom-controls","title":"Custom Controls","text":"<p>If you'd like to add server controls to your query, use the <code>addControl</code> method:</p> <pre><code>$result = $query-&gt;addControl('1.2.840.113556.1.4.417', $isCritical = true)-&gt;get();\n</code></pre>"},{"location":"docs/core/v2/searching/#retrieving-the-ran-query","title":"Retrieving the ran query","text":"<p>If you'd like to retrieve the current query to save or run it at another time, use the <code>getQuery()</code> method on the query builder.</p> <p>This will return the escaped filter.</p> <pre><code>$query = $query-&gt;where('cn', '=', 'John Doe')-&gt;getQuery();\n\necho $query; // Returns '(cn=\\4a\\6f\\68\\6e\\20\\44\\6f\\65)'\n</code></pre> <p>To retrieve the unescaped filter, call the <code>getUnescapedQuery()</code> method:</p> <pre><code>$query = $query-&gt;where('cn', '=', 'John Doe')-&gt;getUnescapedQuery();\n\necho $query; // Returns '(cn=John Doe)'\n</code></pre> <p>Now that you know how to search your directory, lets move onto creating / modifying LDAP objects.</p>"},{"location":"docs/core/v2/testing/","title":"Testing","text":""},{"location":"docs/core/v2/testing/#introduction","title":"Introduction","text":"<p>LdapRecord comes with a utility that allow you to test bind attempts against a fake server and return custom error codes &amp; responses.</p> <p>This allows you to test how your application responds to authentication failures and error messages.</p>"},{"location":"docs/core/v2/testing/#test-case-setup","title":"Test Case Setup","text":"<p>To begin, initialize the fake directory using the <code>DirectoryFake::setup</code> method. This method accepts the name of your LDAP connection that you initialize in your application.</p> <p>If you do not provide a name, your default LDAP connection name will be used.</p> <p>Upon calling the <code>setup</code> method, your LDAP connection will be swapped out of the connection <code>Container</code> and replaced with a <code>ConnectionFake</code>.</p> <p>Let's walk through an example of testing an application that uses LDAP authentication.</p> <p>Here's our example controller:</p> <pre><code>class AuthController\n{\n    public function __construct()\n    {\n        Container::addConnection([\n            'hosts' =&gt; ['10.0.0.1']\n        ]);\n    }\n\n    public function login()\n    {\n        $connection = Container::getDefaultConnection();\n\n        $username = $_POST['username'];\n        $password = $_POST['password'];\n\n        if ($connection-&gt;auth()-&gt;attempt($username, $password)) {\n            return \"Your password is valid!\";\n        }\n\n        return \"Username or password is incorrect.\";\n    }\n}\n</code></pre> <p>Now let's test it:</p> <pre><code>use LdapRecord\\Testing\\DirectoryFake;\n\nclass LoginTest extends TestCase\n{\n    public function test_login()\n    {\n        $user = 'cn=User,dc=local,dc=com';\n\n        DirectoryFake::setup()-&gt;actingAs($user);\n\n        // Execute HTTP post request somehow in your testing framework...\n\n        $this-&gt;post('/login', [\n            'username' =&gt; $user,\n            'password' =&gt; 'secret',\n        ])-&gt;assertSee(\"Your password is valid!\");\n\n        $this-&gt;post('/login', [\n            'username' =&gt; 'invalid',\n            'password' =&gt; 'secret',\n        ])-&gt;assertSee(\"Username or password is incorrect.\");\n    }\n}\n</code></pre> <p>This is a small example of how you can test bind attempts to your LDAP server.</p>"},{"location":"docs/core/v2/testing/#responses-and-error-codes","title":"Responses and Error Codes","text":"<p>When testing connectivity to your LDAP server, you may wish to test error codes and messages that may be returned when a bind attempt fails. To do this, you can use the <code>ConnectionFake</code> to retrieve a fake LDAP connection to return error codes when a bind attempt fails.</p> <p>Let's walk through an example of an authentication controller that will retrieve the last LDAP error and determine the cause of the bind failure.</p> <p>Let's walk through an example of testing an application that uses LDAP authentication.</p> <p>Here's our example controller:</p> <pre><code>class AuthController\n{\n    public function __construct()\n    {\n        Container::addConnection([\n            'hosts' =&gt; ['10.0.0.1']\n        ]);\n    }\n\n    public function login()\n    {\n        $connection = Container::getDefaultConnection();\n\n        $username = $_POST['username'];\n        $password = $_POST['password'];\n\n        if ($connection-&gt;auth()-&gt;attempt($username, $password)) {\n            return \"Your password is valid!\";\n        }\n\n        $error = $connection-&gt;getLdapConnection()-&gt;getDiagnosticMessage();\n\n        if (strpos($error, '532') !== false) {\n            return \"Your password has expired.\";\n        } elseif (strpos($error, '533') !== false) {\n            return \"Your account is disabled.\";\n        } elseif (strpos($error, '701') !== false) {\n             return \"Your account has expired.\";\n        } elseif (strpos($error, '775') !== false) {\n             return \"Your account is locked.\";\n        }\n\n        return \"Username or password is incorrect.\";\n    }\n}\n</code></pre> <p>You can see above that we are pulling the diagnostic message of the last failed bind attempt.</p> <p>This diagnostic message contains an error code that you can use to tell the user why they failed logging in.</p> <p>Here is how we would test the above controller:</p> <pre><code>use LdapRecord\\Testing\\DirectoryFake;\n\nclass LoginTest extends TestCase\n{\n    public function test_login()\n    {\n        $user = 'cn=User,dc=local,dc=com';\n\n        $fake = DirectoryFake::setup()-&gt;actingAs($user);\n\n        $fake-&gt;getLdapConnection()-&gt;shouldReturnDiagnosticMessage('Failed: 775');\n\n        // Execute HTTP post request somehow in your testing framework...\n\n        $this-&gt;post('/login', [\n            'username' =&gt; $user,\n            'password' =&gt; 'secret',\n        ])-&gt;assertSee(\"Your account is locked.\");\n    }\n}\n</code></pre>"},{"location":"docs/core/v2/upgrading/","title":"Upgrading to Version 2","text":""},{"location":"docs/core/v2/upgrading/#models","title":"Models","text":""},{"location":"docs/core/v2/upgrading/#exception-handling","title":"Exception Handling","text":"<p>Models will now always throw the following exception after failure of creation/modification:</p> <pre><code>LdapRecord\\LdapRecordException\n</code></pre> <p>This is instead of potentially failing silently and returning <code>false</code>, as previously implemented.</p> <p>Due to the above change, the following methods will throw an exception upon failure:</p> <p>Important: These methods now return no value (<code>void</code>).</p> <ul> <li><code>$model-&gt;save()</code></li> <li><code>$model-&gt;update()</code></li> <li><code>$model-&gt;delete()</code></li> <li><code>$model-&gt;createAttribute()</code></li> <li><code>$model-&gt;updateAttribute()</code></li> <li><code>$model-&gt;deleteAttribute()</code></li> <li><code>$model-&gt;rename()</code></li> <li><code>$model-&gt;move()</code></li> </ul> <pre><code>// Before...\ntry {\n  if ($model-&gt;save()) {\n    //\n  }\n} catch (\\LdapRecord\\LdapRecordException $ex) {\n  //\n}\n\n// After...\ntry {\n  $model-&gt;save();\n} catch (\\LdapRecord\\LdapRecordException $ex) {\n  //\n}\n</code></pre> <p>The follwowing static methods will also throw an exception upon failure:</p> <p>Important: These methods maintain their return value from v1.</p> <ul> <li><code>Model::create()</code></li> <li><code>Model::destroy()</code></li> </ul>"},{"location":"docs/core/v2/upgrading/#synchronize-renamed-to-refresh","title":"Synchronize renamed to Refresh","text":"<p>The <code>$model-&gt;synchronize()</code> method has been renamed to follow Laravel's Eloquent method name for the same purpose: <code>$model-&gt;refresh()</code>.</p> <p>This will allow developers to utilize the same syntax across both Eloquent and LdapRecord:</p> <pre><code>$user = User::find('cn=John Doe,dc=local,dc=com');\n\n// Before...\n$user-&gt;synchronize();\n\n// After...\n$user-&gt;refresh();\n</code></pre>"},{"location":"docs/core/v2/upgrading/#automated-synchronization-removed","title":"Automated Synchronization Removed","text":"<p>In v1 of LdapRecord, attributes on models would be automatically re-synchronized when any modification was performed on a model.</p> <p>This ended up being very resource intensive when peforming bulk creations or updates on models.</p> <p>If you require refreshing a models attribute's after creation or modification, use the <code>refresh()</code> method:</p> <p>Important: This means that Object GUID's are no longer available immediately after creation.</p> <pre><code>use LdapRecord\\Models\\ActiveDirectory\\User;\n\n// Object GUID will not be available.\n$user = User::create(['...']);\n\n// Returns `null`:\n$user-&gt;getConvertedGuid();\n\n// Re-pulling attributes:\n$user-&gt;refresh();\n\n// Returns the newly assigned Object GUID:\n$user-&gt;getConvertedGuid();\n</code></pre>"},{"location":"docs/core/v2/upgrading/#asdatetime-parameter-order","title":"asDateTime Parameter Order","text":"<p>If you were casting an LDAP timestamp manually using the <code>$model-&gt;asDateTime()</code> method, the parameter order has been swapped:</p> <pre><code>$type = 'windows-int';\n$timestamp = '132460789290000000';\n\n// Before...\n$carbon = $model-&gt;asDateTime($type, $timestamp);\n\n// After...\n$carbon = $model-&gt;asDateTime($timestamp, $type);\n</code></pre>"},{"location":"docs/core/v2/upgrading/#query-builder","title":"Query Builder","text":""},{"location":"docs/core/v2/upgrading/#not-found-exceptions","title":"Not Found Exceptions","text":"<p>Previously in v1 of LdapRecord, when using <code>orFail()</code> methods directly on raw <code>Connection</code> queries, a <code>ModelNotFoundException</code> would be thrown.</p> <p>This didn't make much sense, since models are not returned from raw queries.</p> <p>A new exception has been introduced to alleviate any confusion:</p> <pre><code>LdapRecord\\Query\\ObjectNotFoundException\n</code></pre> <p>The <code>ModelNotFoundException</code> also now extends <code>ObjectNotFoundException</code>.</p> <pre><code>$connection = new Connection(['...']);\n\n// Before...\ntry {\n    $connection-&gt;query()-&gt;firstOrFail();\n} catch (\\LdapRecord\\Models\\ModelNotFoundException $ex) {\n    //\n}\n\n// After...\ntry {\n    $connection-&gt;query()-&gt;firstOrFail();\n} catch (\\LdapRecord\\Query\\ObjectNotFoundException $ex) {\n    //\n}\n</code></pre>"},{"location":"docs/core/v2/versioning/","title":"Versioning","text":"<p>LdapRecord is versioned under the Semantic Versioning guidelines as much as possible.</p> <p>Releases will be numbered with the following format:</p> <p><code>&lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;</code></p> <p>And constructed with the following guidelines:</p> <ul> <li>Breaking backward compatibility bumps the major and resets the minor and patch.</li> <li>New additions without breaking backward compatibility bumps the minor and resets the patch.</li> <li>Bug fixes and misc changes bumps the patch.</li> </ul> <p>Minor versions are not maintained individually, and you're encouraged to upgrade through to the next minor version.</p> <p>Major versions are maintained individually through separate branches.</p>"},{"location":"docs/core/v2/active-directory/groups/","title":"Group Management (Active Directory)","text":""},{"location":"docs/core/v2/active-directory/groups/#creation","title":"Creation","text":"<p>To create a new Active Directory group, only a common name is required (<code>cn</code>):</p> <pre><code>&lt;?php\n\nuse LdapRecord\\Models\\ActiveDirectory\\Group;\n\n$group = Group::create(['cn' =&gt; 'Accounting']);\n</code></pre> <p>To create a group inside of a particular Organizational Unit (OU), call the <code>inside()</code> method:</p> <pre><code>$group = (new Group)-&gt;inside('ou=Office Groups,dc=local,dc=com');\n\n$group-&gt;cn = 'Accounting';\n\n$group-&gt;save();\n</code></pre>"},{"location":"docs/core/v2/active-directory/groups/#members","title":"Members","text":"<p>When you create or locate a group on your directory, the <code>members</code> relationship is available to you on the model instance.</p>"},{"location":"docs/core/v2/active-directory/groups/#getting-members","title":"Getting Members","text":"<p>To get the immediate members of a group on your directory call the <code>members</code> relationship, and then <code>get()</code>:</p> <pre><code>$group = Group::find('cn=Accounting,dc=local,dc=com');\n\n$members = $group-&gt;members()-&gt;get();\n</code></pre> <p>When getting members, a collection of various models may be returned, such as:</p> <ul> <li><code>LdapRecord\\Models\\ActiveDirectory\\User</code></li> <li><code>LdapRecord\\Models\\ActiveDirectory\\Group</code></li> <li><code>LdapRecord\\Models\\ActiveDirectory\\Contact</code></li> </ul> <p>To use different models, override the <code>members</code> relationship method.</p>"},{"location":"docs/core/v2/active-directory/groups/#getting-members-recursively","title":"Getting Members Recursively","text":"<p>Very often we use groups that are apart of other groups, that include members.</p> <p>To retrieve these nested members, call the <code>recursive()</code> method, prior to <code>get()</code>:</p> <pre><code>$group = Group::find('cn=Accounting,dc=local,dc=com');\n\n$allMembers = $group-&gt;members()-&gt;recursive()-&gt;get();\n</code></pre>"},{"location":"docs/core/v2/active-directory/groups/#adding-members","title":"Adding Members","text":"<p>In Active Directory, valid group members are other groups, users and contacts.</p> <p>To add members to a group, call the <code>members</code> relationship, and then the <code>attach()</code> method:</p> <p>You must provide a <code>Model</code> instance into the <code>attach()</code> method.</p> <pre><code>$group = Group::find('cn=Accounting,dc=local,dc=com');\n\n$user = User::find('cn=John Doe,dc=local,dc=com');\n\n$group-&gt;members()-&gt;attach($user);\n</code></pre> <p>If the model was successfully added, or the model is already a member of the group, the <code>attach()</code> method will return the model instance you passed into it:</p> <pre><code>$office = $accounting-&gt;members()-&gt;attach(\n    Group::create(['cn' =&gt; 'Office'])\n);\n\n// Displays 'cn=Office,dc=local,dc=com'\necho $office-&gt;getDn();\n</code></pre>"},{"location":"docs/core/v2/active-directory/groups/#adding-multiple-members","title":"Adding Multiple Members","text":"<p>To add multiple members at once, provide an array of models to the <code>attachMany()</code> method:</p> <pre><code>$accounting = Group::find('cn=Accounting,dc=local,dc=com');\n\n$accountants = User::in('ou=Accountants,ou=Users,dc=local,dc=com')-&gt;get();\n\n$accounting-&gt;members()-&gt;attachMany($accountants);\n</code></pre>"},{"location":"docs/core/v2/active-directory/groups/#removing-members","title":"Removing Members","text":"<p>To remove members on a group, call the <code>members</code> relationship, and then <code>detach()</code>:</p> <p>You must provide a <code>Model</code> instance into the <code>detach()</code> method.</p> <pre><code>$group = Group::find('cn=Accounting,dc=local,dc=com');\n\n$user = $group-&gt;members()-&gt;where('cn', '=', 'Steve Bauman')-&gt;first();\n\n$group-&gt;members()-&gt;detach($user);\n</code></pre>"},{"location":"docs/core/v2/active-directory/groups/#removing-multiple-members","title":"Removing Multiple Members","text":"<p>To remove multiple members at once, provide an array of models to the <code>detachMany()</code> method:</p> <pre><code>$group = Group::find('cn=Accounting,dc=local,dc=com');\n\n$members = $group-&gt;members()\n                 -&gt;where('department', 'contains', 'Office')\n                 -&gt;get();\n\n$group-&gt;members()-&gt;detachMany($members);\n</code></pre>"},{"location":"docs/core/v2/active-directory/groups/#removing-all-members","title":"Removing All Members","text":"<p>To remove all immediate members from the group, call the <code>detachAll()</code> method:</p> <p>A collection of all removed members will be returned.</p> <pre><code>$group = Group::find('cn=Accounting,dc=local,dc=com');\n\n$removed = $group-&gt;members()-&gt;detachAll();\n\nforeach ($removed as $member) {\n    echo \"Removed: \" . $member-&gt;getDn();\n}\n</code></pre>"},{"location":"docs/core/v2/active-directory/groups/#groups","title":"Groups","text":"<p>When you create or locate a group on your directory, the <code>groups</code> relationship is available to you on the model instance.</p>"},{"location":"docs/core/v2/active-directory/groups/#getting-groups","title":"Getting Groups","text":"<p>To get the immediate groups that a particular group is apart of on your directory call the <code>groups</code> relationship, and then <code>get()</code>:</p> <pre><code>$group = Group::find('cn=Accounting,dc=local,dc=com');\n\n$groups = $group-&gt;groups()-&gt;get();\n</code></pre>"},{"location":"docs/core/v2/active-directory/groups/#getting-groups-recursively","title":"Getting Groups Recursively","text":"<p>When you have a group that is apart of many parent groups in a hierarchy, you may need to retrieve these.</p> <p>Call the <code>recursive()</code> method, prior to <code>get()</code> to retrieve them:</p> <pre><code>$group = Group::find('cn=Accounting,dc=local,dc=com');\n\n$allGroups = $group-&gt;groups()-&gt;recursive()-&gt;get();\n</code></pre>"},{"location":"docs/core/v2/active-directory/groups/#adding-groups","title":"Adding Groups","text":"<p>To add groups to a particular group, call the <code>attach()</code> method on the <code>groups</code> relation:</p> <p>You must provide a <code>Model</code> instance into the <code>attach()</code> method.</p> <pre><code>$accounting = Group::find('cn=Accounting,dc=local,dc=com');\n\n$office = Group::find('cn=Office,dc=local,dc=com');\n\n$accounting-&gt;groups()-&gt;attach($office);\n</code></pre>"},{"location":"docs/core/v2/active-directory/groups/#adding-multiple-groups","title":"Adding Multiple Groups","text":"<p>To add multiple groups at once, provide an array of models to the <code>attachMany()</code> method:</p> <pre><code>$accounting = Group::find('cn=Accounting,dc=local,dc=com');\n\n$officeGroups = Group::in('ou=Office,ou=Groups,dc=local,dc=com')-&gt;get();\n\n$accounting-&gt;groups()-&gt;attachMany($officeGroups);\n</code></pre>"},{"location":"docs/core/v2/active-directory/groups/#removing-groups","title":"Removing Groups","text":"<p>To remove groups on a particular group, call the <code>groups</code> relationship, and then <code>detach()</code>:</p> <p>You must provide a <code>Model</code> instance into the <code>detach()</code> method.</p> <pre><code>$accounting = Group::find('cn=Accounting,dc=local,dc=com');\n\n$officeGroup = $accounting-&gt;groups()-&gt;where('cn', '=', 'Office')-&gt;first();\n\n$accounting-&gt;groups()-&gt;detach($officeGroup);\n</code></pre>"},{"location":"docs/core/v2/active-directory/groups/#removing-multiple-groups","title":"Removing Multiple Groups","text":"<p>To remove multiple groups at once, provide an array of models to the <code>detachMany()</code> method:</p> <pre><code>$accounting = Group::find('cn=Accounting,dc=local,dc=com');\n\n$officeGroups = $accounting-&gt;groups()\n                           -&gt;in('ou=Office,ou=Groups,dc=local,dc=com')\n                           -&gt;get();\n\n$accounting-&gt;groups()-&gt;detachMany($officeGroups);\n</code></pre>"},{"location":"docs/core/v2/active-directory/groups/#removing-all-groups","title":"Removing All Groups","text":"<p>To remove all immediate groups of a particular group, call the <code>detachAll()</code> method:</p> <p>A collection of all removed groups will be returned.</p> <pre><code>$accounting = Group::find('cn=Accounting,dc=local,dc=com');\n\n$removed = $accounting-&gt;groups()-&gt;detachAll();\n\nforeach ($removed as $group) {\n    echo \"Removed: \" . $group-&gt;getDn();\n}\n</code></pre>"},{"location":"docs/core/v2/active-directory/users/","title":"User Management (Active Directory)","text":""},{"location":"docs/core/v2/active-directory/users/#creation","title":"Creation","text":"<p>Let's walk through the basics of user creation for Active Directory. There are some requirements you must know prior to creation:</p> Requirement You must set a common name (<code>cn</code>) for the user You must connect to your server with an account that has permission to create users You must connect to your server via TLS or SSL if you set the the users password (<code>unicodepwd</code>) attribute You must set the <code>unicodePwd</code> attribute as a non-encoded string (more on this below) To set the users <code>userAccountControl</code>, it must be set after the user has been created <p>Important: Attributes that are set below can be cased in any manor. They can be <code>UPPERCASED</code>, <code>lowercased</code>, <code>camelCased</code>, <code>PascalCased</code>, etc. Use whichever casing you prefer to be most readable in your application.</p> <pre><code>&lt;?php\n\nuse LdapRecord\\Models\\ActiveDirectory\\User;\n\n$user = (new User)-&gt;inside('ou=Users,dc=local,dc=com');\n\n$user-&gt;cn = 'John Doe';\n$user-&gt;unicodePwd = 'SecretPassword';\n$user-&gt;samaccountname = 'jdoe';\n$user-&gt;userPrincipalName = 'jdoe@acme.org';\n\n$user-&gt;save();\n\n// Sync the created users attributes.\n$user-&gt;refresh();\n\n// Enable the user.\n$user-&gt;userAccountControl = 512;\n\ntry {\n    $user-&gt;save();\n} catch (\\LdapRecord\\LdapRecordException $e) {\n    // Failed saving user.\n}\n</code></pre> <p>Important: It is wise to encapsulate saving your user in a try / catch block, so if it fails you can determine if the cause of failure is due to your domains password policy.</p>"},{"location":"docs/core/v2/active-directory/users/#password-management","title":"Password Management","text":""},{"location":"docs/core/v2/active-directory/users/#setting-passwords","title":"Setting Passwords","text":"<p>Using the included <code>LdapRecord\\Models\\ActiveDirectory\\User</code> model, an attribute mutator has been added that assists in the setting and changing of passwords on user objects. Feel free to take a peek into the source code to see how it all works.</p> <p>The password string you set on the users <code>unicodePwd</code> attribute is automatically encoded. You do not need to encode it yourself. Doing so will cause an error or exception upon saving the user.</p> <p>Once you have set a password on a user object, this generates a modification on the user model equal to a <code>LDAP_MODIFY_BATCH_REPLACE</code>:</p> <pre><code>&lt;?php\n\nuse LdapRecord\\Models\\ActiveDirectory\\User;\n\n$user = new User();\n\n$user-&gt;unicodepwd = 'secret';\n\n$modification = $user-&gt;getModifications()[0];\n\nvar_dump($modification);\n\n// \"attrib\" =&gt; \"unicodepwd\"\n// \"modtype\" =&gt; 3\n// \"values\" =&gt; array:1 [\n//    0 =&gt; \"\"\\x00s\\x00e\\x00c\\x00r\\x00e\\x00t\\x00\"\\x00\"\n// ]\n</code></pre> <p>As you can see, a batch modification has been automatically generated for the user. Upon calling <code>save()</code>, it will be sent to your LDAP server.</p>"},{"location":"docs/core/v2/active-directory/users/#changing-passwords","title":"Changing Passwords","text":"<p>To change a user's password, you must either:</p> <ol> <li>Bind to your LDAP server with a user that has permissions to reset passwords</li> <li>Or; bind as the user whose password you are trying to change.</li> </ol> <p>Important:</p> <ul> <li>You must provide the correct user's old password</li> <li>You must set the <code>unicodepwd</code> attribute with an array containing two (2) values (old &amp; new password)</li> <li>You must provide a new password that abides by your password policy, such as history, complexity, and length</li> </ul> <p>Let's walk through an example:</p> <pre><code>&lt;?php\n\nuse LdapRecord\\Models\\ActiveDirectory\\User;\n\n$user = User::find('cn=John Doe,ou=Users,dc=local,dc=com');\n\n$user-&gt;unicodepwd = ['old-password', 'new-password'];\n\ntry {\n    $user-&gt;save();\n\n    // User password changed!\n} catch (\\LdapRecord\\Exceptions\\InsufficientAccessException $ex) {\n    // The currently bound LDAP user does not\n    // have permission to change passwords.\n} catch (\\LdapRecord\\Exceptions\\ConstraintException $ex) {\n    // The users new password does not abide\n    // by the domains password policy.\n} catch (\\LdapRecord\\LdapRecordException $ex) {\n    // Failed changing password. Get the last LDAP\n    // error to determine the cause of failure.\n    $error = $ex-&gt;getDetailedError();\n\n    echo $error-&gt;getErrorCode();\n    echo $error-&gt;getErrorMessage();\n    echo $error-&gt;getDiagnosticMessage();\n}\n</code></pre> <p>Important: You must use a try / catch block upon saving. An <code>LdapRecord\\LdapRecordException</code> will always be thrown when an incorrect old password has been given, or the new password does not abide by your password policy.</p>"},{"location":"docs/core/v2/active-directory/users/#resetting-passwords","title":"Resetting Passwords","text":"<p>To reset a users password, you must be bound to your LDAP directory with a user whom has permission to do so on your directory.</p> <p>You can perform a password reset by simply setting the users <code>unicodepwd</code> attribute as a string, and then calling the <code>save()</code> method, similarly to how it is done during user creation:</p> <pre><code>&lt;?php\n\nuse LdapRecord\\Models\\ActiveDirectory\\User;\n\n$user = User::find('cn=John Doe,ou=Users,dc=local,dc=com');\n\n$user-&gt;unicodepwd = 'new-password';\n\ntry {\n    $user-&gt;save();\n\n    // User password reset!\n} catch (\\LdapRecord\\Exceptions\\InsufficientAccessException $ex) {\n    // The currently bound LDAP user does not\n    // have permission to reset passwords.\n} catch (\\LdapRecord\\Exceptions\\ConstraintException $ex) {\n    // The users new password does not abide\n    // by the domains password policy.\n} catch (\\LdapRecord\\LdapRecordException $ex) {\n    // Failed resetting password. Get the last LDAP\n    // error to determine the cause of failure.\n    $error = $ex-&gt;getDetailedError();\n\n    echo $error-&gt;getErrorCode();\n    echo $error-&gt;getErrorMessage();\n    echo $error-&gt;getDiagnosticMessage();\n}\n</code></pre>"},{"location":"docs/core/v2/active-directory/users/#password-policy-errors","title":"Password Policy Errors","text":"<p>Active Directory will return diagnostic error codes when a password modification fails.</p> <p>To determine the cause, you can check this diagnostic message to see if it contains any of the following codes:</p> Code Meaning <code>525</code> User not found <code>52e</code> Invalid credentials <code>530</code> Not permitted to logon at this time <code>531</code> Not permitted to logon at this workstation <code>532</code> Password expired <code>533</code> Account disabled <code>701</code> Account expired <code>773</code> User must reset password <code>775</code> User account locked <pre><code>&lt;?php\n\nuse LdapRecord\\Models\\ActiveDirectory\\User;\n\n$user = User::find('cn=John Doe,ou=Users,dc=local,dc=com');\n\n$user-&gt;unicodepwd = ['old-password', 'new-password'];\n\ntry {\n    $user-&gt;save();\n\n    // User password changed!\n} catch (\\LdapRecord\\LdapRecordException $ex) {\n    // Failed changing password. Get the last LDAP\n    // error to determine the cause of failure.\n    $error = $ex-&gt;getDetailedError();\n\n    echo $error-&gt;getErrorCode(); // 49\n    echo $error-&gt;getErrorMessage(); // 'Invalid credentials'\n    echo $error-&gt;getDiagnosticMessage(); // '80090308: LdapErr: DSID-0C09042A, comment: AcceptSecurityContext error, data 52e, v3839'\n\n    if (strpos($error-&gt;getDiagnosticMessage(), '52e')) {\n        // This is an invalid credentials error.\n    }\n}\n</code></pre>"},{"location":"docs/core/v2/active-directory/users/#check-if-a-user-is-locked-out","title":"Check if a user is locked out","text":"<p>To check if a user is locked out, verify that the <code>lockouttime</code> attribute is greater than <code>0</code> (zero):</p> <pre><code>$user = User::find('cn=John Doe,ou=Users,dc=local,dc=com');\n\nif ($user-&gt;lockouttime[0] ?? 0 &gt; 0) {\n    // User is locked out.\n}\n\nif ($user-&gt;getFirstAttribute('lockouttime') &gt; 0) {\n    // User is locked out.\n}\n</code></pre>"},{"location":"docs/core/v2/active-directory/users/#getting-all-locked-out-users","title":"Getting all locked out users","text":"<p>To retrieve all currently locked out users, query for all users with a <code>lockouttime</code> greater or equal to <code>1</code> (one):</p> <pre><code>$lockedOutUsers = User::where('lockouttime', '&gt;=', '1')-&gt;get();\n</code></pre>"},{"location":"docs/core/v2/active-directory/users/#unlock-locked-out-user-account","title":"Unlock Locked Out User Account","text":"<p>If a user has been locked out, set the <code>lockouttime</code> attribute to <code>0</code> (zero):</p> <p>Updating this attribute in Active Directory will also reset the users <code>badPwdCount</code> attribute to <code>0</code> (zero). For more information, see the Microsoft Documentation.</p> <pre><code>$user = User::find('cn=John Doe,ou=Users,dc=local,dc=com');\n\n$user-&gt;update(['lockouttime' =&gt; 0]);\n</code></pre>"},{"location":"docs/core/v2/active-directory/users/#extend-user-password-expiration","title":"Extend User Password Expiration","text":"<p>Sometimes you may wish to extend a user's password expiration for the full duration of your domains password expiry time.</p> <p>To do this, you must update the user's <code>pwdLastSet</code> time to <code>0</code>, then to <code>-1</code>:</p> <pre><code>$user = User::find('cn=John Doe,ou=Users,dc=local,dc=com');\n\n// Set password last set to 'Never':\n$user-&gt;update(['pwdlastset' =&gt; 0]);\n\n// Set password last set to the current date / time:\n$user-&gt;update(['pwdlastset' =&gt; -1]);\n\n// User password expiration successfully extended.\n</code></pre>"},{"location":"docs/core/v2/active-directory/users/#user-must-change-password-at-next-logon","title":"User Must Change Password at Next Logon","text":"<p>To toggle the \"User Must Change Password at Next Logon\" checkbox that is available in the Active Directory GUI - you must set the <code>pwdlastset</code> attribute to one of the below values:</p> Value Meaning <code>0</code> Toggled on. The user will be required to change their password. <code>-1</code> Toggled off. The user will not be required to change their password. <p>Important:</p> <ul> <li>The <code>pwdlastset</code> attribute can only be modified by domain administrators.</li> <li>If toggled on, the Active Directory user will not pass LDAP authentication   until they visit a domain joined computer and update their password.</li> </ul> <pre><code>$user = User::find('cn=John Doe,ou=Users,dc=local,dc=com');\n\n// The user must change their password on next login.\n$user-&gt;update(['pwdlastset' =&gt; 0]);\n</code></pre>"},{"location":"docs/core/v2/active-directory/users/#checking-user-enablement-disablement","title":"Checking User Enablement / Disablement","text":"<p>Important: This feature was added in v2.17.0.</p> <p>To determine if a user is enabled or disabled, you may use the <code>isEnabled()</code> or <code>isDisabled()</code> methods on an existing <code>User</code> model instance:</p> <pre><code>$user = User::find('cn=John Doe,ou=Users,dc=local,dc=com');\n\nif ($user-&gt;isEnabled()) {\n    // The user is enabled...\n}\n\nif ($user-&gt;isDisabled()) {\n    // The user is disabled...\n}\n</code></pre> <p>To access the user's User Account Control to determine other flags they may have set, call the <code>accountControl()</code> method:</p> <pre><code>use LdapRecord\\Models\\Attributes\\AccountControl;\n\n$user = User::find('...');\n\nif ($user-&gt;accountControl()-&gt;has(AccountControl::LOCKOUT)) {\n    // The user account is locked...\n}\n</code></pre> <p>To learn more about User Account Control, read on below.</p>"},{"location":"docs/core/v2/active-directory/users/#user-account-control","title":"User Account Control","text":"<p>A users <code>userAccountControl</code> attribute stores an integer value.</p> <p>This integer value contains the sums of various integer flags. These flags control the accessibility and behaviour of an Active Directory user account, such as account disablement, password expiry, the ability to change passwords, and more.</p> <p>For example, setting a users <code>userAccountControl</code> to <code>512</code> would mean that the user account is a default account type that represents a typical user. Setting it to <code>2</code>, would mean the account has been disabled.</p> <p>Combining both to <code>514</code> (<code>512 + 2 = 514</code>) would mean the users account is a typical user account, that is also disabled.</p>"},{"location":"docs/core/v2/active-directory/users/#usage","title":"Usage","text":"<p>You can manipulate a users <code>userAccountControl</code> manually by simply setting the <code>userAccountControl</code> property on an existing user using the raw integer value, or you can use the account control builder <code>LdapRecord\\Models\\Attributes\\AccountControl</code>:</p> <pre><code>&lt;?php\n\nuse LdapRecord\\Models\\ActiveDirectory\\User;\nuse LdapRecord\\Models\\Attributes\\AccountControl;\n\n$user = User::find('cn=John Doe,ou=Users,dc=local,dc=com');\n\n// Setting the UAC value manually:\n$user-&gt;userAccountControl = 512; // Normal, enabled account.\n\n// Or, using the UAC builder:\n$user-&gt;userAccountControl = (new AccountControl)-&gt;accountIsNormal();\n\n$user-&gt;save();\n</code></pre> <p>Using the <code>AccountControl</code> builder, methods called will automatically sum the integer value.</p> <p>For example, let's set an account control for a user with the following controls:</p> <ul> <li>The user account is normal</li> <li>The user account password does not expire</li> <li>The user account password cannot be changed</li> </ul> <pre><code>$user = User::find('cn=John Doe,ou=Users,dc=local,dc=com');\n\n$uac = new AccountControl();\n\n$uac-&gt;accountIsNormal();\n$uac-&gt;passwordDoesNotExpire();\n$uac-&gt;passwordCannotBeChanged();\n\n$user-&gt;userAccountControl = $uac;\n\n$user-&gt;save();\n</code></pre> <p>The <code>AccountControl</code> builder also allows you to determine which flags are set.</p> <p>This can be done with the <code>has</code> and <code>doesntHave</code> methods.</p> <p>Create an <code>AccountControl</code> with the users <code>userAccountControl</code> value in the constructor:</p> <pre><code>$user = User::find('cn=John Doe,ou=Users,dc=local,dc=com');\n\n$uac = new AccountControl(\n    $user-&gt;getFirstAttribute('userAccountControl')\n);\n\nif ($uac-&gt;has(AccountControl::LOCKOUT)) {\n    // This account is locked out.\n}\n\nif ($uac-&gt;doesntHave(AccountControl::LOCKOUT)) {\n    // The account is not locked out.\n}\n</code></pre>"},{"location":"docs/core/v2/active-directory/users/#available-constants","title":"Available Constants","text":"<p>The Account Control builder has constants for every possible value:</p> Constant Value <code>AccountControl::SCRIPT</code> <code>1</code> <code>AccountControl::ACCOUNTDISABLE</code> <code>2</code> <code>AccountControl::HOMEDIR_REQUIRED</code> <code>8</code> <code>AccountControl::LOCKOUT</code> <code>16</code> <code>AccountControl::PASSWD_NOTREQD</code> <code>32</code> <code>AccountControl::PASSWD_CANT_CHANGE</code> <code>64</code> <code>AccountControl::ENCRYPTED_TEXT_PWD_ALLOWED</code> <code>128</code> <code>AccountControl::TEMP_DUPLICATE_ACCOUNT</code> <code>256</code> <code>AccountControl::NORMAL_ACCOUNT</code> <code>512</code> <code>AccountControl::INTERDOMAIN_TRUST_ACCOUNT</code> <code>2048</code> <code>AccountControl::WORKSTATION_TRUST_ACCOUNT</code> <code>4096</code> <code>AccountControl::SERVER_TRUST_ACCOUNT</code> <code>8192</code> <code>AccountControl::DONT_EXPIRE_PASSWORD</code> <code>65536</code> <code>AccountControl::MNS_LOGON_ACCOUNT</code> <code>131072</code> <code>AccountControl::SMARTCARD_REQUIRED</code> <code>262144</code> <code>AccountControl::TRUSTED_FOR_DELEGATION</code> <code>524288</code> <code>AccountControl::NOT_DELEGATED</code> <code>1048576</code> <code>AccountControl::USE_DES_KEY_ONLY</code> <code>2097152</code> <code>AccountControl::DONT_REQ_PREAUTH</code> <code>4194304</code> <code>AccountControl::PASSWORD_EXPIRED</code> <code>8388608</code> <code>AccountControl::TRUSTED_TO_AUTH_FOR_DELEGATION</code> <code>16777216</code> <code>AccountControl::PARTIAL_SECRETS_ACCOUNT</code> <code>67108864</code>"},{"location":"docs/core/v2/active-directory/users/#available-methods","title":"Available Methods","text":"<p>The Account Control builder has methods to apply every possible value:</p> Method Constant Applied <code>AccountControl::runLoginScript()</code> <code>AccountControl::SCRIPT</code> <code>AccountControl::accountIsDisabled()</code> <code>AccountControl::ACCOUNTDISABLE</code> <code>AccountControl::homeFolderIsRequired()</code> <code>AccountControl::HOMEDIR_REQUIRED</code> <code>AccountControl::accountIsLocked()</code> <code>AccountControl::LOCKOUT</code> <code>AccountControl::passwordIsNotRequired()</code> <code>AccountControl::PASSWD_NOTREQD</code> <code>AccountControl::passwordCannotBeChanged()</code> <code>AccountControl::PASSWD_CANT_CHANGE</code> <code>AccountControl::allowEncryptedTextPassword()</code> <code>AccountControl::ENCRYPTED_TEXT_PWD_ALLOWED</code> <code>AccountControl::accountIsTemporary()</code> <code>AccountControl::TEMP_DUPLICATE_ACCOUNT</code> <code>AccountControl::accountIsNormal()</code> <code>AccountControl::NORMAL_ACCOUNT</code> <code>AccountControl::accountIsForInterdomain()</code> <code>AccountControl::INTERDOMAIN_TRUST_ACCOUNT</code> <code>AccountControl::accountIsForWorkstation()</code> <code>AccountControl::WORKSTATION_TRUST_ACCOUNT</code> <code>AccountControl::accountIsForServer()</code> <code>AccountControl::SERVER_TRUST_ACCOUNT</code> <code>AccountControl::passwordDoesNotExpire()</code> <code>AccountControl::DONT_EXPIRE_PASSWORD</code> <code>AccountControl::accountIsMnsLogon()</code> <code>AccountControl::MNS_LOGON_ACCOUNT</code> <code>AccountControl::accountRequiresSmartCard()</code> <code>AccountControl::SMARTCARD_REQUIRED</code> <code>AccountControl::trustForDelegation()</code> <code>AccountControl::TRUSTED_FOR_DELEGATION</code> <code>AccountControl::doNotTrustForDelegation()</code> <code>AccountControl::NOT_DELEGATED</code> <code>AccountControl::useDesKeyOnly()</code> <code>AccountControl::USE_DES_KEY_ONLY</code> <code>AccountControl::accountDoesNotRequirePreAuth()</code> <code>AccountControl::DONT_REQ_PREAUTH</code> <code>AccountControl::passwordIsExpired()</code> <code>AccountControl::PASSWORD_EXPIRED</code> <code>AccountControl::trustToAuthForDelegation()</code> <code>AccountControl::TRUSTED_TO_AUTH_FOR_DELEGATION</code> <code>AccountControl::accountIsReadOnly()</code> <code>AccountControl::PARTIAL_SECRETS_ACCOUNT</code> <p>There are also some utility methods that you may find useful:</p>"},{"location":"docs/core/v2/active-directory/users/#add","title":"<code>add</code>","text":"<p>Add a value to the account control:</p> <pre><code>$uac = new AccountControl();\n\n$uac-&gt;add(512);\n</code></pre>"},{"location":"docs/core/v2/active-directory/users/#remove","title":"<code>remove</code>","text":"<p>Remove a value from the account control:</p> <pre><code>$uac = new AccountControl();\n\n$uac-&gt;remove(2);\n</code></pre>"},{"location":"docs/core/v2/active-directory/users/#apply","title":"<code>apply</code>","text":"<p>Apply a value that is a combination of multiple flags:</p> <pre><code>$uac = new AccountControl();\n\n$uac-&gt;apply(514);\n</code></pre>"},{"location":"docs/core/v2/active-directory/users/#has","title":"<code>has</code>","text":"<p>Determine if the account control contains a specific flag:</p> <pre><code>$uac = new AccountControl(512);\n\n// true\n$uac-&gt;has(AccountControl::NORMAL_ACCOUNT);\n\n// false\n$uac-&gt;has(AccountControl::ACCOUNTDISABLE);\n</code></pre>"},{"location":"docs/core/v2/active-directory/users/#doesnthave","title":"<code>doesntHave</code>","text":"<p>Determine if the account control does not contain a specific flag:</p> <pre><code>$uac = new AccountControl(512);\n\n// false\n$uac-&gt;doesntHave(AccountControl::NORMAL_ACCOUNT);\n\n// true\n$uac-&gt;doesntHave(AccountControl::ACCOUNTDISABLE);\n</code></pre>"},{"location":"docs/core/v2/active-directory/users/#filter","title":"<code>filter</code>","text":"<p>Generate an LDAP filter string for the account control value:</p> <pre><code>$uac = new AccountControl(512);\n\n// \"(UserAccountControl:1.2.840.113556.1.4.803:=512)\"\n$uac-&gt;filter();\n</code></pre>"},{"location":"docs/core/v2/active-directory/users/#getallflags","title":"<code>getAllFlags</code>","text":"<p>Get an array of all of the available account control flags:</p> <pre><code>$uac = new AccountControl();\n\n// [\n//  'SCRIPT' =&gt; 1,\n//  'ACCOUNTDISABLE' =&gt; 2,\n//  'HOMEDIR_REQUIRED' =&gt; 8,\n//  ...\n// ]\n$uac-&gt;getAllFlags();\n</code></pre>"},{"location":"docs/core/v2/active-directory/users/#getappliedflags","title":"<code>getAppliedFlags</code>","text":"<p>Get an array of all of the applied account control flags:</p> <pre><code>$uac = new AccountControl(512);\n\n// [\n//  'NORMAL_ACCOUNT' =&gt; 512,\n// ]\n$uac-&gt;getAppliedFlags();\n</code></pre>"},{"location":"docs/core/v2/active-directory/users/#user-account-expiry","title":"User Account Expiry","text":"<p>A users <code>accountExpires</code> attribute stores a date (in Windows Integer Time) indicating when the account will no longer valid.</p> <p>This attribute is already added as a <code>windows-int</code> date cast inside of the included <code>ActiveDirectory\\User</code> model.</p> <p>To determine a user's account expiry, you will have to handle various cases depending on its value returned from the Active Directory server:</p> <pre><code>use LdapRecord\\Models\\Attributes\\Timestamp;\n\n$user = User::find('cn=jdoe,dc=local,dc=com');\n\nif ($user-&gt;accountExpires === false) {\n    // The user account has no account expiry.\n} else if (in_array($user-&gt;accountExpires, [0, Timestamp::WINDOWS_INT_MAX], $strict = true) {\n    // The user account never expires.\n} else if ($user-&gt;accountExpires-&gt;isPast())) {\n    // The user account is expired.\n} else {\n    // The user account is not expired.\n}\n</code></pre>"},{"location":"docs/core/v2/active-directory/users/#group-management","title":"Group Management","text":"<p>If you are utilizing the included <code>LdapRecord\\Models\\ActiveDirectory\\User</code> model, the <code>groups()</code> relationship exists for easily removing / adding groups to users.</p>"},{"location":"docs/core/v2/active-directory/users/#getting-groups","title":"Getting Groups","text":"<p>To get the groups that a user is a member of, call the <code>groups()</code> relationship method. This will return the immediate groups that the user is a member of:</p> <pre><code>&lt;?php\n\nuse LdapRecord\\Models\\ActiveDirectory\\User;\n\n$user = User::find('cn=John Doe,ou=Users,dc=local,dc=com');\n\n// Get immediate groups the user is apart of:\n$groups = $user-&gt;groups()-&gt;get();\n\nforeach ($groups as $group) {\n    echo $group-&gt;getName();\n}\n</code></pre> <p>You may also want to retrieve groups that are members of groups that the user is apart of. This is called a recursive relationship query.</p> <p>To retrieve groups of groups, call the <code>recursive()</code> method following the <code>groups()</code> relation call:</p> <pre><code>&lt;?php\n\nuse LdapRecord\\Models\\ActiveDirectory\\User;\n\n$user = User::find('cn=John Doe,ou=Users,dc=local,dc=com');\n\n// Get nested groups the user is apart of:\n$groups = $user-&gt;groups()-&gt;recursive()-&gt;get();\n\nforeach ($groups as $group) {\n    echo $group-&gt;getName();\n}\n</code></pre>"},{"location":"docs/core/v2/active-directory/users/#filtering-groups","title":"Filtering Groups","text":"<p>Relations in LdapRecord act as query builders, so you can chain query methods on the <code>groups()</code> relation itself:</p> <pre><code>&lt;?php\n\nuse LdapRecord\\Models\\ActiveDirectory\\User;\n\n$user = User::find('cn=John Doe,ou=Users,dc=local,dc=com');\n\n// Get all groups the user is apart of that contain 'Accounting':\n$groups = $user-&gt;groups()-&gt;whereContains('cn', 'Accounting')-&gt;get();\n\n// Get all groups the user is apart of that are members of the 'Office' group:\n$groups = $user-&gt;groups()-&gt;whereMemberOf('cn=Office,ou=Groups,dc=local,dc=com')-&gt;get();\n</code></pre>"},{"location":"docs/core/v2/active-directory/users/#checking-existence","title":"Checking Existence","text":"<p>To check if a user is a member of any group, call the <code>exists()</code> method on the <code>groups()</code> relationship:</p> <pre><code>&lt;?php\n\nuse LdapRecord\\Models\\ActiveDirectory\\User;\n\n$user = User::find('cn=John Doe,ou=Users,dc=local,dc=com');\n\nif ($user-&gt;groups()-&gt;exists()) {\n    // The user is a member of at least one group.\n}\n</code></pre> <p>To check if a user is an immediate member of a specific group, pass a model into the <code>exists()</code> method:</p> <pre><code>&lt;?php\n\nuse LdapRecord\\Models\\ActiveDirectory\\User;\nuse LdapRecord\\Models\\ActiveDirectory\\Group;\n\n$group = Group::find('cn=Accounting,dc=local,dc=com');\n\n$user = User::find('cn=John Doe,ou=Users,dc=local,dc=com');\n\nif ($user-&gt;groups()-&gt;exists($group)) {\n    // The user is an immediate member of the 'Accounting' group.\n}\n</code></pre> <p>To check if a user is a member of a group that could be nested in a sub-group, call the <code>recursive()</code> method before calling <code>exists()</code>:</p> <pre><code>&lt;?php\n\nuse LdapRecord\\Models\\ActiveDirectory\\User;\nuse LdapRecord\\Models\\ActiveDirectory\\Group;\n\n$group = Group::find('cn=Accounting,dc=local,dc=com');\n\n$user = User::find('cn=John Doe,ou=Users,dc=local,dc=com');\n\nif ($user-&gt;groups()-&gt;recursive()-&gt;exists($group)) {\n    // The user is a member of the 'Accounting' group.\n}\n</code></pre>"},{"location":"docs/core/v2/active-directory/users/#adding-groups","title":"Adding Groups","text":"<p>To add groups to a user, call the <code>groups()</code> relationship method, then <code>attach()</code>:</p> <pre><code>&lt;?php\n\nuse LdapRecord\\Models\\ActiveDirectory\\User;\nuse LdapRecord\\Models\\ActiveDirectory\\Group;\n\n$group = Group::findOrFail('cn=Accounting,ou=Groups,dc=local,dc=com');\n\n$user = User::find('cn=John Doe,ou=Users,dc=local,dc=com');\n\nif ($user-&gt;groups()-&gt;attach($group)) {\n    // Successfully added the group to the user.\n}\n</code></pre>"},{"location":"docs/core/v2/active-directory/users/#removing-groups","title":"Removing Groups","text":"<p>To remove groups on user, call the <code>groups()</code> relationship method, then <code>detach()</code>:</p> <pre><code>&lt;?php\n\nuse LdapRecord\\Models\\ActiveDirectory\\User;\nuse LdapRecord\\Models\\ActiveDirectory\\Group;\n\n$group = Group::findOrFail('cn=Accounting,ou=Groups,dc=local,dc=com');\n\n$user = User::find('cn=John Doe,ou=Users,dc=local,dc=com');\n\nif ($user-&gt;groups()-&gt;detach($group)) {\n    // Successfully removed the group from the user.\n}\n</code></pre> <p>The <code>detach()</code> method will return <code>true</code> if the user is already not apart of the given group. This does not indicate that the user was previously a member.</p> <p>You may want to locate groups on the user prior removal to ensure they are a member:</p> <pre><code>&lt;?php\n\nuse LdapRecord\\Models\\ActiveDirectory\\User;\n\n$user = User::find('cn=John Doe,ou=Users,dc=local,dc=com');\n\n$group = $user-&gt;groups()-&gt;first();\n\nif ($group &amp;&amp; $user-&gt;groups()-&gt;detach($group)) {\n    // Successfully removed the first group from the user.\n}\n</code></pre>"},{"location":"docs/core/v3/","title":"Overview","text":"<p>LdapRecord is a PHP package that provides you with a full ActiveRecord implementation for working with your LDAP server. Each LDAP object type has a corresponding \"Model\" which is used to interact with that type. An LDAP object type is determined by its object classes.</p> <p>Models allow you to execute search operations on your LDAP server as well as create and modify objects.</p> <p>PHP applications that require LDAP integration are very tricky to set up. Creating these integrations yourself can take days or even weeks due to the amount of learning you must take on to understand how LDAP works.</p> <p>LdapRecord sweats the small stuff so you can get up and running as fast as possible.</p> <p>If you require support or assistance getting set up, consider becoming a sponsor to receive issue priority so you get up and running as fast as possible.</p>"},{"location":"docs/core/v3/authentication/","title":"Authentication","text":""},{"location":"docs/core/v3/authentication/#introduction","title":"Introduction","text":"<p>Before we get started, it's paramount to know that LdapRecord does not set up any sort of PHP session that persists through every request. This is up to you to implement, as every project may vary with session usage.</p>"},{"location":"docs/core/v3/authentication/#basic-authentication","title":"Basic Authentication","text":"<p>The most widely used feature of any LDAP library is authentication. Let's walk through this step by step using LdapRecord.</p> <p>Firstly, we need to define a <code>Connection</code> for your LDAP server that you would like users to authenticate against. Then, we will call the <code>auth()-&gt;attempt()</code> method:</p> <p>If you only need to authenticate users against your LDAP server, you do not need to provide a <code>base_dn</code>. This is only used for performing searches on your directory.</p> <p>Similarly with the <code>username</code> and <code>password</code> configuration options, these are only used for performing operations on your LDAP server that require permission - such as resetting passwords, modifying LDAP objects, and more.</p> <pre><code>$connection = new \\LdapRecord\\Connection([\n    'hosts' =&gt; ['127.0.0.1'],\n]);\n\nif ($connection-&gt;auth()-&gt;attempt('cn=john doe,dc=local,dc=com', 'p@ssw0rd', $stayAuthenticated = true)) {\n    // Successfully authenticated user.\n} else {\n    // Username or password is incorrect.\n}\n</code></pre> <p>As you can see from the above, the first parameter of the <code>attempt()</code> method is the users Distinguished Name. If you're running Active Directory, you can use the users <code>userPrincipalName</code> instead, which (in the case above) would be in the format of <code>jdoe@acme.org</code>.</p> <p>You may have also noticed we added a third parameter named <code>$stayAuthenticated = true</code>. This means, that throughout the entire lifecycle of the current request, you can perform further operations on your LDAP server as the successfully authenticated user.</p>"},{"location":"docs/core/v3/authentication/#determining-auth-bind-failure-cause","title":"Determining Auth / Bind Failure Cause","text":"<p>This will only work when binding to an Active Directory server.</p> <p>It's a common scenario to require showing why a user's password failed, whether it be an expired password, or account lockout. You can do this one of two ways:</p> <ul> <li>Using <code>auth()-&gt;attempt()</code> with an event listener:</li> </ul> <pre><code>use LdapRecord\\Container;\nuse LdapRecord\\Auth\\Events\\Failed;\n\n$dispatcher = Container::getDispatcher();\n\n$message = '';\n\n$dispatcher-&gt;listen(Failed::class, function (Failed $event) use (&amp;$message) {\n    $ldap = $event-&gt;getConnection();\n\n    // The diagnostic message will be available here.\n    $error = $ldap-&gt;getDiagnosticMessage();\n\n    if (strpos($error, '532') !== false) {\n        $message = 'Your password has expired.';\n    } elseif (strpos($error, '533') !== false) {\n        $message = 'Your account is disabled.';\n    } elseif (strpos($error, '701') !== false) {\n        $message = 'Your account has expired.';\n    } elseif (strpos($error, '775') !== false) {\n        $message = 'Your account is locked.';\n    } else {\n        $message = 'Username or password is incorrect.';\n    }\n});\n\nif ($connection-&gt;auth()-&gt;attempt($username, $password)) {\n    // The users credentials are valid.\n} else {\n    // Invalid credentials.\n    return $message;\n}\n</code></pre> <ul> <li>Using <code>auth()-&gt;bind()</code> and catching the thrown exception:</li> </ul> <pre><code>try {\n    $connection-&gt;auth()-&gt;bind($username, $password);\n\n    // Further bound operations...\n} catch (\\LdapRecord\\Auth\\BindException $e) {\n    $error = $e-&gt;getDetailedError()-&gt;getDiagnosticMessage();\n\n    if (strpos($error, '532') !== false) {\n        return 'Your password has expired.';\n    } elseif (strpos($error, '533') !== false) {\n        return 'Your account is disabled.';\n    } elseif (strpos($error, '701') !== false) {\n        return 'Your account has expired';\n    } elseif (strpos($error, '775') !== false) {\n        return 'Your account is locked.';\n    }\n\n    return 'Username or password is incorrect.';\n}\n</code></pre> <p>However, please be aware of the differences of the above methods as described in the connection binding documentation:</p> <ul> <li><code>auth()-&gt;attempt()</code> will automatically rebind the user you have in your configuration,   unless you have specified <code>true</code> in the third parameter to stay bound. </li> <li><code>auth()-&gt;bind()</code> will not automatically rebind the user you have in your configuration,   and will allow <code>null</code> usernames and passwords (anonymous binds).</li> </ul>"},{"location":"docs/core/v3/authentication/#authenticating-with-other-username-attributes","title":"Authenticating with other username attributes","text":"<p>No user wants to type in their full Distinguished Name to login to an application. It's cumbersome, and will likely change over the years due to IT administrators moving objects in the LDAP directory for organization purposes.</p> <p>However, LDAP only supports binding (authenticating) users using their Distinguished Name (unless you're using Active Directory). How do we get around this limitation? Well, we can first connect to our LDAP directory and then retrieve their account information - including their Distinguished Name. Let's walk through this.</p> <p>Since we will first be searching our LDAP directory for the user that is attempting to authenticate, we have two options:</p> <ul> <li>Providing a <code>username</code> and <code>password</code> to our connection</li> <li>Anonymously bind to our connection, by not providing a <code>username</code> and <code>password</code> (if enabled in your directory)</li> </ul> <p>Since we will be searching our directory, we must provide a <code>base_dn</code>, so LdapRecord knows where to begin searching for objects.</p> <pre><code>// Connecting with an an account...\n$connection = new \\LdapRecord\\Connection([\n    'hosts' =&gt; ['127.0.0.1'],\n    'base_dn' =&gt; 'dc=local,dc=com',\n    'username' =&gt; 'cn=WebApi,dc=local,dc=com',\n    'password' =&gt; 'super-secret',\n]);\n\n$connection-&gt;connect();\n\n// Anonymously binding...\n$connection = new \\LdapRecord\\Connection([\n    'hosts' =&gt; ['127.0.0.1'],\n    'base_dn' =&gt; 'dc=local,dc=com',\n]);\n\n$connection-&gt;connect();\n</code></pre> <p>It's recommended to create and use an account in your LDAP directory that is specifically for your web application(s), rather than using your own account or a domain administrator.</p> <p>Once we're connected, we can then search for the user who is trying to authenticate.</p> <p>For this example, we're wanting users to login using their <code>sAMAccountName</code>:</p> <pre><code>$connection = new \\LdapRecord\\Connection(['...']);\n\n$connection-&gt;connect();\n\n$user = $connection-&gt;query()\n    -&gt;where('samaccountname', '=', $_POST['username'])\n    -&gt;firstOrFail();\n\nif ($connection-&gt;auth()-&gt;attempt($user['distinguishedname'][0], $_POST['password'])) {\n    // User has been successfully authenticated.\n} else {\n    // Username or password is incorrect.\n}\n</code></pre>"},{"location":"docs/core/v3/authentication/#restricting-authentication","title":"Restricting Authentication","text":"<p>Sometimes you only want certain users allowed to login to your application. You can do this in a couple ways.</p>"},{"location":"docs/core/v3/authentication/#group-memberships","title":"Group Memberships","text":"<p>To restrict who can authenticate in your application using groups that users will be members of, we will perform the same as above, except we will check if the returned <code>memberof</code> array of the user contains the allowed groups.</p> <p>In this example, we will limit users who are members of <code>Accounting</code> and <code>IT</code>.</p> <pre><code>$connection = new \\LdapRecord\\Connection(['...']);\n\n$connection-&gt;connect();\n\n$user = $connection-&gt;query()\n    -&gt;where('samaccountname', '=', $_POST['username'])\n    -&gt;firstOrFail();\n\n// Get the groups from the user.\n$userGroups = $user['memberof'];\n\n// Set up our allowed groups.\n$allowed = [\n    'cn=Accounting,ou=Groups,dc=local,dc=com',\n    'cn=IT,ou=Groups,dc=local,dc=com',\n];\n\n// Normalize the group distinguished names and determine if\n// the user is a member of any of the allowed groups:\n$difference = array_intersect(\n    array_map('strtolower', $userGroups),\n    array_map('strtolower', $allowed)\n);\n\nif (count($difference) &gt; 0) {\n    // Our user is a member of one of the allowed groups.\n    // Continue with authentication.\n    if ($connection-&gt;auth()-&gt;attempt($user['distinguishedname'], $_POST['password'])) {\n        // User has been successfully authenticated.\n    } else {\n        // Username or password is incorrect.\n    }\n}\n\n// User is not a member of any of the allowed groups.\n</code></pre>"},{"location":"docs/core/v3/authentication/#organizational-units","title":"Organizational Units","text":"<p>Using Organizational Units to determine which users are allowed to authenticate is easier than using groups.</p> <p>In this scenario, we will limit our search to a single Organization Unit that contain users who are allowed to authenticate.</p> <p>We can simply determine if a result is returned, we know the user exists inside:</p> <pre><code>$connection = new \\LdapRecord\\Connection(['...']);\n\n$connection-&gt;connect();\n\n$organizationalUnit = 'ou=AllowedUsers,dc=local,dc=com';\n\n$user = $connection-&gt;query()\n    -&gt;in($organizationalUnit)\n    -&gt;where('samaccountname', '=', $_POST['username'])\n    -&gt;first();\n\nif ($user) {\n    // Our user is a member of one of the allowed groups.\n    // Continue with authentication.\n    if ($connection-&gt;auth()-&gt;attempt($user['distinguishedname'], $_POST['password'])) {\n        // User has been successfully authenticated.\n    } else {\n        // Username or password is incorrect.\n    }\n}\n\n// No user found. They are not inside the OU.\n</code></pre>"},{"location":"docs/core/v3/caching/","title":"Query Caching","text":""},{"location":"docs/core/v3/caching/#introduction","title":"Introduction","text":"<p>LdapRecord supports caching LDAP search operations. This is useful when running expensive queries. A <code>pagination</code> query on the root of your LDAP directory may take several seconds to complete.</p> <p>Caching allows you to store the entire result so it is not retrieved  again from the server until the cache is set to expire.</p>"},{"location":"docs/core/v3/caching/#requirements","title":"Requirements","text":"<p>Your application must have a caching implementation that uses the PSR Simple Cache interface.</p> <p>For example, the Laravel cache system implements this interface.</p>"},{"location":"docs/core/v3/caching/#getting-started","title":"Getting Started","text":"<p>To set up caching, you must add your cache implementation to your LDAP connection instance.</p> <p>This is done by the <code>setCache</code> method:</p> <pre><code>use LdapRecord\\Connection;\n\n$connection = new Connection(['...']);\n\n$connection-&gt;setCache($myAppCache);\n</code></pre>"},{"location":"docs/core/v3/caching/#usage","title":"Usage","text":"<p>Once you've added your caching implementation to your LdapRecord  connection, you may start caching queries on plain queries or  queries on created on LdapRecord models.</p> <p>Caching is enabled for a single query using the <code>cache()</code> method:</p> <pre><code>$until = new \\DateTime('tomorrow');\n\n$results = $connection-&gt;query()-&gt;cache($until)-&gt;get();\n</code></pre> <p>In the above example, after retrieving the results from the server, they will be  stored in your cache. Upon subsequent attempts, cached results will be returned until they expire using the initial expiry date that was given.</p> <p>Queries are cached by generating a unique identifier associated with the query  instance. This identifier is built with the following components, to ensure  other queries executed do not call upon the same cache results:</p> <ul> <li>Query limit</li> <li>Query filter</li> <li>Base DN of the query</li> <li>Selected query attributes</li> <li>LDAP Host Name / IP address</li> <li>LDAP Search Type (Search/Listing/Read)</li> <li>Whether the query should return paginated results.</li> </ul>"},{"location":"docs/core/v3/caching/#manual-flushing","title":"Manual Flushing","text":"<p>In circumstances where you would like to manually flush a query cache,  you may pass in <code>true</code> into the second parameter (or via the <code>flush</code> typed parameter) which enforces a  removal any cached results owned by the query:</p> <pre><code>$results = $connection-&gt;query()-&gt;cache($until, flush: true)-&gt;get();\n</code></pre>"},{"location":"docs/core/v3/caching/#storing-indefinitely","title":"Storing Indefinitely","text":"<p>If you would like to store a query's cache results indefinitely, omit a date from the cache:</p> <pre><code>$results = $connection-&gt;query()-&gt;cache()-&gt;get();\n</code></pre>"},{"location":"docs/core/v3/caching/#custom-cache-keys","title":"Custom Cache Keys","text":"<p>If you would like to store a query's cache results using a custom cache key,  you may provide a key into the third parameter (or via the <code>key</code> typed  parameter), without passing in a date:</p> <pre><code>$results = $connection-&gt;query()-&gt;cache(new \\DateTime('tomorrow'), key: 'users')-&gt;get();\n\n// Storing indefinitely with a custom key:\n$connection-&gt;query()-&gt;cache(key: 'users')-&gt;get();\n</code></pre> <p>Then, you can retrieve or flush the results outside the query instance if needed:</p> <pre><code>use LdapRecord\\Container;\n\n$cache = $connection-&gt;getCache();\n\n// Get the cached results:\n$results = $cache-&gt;get('users');\n\n// Delete the cached results:\n$cache-&gt;delete('users');\n</code></pre> <p>It's imperitive to know that results stored in the cache from the query builder are the raw results returned from your LDAP server. Model instances themselves (or references to them) for example, are not stored in the cache.</p>"},{"location":"docs/core/v3/common-queries/","title":"Common Queries","text":"<p>Most applications will require retrieving certain set / type of objects from a directory.</p>"},{"location":"docs/core/v3/common-queries/#using-models","title":"Using Models","text":"<p>Utilizing LdapRecord's built in models allow you to easily query specific types of objects in your directory.</p> <p>The examples below assume you have created a <code>Connection</code> and have added them into the Container.</p>"},{"location":"docs/core/v3/common-queries/#active-directory","title":"Active Directory","text":""},{"location":"docs/core/v3/common-queries/#generic-queries","title":"Generic Queries","text":"<pre><code>// All Active Directory objects:\n// Note: We use 'paginate' here so over 1000 results can be returned.\n$objects = \\LdapRecord\\Models\\ActiveDirectory\\Entry::paginate();\n\n// All Active Directory users:\n$users = \\LdapRecord\\Models\\ActiveDirectory\\User::get();\n\n// All Active Directory contacts:\n$contacts = \\LdapRecord\\Models\\ActiveDirectory\\Contact::get();\n\n// All Active Directory groups:\n$groups = \\LdapRecord\\Models\\ActiveDirectory\\Group::get();\n\n// All Active Directory organizational units:\n$ous = \\LdapRecord\\Models\\ActiveDirectory\\OrganizationalUnit::get();\n\n// All Active Directory printers:\n$printers = \\LdapRecord\\Models\\ActiveDirectory\\Printer::get();\n\n// All Active Directory computers:\n$computers = \\LdapRecord\\Models\\ActiveDirectory\\Computer::get();\n\n// All foreign security principals:\n$foreignPrincipals = \\LdapRecord\\Models\\ActiveDirectory\\ForeignSecurityPrincipal::get();\n</code></pre>"},{"location":"docs/core/v3/common-queries/#users-created-after-a-date","title":"Users Created After a Date","text":"<pre><code>$date = (new DateTime('October 1st 2016'))-&gt;format('YmdHis.0\\Z');\n\n$users = User::where('whencreated', '&gt;=', $date)-&gt;get();\n</code></pre>"},{"location":"docs/core/v3/common-queries/#openldap","title":"OpenLDAP","text":""},{"location":"docs/core/v3/common-queries/#generic-queries_1","title":"Generic Queries","text":"<pre><code>// All OpenLDAP objects:\n// Note: We use 'paginate' here so over 1000 results can be returned.\n$objects = \\LdapRecord\\Models\\OpenLDAP\\Entry::paginate();\n\n// All OpenLDAP users:\n$users = \\LdapRecord\\Models\\OpenLDAP\\User::get();\n\n// All OpenLDAP groups:\n$groups = \\LdapRecord\\Models\\OpenLDAP\\Group::get();\n\n// All OpenLDAP organizational units:\n$ous = \\LdapRecord\\Models\\OpenLDAP\\OrganizationalUnit::get();\n</code></pre>"},{"location":"docs/core/v3/common-queries/#without-models","title":"Without Models","text":"<p>If you do not want to use LdapRecord models, you can still use the query builder and retrieve raw LDAP results.</p> <pre><code>use LdapRecord\\Connection;\n\n$connection = new Connection(['...']);\n\n// All LDAP objects:\n// Note: We use 'paginate' here so over 1000 results can be returned.\n$objects = $connection-&gt;query()-&gt;paginate();\n</code></pre>"},{"location":"docs/core/v3/common-queries/#active-directory_1","title":"Active Directory","text":"<pre><code>use LdapRecord\\Connection;\n\n$connection = new Connection(['...']);\n\n// All Active Directory Users:\n$users = $connection-&gt;query()-&gt;where([\n    ['objectclass', '=', 'top'],\n    ['objectclass', '=', 'person'],\n    ['objectclass', '=', 'organizationalperson'],\n    ['objectclass', '=', 'user'],\n])-&gt;get();\n\n// All Active Directory contacts:\n$contacts = $connection-&gt;query()-&gt;where([\n    ['objectclass', '=', 'top'],\n    ['objectclass', '=', 'person'],\n    ['objectclass', '=', 'organizationalperson'],\n    ['objectclass', '=', 'contact'],\n])-&gt;get();\n\n// All Active Directory groups:\n$groups = $connection-&gt;query()-&gt;where([\n    ['objectclass', '=', 'top'],\n    ['objectclass', '=', 'group'],\n])-&gt;get();\n\n// All Active Directory organizational units:\n$ous = $connection-&gt;query()-&gt;where([\n    ['objectclass', '=', 'top'],\n    ['objectclass', '=', 'organizationalunit'],\n])-&gt;get();\n\n// All Active Directory printers:\n$printers = $connection-&gt;query()\n    -&gt;where('objectclass', '=', 'printqueue')\n    -&gt;get();\n\n// All Active Directory computers:\n$computers = $connection-&gt;query()-&gt;where([\n    ['objectclass', '=', 'top'],\n    ['objectclass', '=', 'person'],\n    ['objectclass', '=', 'organizationalperson'],\n    ['objectclass', '=', 'user'],\n    ['objectclass', '=', 'computer'],\n])-&gt;get();\n\n// All foreign security principals:\n$foreignPrincipals = $connection-&gt;query()\n    -&gt;where('objectclass', '=', 'foreignsecurityprincipal')\n    -&gt;get();\n</code></pre>"},{"location":"docs/core/v3/common-queries/#openldap_1","title":"OpenLDAP","text":"<pre><code>// All OpenLDAP users:\n$users = $connection-&gt;query()-&gt;where([\n    ['objectclass', '=', 'top'],\n    ['objectclass', '=', 'person'],\n    ['objectclass', '=', 'organizationalperson'],\n    ['objectclass', '=', 'inetorgperson'],\n])-&gt;get();\n\n// All OpenLDAP groups:\n$groups = $connection-&gt;query()-&gt;where([\n    ['objectclass', '=', 'top'],\n    ['objectclass', '=', 'groupofuniquenames'],\n])-&gt;get();\n\n// All OpenLDAP organizational units:\n$ous = $connection-&gt;query()-&gt;where([\n    ['objectclass', '=', 'top'],\n    ['objectclass', '=', 'organizationalunit'],\n])-&gt;get();\n</code></pre>"},{"location":"docs/core/v3/configuration/","title":"Configuration","text":"<p>To configure your LDAP connections, you must provide an array to the <code>Connection</code> class with key-value pairs to set various options.</p> <p>Below is a list of all available options:</p> <pre><code>use LdapRecord\\Connection;\n\n$connection = new Connection([\n    // Mandatory Configuration Options\n    'hosts'            =&gt; ['192.168.1.1'],\n    'base_dn'          =&gt; 'dc=local,dc=com',\n    'username'         =&gt; 'cn=admin,dc=local,dc=com',\n    'password'         =&gt; 'password',\n\n    // Optional Configuration Options\n    'port'             =&gt; 389,\n    'use_ssl'          =&gt; false,\n    'use_tls'          =&gt; false,\n    'use_sasl'         =&gt; false,\n    'version'          =&gt; 3,\n    'timeout'          =&gt; 5,\n    'follow_referrals' =&gt; false,\n\n    // Custom LDAP Options\n    'options' =&gt; [\n        // See: http://php.net/ldap_set_option\n        LDAP_OPT_X_TLS_REQUIRE_CERT =&gt; LDAP_OPT_X_TLS_HARD\n    ],\n\n    // See: https://www.php.net/manual/en/function.ldap-sasl-bind.php\n    'sasl_options' =&gt; [\n        'mech' =&gt; null,\n        'realm' =&gt; null,\n        'authc_id' =&gt; null,\n        'authz_id' =&gt; null,\n        'props' =&gt; null,\n    ],\n]);\n</code></pre>"},{"location":"docs/core/v3/configuration/#hosts","title":"Hosts","text":"<p>The hosts option is an array of IP addresses or host names located on your network that serve an LDAP directory.</p> <p>You insert as many or as little as you'd like depending on your forest (with the minimum of one of course).</p> <p>The first host in the array will always be used as the primary server. This means, all operations will take place underneath this host.</p> <p>If the primary host fails to complete an operation (bind, query, modification, etc.), or the server does not respond in the configured <code>timeout</code>, the same operation will be attempted on the following host in the array.</p> <p>This automated fail-over process will continue for each host address, until a successful response is received.</p> <p>Important:</p> <ul> <li>Do not append your port (<code>:389</code>, <code>:636</code>, etc.) to your hosts.  Use the <code>port</code> configuration option instead.</li> <li>Do not prepend your protocol (<code>ldap://</code> or <code>ldaps://</code>) to your hosts.  Use the <code>use_ssl</code> configuration option instead.</li> </ul>"},{"location":"docs/core/v3/configuration/#base-distinguished-name","title":"Base Distinguished Name","text":"<p>A 'Distinguished Name' is a string based identifier in LDAP that is used to indicate hierarchy.</p> <p>Each object in your domain is assigned a Distinguished Name.</p> <p>An example Distinguished Name would be <code>cn=John Doe,ou=Users,dc=local,dc=com</code>.</p> <p>The above can be broken into the following 'Relative Distinguished Names' (RDN for short):</p> RDN Meaning <code>cn=John Doe</code> The object has a 'Common Name' of <code>John Doe</code> <code>ou=Users</code> The object resides in the 'Organizational Unit' <code>Users</code> <code>dc=local,dc=com</code> The object resides in the 'Domain' <code>local.com</code> <p>A 'Base Distinguished Name' is the distinguished name that you would like to be used as the root of all searches and object creations using LdapRecord.</p> <p>An example base DN would be <code>dc=local,dc=com</code>.</p> <p>This means, that all searches executed with LdapRecord will start at <code>dc=local,dc=com</code> as the root. This would allow all objects below it to be retrieved from results.</p> <p>Important:</p> <ul> <li>If you do not define a base DN, you will not retrieve any search results from queries.</li> <li>Your base DN is case-insensitive. You do not need to worry about incorrect casing.</li> </ul>"},{"location":"docs/core/v3/configuration/#username-password","title":"Username &amp; Password","text":"<p>To connect to your LDAP server, you must provide a username and password to be able to query and run operations on your server(s).</p> <p>Important:</p> <ul> <li>The <code>username</code> option must be a users Distinguished Name</li> <li>If however you are connecting to an Active Directory server, you may use:</li> <li>userPrincipalName (<code>username@domain.com</code>)</li> <li>Down-Level Logon Name (<code>DOMAIN\\\\username</code>)</li> <li>To run administration level operations, such as resetting passwords, this account must have the permissions to do so on your directory.</li> </ul>"},{"location":"docs/core/v3/configuration/#port","title":"Port","text":"<p>The port option is used for opening a connection and binding to your LDAP server.</p> <p>Default ports are already used for non SSL and SSL connections (<code>389</code> and <code>636</code>).</p> <p>Only insert a port if your LDAP server uses a unique port.</p> <p>Important:</p> <ul> <li>If enabling SSL, and <code>port</code> is set to <code>389</code>, it will be automatically overridden to use <code>636</code>.</li> <li>If enabling TLS, you must use the default port for your LDAP server (<code>389</code>). SSL ports cannot be used.</li> </ul>"},{"location":"docs/core/v3/configuration/#ssl-tls","title":"SSL &amp; TLS","text":"<p>These boolean options enable an TLS or SSL connection to your LDAP server:</p> <pre><code>$config = [\n    // ...\n    'use_tls' =&gt; false,\n    'use_ssl' =&gt; false,\n];\n</code></pre> <p>It is recommended to use one of these options if you have the ability to. This ensures secure connectivity.</p> <p>Important:</p> <ul> <li>Only one can be set to <code>true</code>. You must choose either or.</li> <li>You must enable SSL or TLS to set / change / reset passwords in Active Directory.</li> <li>TLS is recommended over SSL. SSL is labelled as a deprecated mechanism for securely running LDAP operations.</li> </ul>"},{"location":"docs/core/v3/configuration/#sasl","title":"SASL","text":"<p>This boolean option enables connecting to your LDAP server using SASL (Simple Authentication and Security Layer) via <code>ldap_sasl_bind</code>:</p> <pre><code>$config = [\n    // ...\n    'use_sasl' =&gt; false,\n];\n</code></pre> <p>SASL allows you to authenticate a user with various mechanisms, such as <code>DIGEST-MD5</code>, <code>CRAM-MD5</code>, <code>GSSAPI</code>, etc.</p>"},{"location":"docs/core/v3/configuration/#sasl-options","title":"SASL Options","text":"<p><code>mech</code> (string): This specifies the SASL mechanism to use for authentication. Common  mechanisms include <code>DIGEST-MD5</code>, <code>CRAM-MD5</code>, and <code>GSSAPI</code>. If not specified, the server  will choose the best available mechanism based on the client and server capabilities.</p> <p><code>realm</code> (string): This is the authentication realm or domain. It is used by some SASL mechanisms to group users into different security domains or to map usernames  to distinguished names. If not specified, the server will use its default realm. Here's an example:</p> <pre><code>$config = [\n    // ...\n    'sasl_options' =&gt; [\n        'realm' =&gt; 'example.com',\n    ],\n];\n</code></pre> <p><code>authc_id</code> (string): This is the authentication ID, which is used by some SASL  mechanisms to identify the user during the authentication process. It may be a  simple username or a more complex identifier (such as distinguished name),  depending on the mechanism being used. Here's an example:</p> <pre><code>$config = [\n    // ...\n    'sasl_options' =&gt; [\n        'authc_id' =&gt; 'uid=jdoe,ou=admin,dc=example,dc=com'\n    ]\n];\n</code></pre> <p><code>authz_id</code> (string): This is the authorization ID, which is used by some SASL  mechanisms to identify the user for authorization purposes after authentication  has been completed. It may be the same as the authentication ID or a different  identifier (such as a distinguished name), depending on the mechanism being used.  Here's an example:</p> <pre><code>$config = [\n    // ...\n    'sasl_options' =&gt; [\n        'authc_id' =&gt; 'jdoe'\n    ]\n];\n</code></pre> <p><code>props</code> (string): This parameter allows you to specify additional security  properties for the SASL mechanism being used. These properties can control  various aspects of the security layer, such as encryption strength, integrity  protection, and more. The format and available properties depend on the  specific SASL mechanism being used.</p> <p>When using the <code>DIGEST-MD5</code> SASL mechanism, you may use <code>props</code> to specify the quality of protection (qop) and cipher options. The property string would be a comma-separated list of key-value pairs, with keys and values separated by an  equals sign (=). Here's an example:</p> <pre><code>$config = [\n    // ...\n    'sasl_options' =&gt; [\n        'props' =&gt; 'qop=auth-conf,cipher=rc4-56'\n    ]\n];\n</code></pre> <p>When using the GSSAPI SASL mechanism, you may use <code>props</code> to specify the  <code>GSSAPI</code> flags, such as mutual authentication, delegation, and more. Here's an example:</p> <pre><code>$config = [\n    // ...\n    'sasl_options' =&gt; [\n        'props' =&gt; 'gssapi_flags=mutual_required,delegate_cred'\n    ]\n];\n</code></pre>"},{"location":"docs/core/v3/configuration/#debugging","title":"Debugging","text":"<p>If you're having connectivity issues over SSL or TLS, you may have to create an <code>ldap.conf</code> file and add the following inside:</p> <pre><code>TLS_REQCERT never\n</code></pre> <p>The <code>ldap.conf</code> file will likely not exist by default. Create it inside the location for your OS:</p> OS Location Windows <code>C:\\OpenLDAP\\sysconf\\ldap.conf</code> Linux <code>/etc/ldap/ldap.conf</code> or <code>/etc/openldap/ldap.conf</code> macOS <code>/usr/local/etc/openldap/ldap.conf</code> <p>The above directories may not exist - you will need to create them in such case.</p> <p>Important:</p> <ul> <li>You must restart your web server after making changes to the <code>ldap.conf</code> file.</li> <li>In some cases, you may even have to restart your workstation or server for the changes to take effect.</li> </ul> <p>If you can connect using <code>TLS_REQCERT never</code> inside of your <code>ldap.conf</code> file, you may want to copy your domain CA certificate to your web server, as it can be a bit of a security risk as it will ignore invalid certificates.</p> <p>Copy your domain CA certificate to the following location:</p> OS Location Windows <code>C:\\OpenLDAP\\sysconf</code> Linux / macOS <code>/etc/ssl/certs</code> <p>Then, reference it in your <code>ldap.conf</code> with the full file path using (replace <code>my-custom-path</code> with the location of the file):</p> <pre><code>TLS_CACERT my-custom-path/ca.pem\nTLS_REQCERT hard\n</code></pre> <p>Windows Example:</p> <pre><code>TLS_CACERT C:\\OpenLDAP\\sysconf\\ca.pem\nTLS_REQCERT hard\n</code></pre> <p>Linux / macOS Example:</p> <pre><code>TLS_CACERT /etc/ssl/certs/ca.pem\nTLS_REQCERT hard\n</code></pre>"},{"location":"docs/core/v3/configuration/#timeout","title":"Timeout","text":"<p>The timeout option allows you to configure the amount of seconds to wait until your application receives a response from your LDAP server.</p> <p>The default is five (<code>5</code>) seconds.</p> <p>Important: If the timeout is reached performing an LDAP operation and you have specified multiple hosts in your configuration, the same timeout will be used for each host.  This means, if you have three (3) hosts in your configuration and two (2) of them do not respond (or fail), the operation will take ten (10) seconds + the amount of time the third (3rd) host takes to respond.</p>"},{"location":"docs/core/v3/configuration/#version","title":"Version","text":"<p>The LDAP version to use for your connection.</p> <p>Must be an integer, and can either be two (<code>2</code>) or three (<code>3</code>).</p> <p>Important: It's heavily recommended to use version three (<code>3</code>). You may experience issues using version two (<code>2</code>).</p>"},{"location":"docs/core/v3/configuration/#follow-referrals","title":"Follow Referrals","text":"<p>The follow referrals option is a boolean to tell Active Directory to follow a referral to another server on your network if the server queried knows the information your asking for exists, but does not yet contain a copy of it locally.</p> <p>This option is defaulted to <code>false</code>.</p> <p>Important: Disable this option if you're experiencing search / connectivity issues.  For more information, visit: Microsoft Docs - LDAP Referrals</p>"},{"location":"docs/core/v3/configuration/#options","title":"Options","text":"<p>Arbitrary options can be set for the connection to fine-tune TLS and connection behavior.</p> <p>Important: The following options will be ignored if set:</p> <ul> <li><code>LDAP_OPT_PROTOCOL_VERSION</code></li> <li><code>LDAP_OPT_NETWORK_TIMEOUT</code></li> <li><code>LDAP_OPT_REFERRALS</code></li> </ul> <p>These are instead set with the <code>version</code>, <code>timeout</code> and <code>follow_referrals</code> keys.</p> <p>Valid LDAP options are listed in the ldap_set_option PHP documentation.</p>"},{"location":"docs/core/v3/connections/","title":"Connections","text":""},{"location":"docs/core/v3/connections/#introduction","title":"Introduction","text":"<p>Once you've defined your configuration, you must then create a connection and insert your configuration into it:</p> <pre><code>use LdapRecord\\Connection;\n\n$connection = new Connection([\n     'hosts'    =&gt; ['192.168.1.1'],\n     'username' =&gt; 'cn=user,dc=local,dc=com',\n     'password' =&gt; 'secret',\n]);\n</code></pre>"},{"location":"docs/core/v3/connections/#connecting","title":"Connecting","text":"<p>Once you have your connection, call <code>connect()</code> to bind to your LDAP server:</p> <pre><code>try {\n    $connection-&gt;connect();\n\n    echo \"Successfully connected!\";\n} catch (\\LdapRecord\\Auth\\BindException $e) {\n    $error = $e-&gt;getDetailedError();\n\n    echo $error-&gt;getErrorCode();\n    echo $error-&gt;getErrorMessage();\n    echo $error-&gt;getDiagnosticMessage();\n}\n</code></pre>"},{"location":"docs/core/v3/connections/#connecting-anonymously","title":"Connecting Anonymously","text":"<p>If you'd like to connect/bind anonymously to your LDAP server, simply set your <code>username</code> and <code>password</code> configuration parameters to <code>null</code>:</p> <pre><code>use LdapRecord\\Connection;\n\n$connection = new Connection([\n     'hosts'    =&gt; ['192.168.1.1'],\n     'username' =&gt; null,\n     'password' =&gt; null,\n]);\n\n$connection-&gt;connect();\n</code></pre>"},{"location":"docs/core/v3/connections/#binding","title":"Binding","text":"<p>Using the connection instance, you can execute a bind request to perform LDAP authentication to see if a username and password is valid.</p> <pre><code>$user = 'cn=user,dc=local,dc=com';\n$password = 'secret';\n\nif ($connection-&gt;auth()-&gt;attempt($user, $password))\n{\n    echo \"Username and password are correct!\";\n}\n</code></pre> <p>Important: After calling the above, the user you have configured in your connection configuration will be rebound to your LDAP server. This is to ensure you can continue to execute LDAP operations underneath a working user during the same request.</p> <p>If you would like to run all further LDAP operations underneath the authenticated user for the duration of the request, pass in <code>true</code> in the third parameter in the <code>attempt()</code> method:</p> <pre><code>$user = 'cn=user,dc=local,dc=com';\n$password = 'secret';\n\nif ($connection-&gt;auth()-&gt;attempt($user, $password, $stayBound = true))\n{\n    echo \"Username and password are correct!\";\n\n    // Run further LDAP operations under this user.\n}\n</code></pre> <p>Important: Binding as the user will not persist LDAP connectivity between requests. PHP is stateless - which means a new LDAP connection is created upon every request to your application. LdapRecord does not and will not store user credentials to persist connectivity.</p>"},{"location":"docs/core/v3/connections/#container","title":"Container","text":"<p>You must add your LDAP connections into the container if you would like to use LdapRecord models. Models pull the connection that they use from this container by their name.</p>"},{"location":"docs/core/v3/connections/#adding-connections","title":"Adding Connections","text":"<pre><code>use LdapRecord\\Container;\nuse LdapRecord\\Connection;\n\n$connection = new Connection(['...']);\n\n$connection-&gt;connect();\n\nContainer::addConnection($connection);\n</code></pre> <p>If you do not call <code>connect</code> on your connection prior to adding it into the <code>Container</code>, it will be connected to automatically when you attempt to retrieve query results.</p> <p>Each connection you add can have it's own name. This is required for connecting to multiple LDAP servers at one time. To set the name of a connection in the container, pass it into the second parameter:</p> <pre><code>Container::addConnection($connection, 'domain-b');\n</code></pre> <p>Without passing in a name, the name of the connection is set to <code>default</code>. Passing in multiple connections without providing a name will overwrite the previously added connection, so be sure to identify them differently if needed:</p> <pre><code>use LdapRecord\\Container;\nuse LdapRecord\\Connection;\n\n$connectionAlpha = new Connection(['...']);\n$connectionBravo = new Connection(['...']);\n\nContainer::addConnection($connectionAlpha);\n\n// This will overwrite $connectionAlpha:\nContainer::addConnection($connectionBravo);\n</code></pre> <p>If you do not define a <code>$connection</code> property inside of your LdapRecord models, they will use your default connection.</p>"},{"location":"docs/core/v3/connections/#getting-connections","title":"Getting Connections","text":"<p>To get the default connection, call the <code>getDefaultConnection</code> method:</p> <pre><code>$connection = Container::getDefaultConnection();\n</code></pre> <p>To get a differently named connection, call the <code>getConnection</code> method:</p> <pre><code>$connection = Container::getConnection('domain-b');\n</code></pre>"},{"location":"docs/core/v3/connections/#setting-default-connection","title":"Setting Default Connection","text":"<p>To set the name of the default connection, call the <code>setDefaultConnection</code> method prior to adding a connection:</p> <pre><code>Container::setDefaultConnection('domain-a');\n\nContainer::addConnection(new Connection(['...']));\n\n// Returns the `domain-a` connection.\n$connection = Container::getDefaultConnection();\n</code></pre>"},{"location":"docs/core/v3/connections/#checking-connection-existence","title":"Checking Connection Existence","text":"<p>To check if a connection exists, call the <code>hasConnection()</code> method:</p> <pre><code>if (Container::hasConnection('domain-b')) {\n    // The 'domain-b' connection exists!\n}\n</code></pre>"},{"location":"docs/core/v3/credits/","title":"Credits","text":"<p>LdapRecord was based heavily on Laravel's fantastic ORM Eloquent which was created by Taylor Otwell. Many of its features and documentation are direct ports to be used for LDAP.</p> <p>Without its battle tested infrastructure already built, this package would not have the stability and usability that was granted from his thousands of hours of hard work, and of course the hundreds to thousands of contributors that has brought continuous improvements to the Laravel framework.</p> <p>If you can, please support Taylor Otwell's work. He has made web development with PHP a fun and exciting experience - without costing developers a dime.</p> <p>I must also mention Chad Sikorra and his library LdapTools. His open source work with LDAP on GitHub and Stackoverflow has helped me tremendously in understanding nuances in the LDAP protocol and Active Directory itself. Without his advanced expertise and knowledge, Adldap2 and LdapRecord would not be here today.</p>"},{"location":"docs/core/v3/events/","title":"Events","text":""},{"location":"docs/core/v3/events/#introduction","title":"Introduction","text":"<p>LdapRecord events provide a method of listening for certain LDAP actions that are called and execute tasks for that specific event.</p> <p>The LdapRecord event dispatcher was actually derived from the Laravel Framework with Broadcasting &amp; Queuing omitted to remove extra dependencies that would be required with implementing those features.</p> <p>If you've worked with Laravel's event system before, this will feel very familiar.</p>"},{"location":"docs/core/v3/events/#registering-listeners","title":"Registering Listeners","text":"<p>Before we get to registering listeners, it's crucial to know that events throughout LdapRecord are fired irrespective of the current connection or provider in use.</p> <p>This means that when using multiple LDAP connections, the same events will be fired. This allows you to set listeners on events that occur for all LDAP connections you utilize.</p> <p>If you are required to determine which events are fired from alternate connections, see below.</p> <p>To register a listener on an event, retrieve the event dispatcher and call the <code>listen()</code> method:</p> <pre><code>$dispatcher = \\LdapRecord\\Container::getDispatcher();\n\n$dispatcher-&gt;listen(Binding::class, function (Binding $event) {\n    $event-&gt;connection; // LdapRecord\\Connections\\Ldap instance\n    $event-&gt;username; // 'jdoe@acme.org'\n    $event-&gt;password; // 'super-secret'\n});\n</code></pre> <p>The first argument is the event name you would like to listen for, and the second is either a closure or class name that should handle the event.</p>"},{"location":"docs/core/v3/events/#using-a-class-based-listener","title":"Using a Class Based Listener","text":"<p>When using just a class name, the class must contain a public <code>handle()</code> method that will handle the event.</p> <pre><code>$dispatcher = \\LdapRecord\\Container::getDispatcher();\n\n$dispatcher-&gt;listen(Binding::class, MyApp\\BindingEventHandler::class);\n</code></pre> <pre><code>namespace MyApp;\n\nuse LdapRecord\\Auth\\Events\\Binding;\n\nclass BindingEventHandler\n{\n    public function handle(Binding $event): void\n    {\n        // Handle the event...\n    }\n}\n</code></pre>"},{"location":"docs/core/v3/events/#model-events","title":"Model Events","text":"<p>Model events are handled the same way as authentication events.</p> <p>Simply call the event dispatcher <code>listen()</code> method with the model event you are wanting to listen for:</p> <pre><code>use LdapRecord\\Container;\nuse LdapRecord\\Models\\Events\\Saving;\n\n$dispatcher = Container::getDispatcher();\n\n$dispatcher-&gt;listen(Saving::class, function (Saving $event) {\n    // Returns the model instance being saved,\n    // eg. `LdapRecord\\Models\\Entry`\n    $event-&gt;getModel();\n});\n</code></pre>"},{"location":"docs/core/v3/events/#wildcard-event-listeners","title":"Wildcard Event Listeners","text":"<p>You can register listeners using the <code>*</code> as a wildcard parameter to catch multiple events with the same listener.</p> <p>Wildcard listeners will receive the event name as their first argument, and the entire event data array as their second argument:</p> <pre><code>use LdapRecord\\Container;\n\n$dispatcher = Container::getDispatcher();\n\n// Listen for all model events.\n$dispatcher-&gt;listen('LdapRecord\\Models\\Events\\*', function ($eventName, array $data) {\n    // Returns 'LdapRecord\\Models\\Events\\Updating'\n    echo $eventName;\n\n    // Returns [0] =&gt; (object) LdapRecord\\Models\\Events\\Updating;\n    var_dump($data);\n});\n\n$connection = Container::getDefaultConnection();\n\n$user = $connection-&gt;query()-&gt;find('cn=User,dc=local,dc=com');\n\n$user-&gt;company = 'New Company';\n\n$user-&gt;save();\n</code></pre>"},{"location":"docs/core/v3/events/#determining-the-connection","title":"Determining the Connection","text":"<p>If you're using multiple LDAP connections and you require the ability to determine which events belong to a certain connection, you can do so by verifying the host of the LDAP connection.</p> <p>Here's an example:</p> <pre><code>use LdapRecord\\Container;\nuse LdapRecord\\Models\\Events\\Creating;\n\n$dispatcher = Container::getDispatcher();\n\n$dispatcher-&gt;listen(Creating::class, function ($event) {\n    $connection = $event-&gt;model-&gt;getConnection();\n\n    $host = $connection-&gt;getHost();\n\n    echo $host; // Displays 'ldap://192.168.1.1:386'\n});\n</code></pre> <p>Example with authentication events:</p> <pre><code>use LdapRecord\\Container;\nuse LdapRecord\\Auth\\Events\\Binding;\n\n$dispatcher = Container::getDispatcher();\n\n$dispatcher-&gt;listen(Binding::class, function ($event) {\n    $connection = $event-&gt;connection;\n\n    $host = $connection-&gt;getHost();\n\n    echo $host; // Displays 'ldap://192.168.1.1:386'\n});\n</code></pre>"},{"location":"docs/core/v3/events/#list-of-events","title":"List of Events","text":""},{"location":"docs/core/v3/events/#authentication-events","title":"Authentication Events","text":"<p>There are several events that are fired during initial and subsequent binds to your configured LDAP server. Here is a list of all events that are fired:</p> Event Fired <code>LdapRecord\\Auth\\Events\\Attempting</code>                  When any authentication attempt is called via:                 <ul><li><code>$connection-&gt;auth()-&gt;attempt()</code></li></ul> <code>LdapRecord\\Auth\\Events\\Passed</code>                  When any authentication attempts pass via:                 <ul><li><code>$connection-&gt;auth()-&gt;attempt()</code></li></ul> <code>LdapRecord\\Auth\\Events\\Failed</code>                  When any authentication attempts fail via:                 <ul> <li><code>$connection-&gt;auth()-&gt;attempt()</code></li> <li><code>$connection-&gt;auth()-&gt;bind()</code></li> </ul> <code>LdapRecord\\Auth\\Events\\Binding</code>                  When any LDAP bind attempts occur via:                 <ul> <li><code>$connection-&gt;auth()-&gt;attempt()</code></li> <li><code>$connection-&gt;auth()-&gt;bind()</code></li> </ul> <code>LdapRecord\\Auth\\Events\\Bound</code>                  When any LDAP bind attempts are successful via:                 <ul> <li><code>$connection-&gt;auth()-&gt;attempt()</code></li> <li><code>$connection-&gt;auth()-&gt;bind()</code></li> </ul>"},{"location":"docs/core/v3/events/#model-events_1","title":"Model Events","text":"<p>There are several events that are fired during the creation, updating and deleting of all models.</p> <p>Here is a list of all events that are fired:</p> Event Fired <code>LdapRecord\\Models\\Events\\Saving</code>                  When a model is in the process of being saved via:                 <ul> <li><code>$model-&gt;save()</code></li> </ul> <code>LdapRecord\\Models\\Events\\Saved</code>                  When a model has been successfully saved via:                 <ul> <li><code>$model-&gt;save()</code></li> </ul> <code>LdapRecord\\Models\\Events\\Creating</code>                  When a model is being created via:                 <ul> <li><code>$model-&gt;save()</code></li> <li><code>$model-&gt;create()</code></li> </ul> <code>LdapRecord\\Models\\Events\\Created</code>                  When a model has been successfully created via:                 <ul> <li><code>$model-&gt;save()</code></li> <li><code>$model-&gt;create()</code></li> </ul> <code>LdapRecord\\Models\\Events\\Updating</code>                  When a model is being updated via:                 <ul> <li><code>$model-&gt;save()</code></li> <li><code>$model-&gt;update()</code></li> </ul> <code>LdapRecord\\Models\\Events\\Updated</code>                  When a model has been successfully updated via:                 <ul> <li><code>$model-&gt;save()</code></li> <li><code>$model-&gt;update()</code></li> </ul> <code>LdapRecord\\Models\\Events\\Deleting</code>                  When a model is being deleted via:                 <ul> <li><code>$model-&gt;delete()</code></li> </ul> <code>LdapRecord\\Models\\Events\\Deleted</code>                  When a model has been successfully deleted via:                 <ul> <li><code>$model-&gt;delete()</code></li> </ul>"},{"location":"docs/core/v3/filter-parser/","title":"Filter Parser","text":""},{"location":"docs/core/v3/filter-parser/#introduction","title":"Introduction","text":"<p>LdapRecord comes with a built-in LDAP filter parser, giving you the ability to read the nodes within to extract all of their attributes.</p> <p>Let's start with a small example by parsing the filter <code>(cn=Steve)</code>:</p> <pre><code>use LdapRecord\\Query\\Filter\\Parser;\n\n// array: [\n//  0 =&gt; LdapRecord\\Query\\Filter\\ConditionNode\n// ]\n$nodes = Parser::parse('(cn=Steve)');\n\n$condition = $nodes[0];\n\n$condition-&gt;getAttribute(); // \"cn\"\n$condition-&gt;getOperator(); // \"=\"\n$condition-&gt;getValue(); // \"Steve\"\n</code></pre> <p>When group filters have been detected, you will recieve a <code>GroupNode</code> instead.</p> <p>With a <code>GroupNode</code>, you can retrieve all nested nodes via the <code>getNodes()</code> method:</p> <pre><code>// array: [\n//  0 =&gt; LdapRecord\\Query\\Filter\\GroupNode\n// ]\n$nodes = Parser::parse('(&amp;(cn=Steve)(sn=Bauman))');\n\n$group = $nodes[0];\n\n$group-&gt;getOperator(); // \"&amp;\"\n\n// array: [\n//  0 =&gt; LdapRecord\\Query\\Filter\\ConditionNode\n//  1 =&gt; LdapRecord\\Query\\Filter\\ConditionNode\n// ]\n$group-&gt;getNodes();\n</code></pre> <p>Important: The parser will always return an array of <code>Node</code> instances.</p>"},{"location":"docs/core/v3/filter-parser/#parsing-from-user-input","title":"Parsing From User Input","text":"<p>If you're accepting user input input to parse, make sure you use a try/catch block to catch any potential <code>ParserException</code> that may be thrown:</p> <pre><code>$input = '(&amp;(cn=Steve)(sn=Bauman))(mail=sbauman@local.com';\n\ntry {\n    $nodes = Parser::parse($input);\n} catch (\\LdapRecord\\Query\\Filter\\ParserException $e) {\n    $e-&gt;getMessage(); // \"Unclosed filter group. Missing \")\" parenthesis\"\n}\n</code></pre>"},{"location":"docs/core/v3/filter-parser/#parsing-bad-filters","title":"Parsing Bad Filters","text":"<p>The filter parser should not be considered as a filter validator. Filters that would otherwise fail to execute on an LDAP server can still be parsed.</p> <p>For example, this filter that would otherwise fail due to not being enclosed by a surrounding and/or (<code>&amp;</code> / <code>|</code>) statement, can still be parsed by the filter parser:</p> <pre><code>// array: [\n//  0 =&gt; LdapRecord\\Query\\Filter\\ConditionNode\n//  1 =&gt; LdapRecord\\Query\\Filter\\ConditionNode\n// ]\n$result = Parser::parse('(cn=Steve)(sn=Bauman)');\n</code></pre> <p>As you can see, an array of nodes is returned, allowing you to parse each nested node individually.</p>"},{"location":"docs/core/v3/filter-parser/#assembling-nodes","title":"Assembling Nodes","text":"<p>The filter parser can also re-assemble nodes into their string based format. This can help when you want to process a filter to remove any unneeded spacing:</p> <pre><code>$nodes = Parser::parse('(&amp;  (cn=Steve   ) ( sn= Bauman) )  ');\n\n// Returns: \"(&amp;(cn=Steve)(sn= Bauman))\"\n$filter = Parser::assemble($nodes);\n</code></pre> <p>Important: As you can see above, the parser will not trim spaces inside of condition values, in order to preserve the true value.</p>"},{"location":"docs/core/v3/filter-parser/#display-filter-tree","title":"Display Filter Tree","text":"<p>If you're looking to display a tree of parsed LDAP filters, here's a recursive function to get you started:</p> <pre><code>use LdapRecord\\Query\\Filter\\Parser;\nuse LdapRecord\\Query\\Filter\\GroupNode;\nuse LdapRecord\\Query\\Filter\\ConditionNode;\n\nfunction tree($node)\n{\n    if ($node instanceof GroupNode) {\n        return \"&lt;ul&gt;\n            &lt;li&gt;\n                {$node-&gt;getOperator()}\n\n                &lt;ul&gt;\" . tree($node-&gt;getNodes()) . \"&lt;/ul&gt;\n            &lt;/li&gt;\n        &lt;/ul&gt;\";\n    }\n\n    if ($node instanceof ConditionNode) {\n        return \"&lt;li&gt;{$node-&gt;getAttribute()} {$node-&gt;getOperator()} {$node-&gt;getValue()}&lt;/li&gt;\";\n    }\n\n    if (is_array($node)) {\n        return array_reduce($node, function ($carry, $node) {\n            return $carry .= tree($node);\n        });\n    }\n};\n\n$input = '(|(&amp;(cn=Steve)(sn=Bauman))(mail=sbauman@local.com))';\n\n$group = Parser::parse($input);\n\necho tree($group);\n\n// Result:\n// &lt;ul&gt;\n//   &lt;li&gt;\n//       |\n//       &lt;ul&gt;\n//         &lt;ul&gt;\n//             &lt;li&gt;\n//               &amp;\n//               &lt;ul&gt;\n//                   &lt;li&gt;cn = Steve&lt;/li&gt;\n//                   &lt;li&gt;sn = Bauman&lt;/li&gt;\n//               &lt;/ul&gt;\n//             &lt;/li&gt;\n//         &lt;/ul&gt;\n//       &lt;/ul&gt;\n//   &lt;/li&gt;\n// &lt;/ul&gt;\n</code></pre>"},{"location":"docs/core/v3/filter-parser/#available-methods","title":"Available Methods","text":""},{"location":"docs/core/v3/filter-parser/#ldaprecordqueryfilterparser","title":"<code>LdapRecord\\Query\\Filter\\Parser</code>","text":"<pre><code>Parser::parse($filter); // (ConditionNode|GroupNode)[]\n\nParser::assemble($nodes); // string\n</code></pre>"},{"location":"docs/core/v3/filter-parser/#ldaprecordqueryfilterconditionnode","title":"<code>LdapRecord\\Query\\Filter\\ConditionNode</code>","text":"<pre><code>$condition-&gt;getAttribute(); // string\n$condition-&gt;getOperator(); // string\n$condition-&gt;getValue(); // string\n$condition-&gt;getRaw(); // string\n</code></pre>"},{"location":"docs/core/v3/filter-parser/#ldaprecordqueryfiltergroupnode","title":"<code>LdapRecord\\Query\\Filter\\GroupNode</code>","text":"<pre><code>$group-&gt;getOperator(); // string (\"&amp;\", \"|\", \"!\")\n$group-&gt;getNodes(); // (ConditionNode|GroupNode)[]\n$group-&gt;getRaw(); // string\n</code></pre>"},{"location":"docs/core/v3/helpers/","title":"Helpers","text":"<p>LdapRecord provides some helper classes and utility functions you may find useful in your application.</p>"},{"location":"docs/core/v3/helpers/#distinguished-names","title":"Distinguished Names","text":"<pre><code>use LdapRecord\\Models\\Attributes\\DistinguishedName;\n</code></pre> <p>The <code>DistinguishedName</code> utility class allows you to parse Distinguished Name's, and perform various operations.</p> <p>Important: All comparison based operations are case insensitive.</p>"},{"location":"docs/core/v3/helpers/#make","title":"<code>make</code>","text":"<p>Make a new Distinguished Name instance:</p> <pre><code>$dn = DistinguishedName::make('cn=John Doe,dc=local,dc=com');\n</code></pre>"},{"location":"docs/core/v3/helpers/#build","title":"<code>build</code>","text":"<p>Make a new Distinguished Name Builder instance:</p> <pre><code>// Pre-populate a builder:\n$builder = DistinguishedName::build('cn=John Doe,dc=local,dc=com');\n\n// Start from scratch:\n$builder = DistinguishedName::build();\n</code></pre>"},{"location":"docs/core/v3/helpers/#of","title":"<code>of</code>","text":"<p>Alias of the <code>build</code> method:</p> <pre><code>// Pre-populate a builder:\n$builder = DistinguishedName::of('cn=John Doe,dc=local,dc=com');\n\n// Start from scratch:\n$builder = DistinguishedName::of();\n</code></pre>"},{"location":"docs/core/v3/helpers/#isvalid","title":"<code>isValid</code>","text":"<p>Determine if the given string is a valid Distinguished Name:</p> <pre><code>// true\nDistinguishedName::isValid('cn=John Doe,dc=local,dc=com');\n\n// true\nDistinguishedName::isValid('cn=John');\n\n// false\nDistinguishedName::isValid('String containing rdn cn=John');\n\n// false\nDistinguishedName::isValid(null);\n\n// false\nDistinguishedName::isValid('');\n</code></pre>"},{"location":"docs/core/v3/helpers/#get","title":"<code>get</code>","text":"<p>Get the full value of the Distinguished Name:</p> <pre><code>$dn = DistinguishedName::make('cn=John Doe,dc=local,dc=com');\n\n// \"cn=John Doe,dc=local,dc=com\"\n$dn-&gt;get();\n</code></pre>"},{"location":"docs/core/v3/helpers/#set","title":"<code>set</code>","text":"<p>Set the value of the Distinguished Name:</p> <pre><code>$dn = DistinguishedName::make('cn=other,dc=local,dc=com');\n\n$dn-&gt;set('cn=John Doe,dc=local,dc=com');\n\n// \"cn=John Doe,dc=local,dc=com\"\n$dn-&gt;get();\n</code></pre>"},{"location":"docs/core/v3/helpers/#explode","title":"<code>explode</code>","text":"<p>Explode a Distinguished Name string:</p> <pre><code>$dn = DistinguishedName::explode('cn=john doe,dc=local,dc=com');\n\n// [\n//   \"cn=john doe\",\n//   \"dc=local\",\n//   \"dc=com\",\n// ]\nvar_dump($dn);\n</code></pre>"},{"location":"docs/core/v3/helpers/#exploderdn","title":"<code>explodeRdn</code>","text":"<p>Explode a Relative Distinguished Name string:</p> <pre><code>[$attribute, $value] = DistinguishedName::explodeRdn('cn=john doe');\n\n// \"cn\"\necho $attribute;\n\n// \"john doe\"\necho $value;\n</code></pre>"},{"location":"docs/core/v3/helpers/#makerdn","title":"<code>makeRdn</code>","text":"<p>Make a Relative Distinguished Name string:</p> <pre><code>$rdn = DistinguishedName::makeRdn(['cn', 'john doe']);\n\n// \"cn=john doe\"\necho $rdn;\n</code></pre>"},{"location":"docs/core/v3/helpers/#unescape","title":"<code>unescape</code>","text":"<pre><code>$unescaped = DistinguishedName::unescape('\\6a\\6f\\68\\6e\\2c\\64\\6f\\65');\n\n// \"doe, john\"\necho $unescaped;\n</code></pre>"},{"location":"docs/core/v3/helpers/#name","title":"<code>name</code>","text":"<p>Get the Relative Distinguished Name's value:</p> <pre><code>$dn = DistinguishedName::make('cn=John Doe,dc=local,dc=com');\n\n// \"John Doe\"\n$dn-&gt;name();\n</code></pre>"},{"location":"docs/core/v3/helpers/#head","title":"<code>head</code>","text":"<p>Get the Relative Distinguished Name's attribute:</p> <pre><code>$dn = DistinguishedName::make('cn=John Doe,dc=local,dc=com');\n\n// \"cn\"\n$dn-&gt;head();\n</code></pre>"},{"location":"docs/core/v3/helpers/#relative","title":"<code>relative</code>","text":"<p>Get the Relative Distinguished Name:</p> <pre><code>$dn = DistinguishedName::make('cn=John Doe,dc=local,dc=com');\n\n// \"cn=John Doe\"\n$dn-&gt;relative();\n</code></pre>"},{"location":"docs/core/v3/helpers/#parent","title":"<code>parent</code>","text":"<p>Get the parent Distinguished Name:</p> <pre><code>$dn = DistinguishedName::make('cn=John Doe,dc=local,dc=com');\n\n// \"dc=local,dc=com\"\n$dn-&gt;parent();\n</code></pre>"},{"location":"docs/core/v3/helpers/#values","title":"<code>values</code>","text":"<p>Get the values of each DN component:</p> <pre><code>$dn = DistinguishedName::make('cn=John Doe,dc=local,dc=com');\n\n// array:3 [\n//  0 =&gt; \"John Doe\"\n//  1 =&gt; \"local\"\n//  2 =&gt; \"com\"\n// ]\n$dn-&gt;values();\n</code></pre>"},{"location":"docs/core/v3/helpers/#components","title":"<code>components</code>","text":"<p>Get the Relative Distinguished Name's of each DN component:</p> <pre><code>$dn = DistinguishedName::make('cn=John Doe,dc=local,dc=com');\n\n// array:3 [\n//  0 =&gt; \"cn=John Doe\"\n//  1 =&gt; \"dc=local\"\n//  2 =&gt; \"dc=com\"\n// ]\n$dn-&gt;components();\n</code></pre>"},{"location":"docs/core/v3/helpers/#assoc","title":"<code>assoc</code>","text":"<p>Get an associative array of the Distinguished Name component's, grouping them using their attribute name:</p> <pre><code>$dn = DistinguishedName::make('cn=John Doe,dc=local,dc=com');\n\n// array:2 [\n//  \"cn\" =&gt; array:1 [\n//    0 =&gt; \"John Doe\"\n//  ]\n//  \"dc\" =&gt; array:2 [\n//    0 =&gt; \"local\"\n//    1 =&gt; \"com\"\n//  ]\n// ]\n$dn-&gt;assoc();\n</code></pre>"},{"location":"docs/core/v3/helpers/#multi","title":"<code>multi</code>","text":"<p>Split the Relative Distinguished Name's of each DN component into an associative array:</p> <pre><code>$dn = DistinguishedName::make('cn=John Doe,dc=local,dc=com');\n\n// array: 3 [\n//   0 =&gt; ['cn', 'John'],\n//   1 =&gt; ['ou', 'local'],\n//   2 =&gt; ['dc', 'local'],\n// ]\n$dn-&gt;multi();\n</code></pre>"},{"location":"docs/core/v3/helpers/#isempty","title":"<code>isEmpty</code>","text":"<p>Determine if the Distinguished Name has any values:</p> <pre><code>// false\nDistinguishedName::make('cn=John Doe,dc=local,dc=com')-&gt;isEmpty();\n\n// false\nDistinguishedName::make('cn=John Doe')-&gt;isEmpty();\n\n// true\nDistinguishedName::make(null)-&gt;isEmpty();\n\n// true\nDistinguishedName::make('')-&gt;isEmpty();\n</code></pre>"},{"location":"docs/core/v3/helpers/#isparentof","title":"<code>isParentOf</code>","text":"<p>Determine if the Distinguished Name is a direct parent of the given child:</p> <pre><code>$dn = DistinguishedName::make('ou=users,dc=local,dc=com');\n\n// false\n$dn-&gt;isParentOf(\n  DistinguishedName::make('ou=accounting,dc=local,dc=com')\n);\n\n// true\n$dn-&gt;isParentOf(\n  DistinguishedName::make('ou=office,ou=users,dc=local,dc=com')\n);\n</code></pre>"},{"location":"docs/core/v3/helpers/#ischildof","title":"<code>isChildOf</code>","text":"<p>Determine if the Distinguished Name is a direct child of the given parent:</p> <pre><code>$dn = DistinguishedName::make('cn=John Doe,dc=local,dc=com');\n\n// false\n$dn-&gt;isChildOf(\n  DistinguishedName::make('ou=users,dc=local,dc=com')\n);\n\n// true\n$dn-&gt;isChildOf(\n  DistinguishedName::make('dc=local,dc=com')\n);\n</code></pre>"},{"location":"docs/core/v3/helpers/#isancestorof","title":"<code>isAncestorOf</code>","text":"<p>Determine if the Distinguished Name is an ancestor of the given descendant/child:</p> <pre><code>$dn = DistinguishedName::make('ou=users,dc=local,dc=com');\n\n// false\n$dn-&gt;isAncestorOf(\n  DistinguishedName::make('dc=local,dc=com')\n);\n\n// true\n$dn-&gt;isAncestorOf(\n  DistinguishedName::make('ou=accounting,ou=users,dc=local,dc=com')\n);\n\n// true\n$dn-&gt;isAncestorOf(\n  DistinguishedName::make('ou=other,ou=accounting,ou=users,dc=local,dc=com')\n);\n</code></pre>"},{"location":"docs/core/v3/helpers/#isdescendantof","title":"<code>isDescendantOf</code>","text":"<p>Determine if the Distinguished Name is an descendant of the given ancestor/parent:</p> <pre><code>$dn = DistinguishedName::make('cn=John Doe,ou=accounting,ou=users,dc=local,dc=com')\n\n// false\n$dn-&gt;isDescendantOf(\n  DistinguishedName::make('ou=admin,dc=local,dc=com')\n);\n\n// true\n$dn-&gt;isDescendantOf(\n  DistinguishedName::make('ou=users,dc=local,dc=com')\n);\n\n// true\n$dn-&gt;isDescendantOf(\n  DistinguishedName::make('ou=accounting,ou=users,dc=local,dc=com')\n);\n</code></pre>"},{"location":"docs/core/v3/helpers/#distinguished-name-building","title":"Distinguished Name Building","text":"<p>The Distinguished Name Builder allows you to build and transform Distinguished Names.</p> <pre><code>use LdapRecord\\Models\\Attributes\\DistinguishedNameBuilder;\n</code></pre> <p>Important:</p> <ul> <li>All transformation methods can be chained.</li> <li>Values given to the <code>prepend</code> and <code>append</code> are escaped.</li> <li>Missing method calls are forwarded to a <code>DistinguishedName</code> instance.</li> </ul>"},{"location":"docs/core/v3/helpers/#components_1","title":"<code>components</code>","text":"<p>Get all of the components of the DN.</p> <pre><code>$dn = DistinguishedName::build('cn=john doe,ou=users,dc=local,dc=com');\n\n// array:4 [\n//   0 =&gt; array:2 [\n//     0 =&gt; \"cn\"\n//     1 =&gt; \"john doe\"\n//   ]\n//   1 =&gt; array:2 [\n//     0 =&gt; \"ou\"\n//     1 =&gt; \"users\"\n//   ]\n//   2 =&gt; array:2 [\n//     0 =&gt; \"dc\"\n//     1 =&gt; \"local\"\n//   ]\n//   3 =&gt; array:2 [\n//     0 =&gt; \"dc\"\n//     1 =&gt; \"com\"\n//   ]\n// ]\n$dn-&gt;components();\n</code></pre> <p>Get the components of a particular type:</p> <pre><code>$dn = DistinguishedName::build('cn=john doe,ou=users,dc=local,dc=com');\n\n// array:2 [\n//   0 =&gt; array:2 [\n//     0 =&gt; \"dc\"\n//     1 =&gt; \"local\"\n//   ]\n//   1 =&gt; array:2 [\n//     0 =&gt; \"dc\"\n//     1 =&gt; \"com\"\n//   ]\n// ]\n$dn-&gt;components('dc');\n</code></pre>"},{"location":"docs/core/v3/helpers/#prepend","title":"<code>prepend</code>","text":"<p>Prepend an RDN onto the DN.</p> <pre><code>$dn = DistinguishedName::build('dc=com');\n\n// Use an attribute and value:\n$dn-&gt;prepend('dc', 'local');\n\n// Use an RDN:\n$dn-&gt;prepend('cn=john');\n\n// \"cn=john,dc=local,dc=com\"\n$dn-&gt;get();\n</code></pre>"},{"location":"docs/core/v3/helpers/#append","title":"<code>append</code>","text":"<p>Append an RDN onto the DN.</p> <pre><code>$dn = DistinguishedName::build('cn=john');\n\n// Use an attribute and value:\n$dn-&gt;append('dc', 'local');\n\n// Use an RDN:\n$dn-&gt;append('dc=com');\n\n// \"cn=john,dc=local,dc=com\"\n$dn-&gt;get();\n</code></pre>"},{"location":"docs/core/v3/helpers/#pop","title":"<code>pop</code>","text":"<p>Pop an RDN off of the end of the DN.</p> <pre><code>// \"cn=john,dc=local\"\nDistinguishedName::build('cn=john,dc=local,dc=com')\n  -&gt;pop()\n  -&gt;get();\n\n// \"cn=john\"\nDistinguishedName::build('cn=john,dc=local,dc=com')\n  -&gt;pop(2)\n  -&gt;get();\n\n// \"cn=john\"\nDistinguishedName::build('cn=john,dc=local,dc=com')\n  -&gt;pop(2, $removed)\n  -&gt;get();\n\n// array:2 [\n//   0 =&gt; \"dc=local\"\n//   1 =&gt; \"dc=com\"\n// ]\nvar_dump($removed);\n</code></pre>"},{"location":"docs/core/v3/helpers/#shift","title":"<code>shift</code>","text":"<p>Shift an RDN off of the beginning of the DN.</p> <pre><code>// \"dc=local,dc=com\"\nDistinguishedName::build('cn=john,dc=local,dc=com')\n  -&gt;shift()\n  -&gt;get();\n\n// \"dc=com\"\nDistinguishedName::build('cn=john,dc=local,dc=com')\n  -&gt;shift(2)\n  -&gt;get();\n\n// \"dc=com\"\nDistinguishedName::build('cn=john,dc=local,dc=com')\n  -&gt;shift(2, $removed)\n  -&gt;get();\n\n// array:2 [\n//   0 =&gt; \"cn=john\"\n//   1 =&gt; \"dc=local\"\n// ]\nvar_dump($removed);\n</code></pre>"},{"location":"docs/core/v3/helpers/#reverse","title":"<code>reverse</code>","text":"<p>Whether to output the DN in reverse.</p> <pre><code>// \"dc=com,dc=local,cn=john\"\nDistinguishedName::build('cn=john,dc=local,dc=com')\n  -&gt;reverse()\n  -&gt;get();\n</code></pre>"},{"location":"docs/core/v3/helpers/#long-chain-example","title":"Long Chain Example","text":"<pre><code>$dn = DistinguishedName::of('cn=John Doe,dc=local,dc=com')\n    -&gt;shift(1, $removed)\n    -&gt;prepend('ou', 'users')\n    -&gt;prepend($removed)\n    -&gt;pop(1, $removed)\n    -&gt;append('dc', 'org')\n    -&gt;append($removed)\n    -&gt;get();\n\n// \"cn=John Doe,ou=users,dc=local,dc=org,dc=com\"\necho $dn;\n</code></pre>"},{"location":"docs/core/v3/helpers/#passwords","title":"Passwords","text":"<pre><code>use LdapRecord\\Models\\Attributes\\Password;\n</code></pre> <p>The Password helper allows you to create hashed passwords, as well as encode them for transmission to your LDAP server.</p> <p>Important: You do not need to use any of these utilities when connecting to an Active Directory server. Password encoding is done for you with the included <code>User</code> model.</p>"},{"location":"docs/core/v3/helpers/#encode","title":"<code>encode</code>","text":"<p>Make an encoded password for transmission over LDAP.</p> <pre><code>// \"\\x00s\\x00e\\x00c\\x00r\\x00e\\x00t\\x00\"\\x00\"\nPassword::encode('secret');\n</code></pre>"},{"location":"docs/core/v3/helpers/#smd5","title":"<code>smd5</code>","text":"<p>Make a salted md5 password.</p> <pre><code>// \"{SMD5}i3f4A6FAN0MDFaaZU23fu8FcHw4=\"\nPassword::smd5('secret');\n\n// \"{SMD5}mc0uWpXVVe5747A4pKhGJXNhbHQ=\"\nPassword::smd5('secret', 'salt');\n</code></pre>"},{"location":"docs/core/v3/helpers/#ssha","title":"<code>ssha</code>","text":"<p>Make a salted SHA password.</p> <pre><code>// \"{SSHA}L8EHaF8fyBVlTrvHbdE5/7MnCN1sR4az\"\nPassword::ssha('secret');\n\n// \"{SSHA}gVK8WC9YyFT1gMsQHTGCgT3sSv5zYWx0\"\nPassword::ssha('secret', 'salt');\n</code></pre>"},{"location":"docs/core/v3/helpers/#ssha256","title":"<code>ssha256</code>","text":"<p>Make a salted SSHA256 password.</p> <pre><code>// \"{SSHA256}f30+bbvnM24awEIG2iLZ12TcsjFT7e+OP3/fFmmqMZNdQRP/\"\nPassword::ssha256('secret');\n\n// \"{SSHA256}+E+iFJ27Yu1ODPH1UNKUmzOmUT06dwfghQJRHHnMsO5zYWx0\"\nPassword::ssha256('secret', 'salt');\n</code></pre>"},{"location":"docs/core/v3/helpers/#ssha384","title":"<code>ssha384</code>","text":"<p>Make a salted SSHA384 password.</p> <pre><code>// \"{SSHA384}x57dAvYd0LnqXDLxgmCqgrR585r2Ej4Lyxm+SQqY2fr1yzgIGz/t48MlKwEy+96jeShdcg==\"\nPassword::ssha384('secret');\n\n// \"{SSHA384}BPdC1qPVnOtOWlZBhlNvMSsThLk7gG0moXRB2Ulg+UGkFToChXZ4jNzGfK5Uh3Otc2FsdA==\"\nPassword::ssha384('secret', 'salt');\n</code></pre>"},{"location":"docs/core/v3/helpers/#ssha512","title":"<code>ssha512</code>","text":"<p>Make a salted SSHA512 password.</p> <pre><code>// \"{SSHA512}udY8kkohMXfh4YKmrMWbXk1CWf2xpzarDAOLTPBezod5JSwbgMvgCAjeJiYvmfrsfyHlVqc/4nmfaH7Hlvumo/cB2Jg=\"\nPassword::ssha512('secret');\n\n// \"{SSHA512}E491yrR9AdCoE7rbOPYS3EZgSuZpVE65AD9xko08s6floNesY/Zpe9zMVvLix4S2FiQSJ99RIkNvhHomNO9uL3NhbHQ=\"\nPassword::ssha512('secret', 'salt');\n</code></pre>"},{"location":"docs/core/v3/helpers/#sha","title":"<code>sha</code>","text":"<p>Make a non-salted SHA password.</p> <pre><code>// \"{SHA}5en6G6MezRroT3XKqkdPOmY/BfQ=\"\nPassword::sha('secret');\n</code></pre>"},{"location":"docs/core/v3/helpers/#sha256","title":"<code>sha256</code>","text":"<p>Make a non-salted SHA256 password.</p> <pre><code>// \"{SHA256}K7gNU3sdo+OL0wNhqoVWhr3g6s1xYv72ol/pe/Unols=\"\nPassword::sha256('secret');\n</code></pre>"},{"location":"docs/core/v3/helpers/#sha384","title":"<code>sha384</code>","text":"<p>Make a non-salted SHA384 password.</p> <pre><code>// \"{SHA384}WKd1ukESvjAFrkQHznV9iP2nHUBJe7gCbsrFTU4//HIyzo3jq1rLMK45dg/ufFPt\"\nPassword::sha384('secret');\n</code></pre>"},{"location":"docs/core/v3/helpers/#sha512","title":"<code>sha512</code>","text":"<p>Make a non-salted SHA512 password.</p> <pre><code>// \"SHA512}vSsar3708Jvp9Szi2NWZZ02Bqp1qRCFpbcTZPdBhnWgs5WtNZKnvCXdhztmeD2cmW192CF5bDufKRpayrW/isg==\"\nPassword::sha512('secret');\n</code></pre>"},{"location":"docs/core/v3/helpers/#md5","title":"<code>md5</code>","text":"<p>Make a non-salted md5 password.</p> <pre><code>// \"{MD5}Xr4ilOzQ4PCOq3aQ0qbuaQ==\"\nPassword::md5('secret');\n</code></pre>"},{"location":"docs/core/v3/helpers/#md5crypt","title":"<code>md5Crypt</code>","text":"<p>Crypt password with an MD5 salt.</p> <pre><code>// \"{CRYPT}$1$hYstY89O$EHfOOWhp4qJ0.lDJ2owwb.\"\nPassword::md5Crypt('secret');\n\n// \"{CRYPT}saHW9GdxihkGQ\"\nPassword::md5Crypt('secret', 'salt');\n</code></pre>"},{"location":"docs/core/v3/helpers/#sha256crypt","title":"<code>sha256Crypt</code>","text":"<p>Crypt password with a SHA256 salt.</p> <pre><code>// \"{CRYPT}$5$aRmWk3iiWxTdJ$iTy8QAfarSnilA3nM6SSH67qB2VpZiRbxXkA4FddfdD\"\nPassword::sha256Crypt('secret');\n\n// \"{CRYPT}saHW9GdxihkGQ\"\nPassword::sha256Crypt('secret', 'salt');\n</code></pre>"},{"location":"docs/core/v3/helpers/#sha512crypt","title":"<code>sha512Crypt</code>","text":"<p>Crypt a password with a SHA512 salt.</p> <pre><code>// \"{CRYPT}$6$GcGAYPV4NIvbC$odXh0cW4xldt2YUTqCaxjwFvRjiLA4CyDsQYaY1zLEfB4XXzsq6MFru9TAMbzR8hs0nJjmi5fFHrAB9hmaFF..\"\nPassword::sha512Crypt('secret');\n\n// \"{CRYPT}saHW9GdxihkGQ\"\nPassword::sha512Crypt('secret', 'salt');\n</code></pre>"},{"location":"docs/core/v3/helpers/#guid","title":"GUID","text":"<p>A utility class for parsing and validating Object GUIDs.</p> <pre><code>use LdapRecord\\Models\\Attributes\\Guid;\n</code></pre>"},{"location":"docs/core/v3/helpers/#isvalid_1","title":"<code>isValid</code>","text":"<p>Determine if a given string is a valid GUID:</p> <pre><code>// Returns \"true\"\nGuid::isValid('59e5e143-a50e-41a9-bf2b-badee699a577');\nGuid::isValid('8be90b30-0bbb-4638-b468-7aaeb32c74f9');\nGuid::isValid('17bab266-05ac-4e30-9fad-1c7093e4dd83');\n\n// Returns \"false\"\nGuid::isValid('Invalid GUID');\nGuid::isValid('17bab266-05ac-4e30-9fad');\nGuid::isValid('');\n</code></pre>"},{"location":"docs/core/v3/helpers/#gethex","title":"<code>getHex</code>","text":"<p>Get the hexadecimal representation of the GUID string:</p> <pre><code>$guid = '270db4d0-249d-46a7-9cc5-eb695d9af9ac';\n\n// \"d0b40d279d24a7469cc5eb695d9af9ac\"\n(new Guid($guid))-&gt;getEncodedHex();\n</code></pre>"},{"location":"docs/core/v3/helpers/#getencodedhex","title":"<code>getEncodedHex</code>","text":"<p>Get the encoded hexadecimal representation of the GUID string:</p> <pre><code>$guid = '270db4d0-249d-46a7-9cc5-eb695d9af9ac';\n\n// \"\\d0\\b4\\0d\\27\\9d\\24\\a7\\46\\9c\\c5\\eb\\69\\5d\\9a\\f9\\ac\"\n(new Guid($guid))-&gt;getEncodedHex();\n</code></pre>"},{"location":"docs/core/v3/helpers/#getvalue","title":"<code>getValue</code>","text":"<p>Get the string representation of the GUID:</p> <pre><code>$guid = '270db4d0-249d-46a7-9cc5-eb695d9af9ac';\n\n// \"270db4d0-249d-46a7-9cc5-eb695d9af9ac\"\n(new Guid($guid))-&gt;getValue();\n</code></pre>"},{"location":"docs/core/v3/helpers/#getbinary","title":"<code>getBinary</code>","text":"<p>Get the binary representation of the GUID string:</p> <pre><code>$guid = '270db4d0-249d-46a7-9cc5-eb695d9af9ac';\n\n// \"b\"\u00f0\u2524\\r'\u00d8$\u00baF\u00a3\u253c\u00d9i]\u00dc\u00a8\u00bc\"\"\n(new Guid($guid))-&gt;getBinary();\n</code></pre>"},{"location":"docs/core/v3/helpers/#sid","title":"SID","text":"<p>A utility class for parsing and validating Object SIDs.</p> <pre><code>use LdapRecord\\Models\\Attributes\\Sid;\n</code></pre>"},{"location":"docs/core/v3/helpers/#isvalid_2","title":"<code>isValid</code>","text":"<p>Determine if a string is a valid SID:</p> <pre><code>// Returns \"true\"\nSid::isValid('S-1-5-21-362381101-336104434-3030082-101');\nSid::isValid('S-1-5-21-362381101-336104434');\nSid::isValid('S-1-5-21-362381101');\nSid::isValid('S-1-5-21');\nSid::isValid('S-1-5');\n\n// Returns \"false\"\nSid::isValid('Invalid SID');\nSid::isValid('S-1');\nSid::isValid('');\n</code></pre>"},{"location":"docs/core/v3/helpers/#getvalue_1","title":"<code>getValue</code>","text":"<p>Get the string representation value of the SID:</p> <pre><code>$sid = 'S-1-5-21-362381101-336104434-3030082-101';\n\n// \"S-1-5-21-362381101-336104434-3030082-101\"\n(new Sid($sid))-&gt;getValue();\n</code></pre>"},{"location":"docs/core/v3/helpers/#getbinary_1","title":"<code>getBinary</code>","text":"<p>Get the binary representation value of the SID:</p> <pre><code>$sid = 'S-1-5-21-362381101-336104434-3030082-101';\n\n// \"b\"\\x01\\x05\\x00\\x00\\x00\\x00\\x00\\x05\\x15\\x00\\x00\\x00-\\x7F\u2122\\x15\u00f2\u2039\\x08\\x14B&lt;.\\x00e\\x00\\x00\\x00\"\n(new Sid($sid))-&gt;getBinary();\n</code></pre>"},{"location":"docs/core/v3/helpers/#timestamp","title":"Timestamp","text":"<p>A utility class for transforming dates to and from LDAP timestamps. </p> <pre><code>use LdapRecord\\Models\\Attributes\\Timestamp;\n</code></pre>"},{"location":"docs/core/v3/helpers/#timestamp-types","title":"Timestamp Types","text":"<p>To begin, create a new <code>Timestamp</code> instance with the type of timestamp you are looking to convert:</p> <pre><code>$timestamp = new Timestamp(Timestamp::TYPE_LDAP);\n\n$timestamp = new Timestamp(Timestamp::TYPE_WINDOWS);\n\n$timestamp = new Timestamp(Timestamp::TYPE_WINDOWS_INT);\n</code></pre>"},{"location":"docs/core/v3/helpers/#converting-to-an-ldap-timestamp","title":"Converting to an LDAP Timestamp","text":"<p>Call <code>fromDateTime()</code> to convert a <code>string</code>, <code>int</code>, <code>DateTime</code>, or <code>Carbon</code> instance to the LDAP timestamp:</p> <pre><code>// \"20230417210756Z\"\n$ldapTimestamp = (new Timestamp(Timestamp::TYPE_LDAP))\n    -&gt;fromDateTime(new \\DateTime());\n\n// \"20230417210824.0Z\"\n$windowsTime = (new Timestamp(Timestamp::TYPE_WINDOWS))\n    -&gt;fromDateTime(new \\DateTime());\n\n// 133262392690000000\n$windowsIntegerTime = (new Timestamp(Timestamp::TYPE_WINDOWS_INT))\n    -&gt;fromDateTime(new \\DateTime());\n</code></pre>"},{"location":"docs/core/v3/helpers/#converting-from-an-ldap-timestamp","title":"Converting from an LDAP Timestamp","text":"<p>Call <code>toDateTime()</code> to convert an LDAP timestamp into a PHP <code>Carbon</code> instance:</p> <pre><code>// Carbon\\Carbon\n$ldapTimestampAsCarbon = (new Timestamp(Timestamp::TYPE_LDAP))\n    -&gt;toDateTime('20230417210756Z');\n\n// Carbon\\Carbon\n$windowsTimeAsCarbon = (new Timestamp(Timestamp::TYPE_WINDOWS))\n    -&gt;toDateTime('20230417210824.0Z');\n\n// Carbon\\Carbon\n$windowsIntegerTimeAsCarbon = (new Timestamp(Timestamp::TYPE_WINDOWS_INT))\n    -&gt;toDateTime(133262392690000000);\n</code></pre>"},{"location":"docs/core/v3/installation/","title":"Installation","text":"<p>LdapRecord requires the following:</p> Requirements PHP &gt;= 8.1 PHP LDAP extension enabled An LDAP server (Active Directory, OpenLDAP, FreeIPA etc.) <p>LdapRecord uses Composer for installation.</p> <p>After installing Composer, run the following command in the root directory of your project:</p> <pre><code>composer require directorytree/ldaprecord\n</code></pre> <p>If your application doesn't already require Composer's autoload, you will need to do it manually.</p> <p>Insert the following line at the top of your projects PHP script (usually <code>index.php</code>):</p> <pre><code>require __DIR__ . '/vendor/autoload.php';\n</code></pre>"},{"location":"docs/core/v3/license/","title":"License","text":"<p>LdapRecord is open-sourced software licensed under the MIT license.</p>"},{"location":"docs/core/v3/logging/","title":"Logging","text":"<p>LdapRecord includes an implementation of PSR's widely supported Logger interface.</p> <p>By default, all of LdapRecord's events will call the logger you have set to utilize.</p> <p>LdapRecord does not include a file / text logger. You must implement your own.</p>"},{"location":"docs/core/v3/logging/#registering-enabling-a-logger","title":"Registering &amp; Enabling a Logger","text":"<p>To register a logger call <code>LdapRecord\\Container::setLogger()</code>. The logger must implement the <code>Psr\\Log\\LoggerInterface</code>.</p> <pre><code>\\LdapRecord\\Container::setLogger($myLogger);\n</code></pre>"},{"location":"docs/core/v3/logging/#disabling-logging","title":"Disabling Logging","text":"<p>If you need to disable the event logger after a certain set of operations, simply pass in <code>null</code> and logging will be disabled:</p> <pre><code>\\LdapRecord\\Container::setLogger($myLogger);\n\n$connection = new \\LdapRecord\\Connection(['...']);\n\ntry {\n    $connection-&gt;connect();\n\n    // Disable logging anything else.\n    \\LdapRecord\\Container::setLogger(null);\n} catch (\\LdapRecord\\Auth\\BindException $e) {\n    //\n}\n</code></pre>"},{"location":"docs/core/v3/logging/#logged-information","title":"Logged Information","text":"<p>After enabling LdapRecord logging, the following events are logged:</p>"},{"location":"docs/core/v3/logging/#ldaprecordautheventsattempting","title":"<code>LdapRecord\\Auth\\Events\\Attempting</code>","text":"<pre><code>LDAP (ldap://192.168.1.1:389) - Operation: LdapRecord\\Auth\\Events\\Attempting - Username: CN=Steve Bauman,OU=Users,DC=local,DC=com\n</code></pre>"},{"location":"docs/core/v3/logging/#ldaprecordautheventsbinding","title":"<code>LdapRecord\\Auth\\Events\\Binding</code>","text":"<pre><code>LDAP (ldap://192.168.1.1:389) - Operation: LdapRecord\\Auth\\Events\\Binding - Username: CN=Steve Bauman,OU=Users,DC=local,DC=com\n</code></pre>"},{"location":"docs/core/v3/logging/#ldaprecordautheventsbound","title":"<code>LdapRecord\\Auth\\Events\\Bound</code>","text":"<pre><code>LDAP (ldap://192.168.1.1:389) - Operation: LdapRecord\\Auth\\Events\\Bound - Username: CN=Steve Bauman,OU=Users,DC=local,DC=com\n</code></pre>"},{"location":"docs/core/v3/logging/#ldaprecordautheventspassed","title":"<code>LdapRecord\\Auth\\Events\\Passed</code>","text":"<pre><code>LDAP (ldap://192.168.1.1:389) - Operation: LdapRecord\\Auth\\Events\\Passed - Username: CN=Steve Bauman,OU=Users,DC=local,DC=com\n</code></pre>"},{"location":"docs/core/v3/logging/#ldaprecordautheventsfailed","title":"<code>LdapRecord\\Auth\\Events\\Failed</code>","text":"<pre><code>LDAP (ldap://192.168.1.1:389) - Operation: LdapRecord\\Auth\\Events\\Failed - Username: CN=Steve Bauman,OU=Users,DC=local,DC=com - Result: Invalid Credentials\n</code></pre>"},{"location":"docs/core/v3/logging/#ldaprecordmodelseventssaving","title":"<code>LdapRecord\\Models\\Events\\Saving</code>","text":"<pre><code>LDAP (ldap://192.168.1.1:389) - Operation: Saving - On: LdapRecord\\Models\\Entry - Distinguished Name: cn=John Doe,DC=local,DC=com\n</code></pre>"},{"location":"docs/core/v3/logging/#ldaprecordmodelseventssaved","title":"<code>LdapRecord\\Models\\Events\\Saved</code>","text":"<pre><code>LDAP (ldap://192.168.1.1:389) - Operation: Saved - On: LdapRecord\\Models\\Entry - Distinguished Name: cn=John Doe,DC=local,DC=com\n</code></pre>"},{"location":"docs/core/v3/logging/#ldaprecordmodelseventscreating","title":"<code>LdapRecord\\Models\\Events\\Creating</code>","text":"<pre><code>LDAP (ldap://192.168.1.1:389) - Operation: Creating - On: LdapRecord\\Models\\Entry - Distinguished Name: cn=John Doe,DC=local,DC=com\n</code></pre>"},{"location":"docs/core/v3/logging/#ldaprecordmodelseventscreated","title":"<code>LdapRecord\\Models\\Events\\Created</code>","text":"<pre><code>LDAP (ldap://192.168.1.1:389) - Operation: Created - On: LdapRecord\\Models\\Entry - Distinguished Name: cn=John Doe,DC=local,DC=com\n</code></pre>"},{"location":"docs/core/v3/logging/#ldaprecordmodelseventsupdating","title":"<code>LdapRecord\\Models\\Events\\Updating</code>","text":"<pre><code>LDAP (ldap://192.168.1.1:389) - Operation: Updating - On: LdapRecord\\Models\\Entry - Distinguished Name: cn=John Doe,DC=local,DC=com\n</code></pre>"},{"location":"docs/core/v3/logging/#ldaprecordmodelseventsupdated","title":"<code>LdapRecord\\Models\\Events\\Updated</code>","text":"<pre><code>LDAP (ldap://192.168.1.1:389) - Operation: Updated - On: LdapRecord\\Models\\Entry - Distinguished Name: cn=John Doe,DC=local,DC=com\n</code></pre>"},{"location":"docs/core/v3/logging/#ldaprecordmodelseventsdeleting","title":"<code>LdapRecord\\Models\\Events\\Deleting</code>","text":"<pre><code>LDAP (ldap://192.168.1.1:389) - Operation: Deleting - On: LdapRecord\\Models\\Entry - Distinguished Name: cn=John Doe,DC=local,DC=com\n</code></pre>"},{"location":"docs/core/v3/logging/#ldaprecordmodelseventsdeleted","title":"<code>LdapRecord\\Models\\Events\\Deleted</code>","text":"<pre><code>LDAP (ldap://192.168.1.1:389) - Operation: Deleted - On: LdapRecord\\Models\\Entry - Distinguished Name: cn=John Doe,DC=local,DC=com\n</code></pre>"},{"location":"docs/core/v3/model-api/","title":"Available Model Methods (API)","text":""},{"location":"docs/core/v3/model-api/#method-listing","title":"Method Listing","text":""},{"location":"docs/core/v3/model-api/#addattribute","title":"<code>addAttribute</code>","text":"<p>Immediately inserts a new attribute value on the model.</p> <p>Performs an <code>ldap_mod_add</code> under the hood.</p> <p>Important: This does not create attributes that do not exist on your LDAP schema for the object.</p> <pre><code>$model-&gt;addAttribute('telephonenumber', '+1 555 555 1717');\n</code></pre>"},{"location":"docs/core/v3/model-api/#addattributevalue","title":"<code>addAttributeValue</code>","text":"<p>Add a value into an array of attribute values:</p> <pre><code>$model-&gt;proxyaddresses = ['SMTP:sbauman@microsoft.com'];\n\n$model-&gt;addAttributeValue('proxyaddresses', 'smtp:sbauman@local.com');\n\n// Displays:\n// [\n//     'SMTP:sbauman@microsoft.com',\n//     'smtp:sbauman@local.com'\n// ]\nvar_dump($model-&gt;proxyaddresses);\n</code></pre>"},{"location":"docs/core/v3/model-api/#addhidden","title":"<code>addHidden</code>","text":"<p>Add an attribute to hide when encoding a model using <code>json_encode</code>:</p> <pre><code>$model-&gt;addHidden('userpassword');\n\n$model-&gt;addHidden(['userpassword', 'mail']);\n\n// 'userpassword' and 'mail' will be omitted:\n$attributes = json_encode($model);\n</code></pre>"},{"location":"docs/core/v3/model-api/#addmodification","title":"<code>addModification</code>","text":"<p>Add a batch modification to the model to be executed upon <code>save()</code>:</p> <pre><code>// Using an array...\n$modification = [\n    'attrib'  =&gt; 'telephoneNumber',\n    'modtype' =&gt; LDAP_MODIFY_BATCH_ADD,\n    'values'  =&gt; ['+1 555 555 1717'],\n];\n\n$model-&gt;addModification($modification);\n\n// Using a BatchModification...\n$mod = new \\LdapRecord\\Models\\BatchModification(\n    $attrib = 'telephoneNumber',\n    $modType = LDAP_MODIFY_BATCH_ADD,\n    $values = ['+1 555 555 1717']\n);\n\n$model-&gt;addModification($mod);\n\n$model-&gt;save();\n</code></pre>"},{"location":"docs/core/v3/model-api/#addvisible","title":"<code>addVisible</code>","text":"<p>Add an attribute to include that is being hidden when encoding a model using <code>json_encode</code>:</p> <pre><code>$model-&gt;addVisible('userpassword');\n\n$model-&gt;addVisible(['userpassword', 'mail']);\n</code></pre>"},{"location":"docs/core/v3/model-api/#ancestors","title":"<code>ancestors</code>","text":"<p>Begin querying the direct ancestors of the model:</p> <pre><code>$ancestors = $model-&gt;ancestors()-&gt;get();\n</code></pre>"},{"location":"docs/core/v3/model-api/#asdatetime","title":"<code>asDateTime</code>","text":"<p>Convert an LDAP timestamp to a <code>Carbon\\Carbon</code> instance:</p> <pre><code>$carbon = $model-&gt;asDateTime('20200508184557Z', 'ldap');\n\n$carbon = $model-&gt;asDateTime('20200508184533.0Z', 'windows');\n\n$carbon = $model-&gt;asDateTime(132334371140000000, 'windows-int');\n</code></pre>"},{"location":"docs/core/v3/model-api/#attributestoarray","title":"<code>attributesToArray</code>","text":"<p>Convert all the models attributes to their JSON encodable value:</p> <pre><code>$attributes = $model-&gt;attributesToArray();\n</code></pre> <p>Important: LDAP date attributes specified via the <code>$dates</code> model property will be converted in the returned array.</p>"},{"location":"docs/core/v3/model-api/#convert","title":"<code>convert</code>","text":"<p>Convert a model into another by copying its attributes, connection and distinguished name:</p> <p>Important: This will also set <code>$model-&gt;exists</code> property to <code>true</code> if the model being converted exists.</p> <pre><code>$into = new \\LdapRecord\\Models\\ActiveDirectory\\User();\n\n// Returns instance of \\LdapRecord\\Models\\ActiveDirectory\\User\n$user = $model-&gt;convert($into);\n</code></pre>"},{"location":"docs/core/v3/model-api/#countattributes","title":"<code>countAttributes</code>","text":"<p>Get the total number of attributes on a model:</p> <p>Important: This does not count attribute values.</p> <pre><code>$model-&gt;fill([\n    'cn' =&gt; 'Steve Bauman',\n    'sn' =&gt; 'Bauman',\n]);\n\n// Returns '2'\n$model-&gt;countAttributes();\n</code></pre>"},{"location":"docs/core/v3/model-api/#createattribute","title":"<code>createAttribute</code>","text":"<p>This method was renamed to addAttribute in v3.0.</p>"},{"location":"docs/core/v3/model-api/#delete","title":"<code>delete</code>","text":"<p>Immediately delete an existing model instance:</p> <pre><code>$model-&gt;delete();\n\n// Returns false.\n$model-&gt;exists;\n</code></pre> <p>To delete nested objects contained in the model recursively, pass in <code>true</code>:</p> <pre><code>$model-&gt;delete($recursive = true);\n</code></pre>"},{"location":"docs/core/v3/model-api/#deleteattributes","title":"<code>deleteAttributes</code>","text":"<p>This method was renamed to removeAttributes in v3.0.</p>"},{"location":"docs/core/v3/model-api/#descendants","title":"<code>descendants</code>","text":"<p>Begin querying the direct descendants of the model:</p> <pre><code>$descendants = $model-&gt;descendants()-&gt;get();\n</code></pre>"},{"location":"docs/core/v3/model-api/#escape","title":"<code>escape</code>","text":"<p>Prepare a value to be escaped:</p> <pre><code>// Returns \\LdapRecord\\Models\\Attributes\\EscapedValue;\n$escapedValue = $model-&gt;escape($value, $ignore = '', $flags = 0);\n\n// Cast to string for immediate return of escaped value:\n$escapedValue = (string) $model-&gt;escape($value, $ignore = '', $flags = 0);\n</code></pre>"},{"location":"docs/core/v3/model-api/#fill","title":"<code>fill</code>","text":"<p>Fill a model with attributes and values:</p> <pre><code>$model-&gt;fill([\n    'cn' =&gt; 'Steve Bauman',\n    'proxyAddresses' =&gt; ['foo', 'bar'],\n]);\n\n$model-&gt;save();\n</code></pre>"},{"location":"docs/core/v3/model-api/#fresh","title":"<code>fresh</code>","text":"<p>Get a fresh new instance of the existing model.</p> <p>The model will be re-retrieved from the LDAP directory. The existing model will not be affected:</p> <pre><code>$fresh = $model-&gt;fresh();\n</code></pre>"},{"location":"docs/core/v3/model-api/#fromdatetime","title":"<code>fromDateTime</code>","text":"<p>Convert a <code>DateTime</code>, <code>Carbon</code> or <code>string</code> to the specified LDAP timestamp type:</p> <pre><code>$date = new \\DateTime('now');\n\n$ldapTimestamp = $model-&gt;fromDateTime('ldap', $date);\n\n$windowsTimestamp = $model-&gt;fromDateTime('windows', $date);\n\n$windowsIntTimestamp = $model-&gt;fromDateTime('windows-int', $date);\n</code></pre>"},{"location":"docs/core/v3/model-api/#getanrattributes","title":"<code>getAnrAttributes</code>","text":"<p>Get an array of ANR attributes defined on the model:</p> <pre><code>$attributes = $model-&gt;getAnrAttributes();\n\n// Displays:\n// [\n//    'cn',\n//    'sn',\n//    'uid',\n//    'name',\n//    'mail',\n//    'givenname',\n//    'displayname'\n// ]\nvar_dump($attributes);\n</code></pre>"},{"location":"docs/core/v3/model-api/#getappends","title":"<code>getAppends</code>","text":"<p>Get the accessors being appended to the models array form:</p> <pre><code>$model-&gt;setAppends(['foo-bar']);\n\n// Displays:\n// [\n//    'foo-bar',\n// ]\nvar_dump($model-&gt;getAppends());\n</code></pre>"},{"location":"docs/core/v3/model-api/#getattribute","title":"<code>getAttribute</code>","text":"<p>Get the value of the specified attribute.</p> <p>This will return an <code>array</code> if the attribute exists and <code>null</code> if non-existent:</p> <p>Important: If a mutator exists for the attribute (such as a date, or custom attribute mutator method), it's value will be returned instead.</p> <pre><code>// Returns array:\n$values = $model-&gt;getAttribute('cn');\n\n// Returns first value:\n$value = $model-&gt;getAttribute('cn')[0];\n\n// Returns null:\n$null = $model-&gt;getAttribute('non-existent');\n</code></pre>"},{"location":"docs/core/v3/model-api/#getattributevalue","title":"<code>getAttributeValue</code>","text":"<p>Performs the same as above.</p>"},{"location":"docs/core/v3/model-api/#getattributes","title":"<code>getAttributes</code>","text":"<p>Get all the models raw attributes:</p> <p>Important: Mutator attribute values will not be included in this array.</p> <pre><code>$attributes = $model-&gt;getAttributes();\n\nforeach ($attributes as $attribute =&gt; $values) {\n    //\n}\n</code></pre>"},{"location":"docs/core/v3/model-api/#getconnection","title":"<code>getConnection</code>","text":"<p>Resolve the underlying <code>LdapRecord\\Connection</code>:</p> <pre><code>$connection = $model-&gt;getConnection();\n\n$config = $connection-&gt;getConfiguration();\n</code></pre>"},{"location":"docs/core/v3/model-api/#getconnectionname","title":"<code>getConnectionName</code>","text":"<p>Get the connection name from the model:</p> <p>Important: If no connection is set on the model, <code>null</code> will be returned.</p> <pre><code>class Entry extends Model\n{\n    protected ?string $connection = 'domain-b';\n}\n\n// Returns 'domain-b'\n$connectionName = (new Entry)-&gt;getConnectionName();\n</code></pre>"},{"location":"docs/core/v3/model-api/#getconvertedguid","title":"<code>getConvertedGuid</code>","text":"<p>Get the models string GUID:</p> <pre><code>// Example: bf9679e7-0de6-11d0-a285-00aa003049e2\n$guid = $model-&gt;getConvertedGuid();\n</code></pre>"},{"location":"docs/core/v3/model-api/#getcreatabledn","title":"<code>getCreatableDn</code>","text":"<p>Get the models creatable Distinguished Name:</p> <pre><code>$model = new Entry(['cn' =&gt; 'John Doe']);\n\n// Returns: 'cn=John Doe,dc=local,dc=com'\n$creatableDn = $model-&gt;getCreatableDn();\n\n$model-&gt;cn = 'Jane Doe';\n\n// Returns: 'cn=Jane Doe,dc=local,dc=com'\n$creatableDn = $model-&gt;getCreatableDn();\n</code></pre>"},{"location":"docs/core/v3/model-api/#getcreatablerdn","title":"<code>getCreatableRdn</code>","text":"<p>Get the models creatable relative Distinguished Name:</p> <pre><code>$model = new Entry(['cn' =&gt; 'John Doe']);\n\n// Returns: 'cn=John Doe'\n$creatableDn = $model-&gt;getCreatableRdn();\n\n$model-&gt;cn = 'Jane Doe';\n\n// Returns: 'cn=Jane Doe'\n$creatableDn = $model-&gt;getCreatableRdn();\n</code></pre>"},{"location":"docs/core/v3/model-api/#getdateformat","title":"<code>getDateFormat</code>","text":"<p>Get the format that dates are serialized to:</p> <pre><code>// Returns: 'Y-m-d\\TH:i:sO'\n$model-&gt;getDateFormat();\n</code></pre>"},{"location":"docs/core/v3/model-api/#getdates","title":"<code>getDates</code>","text":"<p>Get an array of attributes that should be mutated to dates:</p> <pre><code>$dates = $model-&gt;getDates();\n\n// Displays:\n// [\n//    'createtimestamp' =&gt; 'ldap',\n//    'modifytimestamp' =&gt; 'ldap',\n// ]\nvar_dump($dates);\n</code></pre>"},{"location":"docs/core/v3/model-api/#getdirty","title":"<code>getDirty</code>","text":"<p>Get the attributes that have been changed:</p> <pre><code>$model-&gt;cn = 'Changed';\n\nforeach ($model-&gt;getDirty() as $attribute =&gt; $values) {\n    // Displays: 'cn'\n    echo $attribute;\n\n    // Displays: ['Changed']\n    var_dump($values);\n}\n</code></pre>"},{"location":"docs/core/v3/model-api/#getdn","title":"<code>getDn</code>","text":"<p>Get the models Distinguished Name:</p> <pre><code>// Displays: 'cn=John Doe,dc=local,dc=com'\necho $model-&gt;getDn();\n</code></pre>"},{"location":"docs/core/v3/model-api/#getfirstattribute","title":"<code>getFirstAttribute</code>","text":"<p>Get the first value of an attribute:</p> <pre><code>$model-&gt;proxyaddresses = ['first', 'second'];\n\n// Returns: 'first'\n$value = $model-&gt;getFirstAttribute('proxyaddresses');\n</code></pre>"},{"location":"docs/core/v3/model-api/#getglobalscopes","title":"<code>getGlobalScopes</code>","text":"<p>Get the global scopes set on the model:</p> <pre><code>Model::addGlobalScope('my-scope', function () {\n    // ...\n});\n\n// Returns: ['my-scope' =&gt; \\Closure]\n$scopes = $model-&gt;getGlobalScopes();\n</code></pre>"},{"location":"docs/core/v3/model-api/#getguidkey","title":"<code>getGuidKey</code>","text":"<p>Get the attribute key that contains the objects GUID:</p> <pre><code>// Returns: 'objectguid'\n$model-&gt;getGuidKey();\n</code></pre>"},{"location":"docs/core/v3/model-api/#gethidden","title":"<code>getHidden</code>","text":"<p>Get the hidden attributes for the model:</p> <pre><code>$model-&gt;addHidden('cn');\n\n// Returns: ['cn']\n$model-&gt;getHidden();\n</code></pre>"},{"location":"docs/core/v3/model-api/#getmodifications","title":"<code>getModifications</code>","text":"<p>Get the models batch modifications to be processed:</p> <pre><code>$model-&gt;cn = 'Changed';\n\n// Returns:\n// [\n//      [\n//      'attrib' =&gt; 'cn',\n//      'modtype' =&gt; 1,\n//      'values' =&gt; ['Changed'],\n//     ]\n// ]\n$mods = $model-&gt;getModifications();\n</code></pre>"},{"location":"docs/core/v3/model-api/#getname","title":"<code>getName</code>","text":"<p>Get the name of a model:</p> <pre><code>$model-&gt;setDn('cn=John Doe,dc=local,dc=com');\n\n// Returns: 'John Doe'\n$name = $model-&gt;getName();\n</code></pre>"},{"location":"docs/core/v3/model-api/#getobjectguid","title":"<code>getObjectGuid</code>","text":"<p>Get the raw binary object GUID:</p> <p>Important:</p> <ul> <li>The raw binary GUID will be returned when connecting to Active Directory.</li> <li>The raw string GUID will be returned with other LDAP directories.</li> </ul> <pre><code>$rawBinary = $model-&gt;getObjectGuid();\n</code></pre>"},{"location":"docs/core/v3/model-api/#getoriginal","title":"<code>getOriginal</code>","text":"<p>Get the original, un-modified attributes on a model:</p> <pre><code>$model = Model::findBy('cn', 'Steve Bauman');\n\n$model-&gt;cn = 'Changed';\n\n// Returns:\n// [\n//    'cn' =&gt; ['Steve Bauman']\n//    ...\n// ]\n$model-&gt;getOriginal();\n</code></pre>"},{"location":"docs/core/v3/model-api/#getparentdn","title":"<code>getParentDn</code>","text":"<p>Get the direct parent Distinguished Name of a model:</p> <pre><code>$model = Model::find('cn=John Doe,dc=local,dc=com');\n\n// Returns: 'dc=local,dc=com'\n$model-&gt;getParentDn();\n\n// Returns: 'ou=Users,dc=local,dc=com'\n$model-&gt;getParentDn('cn=Steve Bauman,ou=Users,dc=local,dc=com');\n</code></pre>"},{"location":"docs/core/v3/model-api/#getrawattribute","title":"<code>getRawAttribute</code>","text":"<p>Get a model's raw value from an attribute:</p> <pre><code>$timestamp = $model-&gt;getRawAttribute('modifytimestamp');\n</code></pre>"},{"location":"docs/core/v3/model-api/#getrdn","title":"<code>getRdn</code>","text":"<p>Get the models Relative Distinguished Name:</p> <pre><code>$model = Model::find('cn=John Doe,dc=local,dc=com');\n\n// Returns: 'cn=John Doe'\n$model-&gt;getRdn();\n\n// Returns: 'cn=Steve Bauman'\n$model-&gt;getRdn('cn=Steve Bauman,ou=Users,dc=local,dc=com');\n</code></pre>"},{"location":"docs/core/v3/model-api/#getvisible","title":"<code>getVisible</code>","text":"<p>Get the attributes that should be visible when encoding a model using <code>json_encode</code>:</p> <pre><code>$model-&gt;addVisible('cn', 'sn');\n\n// Returns: ['cn', 'sn']\n$visibleAttributes = $model-&gt;getVisible();\n</code></pre>"},{"location":"docs/core/v3/model-api/#hasappended","title":"<code>hasAppended</code>","text":"<p>Determine if the model has an accessor attribute being appended:</p> <pre><code>$model-&gt;setAppends(['foo-bar']);\n\n// Returns: true\n$model-&gt;hasAppended('foo-bar');\n</code></pre>"},{"location":"docs/core/v3/model-api/#hasattribute","title":"<code>hasAttribute</code>","text":"<p>Determine if the model has an attribute with a value:</p> <pre><code>$model = Model::findBy('cn', 'Steve Bauman');\n\n// Returns: true\n$model-&gt;hasAttribute('cn');\n\n// Returns: false\n$model-&gt;hasAttribute('non-existent');\n</code></pre>"},{"location":"docs/core/v3/model-api/#hasgetmutator","title":"<code>hasGetMutator</code>","text":"<p>Determine if the model has a 'get' mutator for the given attribute:</p> <pre><code>class Entry extends Model\n{\n    public function getCnAttribute(array $values): mixed\n    {\n        // ...\n    }\n}\n\n$model = new Entry();\n\n// Returns: true\n$model-&gt;hasGetMutator('cn');\n</code></pre>"},{"location":"docs/core/v3/model-api/#hassetmutator","title":"<code>hasSetMutator</code>","text":"<p>Determine if the model has a 'set' mutator for the given attribute:</p> <pre><code>class Entry extends Model\n{\n    public function setCnAttribute($value): void\n    {\n        // ...\n    }\n}\n\n$model = new Entry();\n\n// Returns: true\n$model-&gt;hasSetAttribute('cn');\n</code></pre>"},{"location":"docs/core/v3/model-api/#inside","title":"<code>inside</code>","text":"<p>Set the container that the model should be created inside:</p> <p>Important: Calling <code>inside()</code> on an existing model will not perform any move / rename operation. Use move or rename instead.</p> <pre><code>$model = new Model();\n\n// ...\n\n$model-&gt;inside('ou=Container,dc=local,dc=com');\n\n$model-&gt;save();\n</code></pre>"},{"location":"docs/core/v3/model-api/#is","title":"<code>is</code>","text":"<p>Determine if a model is the same by comparing their Distinguished Names and connections:</p> <pre><code>// Returns: bool\n$model-&gt;is($another);\n</code></pre>"},{"location":"docs/core/v3/model-api/#isancestorof","title":"<code>isAncestorOf</code>","text":"<p>Determine if a model is an ancestor of another:</p> <pre><code>$user = User::find('cn=John Doe,ou=Accounting,ou=Accounts,dc=local,dc=com');\n$ou = OrganizationalUnit::find('ou=Accounts,dc=local,dc=com');\n\n// Returns: true\n$ou-&gt;isAncestorOf($user);\n</code></pre>"},{"location":"docs/core/v3/model-api/#ischildof","title":"<code>isChildOf</code>","text":"<p>Determine if a model is an immediate child of another:</p> <pre><code>$ou = OrganizationalUnit::find('ou=Accounts,dc=local,dc=com');\n$user = User::find('cn=John Doe,ou=Accounts,dc=local,dc=com');\n\n// Returns: true\n$user-&gt;isChildOf($ou);\n</code></pre>"},{"location":"docs/core/v3/model-api/#isdateattribute","title":"<code>isDateAttribute</code>","text":"<p>Determine if given attribute is a date attribute on the model:</p> <pre><code>class Entry extends Model\n{\n    protected array $dates = ['whenchanged' =&gt; 'windows'];\n}\n\n$model = new Entry();\n\n// Returns: true\n$model-&gt;isDateAttribute('whenchanged');\n</code></pre>"},{"location":"docs/core/v3/model-api/#isdescendantof","title":"<code>isDescendantOf</code>","text":"<p>Determine if a model is a descendent of another:</p> <pre><code>$ou = OrganizationalUnit::find('ou=Accounts,dc=local,dc=com');\n$user = User::find('cn=John Doe,ou=Accounting,ou=Accounts,dc=local,dc=com');\n\n// Returns: true\n$user-&gt;isDescendantOf($ou);\n</code></pre>"},{"location":"docs/core/v3/model-api/#isdirty","title":"<code>isDirty</code>","text":"<p>Determine if the given attribute has been changed:</p> <pre><code>$model = Model::findBy('cn', 'Steve Bauman');\n\n// Returns: false\n$model-&gt;isDirty('cn');\n\n$model-&gt;cn = 'Changed';\n\n// Returns: true\n$model-&gt;isDirty('cn');\n</code></pre>"},{"location":"docs/core/v3/model-api/#isparentof","title":"<code>isParentOf</code>","text":"<p>Determine if a model is an immediate parent of another:</p> <pre><code>$ou = OrganizationalUnit::find('ou=Accounts,dc=local,dc=com');\n$user = User::find('cn=John Doe,ou=Accounts,dc=local,dc=com');\n\n// Returns: true\n$ou-&gt;isParentOf($user);\n</code></pre>"},{"location":"docs/core/v3/model-api/#makehidden","title":"<code>makeHidden</code>","text":"<p>Make the given, typically visible, attributes hidden on the model:</p> <pre><code>class Entry extends Model\n{\n    protected array $visible = ['cn'];\n}\n\n// This will override the above:\n$model-&gt;makeHidden('cn');\n</code></pre>"},{"location":"docs/core/v3/model-api/#makevisible","title":"<code>makeVisible</code>","text":"<p>Make the given, typically hidden, attributes visible on the model:</p> <pre><code>class Entry extends Model\n{\n    protected array $hidden = ['cn'];\n}\n\n// This will override the above:\n$model-&gt;makeVisible('cn');\n</code></pre>"},{"location":"docs/core/v3/model-api/#move","title":"<code>move</code>","text":"<p>Move a model into the specified container:</p> <pre><code>$user = User::find('cn=Steve Bauman,dc=local,dc=com');\n\n$ou = OrganizationalUnit::find('ou=Office Users,dc=local,dc=com');\n\n$user-&gt;move($ou);\n\n// Returns: 'cn=Steve Bauman,ou=Office Users,dc=local,d=com'\n$user-&gt;getDn();\n</code></pre>"},{"location":"docs/core/v3/model-api/#newbatchmodification","title":"<code>newBatchModification</code>","text":"<p>Create a new <code>LdapRecord\\Models\\BatchModification</code> instance:</p> <pre><code>// Returns instance of: BatchModification\n$mod = $model-&gt;newBatchModification(\n    'cn', LDAP_MODIFY_BATCH_ADD, ['Steve Bauman']\n);\n</code></pre>"},{"location":"docs/core/v3/model-api/#newcollection","title":"<code>newCollection</code>","text":"<p>Create a new <code>Tightenco\\Collect\\Support\\Collection</code>:</p> <pre><code>$collection = $model-&gt;newCollection($items = []);\n</code></pre>"},{"location":"docs/core/v3/model-api/#newinstance","title":"<code>newInstance</code>","text":"<p>Create a new model instance:</p> <pre><code>$model = Model::findByAnr('sbauman');\n\n$new = $model-&gt;newInstance();\n</code></pre>"},{"location":"docs/core/v3/model-api/#newquery","title":"<code>newQuery</code>","text":"<p>Create a new model query:</p> <p>Important: Global scopes and object classes will be applied to this query.</p> <pre><code>$results = $model-&gt;newQuery()-&gt;where('cn', 'contains', 'Steve')-&gt;get();\n</code></pre>"},{"location":"docs/core/v3/model-api/#newquerywithoutscopes","title":"<code>newQueryWithoutScopes</code>","text":"<p>Create a new model query without global scopes:</p> <p>Important: Global scopes and object classes will not be applied to this query.</p> <pre><code>$results = $model-&gt;newQueryWithoutScopes()-&gt;get();\n</code></pre>"},{"location":"docs/core/v3/model-api/#refresh","title":"<code>refresh</code>","text":"<p>Refresh a models attributes by re-retrieving them from your LDAP directory.</p> <p>This will affect the current model instance:</p> <pre><code>$model-&gt;refresh();\n</code></pre>"},{"location":"docs/core/v3/model-api/#removeattribute","title":"<code>removeAttribute</code>","text":"<p>Immediately remove an attribute on a model.</p> <p>Performs an <code>ldap_mod_del</code> under the hood.</p> <pre><code>// Remove one value from a single-value attribute:\n$model-&gt;removeAttribute('telephonenumber');\n\n// Remove all values from a multi-value attribute:\n$model-&gt;removeAttribute('memberuid');\n</code></pre>"},{"location":"docs/core/v3/model-api/#removeattributes","title":"<code>removeAttributes</code>","text":"<p>Immediately remove multiple attributes on a model.</p> <p>Performs an <code>ldap_mod_del</code> under the hood.</p> <pre><code>// Removing one value from an attribute:\n$model-&gt;removeAttribute([\"memberuid\" =&gt; \"jdoe\"]);\n\n// Removing multiple values from an attribute:\n$model-&gt;removeAttribute([\n    \"memberuid\" =&gt; [\"jdoe\", \"jsmith\"]\n]);\n\n// Removing all values from an attribute:\n$model-&gt;removeAttribute([\"memberuid\" =&gt; []]);\n</code></pre>"},{"location":"docs/core/v3/model-api/#rename","title":"<code>rename</code>","text":"<p>Rename a model and keep its container location:</p> <p>Important: When renaming is successful, the models distinguished name is automatically updated to reflect its new name in the directory, so you may run further operations on it during the same request.</p> <pre><code>$user = Model::find('cn=John Doe,dc=local,dc=com');\n\n$user-&gt;rename('Jane Doe');\n\n// Returns: 'cn=Jane Doe,dc=local,dc=com'\n$user-&gt;getDn();\n</code></pre>"},{"location":"docs/core/v3/model-api/#replaceattribute","title":"<code>replaceAttribute</code>","text":"<p>Immediately replaces the entire attribute value on the model.</p> <p>Performs an <code>ldap_mod_replace</code> under the hood.</p> <pre><code>$model-&gt;updateAttribute('proxyaddresses', ['foo', 'bar']);\n</code></pre>"},{"location":"docs/core/v3/model-api/#save","title":"<code>save</code>","text":"<p>Persist the new or existing model to the directory:</p> <pre><code>// Save a new model:\n$model = new Model(['cn' =&gt; 'John Doe']);\n\n$model-&gt;save();\n\n// Updating an existing model:\n$model = Model::findBy('cn', 'John Doe');\n\n$model-&gt;cn = 'Jane Doe';\n\n$model-&gt;save();\n</code></pre> <p>You may also pass an array of attributes to persist to your LDAP directory:</p> <pre><code>$model-&gt;save(['cn' =&gt; 'Steve Bauman']);\n</code></pre>"},{"location":"docs/core/v3/model-api/#setappends","title":"<code>setAppends</code>","text":"<p>Set the accessors to append to model arrays:</p> <pre><code>$model-&gt;setAppends(['foo-bar']);\n\n// Displays:\n// [\n//     'foo-bar',\n// ]\nvar_dump($model-&gt;getAppends());\n</code></pre>"},{"location":"docs/core/v3/model-api/#setattribute","title":"<code>setAttribute</code>","text":"<p>Set the value of an existing or non-existing attribute:</p> <pre><code>$model-&gt;setAttribute('attribute', 'value');\n\n$model-&gt;setAttribute('attribute', ['foo', 'bar']);\n</code></pre>"},{"location":"docs/core/v3/model-api/#setconnection","title":"<code>setConnection</code>","text":"<p>Set the name of the connection for the model to use:</p> <pre><code>$model = new Model();\n\n// ...\n\n$model-&gt;setConnection('domain-b');\n\n// Model will be saved to 'domain-b'\n$model-&gt;save();\n</code></pre>"},{"location":"docs/core/v3/model-api/#setdateformat","title":"<code>setDateFormat</code>","text":"<p>Set the date format to use when serializing LDAP dates:</p> <pre><code>$model = Model::findByAnr('sbauman');\n\n$model-&gt;setDateFormat('Y-m-d H:i');\n\n$attributes = json_encode($model);\n</code></pre>"},{"location":"docs/core/v3/model-api/#setdn","title":"<code>setDn</code>","text":"<p>Set the Distinguished Name of the model to be created with:</p> <pre><code>$model = new Model();\n\n$model-&gt;setDn('cn=John Doe,dc=local,dc=com');\n\n$model-&gt;save();\n</code></pre>"},{"location":"docs/core/v3/model-api/#setfirstattribute","title":"<code>setFirstAttribute</code>","text":"<p>Set the first value of an existing or non-existing attribute:</p> <pre><code>$model = new Model();\n\n$model-&gt;setFirstAttribute('cn', 'John Doe');\n\n// Returns ['cn' =&gt; ['John Doe']]\n$model-&gt;getAttributes();\n\n$model-&gt;proxyaddresses = ['foo', 'bar'];\n\n// Overwrites 'foo' with 'baz':\n$model-&gt;setFirstAttribute('proxyaddresses', ['baz']);\n</code></pre>"},{"location":"docs/core/v3/model-api/#sethidden","title":"<code>setHidden</code>","text":"<p>Clear defined hidden attributes and set the attributes that should be hidden during serialization:</p> <pre><code>$model-&gt;setHidden(['cn', 'sn']);\n\n// Attributes 'cn' and 'sn' will be removed:\n$attributes = json_encode($model);\n</code></pre>"},{"location":"docs/core/v3/model-api/#setmodifications","title":"<code>setModifications</code>","text":"<p>Set the models batch modifications to be processed upon save:</p> <pre><code>$mods = [\n    [\n        'attrib'  =&gt; 'telephoneNumber',\n        'modtype' =&gt; LDAP_MODIFY_BATCH_ADD,\n        'values'  =&gt; ['+1 555 555 1717'],\n    ]\n];\n\n$model-&gt;setModifications($mods);\n\n$model-&gt;save();\n</code></pre>"},{"location":"docs/core/v3/model-api/#setvisible","title":"<code>setVisible</code>","text":"<p>Clear defined visible attributes and set the attributes that should be visible during serialization:</p> <pre><code>$model-&gt;setVisible(['cn', 'sn']);\n\n// Only attributes 'cn' and 'sn' will be included:\n$attributes = json_encode($model);\n</code></pre>"},{"location":"docs/core/v3/model-api/#siblings","title":"<code>siblings</code>","text":"<p>Create a new query to retrieve a models siblings:</p> <p>Important: The existing model instance will be included in the query results.</p> <pre><code>$siblings = $model-&gt;siblings()-&gt;get();\n</code></pre>"},{"location":"docs/core/v3/model-api/#update","title":"<code>update</code>","text":"<p>Persist the changes of a model to the LDAP directory.</p> <p>Important: The save method should be used instead of <code>update</code> to persist new or existing models. If the model does not exist in the directory, an exception will be thrown.</p> <pre><code>$model-&gt;cn = 'John Doe';\n\n$model-&gt;update();\n</code></pre> <p>You may also provide an array of attributes to persist to your LDAP directory:</p> <pre><code>$model-&gt;update(['cn' =&gt; 'John Doe']);\n</code></pre>"},{"location":"docs/core/v3/model-api/#updateattribute","title":"<code>updateAttribute</code>","text":"<p>This method was renamed to replaceAttribute in v3.0.</p>"},{"location":"docs/core/v3/model-mutators/","title":"Models: Accessors &amp; Mutators","text":""},{"location":"docs/core/v3/model-mutators/#introduction","title":"Introduction","text":"<p>Accessors and mutators allow you to modify attribute values when you retrieve or set them on model instances. If you'd ever used Laravel accessors or mutators, you'll feel right at home.</p>"},{"location":"docs/core/v3/model-mutators/#accessors-mutators","title":"Accessors &amp; Mutators","text":""},{"location":"docs/core/v3/model-mutators/#defining-an-accessor","title":"Defining An Accessor","text":"<p>For an example, lets say we are working with Active Directory and we want to encode the <code>thumbnailPhoto</code> attribute whenever we retrieve it from our <code>User</code> model.</p> <p>To define an accessor for this attribute, we define a method named <code>getThumbnailphotoAttribute()</code>:</p> <pre><code>&lt;?php\n\nuse LdapRecord\\Models\\Model;\n\nclass User extends Model\n{\n    public function getThumbnailphotoAttribute(array $value): string\n    {\n        // Due to LDAP's multi-valued nature, all values will be\n        // contained inside of an array. We will attempt to\n        // retrieve the first one, or supply a default.\n        $data = $value[0] ?? file_get_contents('images/default_photo.jpg');\n\n        $image = base64_encode($data);\n\n        $mime = 'image/jpeg';\n\n        if (function_exists('finfo_open')) {\n            $finfo = finfo_open();\n\n            $mime = finfo_buffer($finfo, $data, FILEINFO_MIME_TYPE);\n\n            return \"data:$mime;base64,$image\";\n        }\n\n        return \"data:$mime;base64,$image\";\n    }\n}\n</code></pre> <p>As you can see from the above, the attribute name we want to create an accessor for, must be between <code>get</code> and <code>Attribute</code>.</p> <p>The casing of <code>get</code> and <code>Attribute</code> are very important. This casing difference is how LdapRecord detects accessor and mutator methods.</p> <p>If your attribute contains a hyphen, use must use alternate casing to indicate this. For example, lets create an accessor for the <code>apple-user-homeurl</code> attribute:</p> <pre><code>&lt;?php\n\nuse LdapRecord\\Models\\Model;\n\nclass User extends Model\n{\n    public function getAppleUserHomeurlAttribute(array $value): mixed\n    {\n        // Do something with its value.\n        return $value;\n    }\n}\n</code></pre> <p>As you can see, alternate casing indicates to LdapRecord that the attribute we are looking for contains hyphens.</p>"},{"location":"docs/core/v3/model-mutators/#defining-a-mutator","title":"Defining A Mutator","text":"<p>A mutator does the opposite of an accessor. A mutator is a function you define that accepts the value of the attribute you are setting so you can transform it before it is set onto the model.</p> <p>To define a mutator, we use the above accessor syntax with <code>set</code> instead of <code>get</code>.</p> <p>For example, let's define a <code>unicodepwd</code> mutator that automatically encodes a password by setting the attribute:</p> <pre><code>&lt;?php\n\nuse LdapRecord\\Utilities;\nuse LdapRecord\\Models\\Model;\n\nclass User extends Model\n{\n    public function setUnicodepwdAttribute(string $password): void\n    {\n        $this-&gt;attributes['unicodepwd'] = [Utilities::encodePassword($password)];\n    }\n}\n</code></pre> <p>Now once we set the attribute, it will automatically encode the password we are setting on the <code>User</code> model:</p> <pre><code>$user = new User();\n\n$user-&gt;unicodepwd = 'secret';\n</code></pre>"},{"location":"docs/core/v3/model-mutators/#date-mutators","title":"Date Mutators","text":"<p>By default, LdapRecord will convert the attributes <code>createtimestamp</code> and <code>modifytimestamp</code> to instances of Carbon.</p> <p>If you extend from <code>ActiveDirectory</code> models, the attributes <code>whenchanged</code> and <code>whencreated</code> will be converted instead.</p> <p>When you define an attribute as a date, you can set its value to an instance of <code>DateTime</code> / <code>Carbon</code> instance, a UNIX timestamp, or a date string (<code>Y-m-d</code>). Upon saving your model, these will be converted properly to be stored in your directory.</p> <p>To define a mutator for an attribute that contains a timestamp, we must set the <code>$dates</code> property on the model. However, since LDAP directories have different timestamp formats for some attributes, we must tell LdapRecord what kind of format to use for proper conversion.</p> <p>For example, let's define a date mutator for the <code>accountexpires</code> attribute that exists on Active Directory. To do so, we must set the <code>$dates</code> property to a key / value pair, where the key is the attribute that contains the timestamp and the value is the type of LDAP format to convert to and from:</p> <pre><code>&lt;?php\n\nuse LdapRecord\\Models\\Model;\n\nclass User extends Model\n{\n    protected array $dates = [\n        'accountexpires' =&gt; 'windows-int',\n    ];\n}\n</code></pre> <p>Now lets have our user's account expire at the same time tomorrow:</p> <pre><code>$user = User::find('cn=John Doe,dc=local,dc=com');\n\n$user-&gt;accountexpires = new \\DateTime('+1 day');\n\n$user-&gt;save();\n</code></pre> <p>Once we've saved the model, the attribute will now automatically be converted to a Carbon instance so you can use any of Carbon's methods on the attribute:</p> <pre><code>$user = User::find('cn=John Doe,dc=local,dc=com');\n\nif ($user-&gt;accountexpires-&gt;isPast()) {\n    // The user account is expired.\n}\n</code></pre>"},{"location":"docs/core/v3/model-mutators/#available-types","title":"Available Types","text":"<p>Currently, there are 3 built-in date mutator types. They are:</p> <ul> <li><code>ldap</code></li> <li><code>windows</code></li> <li><code>windows-int</code></li> </ul>"},{"location":"docs/core/v3/model-mutators/#ldap-type","title":"LDAP Type","text":"<p>The <code>ldap</code> type is the most common format for LDAP timestamps - outside of Active Directory. This format converts LDAP timestamps in the format of <code>YYYYMMDDHHMMSST</code>. T is the time zone which is usually 'Z' (Zulu Time Zone = UTC/GMT).</p>"},{"location":"docs/core/v3/model-mutators/#windows-type","title":"Windows Type","text":"<p>The <code>windows</code> type is similar to the <code>ldap</code> type, however it differs slightly so it requires its own conversion type. Its timestamp is in the format of <code>YYYYMMDDHHMMSS.0T</code>. T is the time zone which is usually 'Z' (Zulu Time Zone = UTC/GMT).</p>"},{"location":"docs/core/v3/model-mutators/#windows-integer-type","title":"Windows Integer Type","text":"<p>The <code>windows-int</code> type handles the 18-digit Active Directory timestamp format, also named 'Windows NT time format', 'Win32 FILETIME or SYSTEMTIME' or NTFS file time. An example of this would be the <code>accountexpires</code> attribute that exists on users:</p> <pre><code>132131246410000000\n</code></pre> <p>Which equals:</p> <pre><code>Monday, September 16, 2019 4:24:01 PM\n</code></pre>"},{"location":"docs/core/v3/model-mutators/#attribute-casting","title":"Attribute Casting","text":"<p>Similarly with Laravel's Eloquent, the <code>$casts</code> property on your model provides a convenient method of converting attributes to common data types. The <code>$casts</code> property should be an array where the key is the name of the attribute being cast and the value is the type you wish to cast the column to.</p> <p>The supported cast types are:</p> <ul> <li><code>integer</code></li> <li><code>real</code></li> <li><code>float</code></li> <li><code>double</code></li> <li><code>decimal:&lt;digits&gt;</code></li> <li><code>string</code></li> <li><code>boolean</code></li> <li><code>object</code></li> <li><code>array</code></li> <li><code>collection</code></li> <li><code>datetime:&lt;ldap/windows/windows-int&gt;</code></li> </ul> <p>To demonstrate attribute casting, let's cast the <code>msExchHideFromAddressList</code> Active Directory attribute, which determines whether a user account is shown in the Global Address List in Outlook.</p> <p>This attribute is stored as a string in Active Directory, with the value <code>TRUE</code> or <code>FALSE</code>.</p> <pre><code>namespace App\\Models\\Ldap;\n\nuse LdapRecord\\Models\\ActiveDirectory\\User as BaseUser;\n\nclass User extends BaseUser\n{\n    protected array $casts = [\n        'msExchHideFromAddressList' =&gt; 'boolean',\n    ];\n}\n</code></pre> <p>Then, we can utilize it when we retrieve users from our directory:</p> <pre><code>$user = User::find('cn=John Doe,dc=local,dc=com');\n\nif ($user-&gt;msExchHideFromAddressList) {\n    // This user is being hidden from the Global Address list.\n}\n</code></pre>"},{"location":"docs/core/v3/model-mutators/#appending-accessors","title":"Appending Accessors","text":"<p>Ported directly from Laravel's Eloquent, the <code>$appends</code> array property can be set directly on the model class to add an accessor's value to the models array form.</p> <p>Important: LDAP attributes cannot contain underscores (<code>_</code>). Therefore, all accessors that are PascalCased must be defined in their hyphenated format, and will appear in their hyphenated format in the model's array form.</p> <pre><code>namespace App\\Models\\Ldap;\n\nuse LdapRecord\\Models\\ActiveDirectory\\User as BaseUser;\n\nclass User extends BaseUser\n{\n    protected array $appends = ['full-name'];\n\n    public function getFullNameAttribute(): string\n    {\n        return 'John Doe';\n    }\n}\n</code></pre> <pre><code>$user = User::find('cn=john,dc=local,dc=com');\n\n// Displays: \"John Doe\"\necho $user-&gt;full_name;\n\n// Displays: \"{\"full-name\":[\"John Doe\"]}\"\necho json_encode($user);\n</code></pre>"},{"location":"docs/core/v3/model-relationships/","title":"Models: Relationships","text":""},{"location":"docs/core/v3/model-relationships/#introduction","title":"Introduction","text":"<p>LDAP objects often contain attributes that reference other LDAP objects in your directory. An example of this would be the <code>member</code> attribute on LDAP groups that contain a list of distinguished names whom are members of the group.</p> <p>Using LdapRecord relationships, we can define what models contain references to other objects and easily retrieve the referenced models to perform operations upon. There are several relationship types that LdapRecord supports:</p> Relationship Type Has One Indicates a one-to-one relation, such as a user having one manager Has Many Indicates a one-to-many relation, such as a user having many groups Has Many (Inverse) Indicates an inverse one-to-many relation, such as a group having many members Has Many In Indicates a one-to-many relation, but with virtual attributes that cannot be modified"},{"location":"docs/core/v3/model-relationships/#defining-relationships","title":"Defining Relationships","text":""},{"location":"docs/core/v3/model-relationships/#has-one","title":"Has One","text":"<p>A has one relationship is a basic relationship to work with. An example of a \"has one\" relationship would be a <code>User</code> having one <code>manager</code>. To define this relationship, we place a <code>manager()</code> method on our <code>User</code> model, and call the <code>hasOne()</code> method and return the result:</p> <pre><code>&lt;?php\n\nuse LdapRecord\\Models\\Model;\n\nuse LdapRecord\\Models\\Relations\\HasOne;\n\nclass User extends Model\n{\n    /**\n     * Retrieve the manager of the current user.\n     */\n    public function manager(): HasOne\n    {\n        return $this-&gt;hasOne(User::class, 'manager');\n    }\n}\n</code></pre> <p>The first argument that is passed into the relation is the name of the related model. The second is the LDAP attribute on the current user that contains the relationships distinguished name.</p> <p>If the relationships attribute you are defining does not contain a distinguished name, you can alter this and define a foreign key using the third parameter. For example, if our manager attribute actually contains a <code>uid</code>, we can change this so the related model is retrieved by a UID, instead of a distinguished name:</p> <pre><code>&lt;?php\n\nuse LdapRecord\\Models\\Model;\n\nuse LdapRecord\\Models\\Relations\\HasOne;\n\nclass User extends Model\n{\n    /**\n     * Retrieve the manager of the current user.\n     */\n    public function manager(): HasOne\n    {\n        return $this-&gt;hasOne(User::class, 'manager', 'uid');\n    }\n}\n</code></pre>"},{"location":"docs/core/v3/model-relationships/#has-many","title":"Has Many","text":"<p>Defining a has many relationship indicates that the model can be apart of many of the given model.</p> <p>For example, a <code>User</code> \"has many\" <code>groups</code>:</p> <pre><code>&lt;?php\n\nuse LdapRecord\\Models\\Model;\n\nuse LdapRecord\\Models\\Relations\\HasMany;\n\nclass User extends Model\n{\n    /**\n     * Retrieve the groups the user is apart of.\n     */\n    public function groups(): HasMany\n    {\n        return $this-&gt;hasMany(Group::class, 'member');\n    }\n}\n</code></pre> <p>In the above example, LdapRecord will construct a query to locate all of the groups that the user is apart of using the users distinguished name. This users distinguished name will automatically be escaped to be able to properly locate all of the groups.</p> <p>For example, this is the query filter that will be used in the search:</p> <pre><code>(member=cn\\3dJohn Doe\\2cdc\\3dacme\\2cdc\\3dorg)\n</code></pre> <p>If you're using an alternate LDAP server or a different attribute to locate group membership, you may change the relation key. For example, you may want to use <code>uniquemember</code> for this relationship:</p> <pre><code>/**\n * Retrieve the groups the user is apart of.\n */\npublic function groups(): HasMany\n{\n    return $this-&gt;hasMany(Group::class, 'uniquemember');\n}\n</code></pre> <p>You may also define a foreign key in third parameter if the attribute you are using is not a distinguished name.</p>"},{"location":"docs/core/v3/model-relationships/#has-many-inverse","title":"Has Many (Inverse)","text":"<p>Now that we have set up a <code>User</code> model that can access of their groups, lets define a <code>Group</code> model to be able to access its members.</p> <p>Since an LDAP group can contain various types of objects (such as contacts, users, and other groups), we must pass in an array of models that are potential members of the group. This allows the relationship to properly create the models that are returned from the query results.</p> <p>LdapRecord will return plain <code>Entry</code> models when it cannot locate the correct model in the given array.</p> <pre><code>&lt;?php\n\nuse LdapRecord\\Models\\Model;\n\nuse LdapRecord\\Models\\Relations\\HasMany;\n\nclass Group extends Model\n{\n    /**\n     * Retrieve the members of the group.\n     */\n    public function members(): HasMany\n    {\n        return $this-&gt;hasMany([\n            Group::class, User::class, Contact::class\n        ], 'memberof')-&gt;using($this, 'member');\n    }\n}\n</code></pre> <p>For brevity, we have not shown the creation of the <code>Contact</code> model.</p> <p>You can see from the above example, we have passed an array of models that are possible members of the group. The difference of this definition is the usage of the <code>using()</code> method.</p> <p>Since LDAP does not offer bi-directional relationships, we must add the <code>using()</code> method. This method defines which model and attribute to use for attaching and detaching related models.</p> <p>In this case, we pass in <code>$this</code> to indicate that the current model instance (the <code>Group</code>) contains the <code>member</code> attribute to add and remove models you pass into the <code>attach()</code> and <code>detach()</code> methods.</p> <p>This method is paramount to be able to properly utilize this relationship.</p> <p>When querying the above relationship, LdapRecord will construct the following filter:</p> <pre><code>(memberof=cn\\3dAccounting\\2cdc\\3dacme\\2cdc\\3dorg)\n</code></pre>"},{"location":"docs/core/v3/model-relationships/#has-many-in","title":"Has Many In","text":"<p>The has many in relationship allows you to retrieve related models from the given parent models virtual attribute such as <code>memberof</code>.</p> <p>Since this relationship uses virtual attributes, you cannot use <code>attach()</code> or <code>detach()</code> methods. This also means that for each entry that is contained in the virtual attribute, they will be queried for individually which can be very resource intensive depending on the group size.</p> <p>Lets define a <code>groups()</code> relationship that utilizes the <code>hasManyIn()</code> method:</p> <pre><code>&lt;?php\n\nuse LdapRecord\\Models\\Model;\n\nuse LdapRecord\\Models\\Relations\\HasManyIn;\n\nclass User extends Model\n{\n    public function groups(): HasManyIn\n    {\n        return $this-&gt;hasManyIn(Group::class, 'memberof');\n    }\n}\n</code></pre>"},{"location":"docs/core/v3/model-relationships/#important-note-for-querying","title":"Important Note for Querying","text":"<p>When using the above relationship from query results, you must ensure you select the LDAP property you have defined as the foreign key in the relationship. This attribute contains the values needed to locate the related models.</p> <p>For example, the following relationship query below will return no results because we have explicitly requested attributes excluding <code>memberof</code>:</p> <pre><code>// Selecting only the 'cn', and 'sn' attributes:\n$user = User::select(['cn', 'sn'])-&gt;find('cn=John Doe,dc=local,dc=com');\n\n// Returns an empty collection.\n$groups = $user-&gt;groups()-&gt;get();\n</code></pre>"},{"location":"docs/core/v3/model-relationships/#returning-only-matching-models","title":"Returning Only Matching Models","text":"<p>When querying relationships on your LdapRecord models, you may receive plain <code>LdapRecord\\Models\\Entry</code> instances if none of the models you have provided in the relationship definition match the result's object classes.</p> <p>For example, an LDAP group may contain users, as well as other groups. To explicitly return only users, you may call the method <code>onlyRelated()</code> to filter the underlying query to match only <code>User</code> instances:</p> <pre><code>class Group extends Model\n{\n    public function users(): HasMany\n    {\n        return $this-&gt;hasMany(User::class, 'memberof')-&gt;onlyRelated();\n    }\n}\n</code></pre>"},{"location":"docs/core/v3/model-relationships/#querying-relationships","title":"Querying Relationships","text":"<p>LdapRecord relationships also serve as query builders. This means you can chain query builder methods onto relationship methods to add constraints to the relationship query prior to retrieving the results from your directory.</p> <p>For example, lets define a <code>User</code> model that can be a member of many groups:</p> <pre><code>&lt;?php\n\nuse App\\Group;\nuse LdapRecord\\Models\\Model;\nuse LdapRecord\\Models\\Relations\\HasMany;\n\nclass User extends Model\n{\n    /**\n     * Retrieve groups that the current user is apart of.\n     */\n    public function groups(): HasMany\n    {\n        return $this-&gt;hasMany(Group::class, 'member');\n    }\n}\n</code></pre> <p>Now, lets retrieve a user's groups, but only return those groups that have a common name starting with 'Admin':</p> <pre><code>$user = User::find('cn=John Doe,dc=local,dc=com');\n\n$adminGroups = $user-&gt;groups()-&gt;whereStartsWith('cn', 'Admin')-&gt;get();\n</code></pre> <p>By default, querying relations will not include recursive results. More on this below.</p>"},{"location":"docs/core/v3/model-relationships/#recursive-queries","title":"Recursive Queries","text":"<p>To request all of the relationships results, such as nested groups in groups, call the <code>recursive()</code> method, prior to retrieving results via <code>get()</code>:</p> <pre><code>$user = User::find('cn=John Doe,dc=local,dc=com');\n\n$allGroups = $user-&gt;groups()-&gt;recursive()-&gt;get();\n</code></pre> <p>Be careful when calling <code>recursive</code> on large sets of group memberships. If you are not careful, you could run out of memory due to thousands of models being returned.</p> <p>The <code>recursive</code> method sets a flag on the LdapRecord relationship indicating you would like recursive results included (groups of groups).</p> <p>Recursive results are gathered by first retrieving the groups that the user is a member of, then retrieving the groups that are members of each resulting parent group. This means an LDAP search query is executed for each group that your user is apart of.</p> <p>Circular group dependencies are rejected automatically to prevent infinite looping.</p>"},{"location":"docs/core/v3/model-relationships/#attaching-detatching-relationships","title":"Attaching &amp; Detatching Relationships","text":"<p>Using relationships you define, you can easily attach and detach related models from each  other. For example, you may want to attach a <code>Group</code> to a <code>User</code>, or vice-versa.</p>"},{"location":"docs/core/v3/model-relationships/#attaching","title":"Attaching","text":"<p>Using the above relationship examples, lets walk through attaching a user to a group:</p> <pre><code>$user = User::find('cn=John Doe,dc=local,dc=com');\n$group = Group::find('cn=Accounting,dc=local,dc=com');\n\n// Attaching a group to a user:\n$user-&gt;groups()-&gt;attach($group);\n\n// Attaching a user to a group:\n$group-&gt;members()-&gt;attach($user);\n</code></pre> <p>You may also use the <code>attach()</code> method to attach many models at once.</p> <p>For this example, let's say we have an organizational unit that contains groups all new users must be apart of:</p> <pre><code>$ou = OrganizationalUnit::find('ou=Groups,dc=local,dc=com');\n\n$groups = Group::in($ou)-&gt;get();\n\n$user = User::find('cn=John Doe,ou=Users,dc=local,dc=com');\n\n$user-&gt;groups()-&gt;attach($groups);\n</code></pre> <p>You may also pass in raw distinguished names:</p> <pre><code>$user = User::find('cn=John Doe,ou=Users,dc=local,dc=com');\n\n$user-&gt;groups()-&gt;attach('cn=Accounting,dc=local,dc=com');\n\n// Multiple groups:\n\n$user-&gt;groups()-&gt;attach([\n    'cn=Office,dc=local,dc=com',\n    'cn=Accounting,dc=local,dc=com',\n]);\n</code></pre> <p>Passing in multiple entries into the <code>attach()</code> or <code>detach()</code> method will send an  <code>ldap_mod_add</code> or <code>ldap_mod_delete</code> request for each entry. If you have a large  set of entries, consider using <code>associate()</code> or <code>dissociate()</code> instead.</p>"},{"location":"docs/core/v3/model-relationships/#detach","title":"Detach","text":"<p>Using the above relationship examples, lets walk through detaching a user from a group:</p> <pre><code>$user = User::find('cn=John Doe,dc=local,dc=com');\n\n// Retrieve the first group that the user is apart of:\n$group = $user-&gt;groups()-&gt;get()-&gt;first();\n\n$user-&gt;groups()-&gt;detach($group);\n</code></pre> <p>You may also want to detach a user from all groups. You may accomplish this by using the <code>detachAll()</code> method:</p> <pre><code>$user = User::find('cn=John Doe,ou=Users,dc=local,dc=com');\n\n$user-&gt;groups()-&gt;detachAll();\n</code></pre>"},{"location":"docs/core/v3/model-relationships/#detach-all-or-delete-parent","title":"Detach All Or Delete Parent","text":"<p>In some LDAP distributions such as OpenLDAP, some group types (such as <code>groupOfNames</code> or <code>groupOfUniqueNames</code>) must have at least member inside to exist. In this circumstance, detaching the last member of the group will throw an exception.</p> <p>If you would like the group to be deleted in this scenario, you may call the method <code>detachOrDeleteParent()</code>:</p> <pre><code>$group = Group::find('cn=Accounting,dc=local,dc=com');\n$user = User::find('cn=John Doe,dc=local,dc=com');\n\n// If the user is the last member of the group,\n// the group will be deleted, otherwise the\n// given user will be detached normally.\n$group-&gt;members()-&gt;detachOrDeleteParent($user);\n\nif (! $group-&gt;exists) {\n    // Group was deleted.\n}\n</code></pre>"},{"location":"docs/core/v3/model-relationships/#associate","title":"Associate","text":"<p>While calling <code>attach()</code> and <code>detach()</code> methods update the relationship immediately, you may want to batch these updates instead if you're attaching or detaching many models at  once. In this circumstance, <code>associate()</code> or <code>dissociate()</code> can be used to push or  pull a model from a relationship, which you can later call <code>save()</code> upon.</p> <pre><code>$group = Group::find('cn=Accounting,dc=local,dc=com');\n\n$users = User::in('ou=Office,dc=local,dc=com')-&gt;get();\n\n$group-&gt;members()-&gt;associate($users);\n\n$group-&gt;save();\n</code></pre> <p>You may also associate single models:</p> <pre><code>$group-&gt;members()-&gt;associate(\n    User::find('cn=John Doe,dc=local,dc=com')\n);\n\n$group-&gt;save();\n</code></pre> <p>Or use distinguished names:</p> <pre><code>$group-&gt;members()-&gt;associate([\n    'cn=John Doe,dc=local,dc=com',\n    'cn=Jane Doe,dc=local,dc=com',\n]);\n\n$group-&gt;save();\n</code></pre> <p>It is imperitive to understand which model you must call <code>save()</code> upon on  after an  association. If you are calling a relationship that has not been set up as the inverse of another, then you will need to call <code>save()</code> on the model you are passing into the <code>associate()</code> method. Here is an example:</p> <pre><code>$user = User::find('cn=John Doe,dc=local,dc=com');\n\n$group = Group::find('cn=Accounting,dc=local,dc=com');\n\n// Since the group contains the 'member' attribute that\n// this relationship is pushing into, we must call\n// 'save' on the group, instead of the user.\n$user-&gt;groups()-&gt;associate($group);\n\n$group-&gt;save();\n</code></pre>"},{"location":"docs/core/v3/model-relationships/#dissociate-dissasociate","title":"Dissociate / Dissasociate","text":"<p>To dissociate a model from a relationship, you may use the <code>dissociate()</code> method:</p> <pre><code>$group = Group::find('cn=Accounting,dc=local,dc=com');\n\n$users = $group-&gt;members()-&gt;whereEndsWith('mail', '@foo.com')-&gt;get();\n\n$group-&gt;members()-&gt;dissociate($users);\n\n$group-&gt;save();\n</code></pre> <p>Important: As mentioned above, it is imperitive to understand which model  you must call <code>save()</code> upon depending on the relationship you are calling.</p> <p>Similary to the above <code>associate()</code> method, you may also dissociate single models:</p> <pre><code>$group-&gt;members()-&gt;associate(\n    User::find('cn=John Doe,dc=local,dc=com')\n);\n\n$group-&gt;save();\n</code></pre> <p>Or use distinguished names:</p> <pre><code>$group-&gt;members()-&gt;dissociate([\n    'cn=John Doe,dc=local,dc=com',\n    'cn=Jane Doe,dc=local,dc=com',\n]);\n\n$group-&gt;save();\n</code></pre>"},{"location":"docs/core/v3/model-relationships/#checking-relationship-existence","title":"Checking Relationship Existence","text":"<p>To check if a model exists inside a relationship, use the <code>exists()</code> relationship method.</p> <p>If you're using Active Directory and are simply looking to check if a user  is inside a particular group, utilize the <code>Model::whereMemberOf</code> method that is available on all Active Directory models to locate users whom are members of that group.</p> <p>For example, lets determine if a <code>User</code> is a member of a <code>Group</code>:</p> <pre><code>$user = User::find('cn=John Doe,dc=local,dc=com');\n$group = Group::find('cn=Accounting,dc=local,dc=com');\n\nif ($user-&gt;groups()-&gt;exists($group)) {\n    // This user is a member of the 'Accounting' group.\n}\n</code></pre> <p>This method can be used on all relationship types.</p> <p>For another example, lets determine if a <code>User</code> is a <code>manager</code> of another:</p> <pre><code>$user = User::find('cn=John Doe,dc=local,dc=com');\n$manager = User::find('cn=Jane Doe,dc=local,dc=com');\n\nif ($user-&gt;manager()-&gt;exists($manager)) {\n    // Jane Doe is John Doe's manager.\n}\n</code></pre> <p>You can also determine if the model has any groups or members by simply calling <code>exists()</code>:</p> <pre><code>$user = User::find('cn=John Doe,dc=local,dc=com');\n\nif ($user-&gt;manager()-&gt;exists()) {\n    // This user has a manager.\n}\n\nif ($user-&gt;groups()-&gt;exists()) {\n    // This user is a member of at least one group.\n}\n</code></pre>"},{"location":"docs/core/v3/model-scopes/","title":"Models: Scopes","text":""},{"location":"docs/core/v3/model-scopes/#introduction","title":"Introduction","text":"<p>Model \"scoping\" allows you to define functions or classes that dynamically add filters to a model query. There are two types of scopes you may add to models, and there are benefits and drawbacks to each type:</p> <p>Local Scopes:</p> <ul> <li>Applied conditionally on model queries, being called explicitly</li> <li>Can accept parameters</li> </ul> <p>Global Scopes:</p> <ul> <li>Applied globally on model queries</li> <li>Cannot accept parameters</li> </ul>"},{"location":"docs/core/v3/model-scopes/#local-query-scopes","title":"Local Query Scopes","text":""},{"location":"docs/core/v3/model-scopes/#creating-a-local-scope","title":"Creating a local scope","text":"<p>Local scopes allow you to add constraints to LDAP queries created from models dynamically.</p> <p>To define a local scope, create a new <code>public</code> method, prefix it with <code>scope</code>, followed by the name you would like to call the scope by.</p> <p>Local scopes must also accept the <code>LdapRecord\\Query\\Model\\Builder</code> as the first parameter.</p> <p>For this example, let's create a local model scope that will return Active Directory locked out users:</p> <pre><code>use LdapRecord\\Models\\Model;\nuse LdapRecord\\Query\\Model\\Builder;\n\nclass User extends Model\n{\n    // ...\n\n    /**\n     * Apply the scope to the query.\n     */\n    public function scopeLockedOut(Builder $query): void\n    {\n        $query-&gt;where('lockouttime', '&gt;', 1);\n    }\n}\n</code></pre>"},{"location":"docs/core/v3/model-scopes/#using-a-local-scope","title":"Using a local scope","text":"<p>Now that we have defined a local scope inside of our model, we can call it like so:</p> <pre><code>$usersLockedOut = User::lockedOut()-&gt;get();\n</code></pre> <p>Local scopes may also be chained, and accept parameters. This allows you further narrowing down your search results.</p> <p>Let's add another scope to our example model that will only return users of a particular company:</p> <pre><code>// User.php\n\npublic function scopeLockedOut(Builder $query): void\n{\n    $query-&gt;where('lockouttime', '&gt;', 1);\n}\n\npublic function scopeCompany(Builder $query, $companyName): void\n{\n    $query-&gt;where('company', '=', $companyName);\n}\n</code></pre> <p>Now we can use both of these scopes in succession:</p> <pre><code>$users = User::company('acme')-&gt;lockedOut()-&gt;get();\n</code></pre> <p>Local scopes are very powerful, allowing you to generate readable, understandable queries!</p>"},{"location":"docs/core/v3/model-scopes/#global-query-scopes","title":"Global Query Scopes","text":"<p>Global scopes allow you to add constraints to all LDAP queries that are created on a particular model. Writing a query scope allows you to be certain that a particular filter is always applied, rather than adding constraints every time you query the model.</p>"},{"location":"docs/core/v3/model-scopes/#creating-a-global-scope","title":"Creating a global scope","text":"<p>To create a global query scope, create a class in your application that implements the <code>LdapRecord\\Models\\Scope</code> interface. This interface will require you to add an <code>apply</code> method. The <code>apply</code> method accepts the query <code>Builder</code> in the first parameter, and the <code>Model</code> in second parameter.</p> <p>For an example, let's say our application must only retrieve user accounts whom are employees of a particular company. We will create a file in our application in the directory <code>app/Ldap/Scopes</code> with the file name <code>CompanyScope</code>:</p> <pre><code>&lt;?php\n\nnamespace App\\Ldap\\Scopes;\n\nuse LdapRecord\\Models\\Scope;\nuse LdapRecord\\Models\\Model;\nuse LdapRecord\\Query\\Model\\Builder;\n\nclass CompanyScope implements Scope\n{\n    /**\n     * Apply the scope to the query.\n     */\n    public function apply(Builder $builder, Model $model): void\n    {\n        $builder-&gt;where('company', '=', 'Acme Company');\n    }\n}\n</code></pre> <p>If you are looking to select additional attributes in your scope using the <code>select</code> method, use <code>addSelect</code> instead so your query selects are not overwritten.</p>"},{"location":"docs/core/v3/model-scopes/#apply-the-global-scope","title":"Apply the global scope","text":"<p>Now that we've written our global scope, we can apply it to our users model.</p> <p>We will do this by adding an override to the models <code>boot</code> method and using the <code>addGlobalScope</code> method:</p> <pre><code>&lt;?php\n\nnamespace App\\Ldap;\n\nuse LdapRecord\\Models\\Model;\nuse App\\Ldap\\Scopes\\CompanyScope;\n\nclass User extends Model\n{\n    /**\n     * The \"booting\" method of the model.\n     */\n    protected static function boot(): void\n    {\n        parent::boot();\n\n        static::addGlobalScope(new CompanyScope);\n    }\n}\n</code></pre> <p>After adding the scope, queries ran on the <code>User</code> model will always add the filter:</p> <pre><code>(company=\\41\\63\\6d\\65\\20\\43\\6f\\6d\\70\\61\\6e\\79)\n</code></pre> <p>Which your LDAP server will read as:</p> <pre><code>(company=Acme Company)\n</code></pre> <p>This is due to all values being automatically escaped using the LdapRecord query builder.</p>"},{"location":"docs/core/v3/model-scopes/#anonymous-global-scopes","title":"Anonymous global scopes","text":"<p>Instead of creating a class scope, you may also define global scopes using Closures. This is useful for simple scopes that do not warrant a separate class:</p> <pre><code>&lt;?php\n\nnamespace App\\Ldap;\n\nuse LdapRecord\\Models\\Model;\nuse LdapRecord\\Query\\Model\\Builder;\n\nclass User extends Model\n{\n    /**\n     * The \"booting\" method of the model.\n     */\n    protected static function boot(): void\n    {\n        parent::boot();\n\n        static::addGlobalScope('manager', function (Builder $builder) {\n            $builder-&gt;where('manager', '=', 'cn=John Doe,dc=local,dc=com');\n        });\n    }\n}\n</code></pre>"},{"location":"docs/core/v3/model-scopes/#removing-global-scopes","title":"Removing Global Scopes","text":"<p>If you would like to remove a global scope for a particular query, you may use the <code>withoutGlobalScope</code> method. The method accepts the class name of the global scope as its argument:</p> <pre><code>User::withoutGlobalScope(CompanyScope::class)-&gt;get();\n</code></pre> <p>Or, if you've defined a global scope using a Closure:</p> <pre><code>User::withoutGlobalScope('manager')-&gt;get();\n</code></pre> <p>If you would like to remove several or even all of the global scopes, you may use the <code>withoutGlobalScopes</code> method:</p> <pre><code>// Remove all of the global scopes:\nUser::withoutGlobalScopes()-&gt;get();\n\n// Remove some of the global scopes:\nUser::withoutGlobalScopes([\n    CompanyScope::class, 'manager'\n])-&gt;get();\n</code></pre>"},{"location":"docs/core/v3/model-searching/","title":"Available Model Query Methods (API)","text":"<p>Important: The model query builder extends the base query builder. </p> <p>All of its methods are available on model queries.</p>"},{"location":"docs/core/v3/model-searching/#method-listing","title":"Method Listing","text":""},{"location":"docs/core/v3/model-searching/#appliedscopes","title":"<code>appliedScopes</code>","text":"<p>Get an array of the global scopes that were applied to the model query:</p> <pre><code>$scopes = User::query()-&gt;appliedScopes();\n</code></pre>"},{"location":"docs/core/v3/model-searching/#findbyanr","title":"<code>findByAnr</code>","text":"<p>Find the first matching model by ambiguous naming resolution:</p> <p>Important: If your LDAP server does not support ANR, an equivalent filter will be generated automatically.</p> <pre><code>use LdapRecord\\Models\\ActiveDirectory\\User;\n\nif ($user = User::findByAnr('John Doe')) {\n    // Found user!\n} else {\n    // Not found.\n}\n</code></pre>"},{"location":"docs/core/v3/model-searching/#findbyanrorfail","title":"<code>findByAnrOrFail</code>","text":"<p>Find the first matching model by ambiguous naming resolution or fail:</p> <p>Important: If your LDAP server does not support ANR, an equivalent filter will be generated automatically.</p> <pre><code>use LdapRecord\\Models\\ActiveDirectory\\User;\n\ntry {\n    $user = User::findByAnrOrFail('John Doe');\n} catch (\\LdapRecord\\Models\\ModelNotFoundException $ex) {\n    // Not found.\n}\n</code></pre>"},{"location":"docs/core/v3/model-searching/#findbyguid","title":"<code>findByGuid</code>","text":"<p>Find a model by its string GUID:</p> <pre><code>use LdapRecord\\Models\\ActiveDirectory\\User;\n\n$guid = 'f53c7b48-e8d1-425f-a23a-d1b98d7abfe8';\n\nif ($user = User::findByGuid($guid)) {\n    // Found user!\n} else {\n    // Not found.\n}\n</code></pre>"},{"location":"docs/core/v3/model-searching/#findbyguidorfail","title":"<code>findByGuidOrFail</code>","text":"<p>Find a model by its string GUID or fail:</p> <pre><code>use LdapRecord\\Models\\ActiveDirectory\\User;\n\n$guid = 'f53c7b48-e8d1-425f-a23a-d1b98d7abfe8';\n\ntry {\n    $user = User::findByGuidOrFail($guid);\n} catch (\\LdapRecord\\Models\\ModelNotFoundException $ex) {\n    // Not found.\n}\n</code></pre>"},{"location":"docs/core/v3/model-searching/#findmanybyanr","title":"<code>findManyByAnr</code>","text":"<p>Find multiple models using ambiguous naming resolution or fail:.</p> <pre><code>use LdapRecord\\Models\\ActiveDirectory\\User;\n\n$users = User::findManyByAnr(['Jane', 'John', 'Jack', 'Josh']);\n</code></pre>"},{"location":"docs/core/v3/model-searching/#removedscopes","title":"<code>removedScopes</code>","text":"<p>Get an array of global scopes that were removed from the model query:</p> <pre><code>use LdapRecord\\Models\\ActiveDirectory\\User;\n\n$scopes = User::query()-&gt;withoutGlobalScope(\n    OnlyAccountants::class\n)-&gt;removedScopes();\n</code></pre>"},{"location":"docs/core/v3/model-searching/#withglobalscope","title":"<code>withGlobalScope</code>","text":"<p>Apply a new global scope on the model query:</p> <pre><code>use LdapRecord\\Models\\ActiveDirectory\\User;\n\n// Using a closure...\n$users = User::withGlobalScope('accountants', function ($query) {\n    // ...\n})-&gt;get();\n\n// Using a scope class...\n$users = User::withGlobalScope(\n    Accountants::class, new Accountants\n)-&gt;get();\n</code></pre>"},{"location":"docs/core/v3/model-searching/#withoutglobalscope","title":"<code>withoutGlobalScope</code>","text":"<p>Query a model without a registered global scope:</p> <pre><code>use LdapRecord\\Models\\ActiveDirectory\\User;\n\n$users = User::withoutGlobalScope(Accountants::class)-&gt;get();\n</code></pre>"},{"location":"docs/core/v3/model-searching/#withoutglobalscopes","title":"<code>withoutGlobalScopes</code>","text":"<p>Query a model without all registered global scopes:</p> <pre><code>use LdapRecord\\Models\\ActiveDirectory\\User;\n\n$users = User::withoutGlobalScopes()-&gt;get();\n</code></pre>"},{"location":"docs/core/v3/models/","title":"Models: Getting Started","text":""},{"location":"docs/core/v3/models/#introduction","title":"Introduction","text":"<p>The LdapRecord ORM provides a beautiful and simple ActiveRecord implementation for working with your LDAP server. Each \"Model\" represents a type of LDAP object that resides in your directory.</p> <p>Models allow you query your directory as well as create, update, and delete objects.</p> <p>Before getting started, ensure you've added at least one connection to the container.</p> <p>By default, there are models included with LdapRecord for popular LDAP directories  so you can get up and running as fast as possible. More on this below.</p>"},{"location":"docs/core/v3/models/#defining-models","title":"Defining Models","text":"<p>To get started, you must create a new class that represents the LDAP object you would like to query.</p> <p>For example, let's create a model that represents Active Directory users:</p> <pre><code>&lt;?php\n\nuse LdapRecord\\Models\\Model;\n\nclass User extends Model\n{\n    public static array $objectClasses = [\n        'top',\n        'person',\n        'organizationalperson',\n        'user',\n    ];\n}\n</code></pre> <p>As you can see above, we must add a public static property that contains the object classes of the LDAP record.</p> <p>These object classes are used to locate the proper objects in your LDAP directory.</p> <p>If you do not provide any object classes, global directory searches will be performed when retrieving models.</p>"},{"location":"docs/core/v3/models/#predefined-models","title":"Predefined Models","text":"<p>LdapRecord comes with many predefined models that allow you to get started right away.</p> <p>You may extend these built-in models and add your own methods &amp; functionality, as well as override built-in functionality.</p> <p>Important: Make sure you import the classes with the exact casing shown below. PHP imports in Linux environments are case sensitive.</p>"},{"location":"docs/core/v3/models/#entry-model","title":"Entry Model","text":"<p>Use the <code>LdapRecord\\Models\\Entry</code> model for retrieving all objects from your directory - regardless of type.</p>"},{"location":"docs/core/v3/models/#active-directory-models","title":"Active Directory Models","text":"<p>Each below model references a type of object in Active Directory.</p> Model <code>LdapRecord\\Models\\ActiveDirectory\\Entry</code> <code>LdapRecord\\Models\\ActiveDirectory\\User</code> <code>LdapRecord\\Models\\ActiveDirectory\\Group</code> <code>LdapRecord\\Models\\ActiveDirectory\\Computer</code> <code>LdapRecord\\Models\\ActiveDirectory\\Contact</code> <code>LdapRecord\\Models\\ActiveDirectory\\Container</code> <code>LdapRecord\\Models\\ActiveDirectory\\OrganizationalUnit</code> <code>LdapRecord\\Models\\ActiveDirectory\\Printer</code> <code>LdapRecord\\Models\\ActiveDirectory\\ForeignSecurityPrincipal</code>"},{"location":"docs/core/v3/models/#openldap-models","title":"OpenLDAP Models","text":"Model <code>LdapRecord\\Models\\OpenLDAP\\Entry</code> <code>LdapRecord\\Models\\OpenLDAP\\User</code> <code>LdapRecord\\Models\\OpenLDAP\\Group</code> <code>LdapRecord\\Models\\OpenLDAP\\OrganizationalUnit</code>"},{"location":"docs/core/v3/models/#freeipa-models","title":"FreeIPA Models","text":"Model <code>LdapRecord\\Models\\FreeIPA\\Entry</code> <code>LdapRecord\\Models\\FreeIPA\\User</code> <code>LdapRecord\\Models\\FreeIPA\\Group</code> <p>Don't see a model for the LDAP server you're using? Create a pull request!</p>"},{"location":"docs/core/v3/models/#connections","title":"Connections","text":"<p>By default, all models you create will try to use your <code>default</code> LDAP connection that resides in the connection container. To set your model to use an alternate connection, define a <code>$connection</code> property equal to the name of your other connection.</p> <pre><code>&lt;?php\n\nuse LdapRecord\\Models\\Model;\n\nclass User extends Model\n{\n    protected ?string $connection = 'domain-b';\n}\n</code></pre>"},{"location":"docs/core/v3/models/#changing-connections","title":"Changing Connections","text":"<p>Important: When changing connections, be sure that the connection you swap to is of the same type (i.e. Active Directory, OpenLDAP, etc.), otherwise you may have unintended results when performing operations.</p> <p>You may also swap the connection to use on a per-query basis by using <code>Model::on($connectionName)</code>:</p> <pre><code>// Users will be retrieved from the \"domain-b\"\n// connection defined in the configuration,\n// and have this connection set:\n$users = User::on('domain-b')-&gt;get();\n</code></pre> <p>You may also swap the connection to use on a per-model basis by using <code>$model-&gt;setConnection($connectionName)</code>:</p> <pre><code>$user = User::find('cn=john doe,dc=local,dc=com');\n\n// All further operations executed on the user\n// model will be performed on the \"domain-b\"\n// connection defined in the configuration:\n$user-&gt;setConnection('domain-b');\n\n$user-&gt;rename('...');\n</code></pre>"},{"location":"docs/core/v3/models/#distinguished-names","title":"Distinguished Names","text":"<p>To get an objects full distinguished name call the <code>getDn</code> method:</p> <pre><code>$user = User::find('cn=user,dc=local,dc=com');\n\n// Returns 'cn=user,dc=local,dc=com'\n$user-&gt;getDn();\n</code></pre> <p>To get an objects relative distinguished name, call the <code>getRdn</code> method:</p> <pre><code>$user = User::find('cn=user,dc=local,dc=com');\n\n// Returns 'cn=user'\n$user-&gt;getRdn();\n</code></pre> <p>To get an objects parent distinguished name, call the <code>getParentDn</code> method:</p> <pre><code>$user = User::find('cn=user,dc=local,dc=com');\n\n// Returns 'dc=local,dc=com'\n$user-&gt;getParentDn();\n</code></pre> <p>To get an objects name, call the <code>getName</code> method:</p> <pre><code>$user = User::find('cn=user,dc=local,dc=com');\n\n// Returns 'user'\n$user-&gt;getName();\n</code></pre>"},{"location":"docs/core/v3/models/#object-guids","title":"Object GUIDs","text":"<p>To retrieve a models Object GUID (globally unique identifier) call the <code>getConvertedGuid</code> method.</p> <p>This method will return the string variant of your models GUID. Some LDAP directories (namely Active Directory) use hexadecimal byte arrays to store these, so conversion is necessary.</p> <pre><code>$user = User::find('cn=user,dc=local,dc=com');\n\n$user-&gt;getConvertedGuid();\n</code></pre> <p>To retrieve the raw GUID value, use the <code>getObjectGuid</code> method.</p> <p>By default, LdapRecord models will use the <code>objectguid</code> attribute in the above methods. If your directory stores GUIDs in a different attribute, define a <code>$guidKey</code> attribute inside of your model:</p> <pre><code>class User extends Model\n{\n    protected string $guidKey = 'entryuuid';\n}\n</code></pre>"},{"location":"docs/core/v3/models/#default-attribute-values","title":"Default Attribute Values","text":"<p>If you would like to define the default values for some of your model's attributes, you may define an <code>$attributes</code> property on your model. This helps you to assign static default values when creating objects in your directory:</p> <p>Due to LDAP's multi-valued nature, each attribute value you define must be an array, regardless if it is single-valued or or multi-valued.</p> <pre><code>class User extends Model\n{\n    protected array $attributes = [\n        'company' =&gt; ['Acme'],\n        'description' =&gt; ['User Account'],\n        'manager' =&gt; ['cn=John Doe,dc=local,dc=com']\n    ];\n}\n</code></pre>"},{"location":"docs/core/v3/models/#retrieving-models","title":"Retrieving Models","text":"<p>Once you've created an LdapRecord model you're ready to start retrieving data from your directory. If you've used Laravel's Eloquent ORM, you'll feel right at home.</p> <p>You can think of a model as a powerful query builder allowing you to query your directory for objects fluently and easily.</p> <pre><code>&lt;?php\n\n$users = User::get();\n\nforeach ($users as $user) {\n    $user-&gt;getFirstAttribute('cn');\n}\n</code></pre>"},{"location":"docs/core/v3/models/#adding-constraints","title":"Adding Constraints","text":"<p>Each model serves as a query builder for the object classes you've defined inside. You can add constraints to your queries and then call <code>get()</code> to retrieve the results.</p> <pre><code>&lt;?php\n\n$users = User::whereStartsWith('cn', 'John')\n            -&gt;whereEndsWith('sn', 'Doe')\n            -&gt;limit(10)\n            -&gt;get();\n</code></pre> <p>Since models are query builders, it's a good idea to review the query builder methods so you can utilize them to their full potential.</p>"},{"location":"docs/core/v3/models/#model-constraints","title":"Model Constraints","text":"<p>Models come with some built in constraint methods that you may find useful.</p> <p>The below constraints will only retrieve the models that are equal to the type you have retrieved. For example, retrieving the descendants of an organizational unit will only return organizational units that are direct descendants.</p> <p>If you would like to avoid this, use the default <code>LdapRecord\\Models\\Entry</code> model, which provides no <code>objectclass</code> constraints on queries.</p>"},{"location":"docs/core/v3/models/#ancestors","title":"Ancestors","text":"<p>To retrieve the direct ancestors of a model, call the <code>ancestors()</code> constraint on a retrieved model:</p> <pre><code>$ou = OrganizationalUnit::find('ou=Accountants,ou=Users,dc=local,dc=com');\n\n$ancestors = $ou-&gt;ancestors()-&gt;get();\n</code></pre> <p>The above example will execute a <code>listing</code> on your LDAP directory in the distinguished name <code>dc=local,dc=com</code>. This effectively pulls the ancestors of the model.</p>"},{"location":"docs/core/v3/models/#siblings","title":"Siblings","text":"<p>To retrieve the siblings of a model, call the <code>siblings()</code> constraint on a retrieved model:</p> <pre><code>$ou = OrganizationalUnit::find('ou=Accountants,ou=Users,dc=local,dc=com');\n\n$siblings = $ou-&gt;siblings()-&gt;get();\n</code></pre> <p>The above example will execute a <code>listing</code> on your LDAP directory in the distinguished name <code>ou=Users,dc=local,dc=com</code>. This effectively pulls the siblings of the model. The current model will also be included in the resulting collection.</p>"},{"location":"docs/core/v3/models/#descendants","title":"Descendants","text":"<p>To retrieve the descendants of a model, call the <code>descendants()</code> constraint on a retrieved model:</p> <pre><code>$ou = OrganizationalUnit::find('ou=Accountants,ou=Users,dc=local,dc=com');\n\n$descendants = $ou-&gt;descendants()-&gt;get();\n</code></pre> <p>The above example will execute a <code>listing</code> on your LDAP directory in the distinguished name <code>ou=Accountants,ou=Users,dc=local,dc=com</code>. This effectively pulls the descendants of the model.</p>"},{"location":"docs/core/v3/models/#refreshing-models","title":"Refreshing Models","text":"<p>To re-retrieve a new model from your directory, call the <code>fresh()</code> method. Doing so will not affect the existing instance you already have:</p> <pre><code>$user = User::where('cn', '=', 'jdoe')-&gt;first();\n\n$freshUser = $user-&gt;fresh();\n</code></pre> <p>If you would like to re-retrieve the existing model, call the <code>refresh()</code> method. This will re-retrieve the models attributes from the directory:</p> <pre><code>$user = User::where('cn', '=', 'jdoe')-&gt;first();\n\n$user-&gt;refresh();\n</code></pre>"},{"location":"docs/core/v3/models/#collections","title":"Collections","text":"<p>When you query your models, returned results will be contained inside of a <code>LdapRecord\\Query\\Collection</code>. The <code>Collection</code> class directly extends Laravel's collection. Be sure to check out its documentation for all of the available helpful methods.</p> <pre><code>&lt;?php\n\n$users = User::get();\n\n$usersWithEmail = $users-&gt;filter(function (User $user) {\n    return $user-&gt;hasAttribute('mail');\n});\n</code></pre>"},{"location":"docs/core/v3/models/#retrieving-single-models","title":"Retrieving Single Models","text":"<p>If you would like to retrieve a single model from your directory, you can utilize a variety of methods. Here is a list and usage of each:</p> Method <code>first()</code> <code>find($distinguishedName)</code> <code>findBy($attributeName, $attributeValue)</code> <code>findByAnr($attributeValue)</code> <code>findByGuid($objectGuid)</code> <pre><code>// Retrieve the first model of a global LDAP search...\n$user = User::first();\n\n// Retrieve a model by its distinguished name...\n$user = User::find('cn=John Doe,dc=local,dc=com');\n\n// Retrieve the first model that matches the attribute...\n$user = User::findBy('cn', 'John Doe');\n\n// Retrieve the first model that matches an array of ANR attributes...\n$user = User::findByAnr('John Doe');\n\n// Retrieve a model by its object guid...\n$user = User::findByGuid('bf9679e7-0de6-11d0-a285-00aa003049e2');\n</code></pre>"},{"location":"docs/core/v3/models/#not-found-exceptions","title":"Not Found Exceptions","text":"<p>Occasionally you may want to throw an exception if a specific record you're looking for cannot be found on your directory. You can substitute the above methods with <code>OrFail()</code> variants:</p> Method <code>firstOrFail()</code> <code>findOrFail($distinguishedName)</code> <code>findByOrFail($attributeName, $attributeValue)</code> <code>findByAnrOrFail($attributeValue)</code> <code>findByGuidOrFail($objectGuid)</code> <pre><code>try {\n    // Retrieve the first model of a global LDAP search or fail...\n    $user = User::firstOrFail();\n\n    // Retrieve a model by its distinguished name or fail...\n    $user = User::findOrFail('cn=John Doe,dc=local,dc=com');\n\n    // Retrieve the first model that matches the attribute or fail...\n    $user = User::findByOrFail('cn', 'John Doe');\n\n    // Retrieve the first model that matches an array of ANR attributes or fail...\n    $user = User::findByAnrOrFail('John Doe');\n\n    // Retrieve a model by its object guid or fail...\n    $user = User::findByGuidOrFail('bf9679e7-0de6-11d0-a285-00aa003049e2');\n} catch (\\LdapRecord\\Models\\ModelNotFoundException $e) {\n    // One of the models could not be located...\n}\n</code></pre>"},{"location":"docs/core/v3/models/#creating-updating-models","title":"Creating &amp; Updating Models","text":""},{"location":"docs/core/v3/models/#creating","title":"Creating","text":"<p>Before we begin it is paramount to know that LDAP objects require a Distinguished Name to be created successfully in your LDAP directory. LdapRecord will always attempt to generate a Distinguished Name for models that do not have one upon <code>save</code>. In addition, some LDAP objects require more attributes to be set for successful creation.</p> <p>For example, to create a <code>User</code> object in Active Directory, the <code>cn</code> (Common Name) attribute is required. If you do not set this attribute, an exception will be thrown upon saving your LDAP model. For another example, <code>OrganizationlUnit</code>'s must have the <code>ou</code> attribute set.</p> <p>LdapRecord cannot validate this for you as LDAP objects differ widely in their attribute requirements.</p> <p>To create a new record in your directory, create a new model instance and call the <code>save()</code> method. Upon calling <code>save()</code>, if no Distinguished Name is set on a new model, one will be generated based on your configured <code>base_dn</code> that you have set inside your connections configuration:</p> <pre><code>$conn = new Connection([\n    // ...\n    'base_dn' =&gt; 'dc=local,dc=com',\n]);\n\n$conn-&gt;connect();\n\n$user = new User();\n\n$user-&gt;cn = 'John Doe';\n\n// User will be saved with the DN: 'cn=John Doe,dc=local,dc=com\n$user-&gt;save();\n</code></pre>"},{"location":"docs/core/v3/models/#dynamic-distinguished-name-generation","title":"Dynamic Distinguished Name Generation","text":"<p>LdapRecord generates a models distinguished name via the model method <code>getCreatableRdn</code>. This method is responsible for generating the \"Relative Distinguished Name\" which is the true name of the object inside of your LDAP directory that does not include your base Distinguished Name.</p> <p>Since most LDAP objects require a Common Name (<code>cn</code>) this is defaulted to:</p> <pre><code>/**\n * Get a creatable RDN for the model.\n */\npublic function getCreatableRdn(string $name = null, string $attribute = null): string\n{\n    $name = $this-&gt;escape($this-&gt;getFirstAttribute('cn'))-&gt;dn();\n\n    return \"cn=$name\";\n}\n</code></pre> <p>As you can see above, the attribute is escaped before being passed into the RDN string. You must do this, otherwise if commas or other reserved characters are inside the attribute you are using, it will generate a malformed distinguished name.</p> <p>You may override this method to allow your models Distinguished Name's to be dynamically generated rather than creating them yourself manually. For example, here is how we would set the Relative Distinguished Name (RDN) for an Active Directory <code>OrganizationalUnit</code> model:</p> <pre><code>public function getCreatableRdn(string $name = null, string $attribute = null): string\n{\n    $name = $this-&gt;escape($this-&gt;getFirstAttribute('ou'))-&gt;dn();\n\n    return \"ou=$name\";\n}\n</code></pre> <p>This then gets prepended onto your connections configured <code>base_dn</code>, for a resulting \"Full\" Distinguished Name:</p> <pre><code>ou=MyOrganizationalUnitName,dc=local,dc=com\n</code></pre> <p>You may set the base DN of where you would like the object to be created inside by using the <code>inside()</code> method, rather than your <code>base_dn</code> from your configuration:</p> <pre><code>$user = new User(['cn' =&gt; 'John Doe']);\n\n$user-&gt;inside('ou=Users,dc=local,dc=com');\n\n$user-&gt;save();\n</code></pre> <p>You may also pass in an LdapRecord <code>Model</code> instance. This is convenient so you know the container / organizational unit distinguished name is valid:</p> <pre><code>$ou = OrganizationalUnit::findOrFail('ou=Users,dc=local,dc=com');\n\n$user = new User(['cn' =&gt; 'John Doe']);\n\n$user-&gt;inside($ou)-&gt;save();\n</code></pre> <p>The above examples will save the user inside the <code>Users</code> OU resulting in the full distinguished name:</p> <pre><code>cn=John Doe,ou=Users,dc=local,dc=com\n</code></pre>"},{"location":"docs/core/v3/models/#setting-a-distinguished-name","title":"Setting A Distinguished Name","text":"<p>To set the models distinguished name, call the <code>setDn()</code> method on your model and populate it with any organization unit or container that you would like it to be created inside:</p> <pre><code>$user = new User();\n\n$user-&gt;cn = 'John Doe';\n\n$user-&gt;setDn('cn=John Doe,ou=Users,dc=local,dc=com');\n\n$user-&gt;save();\n</code></pre>"},{"location":"docs/core/v3/models/#updating","title":"Updating","text":"<p>Updating models is as easy as creating them. When you have a model returned from a query, set its attributes as you would for creating and call the <code>save()</code> method:</p> <pre><code>$user = User::first();\n\n$user-&gt;company = 'My Company';\n$user-&gt;samaccountname = 'jdoe';\n$user-&gt;department = 'Accounting';\n$user-&gt;displayname = 'Johnathan Doe';\n\n$user-&gt;save();\n</code></pre>"},{"location":"docs/core/v3/models/#moving","title":"Moving","text":"<p>To move existing models into Organizational Units or Containers, call the <code>move()</code> method:</p> <p>When moving a model is successful, the users distinguished name will be automatically updated to reflect its new location in your directory, so you may continue to run operations on it during the same request.</p> <pre><code>$user = User::find('cn=Steve Bauman,dc=local,dc=com');\n\n$ou = OrganizationalUnit::find('ou=Office Users,dc=local,dc=com');\n\n$user-&gt;move($ou);\n\n// Displays 'cn=Steve Bauman,ou=Office Users,dc=local,d=com'\necho $user-&gt;getDn();\n</code></pre>"},{"location":"docs/core/v3/models/#renaming","title":"Renaming","text":"<p>To rename existing models, call the <code>rename()</code> method and supply the new objects name:</p> <p>When renaming is successful, the users distinguished name is automatically updated to reflect its new name in the directory, so you may run further operations on it during the same request.</p> <pre><code>$user = User::find('cn=John Doe,dc=local,dc=com');\n\n$user-&gt;rename('Jane Doe');\n\n// Displays 'cn=Jane Doe,dc=local,dc=com'\necho $user-&gt;getDn();\n</code></pre>"},{"location":"docs/core/v3/models/#restoring-deleted-models","title":"Restoring Deleted Models","text":"<p>Important: This feature is only possible when connecting to an Active Directory server.</p> <p>To restore a deleted object, we must first query the directory for deleted objects by using the <code>whereDeleted</code> method:</p> <pre><code>use LdapRecord\\LdapRecordException;\nuse LdapRecord\\Models\\ActiveDirectory\\User;\n\n$user = User::whereDeleted()\n            -&gt;where('mail', '=', 'sbauman@local.com')\n            -&gt;first();\n\ntry {\n    $user-&gt;restore();\n\n    // Successfully restored user.\n} catch (LdapRecordException $ex) {\n    // Failed restoring user.\n}\n</code></pre> <p>If you're including deleted results in your queries using the <code>withDeleted</code> clause, you can call the <code>isDeleted</code> method to check if an object has been deleted:</p> <pre><code>$users = User::withDeleted()-&gt;get();\n\nforeach ($users as $user) {\n    if ($user-&gt;isDeleted()) {\n        $user-&gt;restore();\n    }\n}\n</code></pre> <p>If you call <code>restore</code> on a non-deleted object, it will simply return <code>false</code>:</p> <pre><code>$user = User::where('cn', '=', 'Steve Bauman')-&gt;first();\n\n$result = $user-&gt;restore();\n\n// Displays bool(false)\nvar_dump($result);\n</code></pre>"},{"location":"docs/core/v3/models/#attributes","title":"Attributes","text":""},{"location":"docs/core/v3/models/#methods","title":"Methods","text":"<p>There are many built-in methods on models you may utilize.</p> <p><code>Model::getAttributes()</code></p> <p>The <code>getAttributes</code> method returns all of the values on the model:</p> <pre><code>$user = User::first();\n\n$attributes = $user-&gt;getAttributes();\n\nforeach ($attributes as $name =&gt; $values) {\n    //\n}\n</code></pre> <p>In the above example, <code>$values</code> will always be an array.</p> <p><code>Model::getAttribute($name)</code></p> <p>The <code>getAttribute</code> method returns all of the values inside the given key. This will return an <code>array</code> if the attribute exists:</p> <pre><code>$group = Group::first();\n\n$members = $group-&gt;getAttribute('member');\n\nforeach ($members ?? [] as $member) {\n    echo $member;\n}\n</code></pre> <p><code>Model::getFirstAttribute($name)</code></p> <p>The <code>getFirstAttribute</code> method returns the first value of the given key. This will always return <code>null</code> or <code>string</code>:</p> <pre><code>$group = Group::first();\n\n$firstMember = $group-&gt;getFirstAttribute('member');\n</code></pre> <p><code>Model::hasAttribute()</code></p> <p>The <code>hasAttribute</code> method determines whether the model contains the key in the models attributes:</p> <pre><code>$user = User::first();\n\nif ($user-&gt;hasAttribute('company')) {\n    //\n}\n</code></pre> <p><code>Model::addAttributeValue($name, $value)</code></p> <p>To add a value to an attribute without clearing it, use the <code>addAttributeValue</code> method:</p> <pre><code>$user = User::first();\n\n$user-&gt;addAttributeValue('proxyaddresses', 'SMTP:sbauman@local.com');\n</code></pre> <p><code>Model::countAttributes()</code></p> <p>The <code>countAttributes</code> method returns the number of attributes the model contains:</p> <pre><code>$user = User::first();\n\necho $user-&gt;countAttributes();\n</code></pre>"},{"location":"docs/core/v3/models/#array-conversion","title":"Array Conversion","text":"<p>Attributes you retrieve from an LdapRecord model will always return and array. This is due to LDAP's multi-valued nature.</p> <p>For example, if you would like to retrieve the users <code>mail</code> attribute, you must request the first key from it:</p> <pre><code>$user = User::find('cn=John Doe,dc=local,dc=com');\n\n// Get the users email address.\necho $user-&gt;mail[0] ?? null;\n</code></pre> <p>Or if you'd prefer, use the <code>getFirstAttribute()</code> method:</p> <pre><code>$user = User::find('cn=John Doe,dc=local,dc=com');\n\n// Get the users email address.\necho $user-&gt;getFirstAttribute('mail');\n</code></pre> <p>When setting attributes on models, they will automatically be converted to an array for you if you do not provide one.</p> <pre><code>$user = User::find('cn=John Doe,dc=local,dc=com');\n\n// Both approaches will set the attribute identically:\n$user-&gt;mail = 'jdoe@acme.org';\n$user-&gt;mail = ['jdoe@acme.org'];\n</code></pre> <p>Similarly, you can use the <code>setFirstAttribute()</code> method to set the attributes first value in its array, even if it does not currently exist on the model:</p> <pre><code>$user = User::find('cn=John Doe,dc=local,dc=com');\n\n// Set the users email address.\n$user-&gt;setFirstAttribute('mail', 'jdoe@acme.org');\n</code></pre>"},{"location":"docs/core/v3/models/#determining-attribute-existence","title":"Determining Attribute Existence","text":"<p>To check if a model has an attribute, you can use the <code>hasAttribute()</code> method:</p> <pre><code>if ($user-&gt;hasAttribute('mail')) {\n    // This user has an email address.\n}\n</code></pre> <p>As with all other attribute methods, this check is case-insensitive. You may pass any type of casing of the attribute you are looking for:</p> <pre><code>// Both will return 'true':\n$user-&gt;hasAttribute('samaccountname');\n$user-&gt;hasAttribute('sAMAccountname');\n</code></pre>"},{"location":"docs/core/v3/models/#casing-hyphens","title":"Casing &amp; Hyphens","text":""},{"location":"docs/core/v3/models/#attribute-casing","title":"Attribute Casing","text":"<p>LdapRecord automatically normalizes all attribute keys to lowercase. This means when setting or getting model attributes, you can use alternate casing and the same attribute will be set or retrieved.</p> <p>This is extremely handy so you do not have to look up the casing of each attribute every time you want to set or retrieve one. This also means you can use your own attribute convention:</p> <pre><code>$user = new User();\n\n// Each will set the same attribute:\n$user-&gt;samaccountname = 'John Doe';\n$user-&gt;sAMAccountName = 'John Doe';\n$user-&gt;samAccountName = 'John Doe';\n</code></pre>"},{"location":"docs/core/v3/models/#attribute-hyphens","title":"Attribute Hyphens","text":"<p>Since LDAP does not support underscores in LDAP attributes but does support using hyphens, anytime you would like to set an attribute that contains a hypen, set it using an underscore instead. LdapRecord will automatically convert the underscore to a hyphen dynamically:</p> <pre><code>$user = new User();\n\n$user-&gt;some_attribute = 'Value';\n</code></pre> <p>Similarly, when retrieving attributes that contain a hyphen, use an underscore instead:</p> <pre><code>$user = User::find('cn=John Doe,dc=local,dc=com');\n\n// Each method below will act identically:\necho $user-&gt;some_attribute[0];\necho $user-&gt;getAttribute('some-attribute')[0];\necho $user-&gt;getFirstAttribute('some-attribute');\n</code></pre>"},{"location":"docs/core/v3/models/#deleting-models","title":"Deleting Models","text":"<p>To delete a record from your directory, call the <code>delete()</code> method on a model you have retrieved:</p> <pre><code>&lt;?php\n\n$user = User::first();\n\n$user-&gt;delete();\n</code></pre> <p>The account you have configured to bind to your LDAP server must have permission to delete the record you have retrieved. If it does not, you will receive an exception upon deletion.</p>"},{"location":"docs/core/v3/models/#deleting-models-by-distinguished-name","title":"Deleting Models By Distinguished Name","text":"<p>In the example above, we are retrieving the record from the directory prior to deletion. However, if you'd like to simply delete a model by its distinguished name, call the <code>destroy()</code> method. The number of deleted models will be returned from this method:</p> <pre><code>&lt;?php\n\n// Deleting single object...\n$deleted = User::destroy('cn=John Doe,dc=local,dc=com');\n\n// Deleting multiple objects...\n$deleted = User::destroy([\n    'cn=John Doe,dc=local,dc=com',\n    'cn=Jane Doe,dc=local,dc=com',\n]);\n</code></pre> <p>You may also pass in <code>true</code> into the second parameter to recursively delete leaf entries if a record is located by the distinguished name you have given.</p>"},{"location":"docs/core/v3/models/#recursive-deleting","title":"Recursive Deleting","text":"<p>Sometimes you will be working with containers or organizational units that contain nested objects inside of them. Calling <code>delete()</code> on these objects will generate an exception without first deleting the objects inside. If you would like to delete all objects contained inside of another model, pass in <code>true</code> in the first parameter of the <code>delete()</code> method:</p> <pre><code>&lt;?php\n\n$ou = OrganizationalUnit::find('ou=Users,dc=local,dc=com');\n\n$ou-&gt;delete($recursive = true);\n</code></pre>"},{"location":"docs/core/v3/models/#comparing-models","title":"Comparing Models","text":"<p>If you ever need to compare to models to see if they are the same, call the the <code>is()</code> method. This method will determine if the models have the same distinguished name and connection:</p> <pre><code>if ($user-&gt;is($anotherUser)) {\n    //\n}\n</code></pre> <p>To see if a model is contained inside an organizational unit or another type of container, call the <code>isDescendantOf()</code> method:</p> <pre><code>$ou = OrganizationalUnit::find('ou=User Accounts,dc=local,dc=com');\n$user = User::find('cn=John Doe,ou=User Accounts,dc=local,dc=com');\n\nif ($user-&gt;isDescendantOf($ou)) {\n    // This user is contained inside this organizational unit.\n}\n</code></pre> <p>You may also want to know whether a model is an ancestor of another. To do so, call the <code>isAncestorOf()</code> method:</p> <pre><code>$user = User::find('cn=John Doe,ou=User Accounts,dc=local,dc=com');\n$ou = OrganizationalUnit::find('ou=User Accounts,dc=local,dc=com');\n\nif ($ou-&gt;isAncestorOf($user)) {\n    // This OU is an ancestor of this user.\n}\n</code></pre> <p>Calling <code>isDescendantOf()</code> or <code>isAncestorOf()</code> performs recursive checks. If a model is contained in a nested OU / container of the one you are checking, the methods will return <code>true</code>.</p> <pre><code>$ou = OrganizationalUnit::find('ou=User Accounts,dc=local,dc=com');\n$user = User::find('cn=John Doe,ou=Accounting,ou=User Accounts,dc=local,dc=com');\n\n// This will return true:\nif ($user-&gt;isDescendantOf($ou)) {\n    //\n}\n\n// This will return true:\nif ($ou-&gt;isAncestorOf($user)) {\n    //\n}\n</code></pre> <p>To perform non-recursive checks, such as checking if a model is a direct child of another model, call the <code>isChildOf</code> method:</p> <pre><code>$ou = OrganizationalUnit::find('ou=User Accounts,dc=local,dc=com');\n$user = User::find('cn=John Doe,ou=User Accounts,dc=local,dc=com');\n\nif ($user-&gt;isChildOf($ou)) {\n    //\n}\n</code></pre> <p>To perform the opposite, such as checking if a model is a parent of another, call the <code>isParentOf</code> method:</p> <pre><code>$officeOu = OrganizationalUnit::find('ou=Office,ou=User Accounts,dc=local,dc=com');\n$userAccountsOu = OrganizationalUnit::find('ou=User Accounts,dc=local,dc=com');\n\nif ($userAccountsOu-&gt;isParentOf($officeOu)) {\n    //\n}\n</code></pre>"},{"location":"docs/core/v3/models/#events","title":"Events","text":"<p>LdapRecord models fire several different events during the creation, updating and deletion. Here is a list of all the events you can listen for:</p> Event <code>LdapRecord\\Models\\Events\\Creating</code> <code>LdapRecord\\Models\\Events\\Created</code> <code>LdapRecord\\Models\\Events\\Updating</code> <code>LdapRecord\\Models\\Events\\Updated</code> <code>LdapRecord\\Models\\Events\\Saving</code> <code>LdapRecord\\Models\\Events\\Saved</code> <code>LdapRecord\\Models\\Events\\Deleting</code> <code>LdapRecord\\Models\\Events\\Deleted</code> <p>To listen for these events, call the <code>getEventDispatcher()</code> on the <code>LdapRecord\\Container</code> to retrieve the dispatcher, then call <code>listen()</code> on the returned dispatcher:</p> <pre><code>&lt;?php\n\nuse LdapRecord\\Container;\nuse LdapRecord\\Models\\Events\\Creating;\n\n$dispatcher = Container::getDispatcher();\n\n$dispatcher-&gt;listen(Creating::class, function ($event) {\n    $model = $event-&gt;getModel();\n});\n</code></pre> <p>You will want to set up any listeners prior to making changes to models, otherwise your listener will not be executed due to them not existing yet.</p>"},{"location":"docs/core/v3/models/#serialization","title":"Serialization","text":"<p>All model instances can be converted to an array for JSON serialization. To serialize a model instance, simply pass the model into <code>json_encode()</code>. This calls <code>jsonSerialize()</code> on the model to retrieve is serializable data:</p> <pre><code>&lt;?php\n\n$user = User::first();\n\necho json_encode($user);\n</code></pre>"},{"location":"docs/core/v3/models/#hiding-attributes","title":"Hiding Attributes","text":"<p>You may want to exclude certain attributes from being included in the serialization of your model, such as <code>userPassword</code> for OpenLDAP.</p> <p>To do this, add a <code>$hidden</code> property to your model:</p> <pre><code>use LdapRecord\\Models\\Model;\n\nclass User extends Model\n{\n    protected array $hidden = ['userPassword'];\n}\n</code></pre> <p>Now when you <code>json_encode($model)</code>, all attributes will be included except the <code>userPassword</code> attribute.</p> <p>If you'd prefer a white-list of attributes, you can add a <code>$visible</code> property instead, which will ensure only the attributes specified will be included in serialization:</p> <pre><code>use LdapRecord\\Models\\Model;\n\nclass User extends Model\n{\n    protected array $visible = ['cn', 'mail', 'sn'];\n}\n</code></pre>"},{"location":"docs/core/v3/models/#converting-attributes-to-json","title":"Converting Attributes to JSON","text":"<p>Depending on the type of LDAP directory and model you are working with, you may need to convert some attributes to a string before it can be properly serialized. For example, if you your model is from Active Directory, you will need to convert the <code>objectguid</code> property to a string since it is in binary, otherwise <code>json_encode()</code> will throw an exception.</p> <p>This can be done by adding a <code>convertAttributesForJson()</code> method to your model:</p> <p>By default, the <code>objectguid</code> and <code>objectsid</code> attributes are converted for you when using the built-in Active Directory models.</p> <pre><code>&lt;?php\n\nuse LdapRecord\\Models\\Model;\n\nclass User extends Model\n{\n    protected function convertAttributesForJson(array $attributes = []): array\n    {\n        if ($this-&gt;hasAttribute('objectguid')) {\n            // If the model has a GUID set, we need to convert it due to it being in\n            // binary. Otherwise we will receive a JSON serialization exception.\n            return array_replace($attributes, [\n                'objectguid' =&gt; [$this-&gt;getConvertedGuid()]\n            ]);\n        }\n\n        return $attributes;\n    }\n}\n</code></pre>"},{"location":"docs/core/v3/quickstart/","title":"Quick Start","text":"<p>Install LdapRecord using composer:</p> <pre><code>composer require directorytree/ldaprecord\n</code></pre> <p>Use LdapRecord:</p> <pre><code>use LdapRecord\\Container;\nuse LdapRecord\\Connection;\nuse LdapRecord\\Models\\Entry;\n\n// Create a new connection:\n$connection = new Connection([\n    'hosts' =&gt; ['192.168.1.1'],\n    'port' =&gt; 389,\n    'base_dn' =&gt; 'dc=local,dc=com',\n    'username' =&gt; 'cn=user,dc=local,dc=com',\n    'password' =&gt; 'secret',\n]);\n\n// Add the connection into the container:\nContainer::addConnection($connection);\n\n// Get all objects:\n$objects = Entry::get();\n\n// Get a single object:\n$object = Entry::find('cn=John Doe,dc=local,dc=com');\n\n// Getting attributes:\nforeach ($object-&gt;memberof as $group) {\n    echo $group;\n}\n\n// Modifying attributes:\n$object-&gt;company = 'My Company';\n\n// Saving changes:\n$object-&gt;save();\n</code></pre>"},{"location":"docs/core/v3/release-notes/","title":"LdapRecord v3.0.0 Release Notes","text":"<p>We're excited to announce the release of LdapRecord v3.0.0! This major version introduces  significant changes and improvements, focusing on stricter typing, utilizing new PHP  features and methods, updated dependencies, and enhanced binding capabilities. Please review the following release notes to understand the new features and changes.</p>"},{"location":"docs/core/v3/release-notes/#key-features-and-changes","title":"Key Features and Changes","text":""},{"location":"docs/core/v3/release-notes/#php-81-requirement","title":"PHP &gt;= 8.1 Requirement","text":"<p>LdapRecord v3 now requires PHP version 8.1 or higher to take advantage of the latest  language features, optimizations, and security improvements. The whole codebase has been reviewed and refreshed with usage of new language features where applicable. </p>"},{"location":"docs/core/v3/release-notes/#strict-types-implementation","title":"Strict Types Implementation","text":"<p>We've implemented strict types across all classes and methods to enforce better  type safety and catch potential errors during development. This will lead to  more robust and maintainable code.</p>"},{"location":"docs/core/v3/release-notes/#dependency-update","title":"Dependency Update","text":"<p>The \"Tightenco/Collect\" package has been replaced with the \"Illuminate/Collections\" package. This change provides a more modern, maintained package for handling  collections, as \"Tightenco/Collect\" has discontinued support in favor of  the core \"Illuminate/Collections\" pakage.</p>"},{"location":"docs/core/v3/release-notes/#sasl-binding-support","title":"SASL Binding Support","text":"<p>LdapRecord v3 now offers the ability to bind to your LDAP server using SASL  (Simple Authentication and Security Layer). This enhancement provides more  secure and flexible authentication options for connecting to LDAP servers.</p>"},{"location":"docs/core/v3/searching-api/","title":"Available Search Methods (API)","text":""},{"location":"docs/core/v3/searching-api/#method-listing","title":"Method Listing","text":""},{"location":"docs/core/v3/searching-api/#addcontrol","title":"<code>addControl</code>","text":"<p>Add a server control to be executed with the LDAP search query:</p> <pre><code>$query = $connection-&gt;query();\n\n$query-&gt;addControl(\n    $oid = '1.2.840.113556.1.4.417', $isCritical = true, $value = null\n);\n\n// array:1 [\u25bc\n//  \"1.2.840.113556.1.4.417\" =&gt; array:3 [\u25bc\n//    \"oid\" =&gt; \"1.2.840.113556.1.4.417\"\n//    \"isCritical\" =&gt; true\n//    \"value\" =&gt; null\n//  ]\n// ]\nvar_dump($query-&gt;controls);\n</code></pre>"},{"location":"docs/core/v3/searching-api/#addfilter","title":"<code>addFilter</code>","text":"<p>Add a filter with its bindings to the query:</p> <p>Available types are <code>and</code>, <code>or</code> and <code>raw</code>.</p> <pre><code>$query = $connection-&gt;query();\n\n$bindings = [\n    'field' =&gt; 'cn',\n    'operator' =&gt; '=',\n    'value' =&gt; 'Steve Bauman',\n];\n\n$query-&gt;addFilter($type = 'and', $bindings);\n</code></pre>"},{"location":"docs/core/v3/searching-api/#addselect","title":"<code>addSelect</code>","text":"<p>Add an attribute to be selected for the query:</p> <pre><code>$query = $connection-&gt;query();\n\n// Using arguments:\n$query-&gt;addSelect('cn');\n$query-&gt;addSelect('foo', 'bar', 'baz');\n\n// Using an array:\n$query-&gt;addSelect(['sn', 'givenname']);\n\n// array:7 [\u25bc\n//   0 =&gt; \"cn\"\n//   1 =&gt; \"foo\"\n//   2 =&gt; \"bar\"\n//   3 =&gt; \"baz\"\n//   4 =&gt; \"sn\"\n//   5 =&gt; \"givenname\"\n//   6 =&gt; \"objectclass\"\n// ]\nvar_dump($query-&gt;getSelects());\n</code></pre>"},{"location":"docs/core/v3/searching-api/#andfilter","title":"<code>andFilter</code>","text":"<p>Add a nested \"and\" filter to the query:</p> <pre><code>$query = $connection-&gt;query();\n\n$query-&gt;andFilter(function (\\LdapRecord\\Query\\Builder $q) {\n    $q-&gt;where('foo', '=', 'bar');\n    $q-&gt;where('baz', '=', 'zal');\n});\n\n// \"(&amp;(foo=bar)(baz=zal))\"\necho $query-&gt;getUnescapedQuery();\n</code></pre>"},{"location":"docs/core/v3/searching-api/#cache","title":"<code>cache</code>","text":"<p>Cache the executed query until the given date has passed:</p> <p>Pass <code>true</code> as the second argument to force flush the cache if the query has been executed before.</p> <pre><code>$query = $connection-&gt;query();\n\n$until = new \\DateTime('+1 day');\n\n$query-&gt;cache($until, $flush = false);\n</code></pre>"},{"location":"docs/core/v3/searching-api/#chunk","title":"<code>chunk</code>","text":"<p>Chunk a query</p> <p>Important: This method is excellent for keeping memory usage low, since only the number of requested objects per chunk is kept in memory, not the entire result.</p> <pre><code>$connection-&gt;query()-&gt;chunk(1000, function ($objects) {\n    foreach ($objects as $object) {\n        // ...\n    }\n});\n</code></pre> <p>You may also stop further chunks from being processed by returning false from the closure:</p> <pre><code>$connection-&gt;query()-&gt;chunk(1000, function ($objects) {\n    // ...\n\n    return false;\n});\n</code></pre> <p>If you need to execute sub-queries inside of your chunk callback and  you're working with an LDAP server that does not support it, you may  pass in a fourth argument (or via the parameters name <code>isolate</code>) to  run the chunk operation on it's own connection instance:</p> <pre><code>$connection-&gt;query()-&gt;chunk(1000, function ($objects) {\n    // Model::where('...')-&gt;get();\n}, isolate: true);\n</code></pre> <p>Once the chunk finishes (or an exception occurs), the  dynamically created connection will be auto-closed.</p>"},{"location":"docs/core/v3/searching-api/#clearfilters","title":"<code>clearFilters</code>","text":"<p>Reset / clear all filters that have been added to the query:</p> <pre><code>$query = $connection-&gt;query();\n\n$query-&gt;where('foo', '=', 'bar');\n\n$query-&gt;clearFilters();\n\n// array:3 [\u25bc\n//   \"and\" =&gt; []\n//   \"or\" =&gt; []\n//   \"raw\" =&gt; []\n// ]\nvar_dump($query-&gt;getFilters());\n</code></pre>"},{"location":"docs/core/v3/searching-api/#delete","title":"<code>delete</code>","text":"<p>Delete an entry from the directory:</p> <pre><code>$query = $connection-&gt;query();\n\n$query-&gt;delete('cn=John Doe,ou=Users,dc=local,dc=com');\n</code></pre>"},{"location":"docs/core/v3/searching-api/#deleteattributes","title":"<code>deleteAttributes</code>","text":"<p>Delete an attributes values from the directory:</p> <pre><code>$query = $connection-&gt;query();\n\n$entry = 'cn=Accounting Users,ou=Groups,dc=local,dc=com';\n\n// Delete all values from an attribute, for example,\n// removing all members from a particular group:\n$query-&gt;deleteAttributes($entry, ['member' =&gt; []]);\n\n// Delete a specific value from an attribute, for example,\n// removing a specific member from a particular group:\n$member = 'cn=John Doe,ou=Users,dc=local,dc=com';\n\n$query-&gt;deleteAttributes($entry, ['member' =&gt; [$member]]);\n</code></pre>"},{"location":"docs/core/v3/searching-api/#each","title":"<code>each</code>","text":"<p>Execute a callback over each object from a chunked query (default <code>1000</code> per chunk):</p> <pre><code>$connection-&gt;query()-&gt;each(function ($object) {\n    // ...\n});\n</code></pre> <p>You may also specify a chunk size in the method's second parameter:</p> <pre><code>$connection-&gt;query()-&gt;each(function ($object) {\n    // ...\n}, $chunk = 500);\n</code></pre> <p>Similarly with <code>chunk</code>, you may pass in a fourth argument  (or via its named parameter <code>isolate</code>), to run the chunk  operation on it's own connection instance:</p> <pre><code>$connection-&gt;query()-&gt;each(function ($object) {\n    // Model::where('...')-&gt;get();\n}, isolate: true);\n</code></pre> <p>Once the underlying chunk finishes (or an exception occurs),  the dynamically created connection will be auto-closed.</p>"},{"location":"docs/core/v3/searching-api/#escape","title":"<code>escape</code>","text":"<p>Prepare a value to be escaped:</p> <p>This method accepts the same parameters as the built in PHP <code>ldap_escape</code> method.</p> <pre><code>$query = $connection-&gt;query();\n\n// Returns instance of:\n// LdapRecord\\Models\\Attributes\\EscapedValue\n$value = $query-&gt;escape('value', $ignore = '', $flags = 0);\n\n// Prepare the value to be escaped for use in a distinguished name:\n$value-&gt;dn();\n\n// Prepare the value to be escaped for use in a filter:\n$value-&gt;filter();\n\n// Prepare the value to be escaped for use in a distinguished name and filter:\n$value-&gt;both();\n\n// Set the characters to ignore:\n$value-&gt;ignore('/*');\n\n// Get the escaped value:\n$value-&gt;get();\n\n// Can also be casted to string:\n(string) $value;\n</code></pre>"},{"location":"docs/core/v3/searching-api/#find","title":"<code>find</code>","text":"<p>Find an entry in the directory by its distinguished name:</p> <pre><code>$query = $connection-&gt;query();\n\nif ($entry = $query-&gt;find('cn=John Doe,dc=local,dc=com')) {\n    // Found entry!\n} else {\n    // Not found.\n}\n</code></pre>"},{"location":"docs/core/v3/searching-api/#findby","title":"<code>findBy</code>","text":"<p>Find the first matching entry in the directory by the given attribute and value:</p> <pre><code>$query = $connection-&gt;query();\n\nif ($entry = $query-&gt;findBy('samaccountname', 'johndoe')) {\n    // Found entry!\n} else {\n    // Not found.\n}\n</code></pre>"},{"location":"docs/core/v3/searching-api/#findbyorfail","title":"<code>findByOrFail</code>","text":"<p>Find the first matching entry in the directory by the given attribute and value or fail:</p> <pre><code>$query = $connection-&gt;query();\n\ntry {\n    $entry = $query-&gt;findByOrFail('samaccountname', 'johndoe');\n} catch (\\LdapRecord\\Models\\ModelNotFoundException $ex) {\n    // Not found.\n}\n</code></pre>"},{"location":"docs/core/v3/searching-api/#findmany","title":"<code>findMany</code>","text":"<p>Find many entries in the directory by an array of Distinguished Names:</p> <pre><code>$query = $connection-&gt;query();\n\n$entries = $query-&gt;findMany([\n    'cn=John Doe,dc=local,dc=com',\n    'ou=Accounting,dc=local,dc=com',\n]);\n</code></pre>"},{"location":"docs/core/v3/searching-api/#findmanyby","title":"<code>findManyBy</code>","text":"<p>Find many entries in the directory by the given attribute and values:</p> <pre><code>$query = $connection-&gt;query();\n\n$entries = $query-&gt;findManyBy('samaccountname', ['johndoe', 'janedoe', 'sbauman']);\n</code></pre>"},{"location":"docs/core/v3/searching-api/#findorfail","title":"<code>findOrFail</code>","text":"<p>Find an entry in the directory by its distinguished name or fail:</p> <pre><code>$query = $connection-&gt;query();\n\ntry {\n    $entry = $query-&gt;findOrFail('cn=John Doe,dc=local,dc=com');\n} catch (\\LdapRecord\\Models\\ModelNotFoundException $ex) {\n    // Not found.\n}\n</code></pre>"},{"location":"docs/core/v3/searching-api/#first","title":"<code>first</code>","text":"<p>Get the first resulting entry of a query from the directory:</p> <pre><code>$query = $connection-&gt;query();\n\n$entry = $query-&gt;whereStartsWith('cn', 'Steve')-&gt;first();\n</code></pre>"},{"location":"docs/core/v3/searching-api/#firstorfail","title":"<code>firstOrFail</code>","text":"<p>Get the first resulting entry of a query from the directory or fail:</p> <pre><code>$query = $connection-&gt;query();\n\ntry {\n    $entry = $query-&gt;whereStartsWith('cn', 'Steve')-&gt;first();\n} catch (\\LdapRecord\\Models\\ModelNotFoundException $ex) {\n    // Not entries returned.\n}\n</code></pre>"},{"location":"docs/core/v3/searching-api/#forpage","title":"<code>forPage</code>","text":"<p>Important: Your LDAP server must support Virtual List View.</p> <p>The <code>forPage</code> supports the same arguments and executes the same underlying query as the slice method, but it will  return query results directly, instead of being wrapped in a <code>Slice</code> object:</p> <pre><code>$query = $connection-&gt;query();\n\n$results = $query-&gt;forPage($page = 1, $perPage = 1000);\n</code></pre>"},{"location":"docs/core/v3/searching-api/#get","title":"<code>get</code>","text":"<p>Get the resulting entries of a query from the directory:</p> <p>Important: If you expect to have more than 1000 entries returned from your query, use the paginate method instead, which will return all entries.</p> <pre><code>$query = $connection-&gt;query();\n\n$entries = $query-&gt;where('company', '=', 'Acme')-&gt;get();\n</code></pre>"},{"location":"docs/core/v3/searching-api/#getcache","title":"<code>getCache</code>","text":"<p>Get the query cache (if set):</p> <pre><code>$query = $connection-&gt;query();\n\n// Returns null or instance of LdapRecord\\Query\\Cache:\n$cache = $query-&gt;getCache();\n</code></pre>"},{"location":"docs/core/v3/searching-api/#getconnection","title":"<code>getConnection</code>","text":"<p>Get the underlying connection the query is executing on:</p> <pre><code>$query = $connection-&gt;query();\n\n// Returns instance of LdapRecord\\Connection:\n$conn = $query-&gt;getConnection();\n</code></pre>"},{"location":"docs/core/v3/searching-api/#getdn","title":"<code>getDn</code>","text":"<p>Get the base Distinguished Name that the query is executing on:</p> <pre><code>$query = $connection-&gt;query();\n\n$query-&gt;setDn('ou=Users,dc=local,dc=com');\n\n// Returns 'ou=Users,dc=local,dc=com':\n$base = $query-&gt;getDn();\n</code></pre>"},{"location":"docs/core/v3/searching-api/#getfilters","title":"<code>getFilters</code>","text":"<p>Get the filters that have been added to the query:</p> <pre><code>$query = $connection-&gt;query();\n\n$query-&gt;where('company', '=', 'Acme');\n\n// array:3 [\u25bc\n//   \"and\" =&gt; array:1 [\u25bc\n//     0 =&gt; array:3 [\u25bc\n//       \"field\" =&gt; \"company\"\n//       \"operator\" =&gt; \"=\"\n//       \"value\" =&gt; LdapRecord\\Models\\Attributes\\EscapedValue\n//     ]\n//   ]\n//   \"or\" =&gt; []\n//   \"raw\" =&gt; []\n// ]\nvar_dump($query-&gt;getFilters());\n</code></pre>"},{"location":"docs/core/v3/searching-api/#getgrammar","title":"<code>getGrammar</code>","text":"<p>Get the underlying query grammar instance:</p> <pre><code>$query = $connection-&gt;query();\n\n// Returns instance of LdapRecord\\Query\\Grammar:\n$grammar = $query-&gt;getGrammar();\n</code></pre>"},{"location":"docs/core/v3/searching-api/#getquery","title":"<code>getQuery</code>","text":"<p>Get the raw, escaped LDAP query filter:</p> <pre><code>$query = $connection-&gt;query();\n\n$query-&gt;where('company', '=', 'Acme');\n\n// Returns '(company=\\41\\63\\6d\\65)'\n$filter = $query-&gt;getQuery();\n</code></pre>"},{"location":"docs/core/v3/searching-api/#getselects","title":"<code>getSelects</code>","text":"<p>Get the selected attributes of the query:</p> <p>Important: <code>objectclass</code> will always be included in the returned array.</p> <pre><code>$query = $connection-&gt;query();\n\n// array:1 [\u25bc\n//   0 =&gt; \"objectclass\"\n// ]\nvar_dump($query-&gt;getSelects());\n\n$query-&gt;select(['cn', 'mail', 'givenname']);\n\n// array:4 [\u25bc\n//   0 =&gt; \"cn\"\n//   1 =&gt; \"mail\"\n//   2 =&gt; \"givenname\"\n//   3 =&gt; \"objectclass\"\n// ]\nvar_dump($query-&gt;getSelects());\n</code></pre>"},{"location":"docs/core/v3/searching-api/#gettype","title":"<code>getType</code>","text":"<p>Get the type of LDAP query to be executed, either <code>search</code>, <code>listing</code> or <code>read</code>:</p> <pre><code>$query = $connection-&gt;query();\n\n// Returns 'search':\n$query-&gt;getType();\n\n// Returns 'listing':\n$query-&gt;listing()-&gt;getType();\n\n// Returns 'read':\n$query-&gt;read()-&gt;getType();\n</code></pre>"},{"location":"docs/core/v3/searching-api/#getunescapedquery","title":"<code>getUnescapedQuery</code>","text":"<p>Get the raw, unescaped LDAP query filter:</p> <pre><code>$query = $connection-&gt;query();\n\n$query-&gt;where('company', '=', 'Acme');\n\n// Returns '(company=Acme)'\n$filter = $query-&gt;getUnescapedQuery();\n</code></pre>"},{"location":"docs/core/v3/searching-api/#hascontrol","title":"<code>hasControl</code>","text":"<p>Determine if the query has a specific LDAP control OID added:</p> <pre><code>$query = $connection-&gt;query();\n\nif ($query-&gt;hasControl($oid = '1.2.840.113556.1.4.417')) {\n    // The query has a control added for the OID.\n}\n</code></pre>"},{"location":"docs/core/v3/searching-api/#hasselects","title":"<code>hasSelects</code>","text":"<p>Determine if the query has any selects added:</p> <pre><code>$query = $connection-&gt;query();\n\n// Returns false:\n$query-&gt;hasSelects();\n\n$query-&gt;select(['cn', 'sn']);\n\n// Returns true:\n$query-&gt;hasSelects();\n</code></pre>"},{"location":"docs/core/v3/searching-api/#in","title":"<code>in</code>","text":"<p>Sets the base Distinguished Name to perform a search upon.</p> <p>Alias for the setDn method.</p> <pre><code>$query = $connection-&gt;query();\n\n// Get all entries below the 'Users' OU:\n$query-&gt;in('ou=Users,dc=local,dc=com')-&gt;get();\n</code></pre>"},{"location":"docs/core/v3/searching-api/#insert","title":"<code>insert</code>","text":"<p>Insert a new entry in the directory:</p> <pre><code>$query = $connection-&gt;query();\n\n$dn = 'cn=John Doe,dc=local,dc=com';\n\n$attributes = [\n    'cn' =&gt; 'John Doe',\n    'objectclass' =&gt; [\n       'top',\n        'person',\n        'organizationalperson',\n        'user',\n    ],\n];\n\n$query-&gt;insert($dn, $attributes);\n</code></pre>"},{"location":"docs/core/v3/searching-api/#insertattributes","title":"<code>insertAttributes</code>","text":"<p>Create attributes on an existing entry in the directory:</p> <pre><code>$query = $connection-&gt;query();\n\n$dn = 'cn=John Doe,dc=local,dc=com';\n\n$attributes = [\n    'company' =&gt; 'Acme',\n];\n\n$query-&gt;insertAttributes($dn, $attributes);\n</code></pre>"},{"location":"docs/core/v3/searching-api/#isnested","title":"<code>isNested</code>","text":"<p>Determine if a query builder is nested:</p> <pre><code>$query = $connection-&gt;query();\n\n// Returns false:\n$query-&gt;isNested();\n\n$query-&gt;andFilter(function ($q) {\n    // Returns true:\n    $q-&gt;isNested();\n});\n</code></pre>"},{"location":"docs/core/v3/searching-api/#ispaginated","title":"<code>isPaginated</code>","text":"<p>Determine if a query builder has been paginated:</p> <pre><code>$query = $connection-&gt;query();\n\n// Returns false:\n$query-&gt;isPaginated();\n\n$results = $query-&gt;paginate();\n\n// Returns true:\n$query-&gt;isPaginated();\n</code></pre>"},{"location":"docs/core/v3/searching-api/#limit","title":"<code>limit</code>","text":"<p>Set the maxmimum number of entries to be returned from the directory:</p> <pre><code>$query = $connection-&gt;query();\n\n$results = $query-&gt;whereHas('cn')-&gt;limit(200)-&gt;get();\n</code></pre>"},{"location":"docs/core/v3/searching-api/#listing","title":"<code>listing</code>","text":"<p>Perform an LDAP <code>listing</code> operation, requesting only immediate children / leaf nodes of the query base:</p> <pre><code>$query = $connection-&gt;query();\n\n// Only retrieve the immediate children / leaf nodes of the 'Groups' OU:\n$groups = $query-&gt;in('ou=Groups,dc=local,dc=com')-&gt;listing()-&gt;get();\n</code></pre>"},{"location":"docs/core/v3/searching-api/#model","title":"<code>model</code>","text":"<p>Create a new query builder instance for the given model:</p> <pre><code>use LdapRecord\\Models\\ActiveDirectory\\User;\n\n$query = $connection-&gt;query();\n\n$modelQuery = $query-&gt;model(new User);\n</code></pre>"},{"location":"docs/core/v3/searching-api/#nested","title":"<code>nested</code>","text":"<p>Whether to mark the current query as nested:</p> <p>Important: This affects how the query filter is generated.</p> <pre><code>$query = $connection-&gt;query();\n\n// Returns \"(cn=John)(sn=Doe)\":\n$query-&gt;nested()\n    -&gt;where('cn', '=', 'John')\n    -&gt;where('sn', '=', 'Doe')\n    -&gt;getUnescapedQuery();\n\n// Returns \"(&amp;(cn=John)(sn=Doe))\"\n$query-&gt;nested(false)\n    -&gt;where('cn', '=', 'John')\n    -&gt;where('sn', '=', 'Doe')\n    -&gt;getUnescapedQuery();\n</code></pre>"},{"location":"docs/core/v3/searching-api/#newinstance","title":"<code>newInstance</code>","text":"<p>Create a new query instance:</p> <pre><code>$query = $connection-&gt;query();\n\n// Create and inherit the base DN from the previous instance:\n$newQuery = $query-&gt;newInstace();\n\n// Use a new base DN:\n$newQuery = $query-&gt;newInstace('ou=Users,dc=local,dc=com');\n</code></pre>"},{"location":"docs/core/v3/searching-api/#newnestedinstance","title":"<code>newNestedInstance</code>","text":"<p>Create a new nested query instance:</p> <pre><code>$query = $connection-&gt;query();\n\n// New nested query builder:\n$nested = $query-&gt;newNestedInstance();\n\n// New nested query builder With a closure:\n$nested = $query-&gt;newNestedInstance(function (Builder $query) {\n    //\n});\n</code></pre>"},{"location":"docs/core/v3/searching-api/#notfilter","title":"<code>notFilter</code>","text":"<p>Add a nested 'not' filter to the current query:</p> <pre><code>$query = $connection-&gt;query();\n\n// Returns \"(!(cn=John Doe))\":\n$query-&gt;notFilter(function ($query) {\n    $query-&gt;where('cn', '=', 'John Doe');\n})-&gt;getUnescapedQuery();\n</code></pre>"},{"location":"docs/core/v3/searching-api/#orfilter","title":"<code>orFilter</code>","text":"<p>Add a nested 'or' filter to the current query:</p> <pre><code>$query = $connection-&gt;query();\n\n// Returns \"(|(cn=John Doe))\":\n$query-&gt;orFilter(function ($query) {\n    $query-&gt;where('cn', '=', 'John Doe');\n})-&gt;getUnescapedQuery();\n</code></pre>"},{"location":"docs/core/v3/searching-api/#orwhere","title":"<code>orWhere</code>","text":"<p>Add an 'or where' clause to the query:</p> <p>Important: If only a single \"or\" is added to the query with no other filters, it will be converted to a single filter instead.</p> <pre><code>// Returns \"(cn=John)\":\n$connection-&gt;query()\n    -&gt;orWhere('cn', '=', 'John')\n    -&gt;getUnescapedQuery();\n\n// Returns \"(|(cn=John)(sn=Doe))\":\n$connection-&gt;query()\n    -&gt;where('cn', '=', 'John')\n    -&gt;orWhere('sn', '=', 'Doe')\n    -&gt;getUnescapedQuery();\n</code></pre>"},{"location":"docs/core/v3/searching-api/#orwhereapproximatelyequals","title":"<code>orWhereApproximatelyEquals</code>","text":"<p>Add an 'or where approximately equals' clause to the query:</p> <pre><code>// Returns \"(cn~=John)\"\n$connection-&gt;query()\n    -&gt;orWhereApproximatelyEquals('cn', 'John')\n    -&gt;getUnescapedQuery();\n\n// Returns \"(|(cn~=Sue)(cn~=John))\"\n$connection-&gt;query()\n    -&gt;whereApproximatelyEquals('cn', 'Sue')\n    -&gt;orWhereApproximatelyEquals('cn', 'John')\n    -&gt;getUnescapedQuery();\n</code></pre>"},{"location":"docs/core/v3/searching-api/#orwherecontains","title":"<code>orWhereContains</code>","text":"<p>Add an 'or where contains' clause to the query:</p> <pre><code>// Returns \"(cn=*John*)\"\n$connection-&gt;query()\n    -&gt;orWhereContains('cn', 'John')\n    -&gt;getUnescapedQuery();\n\n// Returns \"(|(cn=*Sue*)(cn=*John*))\"\n$connection-&gt;query()\n    -&gt;whereContains('cn', 'Sue')\n    -&gt;orWhereContains('cn', 'John')\n    -&gt;getUnescapedQuery();\n</code></pre>"},{"location":"docs/core/v3/searching-api/#orwhereendswith","title":"<code>orWhereEndsWith</code>","text":"<p>Add an 'or where ends with' clause to the query:</p> <pre><code>// Returns \"(cn=*Doe)\"\n$connection-&gt;query()\n    -&gt;orWhereEndsWith('cn', 'Doe')\n    -&gt;getUnescapedQuery();\n\n// Returns \"(|(cn=*Betty)(cn=*Doe))\"\n$connection-&gt;query()\n    -&gt;whereEndsWith('cn', 'Betty')\n    -&gt;orWhereEndsWith('cn', 'Doe')\n    -&gt;getUnescapedQuery();\n</code></pre>"},{"location":"docs/core/v3/searching-api/#orwhereequals","title":"<code>orWhereEquals</code>","text":"<p>Add an 'or where equals' clause to the query:</p> <pre><code>// Returns \"(cn=John Doe)\"\n$connection-&gt;query()\n    -&gt;orWhereEquals('cn', 'John Doe')\n    -&gt;getUnescapedQuery();\n\n// Returns \"(|(cn=Suzy Doe)(cn=John Doe))\"\n$connection-&gt;query()\n    -&gt;whereEquals('cn', 'Suzy Doe')\n    -&gt;orWhereEquals('cn', 'John Doe')\n    -&gt;getUnescapedQuery();\n</code></pre>"},{"location":"docs/core/v3/searching-api/#orwherehas","title":"<code>orWhereHas</code>","text":"<p>Add an 'or where has' clause to the query:</p> <pre><code>// Returns \"(title=*)\"\n$connection-&gt;query()\n    -&gt;orWhereHas('title')\n    -&gt;getUnescapedQuery();\n\n// Returns \"(|(title=*)(department=*))\"\n$connection-&gt;query()\n    -&gt;whereHas('title')\n    -&gt;orWhereHas('department')\n    -&gt;getUnescapedQuery();\n</code></pre>"},{"location":"docs/core/v3/searching-api/#orwherenotcontains","title":"<code>orWhereNotContains</code>","text":"<p>Add an 'or where not contains' clause to the query:</p> <pre><code>// Returns \"(!(title=*Accountant*))\"\n$connection-&gt;query()\n    -&gt;orWhereNotContains('title', 'Accountant')\n    -&gt;getUnescapedQuery();\n\n// Returns \"(|(!(title=*Accountant*))(!(department=*Accounting*)))\"\n$connection-&gt;query()\n    -&gt;whereNotContains('title', 'Accountant')\n    -&gt;orWhereNotContains('department', 'Accounting')\n    -&gt;getUnescapedQuery();\n</code></pre>"},{"location":"docs/core/v3/searching-api/#orwherenotendswith","title":"<code>orWhereNotEndsWith</code>","text":"<p>Add an 'or where not ends with' clause to the query:</p> <pre><code>// Returns \"(!(cn=*Doe))\"\n$connection-&gt;query()\n    -&gt;orWhereNotEndsWith('cn', 'Doe')\n    -&gt;getUnescapedQuery();\n\n// Returns \"(|(!(cn=*Betty))(!(cn=*Doe)))\"\n$connection-&gt;query()\n    -&gt;whereNotEndsWith('cn', 'Betty')\n    -&gt;orWhereNotEndsWith('cn', 'Doe')\n    -&gt;getUnescapedQuery();\n</code></pre>"},{"location":"docs/core/v3/searching-api/#orwherenotequals","title":"<code>orWhereNotEquals</code>","text":"<p>Add an 'or where not equals' clause to the query:</p> <pre><code>// Returns \"(!(cn=John Doe))\"\n$connection-&gt;query()\n    -&gt;orWhereNotEquals('cn', 'John Doe')\n    -&gt;getUnescapedQuery();\n\n// Returns \"(|(!(cn=Suzy Betty))(!(cn=John Doe)))\"\n$connection-&gt;query()\n    -&gt;whereNotEquals('cn', 'Suzy Betty')\n    -&gt;orWhereNotEquals('cn', 'John Doe')\n    -&gt;getUnescapedQuery();\n</code></pre>"},{"location":"docs/core/v3/searching-api/#orwherenothas","title":"<code>orWhereNotHas</code>","text":"<p>Add an 'or where not has' clause to the query:</p> <pre><code>// Returns \"(!(title=*))\"\n$connection-&gt;query()\n    -&gt;orWhereNotHas('title')\n    -&gt;getUnescapedQuery();\n\n// Returns \"(|(!(title=*))(!(department=*)))\"\n$connection-&gt;query()\n    -&gt;whereNotHas('title')\n    -&gt;orWhereNotHas('department')\n    -&gt;getUnescapedQuery();\n</code></pre>"},{"location":"docs/core/v3/searching-api/#orwherenotstartswith","title":"<code>orWhereNotStartsWith</code>","text":"<p>Add an 'or where not starts with' clause to the query:</p> <pre><code>// Returns \"(!(cn=John*))\"\n$connection-&gt;query()\n    -&gt;orWhereNotStartsWith('cn', 'John')\n    -&gt;getUnescapedQuery();\n\n// Returns \"(|(!(cn=Suzy*))(!(cn=John*)))\"\n$connection-&gt;query()\n    -&gt;whereNotStartsWith('cn', 'Suzy')\n    -&gt;orWhereNotStartsWith('cn', 'John')\n    -&gt;getUnescapedQuery();\n</code></pre>"},{"location":"docs/core/v3/searching-api/#orwhereraw","title":"<code>orWhereRaw</code>","text":"<p>Add a \"or where\" clause to the query without escaping the value, useful when values can contain distinguished names or GUIDs:</p> <pre><code>$query = $connection-&gt;query();\n\n$query\n    -&gt;whereRaw('objectguid', '=', '270db4d0-249d-46a7-9cc5-eb695d9af9ac')\n    -&gt;orWhereRaw('objectguid', '=', '878ce8b7-2713-41a9-a765-5e3905ab5ef2');\n</code></pre> <p>Add an 'or where starts with' clause to the query:</p> <pre><code>// Returns \"(cn=John*)\"\n$connection-&gt;query()\n    -&gt;orWhereStartsWith('cn', 'John')\n    -&gt;getUnescapedQuery();\n\n// Returns \"(|(cn=Suzy*)(cn=John*))\"\n$connection-&gt;query()\n    -&gt;whereStartsWith('cn', 'Suzy')\n    -&gt;orWhereStartsWith('cn', 'John')\n    -&gt;getUnescapedQuery();\n</code></pre>"},{"location":"docs/core/v3/searching-api/#orwherestartswith","title":"<code>orWhereStartsWith</code>","text":"<p>Add an 'or where starts with' clause to the query:</p> <pre><code>// Returns \"(cn=John*)\"\n$connection-&gt;query()\n    -&gt;orWhereStartsWith('cn', 'John')\n    -&gt;getUnescapedQuery();\n\n// Returns \"(|(cn=Suzy*)(cn=John*))\"\n$connection-&gt;query()\n    -&gt;whereStartsWith('cn', 'Suzy')\n    -&gt;orWhereStartsWith('cn', 'John')\n    -&gt;getUnescapedQuery();\n</code></pre>"},{"location":"docs/core/v3/searching-api/#paginate","title":"<code>paginate</code>","text":"<p>Paginate the query by the given limit, returning all results from the LDAP directory:</p> <p>This will allow you to exceed the LDAP max result limit of (usually) 1000.</p> <pre><code>$query = $connection-&gt;query();\n\n// Paginate by default 1000:\n$results = $query-&gt;paginate();\n\n// Paginate by a specific amount:\n$results = $query-&gt;paginate(500);\n</code></pre>"},{"location":"docs/core/v3/searching-api/#query","title":"<code>query</code>","text":"<p>Execute a raw filter query on the connection:</p> <pre><code>$query = $connection-&gt;query();\n\n$results = $query-&gt;query('(cn=John Doe)');\n</code></pre>"},{"location":"docs/core/v3/searching-api/#rawfilter","title":"<code>rawFilter</code>","text":"<p>Add a raw LDAP search filter to the query:</p> <pre><code>$query = $connection-&gt;query();\n\n// Returns \"(&amp;(cn=Contoso)(sn=Doe*))\"\n$query\n    -&gt;rawFilter('(company=Contoso)')\n    -&gt;rawFilter('(sn=Doe*)')\n    -&gt;getUnescapedQuery();\n</code></pre>"},{"location":"docs/core/v3/searching-api/#read","title":"<code>read</code>","text":"<p>Set the query to read a single search result using the query's base DN (using <code>ldap_read</code>):</p> <p>Queries executed with <code>read()</code> will only return a maximum of one result.</p> <pre><code>$query = $connection-&gt;query();\n\n$entry = $query-&gt;setDn('cn=John Doe,dc=local,dc=com')-&gt;read()-&gt;first();\n</code></pre>"},{"location":"docs/core/v3/searching-api/#recursive","title":"<code>recursive</code>","text":"<p>Set the query to include recursive search results (using <code>ldap_search</code>):</p> <p>This is the default search query operation.</p> <pre><code>$query = $connection-&gt;query();\n\n$results = $query-&gt;recursive()-&gt;get();\n</code></pre>"},{"location":"docs/core/v3/searching-api/#rename","title":"<code>rename</code>","text":"<p>Rename or move an object. Performs an <code>ldap_rename</code> under the hood:</p> <pre><code>// Rename an object:\n$connection-&gt;query()-&gt;rename(\n    $dn = 'cn=John Doe,dc=local,dc=com',\n    $newRdn = 'cn=Johnathon Doe',\n    $newParentDn = 'dc=local,dc=com'\n);\n\n// Move an object:\n$connection-&gt;query()-&gt;rename(\n    $dn = 'cn=John Doe,dc=local,dc=com',\n    $newRdn = 'cn=John Doe',\n    $newParentDn = 'ou=Users,dc=local,dc=com'\n);\n</code></pre>"},{"location":"docs/core/v3/searching-api/#select","title":"<code>select</code>","text":"<p>Set the attributes to return from the directory:</p> <p>Important: By selecting only the attributes you need, you can effectively reduce memory usage on large query result sets.</p> <pre><code>$query = $connection-&gt;query();\n\n// Only return the 'cn' and 'sn' attributes in result\n$query-&gt;select(['cn', 'sn'])-&gt;get();\n</code></pre>"},{"location":"docs/core/v3/searching-api/#setcache","title":"<code>setCache</code>","text":"<p>Set the cache instance to use for the query:</p> <p>The cache instance must extend <code>LdapRecord\\Query\\Cache</code>.</p> <pre><code>$query = $connection-&gt;query();\n\n$query-&gt;setCache($cache);\n</code></pre>"},{"location":"docs/core/v3/searching-api/#setconnection","title":"<code>setConnection</code>","text":"<p>Set the connection instance to use for the query:</p> <pre><code>$query = $connection-&gt;query();\n\n$newConnection = new Connection($config = ['...']);\n\n$query-&gt;setConnection($newConnection);\n</code></pre>"},{"location":"docs/core/v3/searching-api/#setdn","title":"<code>setDn</code>","text":"<p>Sets the base Distinguished Name to perform a search upon.</p> <pre><code>$query = $connection-&gt;query();\n\n// Get all entries below the 'Users' OU:\n$query-&gt;setDn('ou=Users,dc=local,dc=com')-&gt;get();\n</code></pre>"},{"location":"docs/core/v3/searching-api/#setgrammar","title":"<code>setGrammar</code>","text":"<p>Set the underlying query <code>Grammar</code> instance:</p> <p>The given instance must extend the built-in <code>LdapRecord\\Query\\Grammar</code>.</p> <pre><code>$query = $connection-&gt;query();\n\n$myGrammarInstance = new Grammar();\n\n$query-&gt;setGrammar($myGrammarInstance);\n</code></pre>"},{"location":"docs/core/v3/searching-api/#slice","title":"<code>slice</code>","text":"<p>Important: Your LDAP server must support Virtual List View.</p> <p>To get a \"page\" of an LDAP query to conserve memory and retrieve results quickly, you may use the <code>slice()</code> method.</p> <p>A <code>Slice</code> object will always be returned with the query results that can be retrieved via the <code>items()</code> method.</p> <p>Note: Your query must search less than 10,000 records (this is a configurable limit in Active Directory).</p> <pre><code>$query = $connection-&gt;query();\n\n$slice = $query-&gt;slice($page = 1, $perPage = 100): \\LdapRecord\\Query\\Slice;\n\n$slice-&gt;items(): array|\\LdapRecord\\Query\\Collection;\n\n$slice-&gt;total(): int;\n\n$slice-&gt;perPage(): int;\n\n$slice-&gt;currentPage(): int;\n\n$slice-&gt;hasMorePages(): bool;\n\n$slice-&gt;hasPages(): bool;\n\n$slice-&gt;onFirstPage(): bool;\n\n$slice-&gt;onLastPage(): bool;\n\n$slice-&gt;isEmpty(): bool;\n\n$slice-&gt;isNotEmpty(): bool;\n</code></pre>"},{"location":"docs/core/v3/searching-api/#sole","title":"<code>sole</code>","text":"<p>If you want to ensure a query returns only a single matching result, you may use the <code>sole()</code> method.</p> <p>If nothing is returned, an <code>ObjectsNotFoundException</code> will be thrown.</p> <p>If more than one record is returned, a <code>MultipleObjectsFoundException</code> will be thrown.</p> <pre><code>$query = $connection-&gt;query();\n\ntry {\n    $object = $query-&gt;where('cn', '=', 'John Doe')-&gt;sole();\n} catch (\\LdapRecord\\Query\\ObjectsNotFoundException $e) {\n    // Nothing was returned from the query.\n} catch (\\LdapRecord\\Query\\MultipleObjectsFoundException $e) {\n    // Multiple objects were returned from the query.\n}\n</code></pre>"},{"location":"docs/core/v3/searching-api/#update","title":"<code>update</code>","text":"<p>Update an entry with the given modifications. Performs an <code>ldap_modify_batch</code> under the hood:</p> <pre><code>$query = $connection-&gt;query();\n\n$dn = 'cn=John Doe,dc=local,dc=com';\n\n$modifs = [\n    [\n        'attrib'  =&gt; 'telephoneNumber',\n        'modtype' =&gt; LDAP_MODIFY_BATCH_ADD,\n        'values'  =&gt; ['+1 555 555 1717'],\n    ],\n];\n\n$query-&gt;update($dn, $modifs);\n</code></pre>"},{"location":"docs/core/v3/searching-api/#updateattributes","title":"<code>updateAttributes</code>","text":"<p>Update / replace an entry's attribute with the given values. Performs an <code>ldap_mod_replace</code> under the hood:</p> <pre><code>$query = $connection-&gt;query();\n\n$dn = 'cn=John Doe,dc=local,dc=com';\n\n// Remove the users telephone number:\n$query-&gt;updateAttributes($dn, ['telephoneNumber' =&gt; []]);\n\n// Update / replace the users telephone number:\n$query-&gt;updateAttributes($dn, ['telephoneNumber' =&gt; ['+1 555 555 1717']]);\n</code></pre>"},{"location":"docs/core/v3/searching-api/#where","title":"<code>where</code>","text":"<p>Add a \"where\" clause to the query, searching for objects using the given attribute, operator, and value:</p> <pre><code>$query = $connection-&gt;query();\n\n// Returns \"(cn=John Doe)\"\n$query-&gt;where('cn', '=', 'John Doe')-&gt;getUnescapedQuery();\n</code></pre>"},{"location":"docs/core/v3/searching-api/#whereapproximatelyequals","title":"<code>whereApproximatelyEquals</code>","text":"<p>Add a \"where approximately equals\" clause to the query, searching for objects where the attribute is around the given value:</p> <pre><code>$query = $connection-&gt;query();\n\n$query-&gt;whereApproximatelyEquals('givenName', 'John');\n\n// Returns \"(givenName~=John)\"\n$query-&gt;getUnescapedQuery();\n</code></pre> <p>The approximately equals operator is great for performing \"sounds like\" search operations.</p> <p>For example, the above query would match entries with <code>givenName</code> values of either <code>John</code> or <code>Jon</code>.</p>"},{"location":"docs/core/v3/searching-api/#wherebetween","title":"<code>whereBetween</code>","text":"<p>Add a \"where between\" clause to the query, searching for objects where the attribute is between the given values:</p> <pre><code>$query = $connection-&gt;query();\n\n$from = (new DateTime('October 1st 2016'))-&gt;format('YmdHis.0\\Z');\n$to = (new DateTime('January 1st 2017'))-&gt;format('YmdHis.0\\Z');\n\n$query-&gt;whereBetween('whencreated', [$from, $to]);\n\n// Returns \"(&amp;(whencreated&gt;=20161001000000.0Z)(whencreated&lt;=20170101000000.0Z))\"\n$query-&gt;getUnescapedQuery();\n</code></pre>"},{"location":"docs/core/v3/searching-api/#wherecontains","title":"<code>whereContains</code>","text":"<p>Add a \"where contains\" clause to the query, searching for objects where the attribute contains the given value:</p> <pre><code>$query = $connection-&gt;query();\n\n// Returns \"(title=*Accountant*)\"\n$query-&gt;whereContains('title', 'Accountant')-&gt;getUnescapedQuery();\n</code></pre>"},{"location":"docs/core/v3/searching-api/#wheredeleted","title":"<code>whereDeleted</code>","text":"<p>Set an OID server control that will be sent with the query to instruct the LDAP server to include deleted objects in the result set, and add a <code>(isDeleted=TRUE)</code> clause to the query, effectively returning only deleted objects.</p> <pre><code>$query = $connection-&gt;query();\n\n$onlyDeleted = $query-&gt;whereDeleted()-&gt;get();\n</code></pre>"},{"location":"docs/core/v3/searching-api/#whereendswith","title":"<code>whereEndsWith</code>","text":"<p>Add a \"where ends with\" clause to the query, searching for objects where the attribute ends with the given value:</p> <pre><code>$query = $connection-&gt;query();\n\n// Returns \"(title=*Accountant)\"\n$query-&gt;whereEndsWith('title', 'Accountant')-&gt;getUnescapedQuery();\n</code></pre>"},{"location":"docs/core/v3/searching-api/#whereequals","title":"<code>whereEquals</code>","text":"<p>Add a \"where equals\" clause to the query, searching for objects where the attribute equals the given value:</p> <pre><code>$query = $connection-&gt;query();\n\n// Returns \"(department=Accounting)\"\n$query-&gt;whereEquals('department', 'Accounting')-&gt;getUnescapedQuery();\n</code></pre>"},{"location":"docs/core/v3/searching-api/#wherehas","title":"<code>whereHas</code>","text":"<p>Add a \"where has\" clause to the query, searching for objects where the attribute exists, or is not empty:</p> <pre><code>$query = $connection-&gt;query();\n\n// Returns \"(department=*)\"\n$query-&gt;whereHas('department')-&gt;getUnescapedQuery();\n</code></pre>"},{"location":"docs/core/v3/searching-api/#wherein","title":"<code>whereIn</code>","text":"<p>Add a \"where in\" clause to the query, searching for objects where the attribute contains any of the given values:</p> <pre><code>$query = $connection-&gt;query();\n\n// Returns \"(|(name=john)(name=mary)(name=sue))\"\n$query-&gt;whereIn('name', ['john', 'mary', 'sue'])-&gt;getUnescapedQuery();\n</code></pre>"},{"location":"docs/core/v3/searching-api/#wherenotcontains","title":"<code>whereNotContains</code>","text":"<p>Add a \"where doesn't contain\" clause to the query, searching for objects where the attribute does not contain the given value:</p> <pre><code>$query = $connection-&gt;query();\n\n// Returns \"(!(telephoneNumber=*555*))\"\n$query-&gt;whereNotContains('telephoneNumber', '555')-&gt;getUnescapedQuery();\n</code></pre>"},{"location":"docs/core/v3/searching-api/#wherenotendswith","title":"<code>whereNotEndsWith</code>","text":"<p>Add a \"where doesn't end with\" clause to the query, searching for objects where the attribute does not end with the given value:</p> <pre><code>$query = $connection-&gt;query();\n\n// Returns \"(!(mail=@local.com))\"\n$query-&gt;whereNotEndsWith('mail', '@local.com')-&gt;getUnescapedQuery();\n</code></pre>"},{"location":"docs/core/v3/searching-api/#wherenotequals","title":"<code>whereNotEquals</code>","text":"<p>Add a \"where doesn't equal\" clause to the query, searching for objects where the attribute does not contain the given value:</p> <pre><code>$query = $connection-&gt;query();\n\n// Returns \"(!(department=Accounting))\"\n$query-&gt;whereNotEquals('department', 'Accounting')-&gt;getUnescapedQuery();\n</code></pre>"},{"location":"docs/core/v3/searching-api/#wherenothas","title":"<code>whereNotHas</code>","text":"<p>Add a \"where doesn't have\" clause to the query, searching for objects where the attribute does not exist, or is empty:</p> <pre><code>$query = $connection-&gt;query();\n\n// Returns \"(!(mail=*))\"\n$query-&gt;whereNotHas('mail')-&gt;getUnescapedQuery();\n</code></pre>"},{"location":"docs/core/v3/searching-api/#wherenotstartswith","title":"<code>whereNotStartsWith</code>","text":"<p>Add a \"where doesn't start with\" clause to the query, searching for objects where the attribute does not start with the given value:</p> <pre><code>$query = $connection-&gt;query();\n\n// Returns \"(!(cn=John*))\"\n$query-&gt;whereNotStartsWith('cn', 'John')-&gt;getUnescapedQuery();\n</code></pre>"},{"location":"docs/core/v3/searching-api/#whereraw","title":"<code>whereRaw</code>","text":"<p>Add a \"where\" clause to the query without escaping the value, useful when values can contain distinguished names or GUIDs:</p> <pre><code>$query = $connection-&gt;query();\n\n$query-&gt;whereRaw('objectguid', '=', '270db4d0-249d-46a7-9cc5-eb695d9af9ac');\n</code></pre>"},{"location":"docs/core/v3/searching-api/#wherestartswith","title":"<code>whereStartsWith</code>","text":"<p>Add a \"starts with\" clause to the query, searching for objects where the attribute starts with the given value:</p> <pre><code>$query = $connection-&gt;query();\n\n// Returns \"(cn=John*)\"\n$query-&gt;whereStartsWith('cn', 'John')-&gt;getUnescapedQuery();\n</code></pre>"},{"location":"docs/core/v3/searching-api/#withdeleted","title":"<code>withDeleted</code>","text":"<p>Set an OID server control that will be sent with the query to instruct the LDAP server to include deleted objects in the result set:</p> <pre><code>$query = $connection-&gt;query();\n\n$resultsWithDeleted = $query-&gt;withDeleted()-&gt;get();\n</code></pre>"},{"location":"docs/core/v3/searching/","title":"Searching","text":""},{"location":"docs/core/v3/searching/#introduction","title":"Introduction","text":"<p>Using the LdapRecord query builder makes building LDAP queries feel effortless.</p> <p>It allows you to generate LDAP filters using a fluent and convenient interface, similar to Eloquent in Laravel.</p> <p>Important: The LdapRecord query builder escapes all fields &amp; values given to its <code>where()</code> methods. There is no need to clean or escape strings before passing them into the query builder.</p>"},{"location":"docs/core/v3/searching/#creating-a-new-query","title":"Creating a new Query","text":"<p>To create a new search query, call the <code>query()</code> method on your <code>Connection</code> instance:</p> <pre><code>$query = $connection-&gt;query();\n</code></pre> <p>Or you can chain all your methods if you'd prefer:</p> <pre><code>$results = $connection-&gt;query()-&gt;where('cn', '=', 'John Doe')-&gt;get();\n</code></pre> <p>Important: Querying your LDAP connection manually will return raw LDAP results in a <code>Collection</code>. You must query using models themselves if you would like them to be returned instead.</p>"},{"location":"docs/core/v3/searching/#selects","title":"Selects","text":"<p>Important: Fields are case in-sensitive. For example, you can insert <code>CN</code>, <code>cn</code> or <code>cN</code>, they will return the same result.</p> <p>Selecting only the LDAP attributes you need will increase the speed of your queries.</p> <pre><code>// Passing in an array of attributes\n$query-&gt;select(['cn', 'samaccountname', 'telephone', 'mail']);\n\n// Passing in each attribute as an argument\n$query-&gt;select('cn', 'samaccountname', 'telephone', 'mail');\n</code></pre>"},{"location":"docs/core/v3/searching/#executing-searches","title":"Executing Searches","text":""},{"location":"docs/core/v3/searching/#finding-a-record","title":"Finding a record","text":"<p>If you're trying to find a single record, you must use the <code>find()</code> method and insert the distinguished name of the record you are looking for:</p> <pre><code>$record = $query-&gt;find('cn=John Doe,dc=local,dc=com');\n\nif ($record) {\n    // Record was found!\n} else {\n    // Hmm, looks like we couldn't find anything...\n}\n</code></pre>"},{"location":"docs/core/v3/searching/#finding-a-record-or-failing","title":"Finding a record (or failing)","text":"<p>If you'd like to try and find a single record and throw an exception when it hasn't been found, use the <code>findOrFail()</code> method:</p> <pre><code>try {\n    $record = $query-&gt;findOrFail('cn=John Doe,dc=local,dc=com');\n} catch (LdapRecord\\Models\\ModelNotFoundException $e) {\n    // Record wasn't found!\n}\n</code></pre>"},{"location":"docs/core/v3/searching/#finding-a-record-by-a-specific-attribute","title":"Finding a record by a specific attribute","text":"<p>If you're looking for a single record with a specific attribute, use the <code>findBy()</code> method:</p> <pre><code>// We're looking for a record with the 'samaccountname' of 'jdoe'.\n$record = $query-&gt;findBy('samaccountname', 'jdoe');\n</code></pre> <p>You can also use <code>findByOrFail()</code> to generate an exception when a record is not found.</p>"},{"location":"docs/core/v3/searching/#retrieving-results","title":"Retrieving results","text":"<p>To get the results from a search, simply call the <code>get()</code> method:</p> <pre><code>$results = $query-&gt;select(['cn', 'samaccountname'])-&gt;get();\n</code></pre> <p>Results will be returned inside of an <code>LdapRecord\\Query\\Collection</code> instance.</p>"},{"location":"docs/core/v3/searching/#retrieving-the-first-record","title":"Retrieving the first record","text":"<p>To retrieve the first record of a search, call the <code>first()</code> method:</p> <pre><code>$record = $query-&gt;first();\n</code></pre> <p>Results will return the model instance only.</p> <p>You can also use <code>firstOrFail()</code> to generate an exception when no objects are found.</p>"},{"location":"docs/core/v3/searching/#limit","title":"Limit","text":"<p>To limit the results objects returned from your LDAP server and increase the speed of your queries, you can use the <code>limit()</code> method:</p> <pre><code>// This will only return 5 objects that contain the name of 'John':\n$objects = $query-&gt;where('cn', 'contains', 'John')-&gt;limit(5)-&gt;get();\n</code></pre>"},{"location":"docs/core/v3/searching/#wheres","title":"Wheres","text":"<p>To perform a where clause on the search object, use the <code>where()</code> function:</p> <pre><code>$query-&gt;where('cn', '=', 'John Doe');\n</code></pre> <p>This query would look for a record with the common name of 'John Doe' and return the results.</p> <p>We can also perform a 'where equals' without including the operator:</p> <pre><code>$query-&gt;whereEquals('cn', 'John Doe');\n</code></pre> <p>We can also supply an array of key - value pairs to quickly add multiple wheres:</p> <pre><code>$wheres = [\n    'givenname' =&gt; 'John',\n    'company'   =&gt; 'Acme',\n];\n\n$query-&gt;where($wheres);\n</code></pre> <p>Or, if you require conditionals, you can quickly add multiple wheres with nested arrays:</p> <pre><code>$query-&gt;where([\n   ['cn', '=', 'John Doe'],\n   ['manager', '!', 'Suzy Doe'],\n]);\n</code></pre>"},{"location":"docs/core/v3/searching/#all-operators","title":"All Operators","text":"<p>Here is a list of all supported operators:</p> <pre><code>$query-&gt;where('field', '=', 'value');\n\n$query-&gt;where('field', '!', 'value');\n// Alias for above.\n$query-&gt;where('field', '!=', 'value');\n\n$query-&gt;where('field', '*');\n\n$query-&gt;where('field', '!*', 'value');\n\n$query-&gt;where('field', '&gt;=', 'value');\n\n$query-&gt;where('field', '&lt;=', 'value');\n\n$query-&gt;where('field', '~=', 'value');\n\n$query-&gt;where('field', 'starts_with', 'value');\n\n$query-&gt;where('field', 'not_starts_with', 'value');\n\n$query-&gt;where('field', 'ends_with', 'value');\n\n$query-&gt;where('field', 'not_ends_with', 'value');\n\n$query-&gt;where('field', 'contains', 'value');\n\n$query-&gt;where('field', 'not_contains', 'value');\n</code></pre>"},{"location":"docs/core/v3/searching/#where-starts-with","title":"Where Starts With","text":"<p>We could also perform a search for all objects beginning with the common name of 'John' using the <code>starts_with</code> operator:</p> <pre><code>$results = $query-&gt;where('cn', 'starts_with', 'John')-&gt;get();\n\n// Or:\n\n$results = $query-&gt;whereStartsWith('cn', 'John')-&gt;get();\n</code></pre>"},{"location":"docs/core/v3/searching/#where-ends-with","title":"Where Ends With","text":"<p>We can also search for all objects that end with the common name of <code>Doe</code> using the <code>ends_with</code> operator:</p> <pre><code>$results = $query-&gt;where('cn', 'ends_with', 'Doe')-&gt;get();\n\n// Or:\n\n$results = $query-&gt;whereEndsWith('cn', 'Doe')-&gt;get();\n</code></pre>"},{"location":"docs/core/v3/searching/#where-between","title":"Where Between","text":"<p>To search for objects between two values, use the <code>whereBetween</code> method.</p> <p>For the example below, we'll retrieve all objects that were created between two dates:</p> <pre><code>$from = (new DateTime('October 1st 2016'))-&gt;format('YmdHis.0\\Z');\n$to = (new DateTime('January 1st 2017'))-&gt;format('YmdHis.0\\Z');\n\n$users = $query-&gt;whereBetween('whencreated', [$from, $to])-&gt;get();\n</code></pre>"},{"location":"docs/core/v3/searching/#where-contains","title":"Where Contains","text":"<p>We can also search for all objects with a common name that contains <code>John Doe</code> using the <code>contains</code> operator:</p> <pre><code>$results = $query-&gt;where('cn', 'contains', 'John Doe')-&gt;get();\n\n// Or:\n\n$results = $query-&gt;whereContains('cn', 'John Doe')-&gt;get();\n</code></pre>"},{"location":"docs/core/v3/searching/#where-not-contains","title":"Where Not Contains","text":"<p>You can use a 'where not contains' to perform the inverse of a 'where contains':</p> <pre><code>$results = $query-&gt;where('cn', 'not_contains', 'John Doe')-&gt;get();\n\n// Or:\n\n$results = $query-&gt;whereNotContains('cn', 'John Doe');\n</code></pre>"},{"location":"docs/core/v3/searching/#where-has","title":"Where Has","text":"<p>Or we can retrieve all objects that have a common name attribute using the wildcard operator (<code>*</code>):</p> <pre><code>$results = $query-&gt;where('cn', '*')-&gt;get();\n\n// Or:\n\n$results = $query-&gt;whereHas('cn')-&gt;get();\n</code></pre> <p>This type of filter syntax allows you to clearly see what your searching for.</p>"},{"location":"docs/core/v3/searching/#where-not-has","title":"Where Not Has","text":"<p>You can use a 'where not has' to perform the inverse of a 'where has':</p> <pre><code>$results = $query-&gt;where('cn', '!*')-&gt;get();\n\n// Or:\n\n$results = $query-&gt;whereNotHas($field)-&gt;get();\n</code></pre>"},{"location":"docs/core/v3/searching/#where-deleted","title":"Where Deleted","text":"<p>To retrieve only deleted models from your LDAP server, use the <code>whereDeleted</code> method:</p> <pre><code>$results = $query-&gt;whereDeleted()-&gt;get();\n</code></pre> <p>If you would like to include deleted models from your LDAP server in your query results, use the <code>withDeleted</code> method:</p> <pre><code>$results = $query-&gt;withDeleted()-&gt;get();\n</code></pre>"},{"location":"docs/core/v3/searching/#or-wheres","title":"Or Wheres","text":"<p>To perform an <code>or where</code> clause on the search object, use the <code>orWhere()</code> method.</p> <p>For example:</p> <pre><code>$results = $query-&gt;where('cn', '=', 'John Doe')\n                 -&gt;orWhere('cn', '=', 'Suzy Doe')\n                 -&gt;get();\n</code></pre> <p>This query will return objects that have the common name of <code>John Doe</code> or <code>Suzy Doe</code>.</p> <p>You can also use all <code>where</code> methods as an or where, for example: <code>orWhereHas()</code>, <code>orWhereContains()</code>, <code>orWhereStartsWith()</code>, <code>orWhereEndsWith()</code></p>"},{"location":"docs/core/v3/searching/#dynamic-wheres","title":"Dynamic Wheres","text":"<p>To perform a dynamic where, simply suffix a <code>where</code> with the field you're looking for.</p> <p>This feature was directly ported from Laravel's Eloquent.</p> <p>Here's an example:</p> <pre><code>// This query:\n$result = $query-&gt;where('cn', '=', 'John Doe')-&gt;first();\n\n// Can be converted to:\n$result = $query-&gt;whereCn('John Doe')-&gt;first();\n</code></pre> <p>You can perform this on any attribute:</p> <pre><code>$result = $query-&gt;whereTelephonenumber('555-555-5555')-&gt;first();\n</code></pre> <p>You can also chain them:</p> <pre><code>$result = $query-&gt;whereTelephonenumber('555-555-5555')\n                -&gt;whereGivenname('John Doe')\n                -&gt;whereSn('Doe')\n                -&gt;first();\n</code></pre> <p>You can even perform multiple dynamic wheres by separating your fields by an <code>And</code>:</p> <pre><code>// This would perform a search for a user with the\n// first name of 'John' and last name of 'Doe'.\n$result = $query-&gt;whereGivennameAndSn('John', 'Doe')-&gt;first();\n</code></pre>"},{"location":"docs/core/v3/searching/#nested-filters","title":"Nested Filters","text":"<p>By default, the LdapRecord query builder automatically wraps your queries in <code>and</code> / <code>or</code> filters for you. However, if any further complexity is required, nested filters allow you to construct any query fluently and easily.</p>"},{"location":"docs/core/v3/searching/#andfilter","title":"andFilter","text":"<p>The <code>andFilter</code> method accepts a closure which allows you to construct a query inside of an <code>and</code> LDAP filter:</p> <pre><code>// Creates the filter: (&amp;(givenname=John)(sn=Doe))\n$results = $query-&gt;andFilter(function (LdapRecord\\Query\\Builder $q) {\n    $q-&gt;where('givenname', '=', 'John')\n      -&gt;where('sn', '=', 'Doe');\n})-&gt;get();\n</code></pre> <p>The above query would return objects that contain the first name <code>John</code> and the last name <code>Doe</code>.</p>"},{"location":"docs/core/v3/searching/#orfilter","title":"orFilter","text":"<p>The <code>orFilter</code> method accepts a closure which allows you to construct a query inside of an <code>or</code> LDAP filter:</p> <pre><code>// Creates the filter: (|(givenname=John)(sn=Doe))\n$results = $query-&gt;orFilter(function (LdapRecord\\Query\\Builder $q) {\n    $q-&gt;where('givenname', '=', 'John')\n      -&gt;where('sn', '=', 'Doe');\n})-&gt;get();\n</code></pre> <p>The above query would return objects that contain the first name <code>John</code> or the last name <code>Doe</code>.</p>"},{"location":"docs/core/v3/searching/#notfilter","title":"notFilter","text":"<p>The <code>notFilter</code> method accepts a closure which allows you to construct a query inside a <code>not</code> LDAP filter:</p> <pre><code>// Creates the filter: (!(givenname=John)(sn=Doe))\n$results = $query-&gt;notFilter(function (LdapRecord\\Query\\Builder $q) {\n    $q-&gt;where('givenname', '=', 'John')\n      -&gt;where('sn', '=', 'Doe');\n})-&gt;get();\n</code></pre> <p>The above query would return objects that do not contain the first name <code>John</code> or the last name <code>Doe</code>.</p>"},{"location":"docs/core/v3/searching/#complex-nesting","title":"Complex Nesting","text":"<p>The above methods <code>andFilter</code> / <code>orFilter</code> can be chained together and nested as many times as you'd like for larger complex queries:</p> <pre><code>$query = $query-&gt;orFilter(function (LdapRecord\\Query\\Builder $q) {\n    $q-&gt;where('givenname', '=', 'John')-&gt;where('sn', '=', 'Doe');\n})-&gt;andFilter(function (LdapRecord\\Query\\Builder $q) {\n    $q-&gt;where('department', '=', 'Accounting')-&gt;where('title', '=', 'Manager');\n})-&gt;getUnescapedQuery();\n\necho $query; // Returns '(&amp;(|(givenname=John)(sn=Doe))(&amp;(department=Accounting)(title=Manager)))'\n</code></pre>"},{"location":"docs/core/v3/searching/#raw-filters","title":"Raw Filters","text":"<p>Raw filters are not escaped. Do not accept user input into the raw filter method.</p> <p>Sometimes you might just want to add a raw filter without using the query builder. You can do so by using the <code>rawFilter()</code> method:</p> <pre><code>$results = $query-&gt;rawFilter('(samaccountname=jdoe)')-&gt;get();\n\n// Or use an array\n$filters = [\n    '(samaccountname=jdoe)',\n    '(surname=Doe)',\n];\n\n$results = $query-&gt;rawFilter($filters)-&gt;get();\n\n// Or use multiple arguments\n$results = $query-&gt;rawFilter($filters[0], $filters[1])-&gt;get();\n\n// Multiple raw filters will be automatically wrapped into an `and` filter:\n$query = $query-&gt;getUnescapedQuery();\n\necho $query; // Returns (&amp;(samaccountname=jdoe)(surname=Doe))\n</code></pre>"},{"location":"docs/core/v3/searching/#paginating","title":"Paginating","text":"<p>Paginating your search results will allow you to return more results than your LDAP cap (usually 1000).</p> <p>For example, if your LDAP server contains 10,000 objects and you paginate by 1000, 10 queries will be executed.</p> <p>Calling <code>paginate()</code> will retrieve all objects from your LDAP server for the current query. Be careful with large result sets -- as you may run out of memory. Use chunking with large directories to avoid this.</p> <pre><code>// Perform global \"all\" search, paginating by 1000 objects:\n$results = $query-&gt;paginate(1000);\n\nforeach ($results as $result) {\n    //\n}\n</code></pre>"},{"location":"docs/core/v3/searching/#chunking","title":"Chunking","text":"<p>Chunking your search results will prevent you from running out of memory when executing pagination requests on large directories.</p> <p>The <code>chunk</code> method executes a paginated request indentically to the above <code>paginate</code> method, except it will return each \"page\" of objects, passing them into a closure for processing.</p> <pre><code>// Perform global \"all\" search, chunking by 1000 objects:\n$query-&gt;chunk(1000, function ($entries) {\n    foreach ($entries as $entry) {\n        //\n    }\n});\n</code></pre>"},{"location":"docs/core/v3/searching/#slicing","title":"Slicing","text":"<p>Important: Your LDAP server must support Virtual List View.</p> <p>Slicing your search results allows you to retrieve only a particular set of results based on an offset, similar to a database offset. This helps in dramatically reducing memory usage and query execution time. However, there are some caveats to be aware of:</p> <ul> <li>You must provide an \"order by\" clause (via <code>$query-&gt;orderBy()</code>) prior to executing <code>slice()</code>. If one is not present on the query builder, then LdapRecord will sort by the <code>cn</code> attribute in an ascending manor. This is required for the LDAP server to process the VLV request.</li> <li>Your query must search less than 10,000 total records (this is a configurable limit in Active Directory).</li> </ul> <pre><code>$query = $connection-&gt;query();\n\n$slice = $query-&gt;slice($page = 1, $perPage = 100): \\LdapRecord\\Query\\Slice;\n\n$slice-&gt;items(): array|\\LdapRecord\\Query\\Collection;\n\n$slice-&gt;total(): int;\n\n$slice-&gt;perPage(): int;\n\n$slice-&gt;currentPage(): int;\n\n$slice-&gt;hasMorePages(): bool;\n\n$slice-&gt;hasPages(): bool;\n\n$slice-&gt;onFirstPage(): bool;\n\n$slice-&gt;onLastPage(): bool;\n\n$slice-&gt;isEmpty(): bool;\n\n$slice-&gt;isNotEmpty(): bool;\n</code></pre>"},{"location":"docs/core/v3/searching/#base-dn","title":"Base DN","text":"<p>To set the base DN of your search you can use one of two methods:</p> <pre><code>// Using the `in()` method:\n$results = $query-&gt;in('ou=Accounting,dc=local,dc=com')-&gt;get();\n\n// Using the `setDn()` method:\n$results = $query-&gt;setDn('ou=Accounting,dc=local,dc=com')-&gt;get();\n</code></pre> <p>Either option will return the same results. Use which ever method you prefer to be more readable.</p>"},{"location":"docs/core/v3/searching/#automatic-base-dn-substitution","title":"Automatic Base DN Substitution","text":"<p>Since your LDAP configuration contains your connection's base DN, LdapRecord can automatically substitute it into the <code>setDn()</code>, <code>in()</code>, or <code>find()</code> methods using a <code>{base}</code> replacement template string.</p> <p>For example, if our configuration contains the <code>base_dn</code> of <code>dc=local,dc=com</code>, we can insert <code>{base}</code> alongside the other RDN's of the LDAP DN we are looking for:</p> <pre><code>// Queries for \"ou=Accounting,dc=local,dc=com\"\n$results = $query-&gt;setDn('ou=Accounting,{base}')-&gt;get();\n\n// Alias for the above.\n$results = $query-&gt;in('ou=Accounting,{base}')-&gt;get();\n\n// Queries for \"ou=John Doe,ou=Users,dc=local,dc=com\"\n$object = $query-&gt;find('cn=John Doe,ou=Users,{base}');\n</code></pre> <p>This helps reduce the possibility for error and also allows you to use a single source of truth for your base DN.</p>"},{"location":"docs/core/v3/searching/#root-dse","title":"Root DSE","text":"<p>To fetch the Root DSE object in your directory, execute the below query:</p> <pre><code>$rootDse = $query-&gt;query()\n    -&gt;in(null)\n    -&gt;read()\n    -&gt;whereHas('objectclass')\n    -&gt;first();\n</code></pre> <p>Or, if you're using models:</p> <pre><code>use LdapRecord\\Models\\Entry;\n\n$rootDse = Entry::getRootDse();\n</code></pre>"},{"location":"docs/core/v3/searching/#search-options","title":"Search Options","text":""},{"location":"docs/core/v3/searching/#recursive","title":"Recursive","text":"<p>By default, all searches performed are recursive.</p> <p>If you'd like to disable recursive search and perform a single level search, use the <code>listing()</code> method:</p> <pre><code>$result = $query-&gt;listing()-&gt;get();\n</code></pre> <p>This would perform an <code>ldap_listing()</code> instead of an <code>ldap_search()</code>.</p>"},{"location":"docs/core/v3/searching/#read","title":"Read","text":"<p>If you'd like to perform a read instead of a listing or a recursive search, use the <code>read()</code> method:</p> <pre><code>$result = $query-&gt;read()-&gt;where('objectClass', '*')-&gt;get();\n</code></pre> <p>This would perform an <code>ldap_read()</code> instead of an <code>ldap_listing()</code> or an <code>ldap_search()</code>.</p> <p>Performing a <code>read()</code> will always return one record in your result.</p>"},{"location":"docs/core/v3/searching/#custom-controls","title":"Custom Controls","text":"<p>If you'd like to add server controls to your query, use the <code>addControl</code> method:</p> <pre><code>$result = $query-&gt;addControl('1.2.840.113556.1.4.417', $isCritical = true)-&gt;get();\n</code></pre>"},{"location":"docs/core/v3/searching/#retrieving-the-ran-query","title":"Retrieving the ran query","text":"<p>If you'd like to retrieve the current query to save or run it at another time, use the <code>getQuery()</code> method on the query builder.</p> <p>This will return the escaped filter.</p> <pre><code>$query = $query-&gt;where('cn', '=', 'John Doe')-&gt;getQuery();\n\necho $query; // Returns '(cn=\\4a\\6f\\68\\6e\\20\\44\\6f\\65)'\n</code></pre> <p>To retrieve the unescaped filter, call the <code>getUnescapedQuery()</code> method:</p> <pre><code>$query = $query-&gt;where('cn', '=', 'John Doe')-&gt;getUnescapedQuery();\n\necho $query; // Returns '(cn=John Doe)'\n</code></pre> <p>Now that you know how to search your directory, lets move onto creating / modifying LDAP objects.</p>"},{"location":"docs/core/v3/testing-api/","title":"Available Test Utilties (API)","text":""},{"location":"docs/core/v3/testing-api/#directoryfake","title":"<code>DirectoryFake</code>","text":""},{"location":"docs/core/v3/testing-api/#setup","title":"<code>setup</code>","text":"<p>Swap a <code>LdapRecord\\Connection</code> in the <code>LdapRecord\\Container</code> with an <code>LdapRecord\\Testing\\ConnectionFake</code>:</p> <pre><code>use LdapRecord\\Testing\\DirectoryFake;\n\nDirectoryFake::setup(); // LdapRecord\\Testing\\ConnectionFake\n</code></pre>"},{"location":"docs/core/v3/testing-api/#teardown","title":"<code>tearDown</code>","text":"<p>Revert the swapped connections in the <code>LdapRecord\\Container</code> to their original <code>LdapRecord\\Connection</code> connection instances.</p> <p>This should typically be called in the <code>tearDown</code> of your test suite:</p> <pre><code>use LdapRecord\\Testing\\DirectoryFake;\n\nclass TestCase extends PHPUnitTestCase\n{\n    public function tearDown(): void\n    {\n        DirectoryFake::tearDown();\n\n        parent::tearDown();\n    }\n}\n</code></pre>"},{"location":"docs/core/v3/testing-api/#connectionfake-method-listing","title":"<code>ConnectionFake</code> Method Listing","text":""},{"location":"docs/core/v3/testing-api/#make","title":"<code>make</code>","text":"<p>Create a new <code>ConnectionFake</code> instance:</p> <pre><code>use LdapRecord\\Testing\\ConnectionFake;\n\n$config = ['...'];\n\n$fake = ConnectionFake::make($config);\n</code></pre>"},{"location":"docs/core/v3/testing-api/#actingas","title":"<code>actingAs</code>","text":"<p>Set the user that is allowed to bind/authenticate to the <code>LdapFake</code>:</p> <pre><code>ConnectionFake::make($config)-&gt;actingAs('cn=john,dc=local,dc=com');\n</code></pre> <p>You may also provide an <code>LdapRecord\\Models\\Model</code> instance:</p> <pre><code>$user = User::make(['dn' =&gt; 'cn=john,dc=local,dc=com']);\n\nConnectionFake::make($config)-&gt;actingAs($user);\n</code></pre>"},{"location":"docs/core/v3/testing-api/#shouldbeconnected","title":"<code>shouldBeConnected</code>","text":"<p>Set the connection fake to bypass bind attempts to the <code>LdapFake</code> as the user from the configuration:</p> <pre><code>$fake = ConnectionFake::make($config)-&gt;shouldBeConnected();\n\n$fake-&gt;isConnected(); // true\n</code></pre>"},{"location":"docs/core/v3/testing-api/#shouldnotbeconnected","title":"<code>shouldNotBeConnected</code>","text":"<pre><code>$fake = ConnectionFake::make($config)-&gt;shouldNotBeConnected();\n\n$fake-&gt;isConnected(); // false\n</code></pre>"},{"location":"docs/core/v3/testing-api/#ldapfake-method-listing","title":"<code>LdapFake</code> Method Listing","text":""},{"location":"docs/core/v3/testing-api/#operation","title":"<code>operation</code>","text":"<p>Create a new <code>LdapExpectation</code> instance:</p> <pre><code>use LdapRecord\\Testing\\LdapFake;\n\nLdapFake::operation('read'); // LdapRecord\\Testing\\LdapExpectation\n</code></pre> <p>These expectations are typically added directly to an <code>LdapFake</code> instance using the <code>expect</code> method:</p> <pre><code>DirectoryFake::setup()\n    -&gt;getLdapConnection() // LdapRecord\\Testing\\LdapFake\n    -&gt;expect(LdapFake::operation('...'))\n</code></pre>"},{"location":"docs/core/v3/testing-api/#expect","title":"<code>expect</code>","text":"<p>Add an LDAP method expectation. It can receive an <code>LdapExpectation</code> instance or an array of expectations:</p> <pre><code>use LdapRecord\\Testing\\LdapFake;\nuse LdapRecord\\Testing\\DirectoryFake;\n\n$mockResults = ['...'];\n\n// Single expectations...\nDirectoryFake::setup()\n    -&gt;getLdapConnection()\n    -&gt;expect(LdapFake::operation('search')-&gt;andReturn($mockResults));\n\n// Multiple expectations...\nDirectoryFake::setup()\n    -&gt;getLdapConnection()\n    -&gt;expect([\n        LdapFake::operation('bind')-&gt;andReturn(new \\LdapRecord\\LdapResultResponse),\n        LdapFake::operation('search')-&gt;andReturn($mockResults),\n    ]);\n\n// Simple expectations using key-value pairs...\nDirectoryFake::setup()\n    -&gt;getLdapConnection()\n    -&gt;expect([\n        'bind' =&gt; new \\LdapRecord\\LdapResultResponse,\n        'search' =&gt; $mockResults\n    ]);\n</code></pre>"},{"location":"docs/core/v3/testing-api/#shouldallowanybind","title":"<code>shouldAllowAnyBind</code>","text":"<p>Allow any bind attempt executed on the fake to succeed indefinitely:</p> <pre><code>DirectoryFake::setup()\n    -&gt;getLdapConnection()\n    -&gt;shouldAllowAnyBind();\n</code></pre>"},{"location":"docs/core/v3/testing-api/#shouldallowbindwith","title":"<code>shouldAllowBindWith</code>","text":"<p>Allow a bind attempt from the given distinguished name to succeeed indefinitely:</p> <pre><code>DirectoryFake::setup()\n    -&gt;getLdapConnection()\n    -&gt;shouldAllowBindWith('cn=john,dc=local,dc=com');\n</code></pre>"},{"location":"docs/core/v3/testing/","title":"Testing","text":""},{"location":"docs/core/v3/testing/#introduction","title":"Introduction","text":"<p>LdapRecord comes with a utility that allow you to test bind attempts against a fake server and return custom error codes &amp; responses.</p> <p>This allows you to test how your application responds to authentication failures and error messages.</p>"},{"location":"docs/core/v3/testing/#test-case-setup","title":"Test Case Setup","text":"<p>To begin, initialize the fake directory using the <code>DirectoryFake::setup</code> method. This method accepts the name of your LDAP connection that you initialize in your application.</p> <p>If you do not provide a name, your default LDAP connection name will be used.</p> <p>Upon calling the <code>setup</code> method, your LDAP connection will be swapped out of the connection <code>Container</code> and replaced with a <code>ConnectionFake</code>.</p> <p>Let's walk through an example of testing an application that uses LDAP authentication.</p> <p>Here's our example controller:</p> <pre><code>class AuthController\n{\n    public function __construct()\n    {\n        Container::addConnection([\n            'hosts' =&gt; ['10.0.0.1']\n        ]);\n    }\n\n    public function login()\n    {\n        $connection = Container::getDefaultConnection();\n\n        $username = $_POST['username'];\n        $password = $_POST['password'];\n\n        if ($connection-&gt;auth()-&gt;attempt($username, $password)) {\n            return \"Your password is valid!\";\n        }\n\n        return \"Username or password is incorrect.\";\n    }\n}\n</code></pre> <p>Now let's test it:</p> <pre><code>use LdapRecord\\Testing\\DirectoryFake;\n\nclass LoginTest extends TestCase\n{\n    public function test_login()\n    {\n        $user = 'cn=User,dc=local,dc=com';\n\n        DirectoryFake::setup()-&gt;actingAs($user);\n\n        // Execute HTTP post request somehow in your testing framework...\n\n        $this-&gt;post('/login', [\n            'username' =&gt; $user,\n            'password' =&gt; 'secret',\n        ])-&gt;assertSee(\"Your password is valid!\");\n\n        $this-&gt;post('/login', [\n            'username' =&gt; 'invalid',\n            'password' =&gt; 'secret',\n        ])-&gt;assertSee(\"Username or password is incorrect.\");\n    }\n}\n</code></pre> <p>This is a small example of how you can test bind attempts to your LDAP server.</p>"},{"location":"docs/core/v3/testing/#responses-and-error-codes","title":"Responses and Error Codes","text":"<p>When testing connectivity to your LDAP server, you may wish to test error codes and messages that may be returned when a bind attempt fails. To do this, you can use the <code>ConnectionFake</code> to retrieve a fake LDAP connection to return error codes when a bind attempt fails.</p> <p>Let's walk through an example of an authentication controller that will retrieve the last LDAP error and determine the cause of the bind failure.</p> <p>Let's walk through an example of testing an application that uses LDAP authentication.</p> <p>Here's our example controller:</p> <pre><code>class AuthController\n{\n    public function __construct()\n    {\n        Container::addConnection([\n            'hosts' =&gt; ['10.0.0.1']\n        ]);\n    }\n\n    public function login()\n    {\n        $connection = Container::getDefaultConnection();\n\n        $username = $_POST['username'];\n        $password = $_POST['password'];\n\n        if ($connection-&gt;auth()-&gt;attempt($username, $password)) {\n            return \"Your password is valid!\";\n        }\n\n        $error = $connection-&gt;getLdapConnection()-&gt;getDiagnosticMessage();\n\n        if (strpos($error, '532') !== false) {\n            return \"Your password has expired.\";\n        } elseif (strpos($error, '533') !== false) {\n            return \"Your account is disabled.\";\n        } elseif (strpos($error, '701') !== false) {\n             return \"Your account has expired.\";\n        } elseif (strpos($error, '775') !== false) {\n             return \"Your account is locked.\";\n        }\n\n        return \"Username or password is incorrect.\";\n    }\n}\n</code></pre> <p>You can see above that we are pulling the diagnostic message of the last failed bind attempt.</p> <p>This diagnostic message contains an error code that you can use to tell the user why they failed logging in.</p> <p>Here is how we would test the above controller:</p> <pre><code>use LdapRecord\\Testing\\DirectoryFake;\n\nclass LoginTest extends TestCase\n{\n    public function test_login()\n    {\n        $user = 'cn=User,dc=local,dc=com';\n\n        $fake = DirectoryFake::setup()-&gt;actingAs($user);\n\n        $fake-&gt;getLdapConnection()-&gt;shouldReturnDiagnosticMessage('Failed: 775');\n\n        // Execute HTTP post request somehow in your testing framework...\n\n        $this-&gt;post('/login', [\n            'username' =&gt; $user,\n            'password' =&gt; 'secret',\n        ])-&gt;assertSee(\"Your account is locked.\");\n    }\n}\n</code></pre>"},{"location":"docs/core/v3/upgrading/","title":"Upgrading to Version 3","text":"<p>We strive to record all potential breaking changes. However, as some of these changes occur in lesser-known areas of the library, only a  fraction of them might have an impact on your application.</p> <p>If you encounter any changes not documented here that have affected you,  please create a bug report on the LdapRecord-Docs repository  so that we can address the issue promptly.</p>"},{"location":"docs/core/v3/upgrading/#high-impact-changes","title":"High Impact Changes","text":""},{"location":"docs/core/v3/upgrading/#updating-dependencies","title":"Updating Dependencies","text":""},{"location":"docs/core/v3/upgrading/#php-810-required","title":"PHP &gt;= 8.1.0 Required","text":"<p>LdapRecord v3 now requires PHP 8.1.0 or greater.</p>"},{"location":"docs/core/v3/upgrading/#composer-dependencies","title":"Composer Dependencies","text":"<p>You should update the following dependency in your application's <code>composer.json</code> file:</p> <pre><code>\"directorytree/ldaprecord\": \"^3.0\"\n</code></pre>"},{"location":"docs/core/v3/upgrading/#iconv-php-extension-required","title":"<code>iconv</code> PHP Extension Required","text":"<p>The <code>iconv</code> extension is now required, as it is used for encoding passwords  using the default mechanism when setting Active Directory user passwords.</p> <p>It has always been used in LdapRecord, however an exception would  have been thrown previosuly upon executing code utilizing it.</p>"},{"location":"docs/core/v3/upgrading/#strict-php-types-implemented","title":"Strict PHP Types Implemented","text":"<p>LdapRecord now has strict types implemented in all classes for all methods and properties.</p> <p>If you've created your own models, scopes,  or have extended any other LdapRecord class, you will need to adjust any overridden  properties or methods with their respective types.</p>"},{"location":"docs/core/v3/upgrading/#medium-impact-changes","title":"Medium Impact Changes","text":""},{"location":"docs/core/v3/upgrading/#ldaprecordcontainer-manager-method-renamed","title":"LdapRecord\\Container <code>manager</code> Method Renamed","text":"<p>An <code>LdapRecord\\Conatiner::manager()</code> method has been renamed to <code>getConnectionManager()</code>.</p>"},{"location":"docs/core/v3/upgrading/#ldaprecordconnectionmanager-proxy-methods-removed","title":"LdapRecord\\ConnectionManager Proxy Methods Removed","text":"<p>The below <code>LdapRecord\\ConnectionManager</code> proxy methods have been removed. </p> <p>You may replace these methods with their listed equivalent:</p> Proxy Method Removed Replacement <code>reset()</code> <code>flush()</code> <code>allConnections()</code> <code>getConnnections()</code> <code>getEventDispatcher()</code> <code>getDisptacher()</code> <code>setEventDispatcher()</code> <code>setDispatcher()</code>"},{"location":"docs/core/v3/upgrading/#ldaprecordconnectionmanager-methods-renamed","title":"LdapRecord\\ConnectionManager Methods Renamed","text":"<p>The below <code>LdapRecord\\ConnectionManager</code> methods have been renamed:</p> Old Method New Method <code>add()</code> <code>addConnection()</code> <code>remove()</code> <code>removeConnection()</code> <code>all()</code> <code>getConnections()</code> <code>get()</code> <code>getConnection()</code> <code>getDefault()</code> <code>getDefaultConnection()</code> <code>setDefault()</code> <code>setDefaultConnection()</code> <code>dispatcher()</code> <code>getDispatcher()</code> <code>setDispatcher()</code> <code>setDispatcher()</code> <code>unsetEventDispatcher()</code> <code>unsetDispatcher()</code>"},{"location":"docs/core/v3/upgrading/#ldaprecordutilities-removed","title":"LdapRecord\\Utilities Removed","text":"<p>The <code>LdapRecord\\Utilities</code> class has been removed in favor of individual utility classes that provide the same features and functions.</p> <p>Please see the helpers documentation for their equivalent utility classes.</p>"},{"location":"docs/core/v3/upgrading/#tightencocollect-replaced","title":"Tightenco/Collect Replaced","text":"<p>The <code>tightenco/collect</code> package has now been replaced with Laravel's core  <code>illuminate/collections</code> package, that became available in Laravel 8.0.</p> <p>Due to this change, if you're installing LdapRecord in a Laravel  application, it must be at least version 8.0.0 or greater.</p>"},{"location":"docs/core/v3/upgrading/#ldaprecordquerybuilder-methods-renamed","title":"LdapRecord\\Query\\Builder methods renamed","text":"<p>The below query builder methods have been renamed to more  clearly convey the LDAP action that they will execute:</p> From To <code>listing()</code> <code>list()</code> <code>createAttribute()</code> <code>addAttribute()</code> <code>updateAttribute()</code> <code>replaceAttribute()</code> <code>deleteAttribute()</code> <code>removeAttributes()</code> <code>N/A</code> <code>removeAttribute()</code>"},{"location":"docs/core/v3/upgrading/#low-impact-changes","title":"Low Impact Changes","text":""},{"location":"docs/core/v3/upgrading/#ldaprecordldap-method-return-types-changed","title":"LdapRecord\\Ldap Method Return Types Changed","text":""},{"location":"docs/core/v3/upgrading/#bind","title":"<code>bind</code>","text":"<p>The <code>Ldap::bind()</code> method now returns an <code>LdapRecord\\LdapResultResponse</code>,  which provides a class for interacting with an LDAP response in detail:</p> <pre><code>$connection = new \\Ldap\\Connection(['...']);\n\n$response = $connection-&gt;getLdapConnection()-&gt;bind($username, $password);\n\n$response-&gt;errorCode; // int\n$response-&gt;matchedDn; // string|null\n$response-&gt;errorMessage; // string|null\n$response-&gt;referrals; // array|null\n$response-&gt;controls; // array|null\n\n$response-&gt;successful(); // bool\n$response-&gt;failed(); // bool\n</code></pre>"},{"location":"docs/core/v3/upgrading/#parseresult","title":"<code>parseResult</code>","text":"<p>The <code>Ldap::parseResult()</code> method now returns an <code>LdapRecord\\LdapResultResponse</code>,  as with the <code>bind()</code> method mentioned above.</p>"},{"location":"docs/core/v3/upgrading/#ldaprecordmodelsrelationsonetomany-method-return-types-changed","title":"LdapRecord\\Models\\Relations\\OneToMany Method Return Types Changed","text":"<p>The methods listed have had their return type changed:</p> Method New Return Type <code>attach()</code> <code>void</code> <code>detach()</code> <code>void</code> <pre><code>$groups = ['...'];\n\n$user = User::find('...');\n\n// Returns \"void\"\n$user-&gt;groups()-&gt;attach($groups);\n</code></pre>"},{"location":"docs/core/v3/upgrading/#ldaprecordmodelsrelationsonetomany-methods-removed","title":"LdapRecord\\Models\\Relations\\OneToMany Methods Removed","text":"<p>The methods listed below have been removed:</p> Method <code>attachMany()</code> <code>detachMany()</code> <p>You may now simply provide a variable that is <code>iterable</code> (such as an <code>array</code>  or <code>Collection</code>), to attach or detach many models for a relationship.</p>"},{"location":"docs/core/v3/upgrading/#ldaprecordmodelsrelationshasone-method-return-type-changed","title":"LdapRecord\\Models\\Relations\\HasOne Method Return Type Changed","text":"<p>The <code>HasOne::attach()</code> method now no longer returns a value (<code>void</code>). I.e.:</p> <pre><code>$manager = User::find('...');\n\n$user = User::find('...');\n\n// Returns \"void\"\n$user-&gt;manager()-&gt;attach($manager);\n</code></pre>"},{"location":"docs/core/v3/upgrading/#ldaprecordmodelsopenldapuser-group-relations-adjusted","title":"LdapRecord\\Models\\OpenLDAP\\User &amp; Group Relations Adjusted","text":"<p>The built-in OpenLDAP <code>User</code> and <code>Group</code> model relationships (<code>Group::members()</code>  and <code>User::groups()</code>) have been adjusted with their proper configuration,  and now have full integration tests on the repository.</p>"},{"location":"docs/core/v3/versioning/","title":"Versioning","text":"<p>LdapRecord is versioned under the Semantic Versioning guidelines as much as possible.</p> <p>Releases will be numbered with the following format:</p> <p><code>&lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;</code></p> <p>And constructed with the following guidelines:</p> <ul> <li>Breaking backward compatibility bumps the major and resets the minor and patch.</li> <li>New additions without breaking backward compatibility bumps the minor and resets the patch.</li> <li>Bug fixes and misc changes bumps the patch.</li> </ul> <p>Minor versions are not maintained individually, and you're encouraged to upgrade through to the next minor version.</p> <p>Major versions are maintained individually through separate branches.</p>"},{"location":"docs/core/v3/active-directory/groups/","title":"Group Management (Active Directory)","text":""},{"location":"docs/core/v3/active-directory/groups/#creation","title":"Creation","text":"<p>To create a new Active Directory group, only a common name is required (<code>cn</code>):</p> <pre><code>&lt;?php\n\nuse LdapRecord\\Models\\ActiveDirectory\\Group;\n\n$group = Group::create(['cn' =&gt; 'Accounting']);\n</code></pre> <p>To create a group inside of a particular Organizational Unit (OU), call the <code>inside()</code> method:</p> <pre><code>$group = (new Group)-&gt;inside('ou=Office Groups,dc=local,dc=com');\n\n$group-&gt;cn = 'Accounting';\n\n$group-&gt;save();\n</code></pre>"},{"location":"docs/core/v3/active-directory/groups/#members","title":"Members","text":"<p>When you create or locate a group on your directory, the <code>members</code> relationship is available to you on the model instance.</p>"},{"location":"docs/core/v3/active-directory/groups/#getting-members","title":"Getting Members","text":"<p>To get the immediate members of a group on your directory call the <code>members</code> relationship, and then <code>get()</code>:</p> <pre><code>$group = Group::find('cn=Accounting,dc=local,dc=com');\n\n$members = $group-&gt;members()-&gt;get();\n</code></pre> <p>When getting members, a collection of various models may be returned, such as:</p> <ul> <li><code>LdapRecord\\Models\\ActiveDirectory\\User</code></li> <li><code>LdapRecord\\Models\\ActiveDirectory\\Group</code></li> <li><code>LdapRecord\\Models\\ActiveDirectory\\Contact</code></li> </ul> <p>To use different models, override the <code>members</code> relationship method.</p>"},{"location":"docs/core/v3/active-directory/groups/#getting-members-recursively","title":"Getting Members Recursively","text":"<p>Very often we use groups that are apart of other groups, that include members.</p> <p>To retrieve these nested members, call the <code>recursive()</code> method, prior to <code>get()</code>:</p> <pre><code>$group = Group::find('cn=Accounting,dc=local,dc=com');\n\n$allMembers = $group-&gt;members()-&gt;recursive()-&gt;get();\n</code></pre>"},{"location":"docs/core/v3/active-directory/groups/#adding-members","title":"Adding Members","text":"<p>In Active Directory, valid group members are other groups, users and contacts.</p> <p>To add members to a group, call the <code>members</code> relationship, and then the <code>attach()</code> method:</p> <p>You must provide a <code>Model</code> instance into the <code>attach()</code> method.</p> <pre><code>$group = Group::find('cn=Accounting,dc=local,dc=com');\n\n$user = User::find('cn=John Doe,dc=local,dc=com');\n\n$group-&gt;members()-&gt;attach($user);\n</code></pre> <p>If the model was successfully added, or the model is already a member of the group, the <code>attach()</code> method will return the model instance you passed into it:</p> <pre><code>$office = $accounting-&gt;members()-&gt;attach(\n    Group::create(['cn' =&gt; 'Office'])\n);\n\n// Displays 'cn=Office,dc=local,dc=com'\necho $office-&gt;getDn();\n</code></pre>"},{"location":"docs/core/v3/active-directory/groups/#adding-multiple-members","title":"Adding Multiple Members","text":"<p>To add multiple members at once, provide an array of models to the <code>attach()</code> method:</p> <pre><code>$accounting = Group::find('cn=Accounting,dc=local,dc=com');\n\n$accountants = User::in('ou=Accountants,ou=Users,dc=local,dc=com')-&gt;get();\n\n$accounting-&gt;members()-&gt;attach($accountants);\n</code></pre>"},{"location":"docs/core/v3/active-directory/groups/#removing-members","title":"Removing Members","text":"<p>To remove members on a group, call the <code>members</code> relationship, and then <code>detach()</code>:</p> <p>You must provide a <code>Model</code> instance into the <code>detach()</code> method.</p> <pre><code>$group = Group::find('cn=Accounting,dc=local,dc=com');\n\n$user = $group-&gt;members()-&gt;where('cn', '=', 'Steve Bauman')-&gt;first();\n\n$group-&gt;members()-&gt;detach($user);\n</code></pre>"},{"location":"docs/core/v3/active-directory/groups/#removing-multiple-members","title":"Removing Multiple Members","text":"<p>To remove multiple members at once, provide an array of models to the <code>detach()</code> method:</p> <pre><code>$group = Group::find('cn=Accounting,dc=local,dc=com');\n\n$members = $group-&gt;members()\n                 -&gt;where('department', 'contains', 'Office')\n                 -&gt;get();\n\n$group-&gt;members()-&gt;detach($members);\n</code></pre>"},{"location":"docs/core/v3/active-directory/groups/#removing-all-members","title":"Removing All Members","text":"<p>To remove all immediate members from the group, call the <code>detachAll()</code> method:</p> <p>A collection of all removed members will be returned.</p> <pre><code>$group = Group::find('cn=Accounting,dc=local,dc=com');\n\n$removed = $group-&gt;members()-&gt;detachAll();\n\nforeach ($removed as $member) {\n    echo \"Removed: \" . $member-&gt;getDn();\n}\n</code></pre>"},{"location":"docs/core/v3/active-directory/groups/#groups","title":"Groups","text":"<p>When you create or locate a group on your directory, the <code>groups</code> relationship is available to you on the model instance.</p>"},{"location":"docs/core/v3/active-directory/groups/#getting-groups","title":"Getting Groups","text":"<p>To get the immediate groups that a particular group is apart of on your directory call the <code>groups</code> relationship, and then <code>get()</code>:</p> <pre><code>$group = Group::find('cn=Accounting,dc=local,dc=com');\n\n$groups = $group-&gt;groups()-&gt;get();\n</code></pre>"},{"location":"docs/core/v3/active-directory/groups/#getting-groups-recursively","title":"Getting Groups Recursively","text":"<p>When you have a group that is apart of many parent groups in a hierarchy, you may need to retrieve these.</p> <p>Call the <code>recursive()</code> method, prior to <code>get()</code> to retrieve them:</p> <pre><code>$group = Group::find('cn=Accounting,dc=local,dc=com');\n\n$allGroups = $group-&gt;groups()-&gt;recursive()-&gt;get();\n</code></pre>"},{"location":"docs/core/v3/active-directory/groups/#adding-groups","title":"Adding Groups","text":"<p>To add groups to a particular group, call the <code>attach()</code> method on the <code>groups</code> relation:</p> <p>You must provide a <code>Model</code> instance into the <code>attach()</code> method.</p> <pre><code>$accounting = Group::find('cn=Accounting,dc=local,dc=com');\n\n$office = Group::find('cn=Office,dc=local,dc=com');\n\n$accounting-&gt;groups()-&gt;attach($office);\n</code></pre>"},{"location":"docs/core/v3/active-directory/groups/#adding-multiple-groups","title":"Adding Multiple Groups","text":"<p>To add multiple groups at once, provide an array of models to the <code>attach()</code> method:</p> <pre><code>$accounting = Group::find('cn=Accounting,dc=local,dc=com');\n\n$officeGroups = Group::in('ou=Office,ou=Groups,dc=local,dc=com')-&gt;get();\n\n$accounting-&gt;groups()-&gt;attach($officeGroups);\n</code></pre>"},{"location":"docs/core/v3/active-directory/groups/#removing-groups","title":"Removing Groups","text":"<p>To remove groups on a particular group, call the <code>groups</code> relationship, and then <code>detach()</code>:</p> <p>You must provide a <code>Model</code> instance into the <code>detach()</code> method.</p> <pre><code>$accounting = Group::find('cn=Accounting,dc=local,dc=com');\n\n$officeGroup = $accounting-&gt;groups()-&gt;where('cn', '=', 'Office')-&gt;first();\n\n$accounting-&gt;groups()-&gt;detach($officeGroup);\n</code></pre>"},{"location":"docs/core/v3/active-directory/groups/#removing-multiple-groups","title":"Removing Multiple Groups","text":"<p>To remove multiple groups at once, provide an array of models to the <code>detach()</code> method:</p> <pre><code>$accounting = Group::find('cn=Accounting,dc=local,dc=com');\n\n$officeGroups = $accounting-&gt;groups()\n                           -&gt;in('ou=Office,ou=Groups,dc=local,dc=com')\n                           -&gt;get();\n\n$accounting-&gt;groups()-&gt;detach($officeGroups);\n</code></pre>"},{"location":"docs/core/v3/active-directory/groups/#removing-all-groups","title":"Removing All Groups","text":"<p>To remove all immediate groups of a particular group, call the <code>detach()</code> method:</p> <p>A collection of all removed groups will be returned.</p> <pre><code>$accounting = Group::find('cn=Accounting,dc=local,dc=com');\n\n$removed = $accounting-&gt;groups()-&gt;detachAll();\n\nforeach ($removed as $group) {\n    echo \"Removed: \" . $group-&gt;getDn();\n}\n</code></pre>"},{"location":"docs/core/v3/active-directory/users/","title":"User Management (Active Directory)","text":""},{"location":"docs/core/v3/active-directory/users/#creation","title":"Creation","text":"<p>Let's walk through the basics of user creation for Active Directory. There are some requirements you must know prior to creation:</p> Requirement You must set a common name (<code>cn</code>) for the user You must connect to your server with an account that has permission to create users You must connect to your server via TLS or SSL if you set the the users password (<code>unicodepwd</code>) attribute You must set the <code>unicodePwd</code> attribute as a non-encoded string (more on this below) To set the users <code>userAccountControl</code>, it must be set after the user has been created <p>Important: Attributes that are set below can be cased in any manor. They can be <code>UPPERCASED</code>, <code>lowercased</code>, <code>camelCased</code>, <code>PascalCased</code>, etc. Use whichever casing you prefer to be most readable in your application.</p> <pre><code>&lt;?php\n\nuse LdapRecord\\Models\\ActiveDirectory\\User;\n\n$user = (new User)-&gt;inside('ou=Users,dc=local,dc=com');\n\n$user-&gt;cn = 'John Doe';\n$user-&gt;unicodePwd = 'SecretPassword';\n$user-&gt;samaccountname = 'jdoe';\n$user-&gt;userPrincipalName = 'jdoe@acme.org';\n\n$user-&gt;save();\n\n// Sync the created users attributes.\n$user-&gt;refresh();\n\n// Enable the user.\n$user-&gt;userAccountControl = 512;\n\ntry {\n    $user-&gt;save();\n} catch (\\LdapRecord\\LdapRecordException $e) {\n    // Failed saving user.\n}\n</code></pre> <p>Important: It is wise to encapsulate saving your user in a try / catch block, so if it fails you can determine if the cause of failure is due to your domains password policy.</p>"},{"location":"docs/core/v3/active-directory/users/#password-management","title":"Password Management","text":""},{"location":"docs/core/v3/active-directory/users/#setting-passwords","title":"Setting Passwords","text":"<p>Using the included <code>LdapRecord\\Models\\ActiveDirectory\\User</code> model, an attribute mutator has been added that assists in the setting and changing of passwords on user objects. Feel free to take a peek into the source code to see how it all works.</p> <p>The password string you set on the users <code>unicodePwd</code> attribute is automatically encoded. You do not need to encode it yourself. Doing so will cause an error or exception upon saving the user.</p> <p>Once you have set a password on a user object, this generates a modification on the user model equal to a <code>LDAP_MODIFY_BATCH_REPLACE</code>:</p> <pre><code>&lt;?php\n\nuse LdapRecord\\Models\\ActiveDirectory\\User;\n\n$user = new User();\n\n$user-&gt;unicodepwd = 'secret';\n\n$modification = $user-&gt;getModifications()[0];\n\nvar_dump($modification);\n\n// \"attrib\" =&gt; \"unicodepwd\"\n// \"modtype\" =&gt; 3\n// \"values\" =&gt; array:1 [\n//    0 =&gt; \"\"\\x00s\\x00e\\x00c\\x00r\\x00e\\x00t\\x00\"\\x00\"\n// ]\n</code></pre> <p>As you can see, a batch modification has been automatically generated for the user. Upon calling <code>save()</code>, it will be sent to your LDAP server.</p>"},{"location":"docs/core/v3/active-directory/users/#changing-passwords","title":"Changing Passwords","text":"<p>To change a user's password, you must either:</p> <ol> <li>Bind to your LDAP server with a user that has permissions to reset passwords</li> <li>Or; bind as the user whose password you are trying to change.</li> </ol> <p>Important:</p> <ul> <li>You must provide the correct user's old password</li> <li>You must set the <code>unicodepwd</code> attribute with an array containing two (2) values (old &amp; new password)</li> <li>You must provide a new password that abides by your password policy, such as history, complexity, and length</li> </ul> <p>Let's walk through an example:</p> <pre><code>&lt;?php\n\nuse LdapRecord\\Models\\ActiveDirectory\\User;\n\n$user = User::find('cn=John Doe,ou=Users,dc=local,dc=com');\n\n$user-&gt;unicodepwd = ['old-password', 'new-password'];\n\ntry {\n    $user-&gt;save();\n\n    // User password changed!\n} catch (\\LdapRecord\\Exceptions\\InsufficientAccessException $ex) {\n    // The currently bound LDAP user does not\n    // have permission to change passwords.\n} catch (\\LdapRecord\\Exceptions\\ConstraintException $ex) {\n    // The users new password does not abide\n    // by the domains password policy.\n} catch (\\LdapRecord\\LdapRecordException $ex) {\n    // Failed changing password. Get the last LDAP\n    // error to determine the cause of failure.\n    $error = $ex-&gt;getDetailedError();\n\n    echo $error-&gt;getErrorCode();\n    echo $error-&gt;getErrorMessage();\n    echo $error-&gt;getDiagnosticMessage();\n}\n</code></pre> <p>Important: You must use a try / catch block upon saving. An <code>LdapRecord\\LdapRecordException</code> will always be thrown when an incorrect old password has been given, or the new password does not abide by your password policy.</p>"},{"location":"docs/core/v3/active-directory/users/#resetting-passwords","title":"Resetting Passwords","text":"<p>To reset a users password, you must be bound to your LDAP directory with a user whom has permission to do so on your directory.</p> <p>You can perform a password reset by simply setting the users <code>unicodepwd</code> attribute as a string, and then calling the <code>save()</code> method, similarly to how it is done during user creation:</p> <pre><code>&lt;?php\n\nuse LdapRecord\\Models\\ActiveDirectory\\User;\n\n$user = User::find('cn=John Doe,ou=Users,dc=local,dc=com');\n\n$user-&gt;unicodepwd = 'new-password';\n\ntry {\n    $user-&gt;save();\n\n    // User password reset!\n} catch (\\LdapRecord\\Exceptions\\InsufficientAccessException $ex) {\n    // The currently bound LDAP user does not\n    // have permission to reset passwords.\n} catch (\\LdapRecord\\Exceptions\\ConstraintException $ex) {\n    // The users new password does not abide\n    // by the domains password policy.\n} catch (\\LdapRecord\\LdapRecordException $ex) {\n    // Failed resetting password. Get the last LDAP\n    // error to determine the cause of failure.\n    $error = $ex-&gt;getDetailedError();\n\n    echo $error-&gt;getErrorCode();\n    echo $error-&gt;getErrorMessage();\n    echo $error-&gt;getDiagnosticMessage();\n}\n</code></pre>"},{"location":"docs/core/v3/active-directory/users/#password-policy-errors","title":"Password Policy Errors","text":"<p>Active Directory will return diagnostic error codes when a password modification fails.</p> <p>To determine the cause, you can check this diagnostic message to see if it contains any of the following codes:</p> Code Meaning <code>525</code> User not found <code>52e</code> Invalid credentials <code>530</code> Not permitted to logon at this time <code>531</code> Not permitted to logon at this workstation <code>532</code> Password expired <code>533</code> Account disabled <code>701</code> Account expired <code>773</code> User must reset password <code>775</code> User account locked <pre><code>&lt;?php\n\nuse LdapRecord\\Models\\ActiveDirectory\\User;\n\n$user = User::find('cn=John Doe,ou=Users,dc=local,dc=com');\n\n$user-&gt;unicodepwd = ['old-password', 'new-password'];\n\ntry {\n    $user-&gt;save();\n\n    // User password changed!\n} catch (\\LdapRecord\\LdapRecordException $ex) {\n    // Failed changing password. Get the last LDAP\n    // error to determine the cause of failure.\n    $error = $ex-&gt;getDetailedError();\n\n    echo $error-&gt;getErrorCode(); // 49\n    echo $error-&gt;getErrorMessage(); // 'Invalid credentials'\n    echo $error-&gt;getDiagnosticMessage(); // '80090308: LdapErr: DSID-0C09042A, comment: AcceptSecurityContext error, data 52e, v3839'\n\n    if (strpos($error-&gt;getDiagnosticMessage(), '52e')) {\n        // This is an invalid credentials error.\n    }\n}\n</code></pre>"},{"location":"docs/core/v3/active-directory/users/#check-if-a-user-is-locked-out","title":"Check if a user is locked out","text":"<p>To check if a user is locked out, verify that the <code>lockouttime</code> attribute is greater than <code>0</code> (zero):</p> <pre><code>$user = User::find('cn=John Doe,ou=Users,dc=local,dc=com');\n\nif ($user-&gt;lockouttime[0] ?? 0 &gt; 0) {\n    // User is locked out.\n}\n\nif ($user-&gt;getFirstAttribute('lockouttime') &gt; 0) {\n    // User is locked out.\n}\n</code></pre>"},{"location":"docs/core/v3/active-directory/users/#getting-all-locked-out-users","title":"Getting all locked out users","text":"<p>To retrieve all currently locked out users, query for all users with a <code>lockouttime</code> greater or equal to <code>1</code> (one):</p> <pre><code>$lockedOutUsers = User::where('lockouttime', '&gt;=', '1')-&gt;get();\n</code></pre>"},{"location":"docs/core/v3/active-directory/users/#unlock-locked-out-user-account","title":"Unlock Locked Out User Account","text":"<p>If a user has been locked out, set the <code>lockouttime</code> attribute to <code>0</code> (zero):</p> <p>Updating this attribute in Active Directory will also reset the users <code>badPwdCount</code> attribute to <code>0</code> (zero). For more information, see the Microsoft Documentation.</p> <pre><code>$user = User::find('cn=John Doe,ou=Users,dc=local,dc=com');\n\n$user-&gt;update(['lockouttime' =&gt; 0]);\n</code></pre>"},{"location":"docs/core/v3/active-directory/users/#extend-user-password-expiration","title":"Extend User Password Expiration","text":"<p>Sometimes you may wish to extend a user's password expiration for the full duration of your domains password expiry time.</p> <p>To do this, you must update the user's <code>pwdLastSet</code> time to <code>0</code>, then to <code>-1</code>:</p> <pre><code>$user = User::find('cn=John Doe,ou=Users,dc=local,dc=com');\n\n// Set password last set to 'Never':\n$user-&gt;update(['pwdlastset' =&gt; 0]);\n\n// Set password last set to the current date / time:\n$user-&gt;update(['pwdlastset' =&gt; -1]);\n\n// User password expiration successfully extended.\n</code></pre>"},{"location":"docs/core/v3/active-directory/users/#user-must-change-password-at-next-logon","title":"User Must Change Password at Next Logon","text":"<p>To toggle the \"User Must Change Password at Next Logon\" checkbox that is available in the Active Directory GUI - you must set the <code>pwdlastset</code> attribute to one of the below values:</p> Value Meaning <code>0</code> Toggled on. The user will be required to change their password. <code>-1</code> Toggled off. The user will not be required to change their password. <p>Important:</p> <ul> <li>The <code>pwdlastset</code> attribute can only be modified by domain administrators.</li> <li>If toggled on, the Active Directory user will not pass LDAP authentication   until they visit a domain joined computer and update their password.</li> </ul> <pre><code>$user = User::find('cn=John Doe,ou=Users,dc=local,dc=com');\n\n// The user must change their password on next login.\n$user-&gt;update(['pwdlastset' =&gt; 0]);\n</code></pre>"},{"location":"docs/core/v3/active-directory/users/#checking-user-enablement-disablement","title":"Checking User Enablement / Disablement","text":"<p>To determine if a user is enabled or disabled, you may use the <code>isEnabled()</code> or <code>isDisabled()</code> methods on an existing <code>User</code> model instance:</p> <pre><code>$user = User::find('cn=John Doe,ou=Users,dc=local,dc=com');\n\nif ($user-&gt;isEnabled()) {\n    // The user is enabled...\n}\n\nif ($user-&gt;isDisabled()) {\n    // The user is disabled...\n}\n</code></pre> <p>To access the user's User Account Control to determine other flags they may have set, call the <code>accountControl()</code> method:</p> <pre><code>use LdapRecord\\Models\\Attributes\\AccountControl;\n\n$user = User::find('...');\n\nif ($user-&gt;accountControl()-&gt;has(AccountControl::LOCKOUT)) {\n    // The user account is locked...\n}\n</code></pre> <p>To learn more about User Account Control, read on below.</p>"},{"location":"docs/core/v3/active-directory/users/#user-account-control","title":"User Account Control","text":"<p>A users <code>userAccountControl</code> attribute stores an integer value.</p> <p>This integer value contains the sums of various integer flags. These flags control the accessibility and behaviour of an Active Directory user account, such as account disablement, password expiry, the ability to change passwords, and more.</p> <p>For example, setting a users <code>userAccountControl</code> to <code>512</code> would mean that the user account is a default account type that represents a typical user. Setting it to <code>2</code>, would mean the account has been disabled.</p> <p>Combining both to <code>514</code> (<code>512 + 2 = 514</code>) would mean the users account is a typical user account, that is also disabled.</p>"},{"location":"docs/core/v3/active-directory/users/#usage","title":"Usage","text":"<p>You can manipulate a users <code>userAccountControl</code> manually by simply setting the <code>userAccountControl</code> property on an existing user using the raw integer value, or you can use the account control builder <code>LdapRecord\\Models\\Attributes\\AccountControl</code>:</p> <pre><code>&lt;?php\n\nuse LdapRecord\\Models\\ActiveDirectory\\User;\nuse LdapRecord\\Models\\Attributes\\AccountControl;\n\n$user = User::find('cn=John Doe,ou=Users,dc=local,dc=com');\n\n// Setting the UAC value manually:\n$user-&gt;userAccountControl = 512; // Normal, enabled account.\n\n// Or, using the UAC builder:\n$user-&gt;userAccountControl = (new AccountControl)-&gt;accountIsNormal();\n\n$user-&gt;save();\n</code></pre> <p>Using the <code>AccountControl</code> builder, methods called will automatically sum the integer value.</p> <p>For example, let's set an account control for a user with the following controls:</p> <ul> <li>The user account is normal</li> <li>The user account password does not expire</li> <li>The user account password cannot be changed</li> </ul> <pre><code>$user = User::find('cn=John Doe,ou=Users,dc=local,dc=com');\n\n$uac = new AccountControl();\n\n$uac-&gt;accountIsNormal();\n$uac-&gt;passwordDoesNotExpire();\n$uac-&gt;passwordCannotBeChanged();\n\n$user-&gt;userAccountControl = $uac;\n\n$user-&gt;save();\n</code></pre> <p>The <code>AccountControl</code> builder also allows you to determine which flags are set.</p> <p>This can be done with the <code>has</code> and <code>doesntHave</code> methods.</p> <p>Create an <code>AccountControl</code> with the users <code>userAccountControl</code> value in the constructor:</p> <pre><code>$user = User::find('cn=John Doe,ou=Users,dc=local,dc=com');\n\n$uac = new AccountControl(\n    $user-&gt;getFirstAttribute('userAccountControl')\n);\n\nif ($uac-&gt;has(AccountControl::LOCKOUT)) {\n    // This account is locked out.\n}\n\nif ($uac-&gt;doesntHave(AccountControl::LOCKOUT)) {\n    // The account is not locked out.\n}\n</code></pre>"},{"location":"docs/core/v3/active-directory/users/#available-constants","title":"Available Constants","text":"<p>The Account Control builder has constants for every possible value:</p> Constant Value <code>AccountControl::SCRIPT</code> <code>1</code> <code>AccountControl::ACCOUNTDISABLE</code> <code>2</code> <code>AccountControl::HOMEDIR_REQUIRED</code> <code>8</code> <code>AccountControl::LOCKOUT</code> <code>16</code> <code>AccountControl::PASSWD_NOTREQD</code> <code>32</code> <code>AccountControl::PASSWD_CANT_CHANGE</code> <code>64</code> <code>AccountControl::ENCRYPTED_TEXT_PWD_ALLOWED</code> <code>128</code> <code>AccountControl::TEMP_DUPLICATE_ACCOUNT</code> <code>256</code> <code>AccountControl::NORMAL_ACCOUNT</code> <code>512</code> <code>AccountControl::INTERDOMAIN_TRUST_ACCOUNT</code> <code>2048</code> <code>AccountControl::WORKSTATION_TRUST_ACCOUNT</code> <code>4096</code> <code>AccountControl::SERVER_TRUST_ACCOUNT</code> <code>8192</code> <code>AccountControl::DONT_EXPIRE_PASSWORD</code> <code>65536</code> <code>AccountControl::MNS_LOGON_ACCOUNT</code> <code>131072</code> <code>AccountControl::SMARTCARD_REQUIRED</code> <code>262144</code> <code>AccountControl::TRUSTED_FOR_DELEGATION</code> <code>524288</code> <code>AccountControl::NOT_DELEGATED</code> <code>1048576</code> <code>AccountControl::USE_DES_KEY_ONLY</code> <code>2097152</code> <code>AccountControl::DONT_REQ_PREAUTH</code> <code>4194304</code> <code>AccountControl::PASSWORD_EXPIRED</code> <code>8388608</code> <code>AccountControl::TRUSTED_TO_AUTH_FOR_DELEGATION</code> <code>16777216</code> <code>AccountControl::PARTIAL_SECRETS_ACCOUNT</code> <code>67108864</code>"},{"location":"docs/core/v3/active-directory/users/#available-methods","title":"Available Methods","text":"<p>The Account Control builder has methods to apply every possible value:</p> Method Constant Applied <code>AccountControl::runLoginScript()</code> <code>AccountControl::SCRIPT</code> <code>AccountControl::accountIsDisabled()</code> <code>AccountControl::ACCOUNTDISABLE</code> <code>AccountControl::homeFolderIsRequired()</code> <code>AccountControl::HOMEDIR_REQUIRED</code> <code>AccountControl::accountIsLocked()</code> <code>AccountControl::LOCKOUT</code> <code>AccountControl::passwordIsNotRequired()</code> <code>AccountControl::PASSWD_NOTREQD</code> <code>AccountControl::passwordCannotBeChanged()</code> <code>AccountControl::PASSWD_CANT_CHANGE</code> <code>AccountControl::allowEncryptedTextPassword()</code> <code>AccountControl::ENCRYPTED_TEXT_PWD_ALLOWED</code> <code>AccountControl::accountIsTemporary()</code> <code>AccountControl::TEMP_DUPLICATE_ACCOUNT</code> <code>AccountControl::accountIsNormal()</code> <code>AccountControl::NORMAL_ACCOUNT</code> <code>AccountControl::accountIsForInterdomain()</code> <code>AccountControl::INTERDOMAIN_TRUST_ACCOUNT</code> <code>AccountControl::accountIsForWorkstation()</code> <code>AccountControl::WORKSTATION_TRUST_ACCOUNT</code> <code>AccountControl::accountIsForServer()</code> <code>AccountControl::SERVER_TRUST_ACCOUNT</code> <code>AccountControl::passwordDoesNotExpire()</code> <code>AccountControl::DONT_EXPIRE_PASSWORD</code> <code>AccountControl::accountIsMnsLogon()</code> <code>AccountControl::MNS_LOGON_ACCOUNT</code> <code>AccountControl::accountRequiresSmartCard()</code> <code>AccountControl::SMARTCARD_REQUIRED</code> <code>AccountControl::trustForDelegation()</code> <code>AccountControl::TRUSTED_FOR_DELEGATION</code> <code>AccountControl::doNotTrustForDelegation()</code> <code>AccountControl::NOT_DELEGATED</code> <code>AccountControl::useDesKeyOnly()</code> <code>AccountControl::USE_DES_KEY_ONLY</code> <code>AccountControl::accountDoesNotRequirePreAuth()</code> <code>AccountControl::DONT_REQ_PREAUTH</code> <code>AccountControl::passwordIsExpired()</code> <code>AccountControl::PASSWORD_EXPIRED</code> <code>AccountControl::trustToAuthForDelegation()</code> <code>AccountControl::TRUSTED_TO_AUTH_FOR_DELEGATION</code> <code>AccountControl::accountIsReadOnly()</code> <code>AccountControl::PARTIAL_SECRETS_ACCOUNT</code> <p>There are also some utility methods that you may find useful:</p>"},{"location":"docs/core/v3/active-directory/users/#add","title":"<code>add</code>","text":"<p>Add a value to the account control:</p> <pre><code>$uac = new AccountControl();\n\n$uac-&gt;add(512);\n</code></pre>"},{"location":"docs/core/v3/active-directory/users/#remove","title":"<code>remove</code>","text":"<p>Remove a value from the account control:</p> <pre><code>$uac = new AccountControl();\n\n$uac-&gt;remove(2);\n</code></pre>"},{"location":"docs/core/v3/active-directory/users/#apply","title":"<code>apply</code>","text":"<p>Apply a value that is a combination of multiple flags:</p> <pre><code>$uac = new AccountControl();\n\n$uac-&gt;apply(514);\n</code></pre>"},{"location":"docs/core/v3/active-directory/users/#has","title":"<code>has</code>","text":"<p>Determine if the account control contains a specific flag:</p> <pre><code>$uac = new AccountControl(512);\n\n// true\n$uac-&gt;has(AccountControl::NORMAL_ACCOUNT);\n\n// false\n$uac-&gt;has(AccountControl::ACCOUNTDISABLE);\n</code></pre>"},{"location":"docs/core/v3/active-directory/users/#doesnthave","title":"<code>doesntHave</code>","text":"<p>Determine if the account control does not contain a specific flag:</p> <pre><code>$uac = new AccountControl(512);\n\n// false\n$uac-&gt;doesntHave(AccountControl::NORMAL_ACCOUNT);\n\n// true\n$uac-&gt;doesntHave(AccountControl::ACCOUNTDISABLE);\n</code></pre>"},{"location":"docs/core/v3/active-directory/users/#filter","title":"<code>filter</code>","text":"<p>Generate an LDAP filter string for the account control value:</p> <pre><code>$uac = new AccountControl(512);\n\n// \"(UserAccountControl:1.2.840.113556.1.4.803:=512)\"\n$uac-&gt;filter();\n</code></pre>"},{"location":"docs/core/v3/active-directory/users/#getallflags","title":"<code>getAllFlags</code>","text":"<p>Get an array of all of the available account control flags:</p> <pre><code>$uac = new AccountControl();\n\n// [\n//  'SCRIPT' =&gt; 1,\n//  'ACCOUNTDISABLE' =&gt; 2,\n//  'HOMEDIR_REQUIRED' =&gt; 8,\n//  ...\n// ]\n$uac-&gt;getAllFlags();\n</code></pre>"},{"location":"docs/core/v3/active-directory/users/#getappliedflags","title":"<code>getAppliedFlags</code>","text":"<p>Get an array of all of the applied account control flags:</p> <pre><code>$uac = new AccountControl(512);\n\n// [\n//  'NORMAL_ACCOUNT' =&gt; 512,\n// ]\n$uac-&gt;getAppliedFlags();\n</code></pre>"},{"location":"docs/core/v3/active-directory/users/#user-account-expiry","title":"User Account Expiry","text":"<p>A users <code>accountExpires</code> attribute stores a date (in Windows Integer Time) indicating when the account will no longer valid.</p> <p>This attribute is already added as a <code>windows-int</code> date cast inside of the included <code>ActiveDirectory\\User</code> model.</p> <p>To determine a user's account expiry, you will have to handle various cases depending on its value returned from the Active Directory server:</p> <pre><code>use LdapRecord\\Models\\Attributes\\Timestamp;\n\n$user = User::find('cn=jdoe,dc=local,dc=com');\n\nif ($user-&gt;accountExpires === false) {\n    // The user account has no account expiry.\n} else if (in_array($user-&gt;accountExpires, [0, Timestamp::WINDOWS_INT_MAX], $strict = true) {\n    // The user account never expires.\n} else if ($user-&gt;accountExpires-&gt;isPast())) {\n    // The user account is expired.\n} else {\n    // The user account is not expired.\n}\n</code></pre>"},{"location":"docs/core/v3/active-directory/users/#group-management","title":"Group Management","text":"<p>If you are utilizing the included <code>LdapRecord\\Models\\ActiveDirectory\\User</code> model, the <code>groups()</code> relationship exists for easily removing / adding groups to users.</p>"},{"location":"docs/core/v3/active-directory/users/#getting-groups","title":"Getting Groups","text":"<p>To get the groups that a user is a member of, call the <code>groups()</code> relationship method. This will return the immediate groups that the user is a member of:</p> <pre><code>&lt;?php\n\nuse LdapRecord\\Models\\ActiveDirectory\\User;\n\n$user = User::find('cn=John Doe,ou=Users,dc=local,dc=com');\n\n// Get immediate groups the user is apart of:\n$groups = $user-&gt;groups()-&gt;get();\n\nforeach ($groups as $group) {\n    echo $group-&gt;getName();\n}\n</code></pre> <p>You may also want to retrieve groups that are members of groups that the user is apart of. This is called a recursive relationship query.</p> <p>To retrieve groups of groups, call the <code>recursive()</code> method following the <code>groups()</code> relation call:</p> <pre><code>&lt;?php\n\nuse LdapRecord\\Models\\ActiveDirectory\\User;\n\n$user = User::find('cn=John Doe,ou=Users,dc=local,dc=com');\n\n// Get nested groups the user is apart of:\n$groups = $user-&gt;groups()-&gt;recursive()-&gt;get();\n\nforeach ($groups as $group) {\n    echo $group-&gt;getName();\n}\n</code></pre>"},{"location":"docs/core/v3/active-directory/users/#filtering-groups","title":"Filtering Groups","text":"<p>Relations in LdapRecord act as query builders, so you can chain query methods on the <code>groups()</code> relation itself:</p> <pre><code>&lt;?php\n\nuse LdapRecord\\Models\\ActiveDirectory\\User;\n\n$user = User::find('cn=John Doe,ou=Users,dc=local,dc=com');\n\n// Get all groups the user is apart of that contain 'Accounting':\n$groups = $user-&gt;groups()-&gt;whereContains('cn', 'Accounting')-&gt;get();\n\n// Get all groups the user is apart of that are members of the 'Office' group:\n$groups = $user-&gt;groups()-&gt;whereMemberOf('cn=Office,ou=Groups,dc=local,dc=com')-&gt;get();\n</code></pre>"},{"location":"docs/core/v3/active-directory/users/#checking-existence","title":"Checking Existence","text":"<p>To check if a user is a member of any group, call the <code>exists()</code> method on the <code>groups()</code> relationship:</p> <pre><code>&lt;?php\n\nuse LdapRecord\\Models\\ActiveDirectory\\User;\n\n$user = User::find('cn=John Doe,ou=Users,dc=local,dc=com');\n\nif ($user-&gt;groups()-&gt;exists()) {\n    // The user is a member of at least one group.\n}\n</code></pre> <p>To check if a user is an immediate member of a specific group, pass a model into the <code>exists()</code> method:</p> <pre><code>&lt;?php\n\nuse LdapRecord\\Models\\ActiveDirectory\\User;\nuse LdapRecord\\Models\\ActiveDirectory\\Group;\n\n$group = Group::find('cn=Accounting,dc=local,dc=com');\n\n$user = User::find('cn=John Doe,ou=Users,dc=local,dc=com');\n\nif ($user-&gt;groups()-&gt;exists($group)) {\n    // The user is an immediate member of the 'Accounting' group.\n}\n</code></pre> <p>To check if a user is a member of a group that could be nested in a sub-group, call the <code>recursive()</code> method before calling <code>exists()</code>:</p> <pre><code>&lt;?php\n\nuse LdapRecord\\Models\\ActiveDirectory\\User;\nuse LdapRecord\\Models\\ActiveDirectory\\Group;\n\n$group = Group::find('cn=Accounting,dc=local,dc=com');\n\n$user = User::find('cn=John Doe,ou=Users,dc=local,dc=com');\n\nif ($user-&gt;groups()-&gt;recursive()-&gt;exists($group)) {\n    // The user is a member of the 'Accounting' group.\n}\n</code></pre>"},{"location":"docs/core/v3/active-directory/users/#adding-groups","title":"Adding Groups","text":"<p>To add groups to a user, call the <code>groups()</code> relationship method, then <code>attach()</code>:</p> <pre><code>&lt;?php\n\nuse LdapRecord\\Models\\ActiveDirectory\\User;\nuse LdapRecord\\Models\\ActiveDirectory\\Group;\n\n$group = Group::findOrFail('cn=Accounting,ou=Groups,dc=local,dc=com');\n\n$user = User::find('cn=John Doe,ou=Users,dc=local,dc=com');\n\nif ($user-&gt;groups()-&gt;attach($group)) {\n    // Successfully added the group to the user.\n}\n</code></pre>"},{"location":"docs/core/v3/active-directory/users/#removing-groups","title":"Removing Groups","text":"<p>To remove groups on user, call the <code>groups()</code> relationship method, then <code>detach()</code>:</p> <pre><code>&lt;?php\n\nuse LdapRecord\\Models\\ActiveDirectory\\User;\nuse LdapRecord\\Models\\ActiveDirectory\\Group;\n\n$group = Group::findOrFail('cn=Accounting,ou=Groups,dc=local,dc=com');\n\n$user = User::find('cn=John Doe,ou=Users,dc=local,dc=com');\n\nif ($user-&gt;groups()-&gt;detach($group)) {\n    // Successfully removed the group from the user.\n}\n</code></pre> <p>The <code>detach()</code> method will return <code>true</code> if the user is already not apart of the given group. This does not indicate that the user was previously a member.</p> <p>You may want to locate groups on the user prior removal to ensure they are a member:</p> <pre><code>&lt;?php\n\nuse LdapRecord\\Models\\ActiveDirectory\\User;\n\n$user = User::find('cn=John Doe,ou=Users,dc=local,dc=com');\n\n$group = $user-&gt;groups()-&gt;first();\n\nif ($group &amp;&amp; $user-&gt;groups()-&gt;detach($group)) {\n    // Successfully removed the first group from the user.\n}\n</code></pre>"},{"location":"docs/laravel/v1/","title":"Overview","text":"<p>LdapRecord-Laravel is a package that provides you the ability to search your LDAP directory, perform operations, and authenticate LDAP users into your Laravel application.</p> <p>It uses the core LdapRecord package under the hood, so be sure to look at its documentation so you have an understanding of how everything works. It was created with the mindset of porting Laravel's fantastic Eloquent database ORM to an LDAP equivalent.</p> <p>If you ever encounter issues or simply need some help getting up and running, please feel free to create an issue and I would be happy to help you out.</p> <p>If you require immediate support, consider becoming a sponsor to receive issue priority so you get up and running as fast as possible.</p> <p>Let's get started!</p>"},{"location":"docs/laravel/v1/debugging/","title":"Debugging","text":""},{"location":"docs/laravel/v1/debugging/#connectivity","title":"Connectivity","text":"<p>LdapRecord-Laravel comes with a built-in command to test connectivity to your LDAP servers. The exception message, error code, and diagnostic message are displayed after a failure to bind to your LDAP server.</p> <p>To test your connectivity, run the following command:</p> <pre><code>php artisan ldap:test\n</code></pre> <p>Then, the following will be output:</p> <pre><code>Testing LDAP connection [default]...\n+------------+------------+-----------------+-------------------------------------------------------------------------------------------------------------+---------------+\n| Connection | Successful | Username        | Message                                                                                                     | Response Time |\n+------------+------------+-----------------+-------------------------------------------------------------------------------------------------------------+---------------+\n| default    | \u2718 No       | user@local.com  | ldap_bind(): Unable to bind to server: Can't contact LDAP server. Error Code: [-1] Diagnostic Message: null | 5008.72ms     |\n+------------+------------+-----------------+-------------------------------------------------------------------------------------------------------------+---------------+\n</code></pre> <p>The returned error codes and diagnostic messages can help you greatly when attempting to debug SSL and TLS connectivity issues.</p>"},{"location":"docs/laravel/v1/debugging/#tls-ssl","title":"TLS &amp; SSL","text":"<p>TLS and SSL can be very tricky to get up and running. You will most likely have to place an <code>ldap.conf</code> file onto your local / production server to indicate that you would like to either bypass TLS / SSL certificate verification, or use a valid certificate that you have retrieved from your LDAP server.</p> <p>This process is fully documented on the configuration documentation. It includes per OS level instructions on where your <code>ldap.conf</code> file is located (or where it must be created), as well as what it must contain.</p> <p>Important: You must restart your web server after making changes to the <code>ldap.conf</code> file. In some cases, you may even have to restart your workstation or server for the changes to take effect.</p>"},{"location":"docs/laravel/v1/debugging/#logging-in","title":"Logging In","text":"<p>To debug issues logging in, its recommended to first complete the following steps:</p> <ol> <li>Enabled logging via the <code>logging</code> key inside of your <code>config/ldap.php</code> file     (or by enabling it via your <code>.env</code> by using the <code>LDAP_LOGGING</code> key)</li> <li>Clear your configurations cache (if enabled) by running the <code>php artisan config:clear</code> command</li> <li>Add the <code>ListensForLdapBindFailure</code> trait onto your <code>LoginController</code></li> <li>Attempt logging in again</li> </ol> <p>After completing the above, the first thing to lookout for is whether a red error message is being displayed underneath your username / email field.</p> <p>If you do not see any error message and are immediately returned back to the login page, then you have likely changed the username field on your <code>resources/views/auth/login.blade.php</code> but have not updated it inside of your <code>LoginController</code>, or vice versa.</p> <p>For example, if you want users to login by a <code>username</code> instead of their <code>email</code>, make sure you've changed this via the <code>username</code> method, and the <code>credentials</code> method on your <code>LoginController</code></p> <pre><code>// app/Http/Controllers/Auth/LoginController.php\n\nuse Illuminate\\Http\\Request;\n\npublic function username()\n{\n    // This is the name of the HTML 'input' inside\n    // of our 'login.blade.php' view:\n    return 'username';\n}\n\nprotected function credentials(Request $request)\n{\n    // 'samaccountname' is the attribute we are using to\n    // locate users in our LDAP directory with. The\n    // value of the key must be the input name of\n    // our HTML input, as shown above:\n    return [\n        'samaccountname' =&gt; $request-&gt;get('username'),\n        'password' =&gt; $request-&gt;get('password'),\n    ];\n}\n</code></pre> <p>If you simply see an Invalid Credentials, or Can't contact LDAP server error, refer to your log files inside of your applications <code>storage/logs</code> directory to investigate further. With <code>logging</code> enabled, all LDAP searches, binds, failures and exceptions will be reported there.</p>"},{"location":"docs/laravel/v1/events/","title":"Events","text":""},{"location":"docs/laravel/v1/events/#introduction","title":"Introduction","text":"<p>LdapRecord includes a robust event dispatcher that allows you to listen for various events that occur, such as authentication and object creation / modification.</p> <p>For example, you may wish to send a notification when an LDAP object is modified. You can listen for the model <code>Saved</code> event and then send an email regarding the change.</p>"},{"location":"docs/laravel/v1/events/#creating-the-listener","title":"Creating the Listener","text":"<p>To get started, we will create an event listener in the <code>app/Ldap/Listeners</code> directory and create a new file named <code>ObjectModified.php</code>. This will contain a class that will listen for the <code>Saved</code> model event.</p> <p>You will have to create the <code>Ldap</code> and <code>Listeners</code> sub directories.</p> <pre><code>&lt;?php\n\nnamespace App\\Ldap\\Listeners;\n\nuse LdapRecord\\Models\\Events\\Saved;\nuse Illuminate\\Support\\Facades\\Mail;\n\nclass ObjectModified\n{\n    public function handle(Saved $event)\n    {\n        $objectName = $event-&gt;getModel()-&gt;getName();\n\n        // Send an email when the object has been modified.\n        Mail::raw(\"Object [$objectName] has been modified.\", function ($message) {\n            $message-&gt;from('notifier@company.com', 'LDAP Notifier');\n            $message-&gt;to('it-support@company.com');\n            $message-&gt;subject('LDAP Object Modified');\n        });\n    }\n}\n</code></pre> <p>For a list of all LdapRecord events, view the core events documentation.</p>"},{"location":"docs/laravel/v1/events/#creating-the-service-provider","title":"Creating the Service Provider","text":"<p>Next, we will create a new Laravel service provider. This is where we will register our LDAP event listeners. We will call it <code>LdapEventServiceProvider</code>. Execute the below command to generate it:</p> <pre><code>php artisan make:provider LdapEventServiceProvider\n</code></pre> <p>Add the provider to your <code>config/app.php</code> configuration file:</p> <pre><code>// config/app.php\n\nreturn [\n    // ...\n\n    'providers' =&gt; [\n        // ...\n        \\App\\Providers\\LdapEventServiceProvider::class,\n    ],\n];\n</code></pre> <p>Then, in the generated provider we will update it to the following:</p> <pre><code>&lt;?php\n\nnamespace App\\Providers;\n\nuse LdapRecord\\Container;\nuse Illuminate\\Support\\ServiceProvider;\n\nclass LdapEventServiceProvider extends ServiceProvider\n{\n    /**\n     * The LDAP event listener mappings for the application.\n     *\n     * @return array\n     */\n    protected $listen = [\n        \\LdapRecord\\Models\\Events\\Saved::class =&gt; [\n            \\App\\Ldap\\ObjectModified::class\n        ],\n    ];\n\n    /**\n     * Register the application LDAP event listeners.\n     *\n     * @return void\n     */\n    public function boot()\n    {\n        $dispatcher = Container::getEventDispatcher();\n\n        foreach ($this-&gt;listen as $event =&gt; $listeners) {\n            foreach (array_unique($listeners) as $listener) {\n                $dispatcher-&gt;listen($event, $listener);\n            }\n        }\n    }\n}\n</code></pre> <p>We've removed the <code>register</code> method in the above generated class. We won't need it here.</p> <p>As you can see above, we can add LdapRecord events to the <code>$listen</code> property as the key, and the listeners as the value. This allows you to attach mulitple listeners to the same event.</p>"},{"location":"docs/laravel/v1/importing/","title":"Importing LDAP Objects","text":""},{"location":"docs/laravel/v1/importing/#introduction","title":"Introduction","text":"<p>If you are looking to import LDAP users into your application, view this guide instead.</p> <p>With LdapRecord-Laravel, you can easily import and synchronize LDAP objects into a database table using a given Eloquent model. This is useful for importing groups, memberships and more.</p>"},{"location":"docs/laravel/v1/importing/#getting-started","title":"Getting Started","text":"<p>For this example, we will be importing LDAP groups into our applications database table <code>groups</code>.</p> <p>Our groups table simply contains a <code>name</code> column, however to import LDAP objects into it, we must add two extra database columns:</p> Column Reason <code>guid</code> This is for storing your LDAP objects <code>objectguid</code>. It is needed for locating and synchronizing your LDAP object to the database. <code>domain</code> This is for storing your LDAP objects connection name. It is needed for storing your configured LDAP connection name of the object. <p>For brevity, we will not be showing the creation of the <code>groups</code> database table migration.</p>"},{"location":"docs/laravel/v1/importing/#creating-the-migration","title":"Creating the Migration","text":"<p>Generate a migration to add these columns onto our <code>groups</code> table:</p> <pre><code>php artisan make:migration add_ldap_columns_to_groups_table\n</code></pre> <p>Then, we'll add the new required columns to the migration:</p> <pre><code>class AddLdapColumnsToGroupsTable extends Migration\n{\n    /**\n     * Run the migrations.\n     */\n    public function up()\n    {\n        Schema::table('groups', function (Blueprint $table) {\n            $table-&gt;string('guid')-&gt;unique()-&gt;nullable();\n            $table-&gt;string('domain')-&gt;nullable();\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     */\n    public function down()\n    {\n        Schema::table('groups', function (Blueprint $table) {\n            $table-&gt;dropColumn(['guid', 'domain']);\n        });\n    }\n}\n</code></pre> <p>After finishing setting up the above migration, make sure you run it:</p> <pre><code>php artisan migrate\n</code></pre>"},{"location":"docs/laravel/v1/importing/#setting-up-the-eloquent-model","title":"Setting Up the Eloquent Model","text":"<p>For the importer to be able to properly interface with your Eloquent model, you must apply the following trait and interface onto your Eloquent model you are using to perform the import.</p> Type Interface <code>LdapRecord\\Laravel\\LdapImportable</code> Trait <code>LdapRecord\\Laravel\\ImportableFromLdap</code> <pre><code>// app/Group.php\n\nnamespace App;\n\nuse LdapRecord\\Laravel\\LdapImportable;\nuse LdapRecord\\Laravel\\ImportableFromLdap;\n\nclass Group extends Authenticatable implements LdapImportable\n{\n    use ImportableFromLdap;\n\n    // ...\n}\n</code></pre> <p>Your model is now ready for importing.</p>"},{"location":"docs/laravel/v1/importing/#running-the-import","title":"Running the Import","text":""},{"location":"docs/laravel/v1/importing/#defining-sync-attributes","title":"Defining Sync Attributes","text":"<p>Prior to running the import, you must define a configuration array. This configuration array must contain an array of <code>sync_attributes</code>, that reference the database column (the key) and the LDAP attribute (the value):</p> <pre><code>$config = [\n    'sync_attributes' =&gt; [\n        'name' =&gt; 'cn'\n    ],\n];\n</code></pre> <p>As with importing LDAP users, you may also use an attribute handler if you require extra logic when setting database values from the object.</p> <pre><code>$config = ['sync_attributes' =&gt; \\App\\Ldap\\AttributeHandler::class];\n</code></pre>"},{"location":"docs/laravel/v1/importing/#performing-the-import","title":"Performing the Import","text":"<p>To perform the import, you must use the <code>LdapRecord\\Laravel\\LdapImporter</code> class.</p> <p>This class accepts your Eloquent model class as the first parameter, and your configuration array into the second:</p> <p>Important: The importer will always return an unsaved Eloquent model. You must call <code>save()</code> after running the importer.</p> <pre><code>use App\\Group as EloquentGroup;\nuse LdapRecord\\Laravel\\LdapImporter;\nuse LdapRecord\\Models\\ActiveDirectory\\Group as LdapGroup;\n\n// Define the sync attributes.\n$config = [\n    'sync_attributes' =&gt; [\n        'name' =&gt; 'cn'\n    ],\n];\n\n// Create the importer.\n$importer = new LdapImporter(EloquentGroup::class, $config);\n\n// Import each group from the directory.\nforeach (LdapGroup::get() as $group) {\n    $importer-&gt;run($group)-&gt;save();\n}\n</code></pre> <p>The above can easily be placed into a scheduled job if you'd prefer the import to be ran in the background of your application.</p>"},{"location":"docs/laravel/v1/installation/","title":"Installation","text":"<p>LdapRecord-Laravel requires the following:</p> Requirements PHP &gt;= 7.2 Laravel &gt;= 5.6 PHP LDAP extension enabled An LDAP server (Active Directory, OpenLDAP, FreeIPA etc.) <p>Require LdapRecord-Laravel via composer:</p> <pre><code>composer require directorytree/ldaprecord-laravel\n</code></pre> <p>Then, publish the <code>ldap.php</code> configuration file via the <code>artisan publish</code> command:</p> <pre><code>php artisan vendor:publish --provider=\"LdapRecord\\Laravel\\LdapServiceProvider\"\n</code></pre> <p>Inside the published <code>config/ldap.php</code> file, setup your LDAP connections, or paste the following in your <code>.env</code> file:</p> <p>Review the configuration documentation to see what each option is used for.</p> <pre><code>LDAP_LOGGING=true\nLDAP_CONNECTION=default\nLDAP_HOST=127.0.0.1\nLDAP_USERNAME=\"cn=user,dc=local,dc=com\"\nLDAP_PASSWORD=secret\nLDAP_PORT=389\nLDAP_BASE_DN=\"dc=local,dc=com\"\nLDAP_TIMEOUT=5\nLDAP_SSL=false\nLDAP_TLS=false\n</code></pre> <p>The <code>default</code> connection you specify is the LDAP connection that will be used for models you define that do not have a configured connection.</p> <p>If you're using multiple LDAP connections, you will have to manually create and assign unique <code>.env</code> variables for the above keys and then update the <code>config/ldap.php</code> with the new variables.</p> <p>For example:</p> <pre><code>#...\n\nALPHA_LDAP_HOST=192.160.0.1\nALPHA_LDAP_USERNAME=\"cn=user,dc=alpha,dc=com\"\n\nBRAVO_LDAP_HOST=192.170.0.1\nBRAVO_LDAP_USERNAME=\"cn=user,dc=bravo,dc=com\"\n</code></pre>"},{"location":"docs/laravel/v1/license/","title":"License","text":"<p>LdapRecord-Laravel is open-sourced software licensed under the MIT license.</p>"},{"location":"docs/laravel/v1/lumen/","title":"LdapRecord-Lumen","text":""},{"location":"docs/laravel/v1/lumen/#introduction","title":"Introduction","text":"<p>LdapRecord-Lumen gives you the features of LdapRecord-Laravel using Lumen.</p>"},{"location":"docs/laravel/v1/lumen/#installation","title":"Installation","text":"<p>LdapRecord-Lumen requires the following:</p> Requirements PHP &gt;= 7.2 Lumen &gt;= 5.6 PHP LDAP extension enabled An LDAP server (Active Directory, OpenLDAP, FreeIPA etc.) <p>Require LdapRecord-Laravel via composer:</p> <pre><code>composer require directorytree/ldaprecord-lumen\n</code></pre> <p>Once composer completes, register the <code>LdapServiceProvider</code> inside of your <code>bootstrap/app.php</code> file:</p> <pre><code>// bootstrap/app.php\n\n$app-&gt;register(\\LdapRecord\\Lumen\\LdapServiceProvider::class);\n</code></pre>"},{"location":"docs/laravel/v1/lumen/#configuration","title":"Configuration","text":"<p>Publish the <code>ldap.php</code> configuration file via the <code>make:ldap-config</code> command:</p> <pre><code>php artisan make:ldap-config\n</code></pre> <p>A new LDAP configuration file will be created in your <code>config</code> directory.</p> <p>Then, inside of your <code>.env</code> file, paste the following to configure your LDAP connection:</p> <pre><code>LDAP_LOGGING=true\nLDAP_CONNECTION=default\nLDAP_HOST=127.0.0.1\nLDAP_USERNAME=\"cn=user,dc=local,dc=com\"\nLDAP_PASSWORD=secret\nLDAP_PORT=389\nLDAP_BASE_DN=\"dc=local,dc=com\"\nLDAP_TIMEOUT=5\nLDAP_SSL=false\nLDAP_TLS=false\n</code></pre>"},{"location":"docs/laravel/v1/lumen/#usage","title":"Usage","text":"<p>You can now begin using LdapRecord inside of your Lumen application:</p> <pre><code>// routes/web.php\n\nuse LdapRecord\\Models\\ActiveDirectory\\User;\n\n$router-&gt;get('/users', function () {\n    return User::get();\n});\n</code></pre>"},{"location":"docs/laravel/v1/quickstart/","title":"Quickstart","text":""},{"location":"docs/laravel/v1/quickstart/#introduction","title":"Introduction","text":"<p>LdapRecord-Laravel requires the following:</p> Requirements PHP &gt;= 7.2 Laravel &gt;= 5.6 PHP LDAP extension enabled An LDAP server (Active Directory, OpenLDAP, FreeIPA etc.)"},{"location":"docs/laravel/v1/quickstart/#install-setup-usage","title":"Install, Setup &amp; Usage","text":""},{"location":"docs/laravel/v1/quickstart/#step-1-install-ldaprecord-laravel","title":"Step 1 - Install LdapRecord-Laravel","text":"<p>Require LdapRecord-Laravel via composer:</p> <pre><code>composer require directorytree/ldaprecord-laravel\n</code></pre>"},{"location":"docs/laravel/v1/quickstart/#step-2-publish-the-ldap-configuration-file","title":"Step 2 - Publish the LDAP configuration file","text":"<pre><code>php artisan vendor:publish --provider=\"LdapRecord\\Laravel\\LdapServiceProvider\"\n</code></pre>"},{"location":"docs/laravel/v1/quickstart/#step-3-configure-your-ldap-connection","title":"Step 3 - Configure your LDAP connection","text":"<p>Paste these environment variables into your <code>.env</code> file, and configure each option as necessary:</p> <pre><code>LDAP_LOGGING=true\nLDAP_CONNECTION=default\nLDAP_HOST=127.0.0.1\nLDAP_USERNAME=\"cn=user,dc=local,dc=com\"\nLDAP_PASSWORD=secret\nLDAP_PORT=389\nLDAP_BASE_DN=\"dc=local,dc=com\"\nLDAP_TIMEOUT=5\nLDAP_SSL=false\nLDAP_TLS=false\n</code></pre> <p>View the core configuration documentation for more information on each option.</p>"},{"location":"docs/laravel/v1/quickstart/#step-4-use-ldaprecord","title":"Step 4 - Use LdapRecord","text":"<p>To begin, you may either use the built-in models that LdapRecord comes with, or you may create your own models that reference the connection you have created in your <code>config/ldap.php</code> file.</p> <p>Call the below command to create a new LdapRecord model:</p> <pre><code>php artisan make:ldap-model User\n</code></pre> <p>Then use it in your application:</p> <pre><code>&lt;?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Ldap\\User;\n\nclass LdapUserController extends Controller\n{\n    public function index()\n    {\n        $users = User::get();\n\n        return view('ldap.users.index', ['users' =&gt; $users]);\n    }\n}\n</code></pre>"},{"location":"docs/laravel/v1/quickstart/#step-5-setup-authentication","title":"Step 5 - Setup Authentication","text":"<p>View the authentication quickstart guide if you require LDAP authentication in your application.</p>"},{"location":"docs/laravel/v1/testing/","title":"Testing","text":""},{"location":"docs/laravel/v1/testing/#introduction","title":"Introduction","text":"<p>Testing LDAP integration for PHP has always been quite difficult. Any type of integration that is needed, you either need a real LDAP server to test against, or you mock every response given and assume the logic you have in place will work until you do live testing with a real LDAP server. This is finicky and hard to test in an easy way.</p> <p>That's where the LdapRecord Directory Emulator comes in.</p>"},{"location":"docs/laravel/v1/testing/#directory-emulator","title":"Directory Emulator","text":"<p>The Directory Emulator dynamically replaces the LDAP connection you specify with a fake one. This fake connection sets up an SQLite database that resembles an LDAP directory and allows you to store, update, delete, move, rename, and query LDAP objects through LdapRecord.</p> <p>The SQLite database can be stored as file so you can utilize it in your application, or you can use an in-memory database for running unit tests. It's the perfect suite for testing the LDAP integration in your Laravel applications.</p> <p>When you query a model that uses the connection you have setup with the Directory Emulator, LdapRecord dynamically swaps query filters with Eloquent SQL queries, effectively allowing you to query objects you create inside of your emulated directory.</p>"},{"location":"docs/laravel/v1/testing/#getting-started","title":"Getting Started","text":"<p>To begin, let's say we have an application that lists LDAP users inside of your configured directory.</p> <p>Inside of our <code>config/ldap.php</code> file, we have defined our single <code>default</code> connection:</p> <pre><code>// config/ldap.php\n\n'default' =&gt; env('LDAP_CONNECTION', 'default'),\n\n'connections' =&gt; [\n    'default' =&gt; [\n        // ...\n        'base_dn' =&gt; 'dc=local,dc=com',\n    ],\n],\n</code></pre> <p>We have a <code>UsersController</code> that displays the LDAP users:</p> <pre><code>use App\\Ldap\\User;\n\npublic class UsersController extends Controller\n{\n    public function index()\n    {\n        $users = User::get();\n\n        return view('ldap.users', ['users' =&gt; $users]);\n    }\n}\n</code></pre> <p>And our view that simply lists all the users:</p> <pre><code>&lt;table&gt;\n  &lt;thead&gt;\n    &lt;tr&gt;\n      &lt;th&gt;Username&lt;/th&gt;\n      &lt;th&gt;Full Name&lt;/th&gt;\n    &lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    @foreach($users as $user)\n    &lt;tr&gt;\n      &lt;td&gt;{{ $user-&gt;getFirstAttribute('samaccountname') }}&lt;/td&gt;\n      &lt;td&gt;{{ $user-&gt;getFirstAttribute('cn') }}&lt;/td&gt;\n    &lt;/tr&gt;\n    @endforeach\n  &lt;/tbody&gt;\n&lt;/table&gt;\n</code></pre> <p>To test this would involve a ton of mocking - which we want to avoid. With the Directory Emulator, we can populate a fake LDAP server with objects utilizing our actual connection configuration.</p> <p>Let's create a test for the <code>UserController@index</code> method. We'll create a Laravel test running the following command:</p> <pre><code>php artisan make:test LdapUserControllerTest\n</code></pre> <p>Now that we have our test, let's attempt to test our <code>index</code> method:</p> <pre><code>use App\\Ldap\\User;\nuse LdapRecord\\Laravel\\Testing\\DirectoryEmulator;\n\nclass LdapUserControllerTest extends TestCase\n{\n    public function test_index_works()\n    {\n        DirectoryEmulator::setup('default');\n\n        $user = User::create([\n            'cn' =&gt; 'John Doe',\n            'samaccountname' =&gt; 'jdoe',\n        ]);\n\n        $this-&gt;assertEquals('cn=John Doe,dc=local,dc=com', $user-&gt;getDn());\n\n        $this-&gt;visit('/ldap/users')\n            -&gt;assertSee($user-&gt;getFirstAttribute('cn'))\n            -&gt;assertSee($user-&gt;getFirstAttribute('samaccountname'));\n    }\n}\n</code></pre> <p>As with actual LDAP objects created in a live directory using LdapRecord models, when you create LDAP objects in the emulated directory, they will use your connections configured <code>base_dn</code> to create distinguished names.</p>"},{"location":"docs/laravel/v1/testing/#using-a-sqlite-file-database","title":"Using a SQLite File Database","text":"<p>To use a SQLite file database, you must supply an array to the second parameter of the <code>DirectoryEmulator::setup</code> method and provide a file path using the <code>database</code> key where you would like the SQLite file to be stored:</p> <p>If the file does not exist already, it will be created for you automatically.</p> <pre><code>$file = storage_path('ldap_test_database.sqlite');\n\nDirectoryEmulator::setup('default', ['database' =&gt; $file]);\n</code></pre>"},{"location":"docs/laravel/v1/testing/#emulated-queries","title":"Emulated Queries","text":"<p>The Directory Emulator also emulates LDAP queries. However, there are limitations. It currently does not support the following features:</p> <ul> <li><code>raw</code> filters</li> <li><code>anr</code> (Ambiguous Name Resolution) filters</li> <li>Virtual attributes (such as <code>memberof</code>, <code>entryUUID</code> and more)</li> </ul> <p>Using the emulator, you can create a diverse LDAP object tree in your unit tests and ensure your application is querying the proper objects.</p> <p>The examples below use LdapRecord models, but you may also use a raw LdapRecord <code>Connection</code>.</p> <p>Let's update our example controller to retrieve users inside of a specific OU, and a company name:</p> <pre><code>public class UsersController extends Controller\n{\n    public function index()\n    {\n        $ou = OrganizationalUnit::find('ou=Accounting,dc=local,dc=com');\n\n        $users = User::in($ou)-&gt;where('company', '=', 'Acme')-&gt;get();\n\n        return view('ldap.users', ['users' =&gt; $users]);\n    }\n}\n</code></pre> <p>Now we can update our test by creating an Organizational Unit and then creating a user inside of that OU and assert that we only see the proper user:</p> <pre><code>public function test_index_works()\n{\n    DirectoryEmulator::setup('default');\n\n    $user = User::create([\n        'cn' =&gt; 'John Doe',\n        'samaccountname' =&gt; 'johndoe',\n    ]);\n\n    $ou = OrganizationalUnit::create([\n        'ou' =&gt; 'Accounting',\n    ]);\n\n    $accountant = (new User)-&gt;inside($ou)-&gt;save([\n        'cn' =&gt; 'Jane Doe',\n        'samaccountname' =&gt; 'janedoe',\n    ]);\n\n    $this-&gt;visit('/ldap/users')\n        -&gt;assertSee($accountant-&gt;getFirstAttribute('cn'))\n        -&gt;assertSee($accountant-&gt;getFirstAttribute('samaccountname'))\n        -&gt;assertDontSee($user-&gt;getFirstAttribute('cn'))\n        -&gt;assertDontSee($user-&gt;getFirstAttribute('samaccountname'));\n}\n</code></pre> <p>As you can see, this is extremely effective for testing your LDAP query integrations.</p>"},{"location":"docs/laravel/v1/testing/#working-with-relationships","title":"Working with Relationships","text":""},{"location":"docs/laravel/v1/testing/#has-one","title":"Has One","text":"<p>A <code>hasOne</code> relationship is easy to test. In this example, we will set the <code>manager</code> of another user:</p> <pre><code>$user = User::create(['cn' =&gt; 'Jane']);\n\n$manager = User::create(['cn' =&gt; 'John']);\n\n$user-&gt;manager()-&gt;attach($manager);\n</code></pre> <p>Then, you can retrieve the users manager:</p> <pre><code>$manager = $user-&gt;manager()-&gt;first();\n</code></pre>"},{"location":"docs/laravel/v1/testing/#has-many","title":"Has Many","text":"<p>Since some attributes are virtual in LDAP (such as the the <code>memberof</code> attribute on User objects in Active Directory), you will have to populate some attributes manually to mimic these virtual attributes. Let's walk through an example.</p> <p>In our application, we want to test that a user is a member of a particular group.</p> <p>First, we will create our group and user and add the user to the group:</p> <pre><code>$user = User::create(['cn' =&gt; 'John']);\n\n$group = Group::create(['cn' =&gt; 'Accounting']);\n\n$user-&gt;groups()-&gt;attach($group);\n</code></pre> <p>Now, if we attempt to retrieve the <code>$group-&gt;members()</code> relationship, we won't receive any results, but we will when using the <code>$user-&gt;groups()</code> relationship:</p> <pre><code>// Empty collection returned!\n$users = $group-&gt;members()-&gt;get();\n\n// A collection containing 'Accounting' group returned.\n$groups = $user-&gt;groups()-&gt;get();\n</code></pre> <p>The <code>$user-&gt;groups()</code> relationship works because it queries for groups that contain a <code>member</code> attribute equal to the users distinguished name. This <code>member</code> attribute is set on the <code>$group</code> instance that you pass into the <code>attach()</code> method.</p> <p>The <code>$group-&gt;members()</code> relationship does not work because it queries for objects that contain a <code>memberof</code> attribute to locate objects that are members. The <code>memberof</code> attribute is virtual, so we must populate it manually to get our relationships working on both directions:</p> <pre><code>$group = Group::create(['cn' =&gt; 'Accounting']);\n\n$user = User::create([\n    'cn' =&gt; 'John',\n    'memberof' =&gt; [$group-&gt;getDn()],\n]);\n\n$user-&gt;groups()-&gt;attach($group);\n\n// Returns the user 'John'.\n$users = $group-&gt;members()-&gt;first();\n\n// Returns 'Accounting' group.\n$groups = $user-&gt;groups()-&gt;first();\n</code></pre>"},{"location":"docs/laravel/v1/testing/#has-many-in","title":"Has Many In","text":"<p>Similarly with the <code>hasMany</code> relationship, when using a <code>hasManyIn</code> relationship, you must pre-populate a users virtual attribute for queries to properly locate members of a group.</p>"},{"location":"docs/laravel/v1/usage/","title":"Usage","text":""},{"location":"docs/laravel/v1/usage/#models","title":"Models","text":"<p>This usage documentation is intentionally kept short and sweet to prevent duplication. Be sure to review the core LdapRecord documentation as it explains all of LdapRecord's features in-depth.</p> <p>Once you've configured your connections in your <code>config/ldap.php</code> file, you're ready to start running queries and operations on your LDAP server.</p> <p>If you're connecting to an Active Directory or OpenLDAP server, you may utilize the built-in models to get up and running right away.</p> <p>If you would like to create your own models, you can generate one via the <code>make:ldap-model</code> command:</p> <pre><code>php artisan make:ldap-model User\n</code></pre> <p>This will create a new LdapRecord model inside of your application in the <code>app/Ldap</code> folder.</p> <p>If the <code>Ldap</code> folder does not exist, it will be created automatically.</p> <p>By default, the generated model will not have any <code>$objectClasses</code> set. LdapRecord requires this attribute to be set for objects to be created properly in your directory.</p> <p>If no <code>$objectClasses</code> are set, queries will not be scoped to the object you are querying and you will have to set the models <code>$objectClasses</code> manually before creating new objects.</p> <pre><code>namespace App\\Ldap;\n\nuse LdapRecord\\Models\\Model;\n\nclass User extends Model\n{\n    public static $objectClasses = [\n        'top',\n        'person',\n        'organizationalperson',\n        'user',\n    ];\n}\n</code></pre> <p>You may want to extend from the <code>LdapRecord\\Models\\ActiveDirectory\\Entry</code> class to utilize some helper methods that are limited to the use of Active Directory.  This can save you time from having to implement functionality manually.</p>"},{"location":"docs/laravel/v1/usage/#searching","title":"Searching","text":"<p>To begin querying your model, you can statically call query methods off of the model:</p> <pre><code>$users = User::where('company', '=', 'Acme')-&gt;get();\n</code></pre> <p>When using the above example model for searching your LDAP directory, the following filter will be used:</p> <pre><code>(&amp;(objectclass=top)(objectclass=person)(objectclass=organizationalperson)(objectclass=user)(company=Acme))\n</code></pre>"},{"location":"docs/laravel/v1/usage/#creating-updating","title":"Creating / Updating","text":"<p>To create a new object in your directory, call the <code>create</code> method:</p> <pre><code>$user = User::create([\n    'company'   =&gt; 'Acme',\n    'givenname' =&gt; 'Steve',\n    'sn'        =&gt; 'Bauman',\n    'cn'        =&gt; 'Steve Bauman',\n]);\n</code></pre> <p>When creating the above example model, the <code>objectclass</code> attribute will automatically be sent with all other attributes you have set for the user creation. This effectively creates the proper object in your directory.</p> <p>You may also create a new model instance, set its attributes, and call the <code>save</code> method:</p> <pre><code>$user = new User;\n\n$user-&gt;cn = 'Steve Bauman';\n$user-&gt;givenname = 'Steve';\n$user-&gt;sn = 'Bauman';\n$user-&gt;company = 'Acme';\n\n$user-&gt;save();\n</code></pre> <p>Similarly, to update an object, modify a model that was returned from a query and call the <code>save</code> method:</p> <pre><code>$user = User::find('cn=Steve Bauman,dc=local,dc=com');\n\n$user-&gt;company = 'Acme';\n\n$user-&gt;save();\n</code></pre> <p>If you need help understanding user creation and management, take a look at the Active Directory user management tutorial.</p>"},{"location":"docs/laravel/v1/usage/#scopes","title":"Scopes","text":"<p>Sometimes you may need to utilize several of the same query filters around your application. Model scopes are a perfect for this, as you can extract these filters into its own class and apply it to a model query.</p> <p>Be sure to take a peek at the query scopes documentation for a more in-depth look.</p> <p>To create a new model scope, call the command:</p> <pre><code>php artisan make:ldap-scope OnlyAccountants\n</code></pre> <p>This will create a new model scope in your applications <code>app\\Ldap\\Scopes</code> directory.</p> <pre><code>namespace App\\Ldap\\Scopes;\n\nuse LdapRecord\\Models\\Model;\nuse LdapRecord\\Models\\Scope;\nuse LdapRecord\\Query\\Model\\Builder;\n\nclass OnlyAccountants implements Scope\n{\n    public function apply(Builder $query, Model $model)\n    {\n        $query-&gt;where('title', '=', 'Accountant');\n    }\n}\n</code></pre> <p>Now, you can either apply this scope globally so the query filter is applied on every query of your model, or apply it when you need it. Let's walk through both.</p> <p>To apply your scope globally, override your models protected static <code>boot</code> method, and then call the <code>addGlobalScope</code> method:</p> <pre><code>namespace App\\Ldap;\n\nuse LdapRecord\\Models\\Model;\nuse App\\Ldap\\Scopes\\OnlyAccountants;\n\nclass User extends Model\n{\n    // ...\n\n    protected static function boot()\n    {\n        parent::boot();\n\n        static::addGlobalScope(new OnlyAccountants);\n    }\n}\n</code></pre> <p>You must pass a new instance of your scope into the <code>addGlobalScope</code> method, not the class name.</p> <p>Any search queries that are performed on your <code>User</code> model will now be properly scoped.</p> <p>If you wish to apply a scope in certain situations, you may use the <code>withGlobalScope</code> method:</p> <pre><code>$accountants = User::withGlobalScope('accountants', new OnlyAccountants)-&gt;get();\n</code></pre> <p>As you may have noticed above, you must provide a named string for the scope you are passing in.</p>"},{"location":"docs/laravel/v1/usage/#plain-authentication","title":"Plain Authentication","text":"<p>Sometimes you simply want to know if a users LDAP credentials are valid. To do this, you must retrieve your LDAP connection from the LdapRecord connection container.</p> <p>To do so, you must call the <code>getConnection</code> method on the <code>Container</code> and pass in the name of your connection that appears in your <code>config/ldap.php</code> file:</p> <pre><code>use LdapRecord\\Container;\n\n$connection = Container::getConnection('default');\n</code></pre> <p>To retrieve your <code>default</code> connection that you have set in your <code>ldap.php</code> configuration file, call the <code>getDefaultConnection</code> method:</p> <pre><code>use LdapRecord\\Container;\n\n$connection = Container::getDefaultConnection();\n</code></pre> <p>Once you have your connection, call the <code>auth()-&gt;attempt</code> method with your users Distinguished Name and their password:</p> <pre><code>use LdapRecord\\Container;\n\n$connection = Container::getConnection('default');\n\nif ($connection-&gt;auth()-&gt;attempt('cn=user,dc=local,dc=com', 'SuperSecret')) {\n    // Credentials are valid!\n}\n</code></pre> <p>If you don't want your user to have to enter in their Distinguished Name, locate the user in your directory first who is attempting to authenticate, and then pass in their Distinguished Name:</p> <pre><code>use LdapRecord\\Container;\nuse LdapRecord\\Models\\ActiveDirectory\\User;\n\n$connection = Container::getConnection('default');\n\n$user = User::findByOrFail('samaccountname', 'sbauman');\n\nif ($connection-&gt;auth()-&gt;attempt($user-&gt;getDn(), 'SuperSecret')) {\n    // Credentials are valid!\n}\n</code></pre> <p>If you need to determine why the users authentication is failing (for example, if their password has expired), you can retrieve the last message that was generated from your LDAP server. This message will usually contain a code that you can use to determine the cause of failure:</p> <pre><code>if ($connection-&gt;auth()-&gt;attempt($user-&gt;getDn(), 'SuperSecret')) {\n    // Credentials are valid!\n} else {\n    $message = $connection-&gt;getLdapConnection()-&gt;getDiagnosticMessage();\n\n    if (strpos($message, '532') !== false) {\n        return \"Your password has expired.\";\n    }\n}\n</code></pre>"},{"location":"docs/laravel/v1/versioning/","title":"Versioning","text":"<p>LdapRecord-Laravel is versioned under the Semantic Versioning guidelines as much as possible.</p> <p>Major versions of LdapRecord-Laravel will always be kept in sync with the core LdapRecord repository. This means when LdapRecord-Laravel hits <code>v2.0.0</code>, LdapRecord <code>^v2.0</code> will be used.</p> <p>Releases will be numbered with the following format:</p> <p><code>&lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;</code></p> <p>And constructed with the following guidelines:</p> <ul> <li>Breaking backward compatibility bumps the major and resets the minor and patch.</li> <li>New additions without breaking backward compatibility bumps the minor and resets the patch.</li> <li>Bug fixes and misc changes bumps the patch.</li> </ul> <p>Minor versions are not maintained individually, and you're encouraged to upgrade through to the next minor version.</p> <p>Major versions are maintained individually through separate branches.</p>"},{"location":"docs/laravel/v1/auth/","title":"Authentication Overview","text":"<p>LdapRecord-Laravel comes with two ways to authenticate LDAP users into your application.</p>"},{"location":"docs/laravel/v1/auth/#plain-authentication","title":"Plain Authentication","text":"<p>If you have an application that doesn't require any user data to be synchronized to your database, then you can utilize plain LDAP authentication.</p> <p>When a user is successfully authenticated, the Laravel <code>Auth::user()</code> method will return an instance of your configured LdapRecord model.</p> <p>It is paramount to understand that upon every request a logged in user makes to your application, an LDAP search request will be made to retrieve them. If you do not want this to occur, you must use synchronized database authentication.</p>"},{"location":"docs/laravel/v1/auth/#synchronized-database-authentication","title":"Synchronized Database Authentication","text":"<p>Synchronized Database LDAP Authentication means that an LDAP user that has successfully passed LDAP authentication is created &amp; synchronized to your local applications database. This is helpful as you can attach typical relational database information to them, such as blog posts, attachments, etc.</p> <p>When a user is successfully authenticated, the Laravel <code>Auth::user()</code> method will return an instance of your configured database Eloquent model. Subsequent requests to your application with logged in users will retrieve the logged in user from your database, rather than your LDAP directory.</p> <p>This works via the following process:</p> <ol> <li>A user attempts to login to your application</li> <li>LdapRecord attempts to locate the user in your LDAP directory</li> <li>If a user is found, LDAP authentication now occurs and the users password is sent to your directory and validated</li> <li>If authentication passes, a local database record is created in your <code>users</code> database table with the users attributes synchronized</li> <li>The user is logged into your application</li> </ol>"},{"location":"docs/laravel/v1/auth/configuration/","title":"Authentication Configuration","text":""},{"location":"docs/laravel/v1/auth/configuration/#introduction","title":"Introduction","text":"<p>To configure LDAP authentication, you must define or update a <code>provider</code> inside of your <code>config/auth.php</code> file.</p> <p>Let's walk through configuring both LDAP authentication mechanisms.</p>"},{"location":"docs/laravel/v1/auth/configuration/#plain-authentication","title":"Plain Authentication","text":"<p>To create a plain LDAP authentication provider, navigate to the <code>providers</code> array, and paste the following <code>ldap</code> provider:</p> <pre><code>// config/auth.php\n\n'providers' =&gt; [\n    // ...\n\n    'ldap' =&gt; [\n        'driver' =&gt; 'ldap',\n        'model' =&gt; LdapRecord\\Models\\ActiveDirectory\\User::class,\n        'rules' =&gt; [],\n    ],\n],\n</code></pre> <p>If your application requires more than one LDAP connection, you must create a new provider for each connection.</p> <p>This new provider must have its own unique <code>model</code> class set which must use your alternate configured connection using the <code>$connection</code> property.</p> <p>In the scenario of having multiple LDAP connections, it may be helpful to namespace the LDAP models you create with the desired connection. For example:</p> <pre><code>App\\Ldap\\DomainAlpha\\User\n</code></pre> <p>This will allow you to segregate scopes, rules and other classes to their relating connection.</p>"},{"location":"docs/laravel/v1/auth/configuration/#driver","title":"Driver","text":"<p>The <code>driver</code> option must be <code>ldap</code> as this is what indicates to Laravel the proper authentication driver to use.</p>"},{"location":"docs/laravel/v1/auth/configuration/#model","title":"Model","text":"<p>The <code>model</code> option must be the class name of your LdapRecord model. This model will be used for fetching users from your directory.</p>"},{"location":"docs/laravel/v1/auth/configuration/#rules","title":"Rules","text":"<p>The <code>rules</code> option must be an array of class names of authentication rules.</p>"},{"location":"docs/laravel/v1/auth/configuration/#synchronized-database-authentication","title":"Synchronized Database Authentication","text":"<p>To create a synchronized database LDAP authentication provider, navigate to the <code>providers</code> array, and paste the following <code>ldap</code> provider:</p> <p>If your application requires two or more LDAP connections, you must create a new provider for each connection.</p> <pre><code>// config/auth.php\n\n'providers' =&gt; [\n    // ...\n\n    'ldap' =&gt; [\n        'driver' =&gt; 'ldap',\n        'model' =&gt; LdapRecord\\Models\\ActiveDirectory\\User::class,\n        'rules' =&gt; [],\n        'database' =&gt; [\n            'model' =&gt; App\\User::class,\n            'sync_passwords' =&gt; false,\n            'sync_attributes' =&gt; [\n                'name' =&gt; 'cn',\n                'email' =&gt; 'mail',\n            ],\n        ],\n    ],\n],\n</code></pre> <p>As you can see above, a <code>database</code> array is used to configure the association between your LDAP user and your Eloquent user.</p>"},{"location":"docs/laravel/v1/auth/configuration/#database-model","title":"Database Model","text":"<p>The <code>database =&gt; model</code> key is the class name of the Eloquent model that will be used for creating and retrieving LDAP users from your applications database.</p> <p>Be sure to add the required trait and interface to this model as shown in the installation guide.</p>"},{"location":"docs/laravel/v1/auth/configuration/#sync-password-column","title":"Sync Password Column","text":"<p>If your application uses a different password column than <code>password</code>, then you can configure it using the <code>password_column</code> key inside of your providers configuration:</p> <pre><code>'providers' =&gt; [\n    // ...\n\n    'ldap' =&gt; [\n        // ...\n        'database' =&gt; [\n            // ...\n            'password_column' =&gt; 'my_password_column',\n        ],\n    ],\n],\n</code></pre> <p>You can also set the value to <code>false</code> if your database table does not have any password column at all:</p> <pre><code>'providers' =&gt; [\n    // ...\n\n    'ldap' =&gt; [\n        // ...\n        'database' =&gt; [\n            // ...\n            'password_column' =&gt; false,\n        ],\n    ],\n],\n</code></pre>"},{"location":"docs/laravel/v1/auth/configuration/#sync-passwords","title":"Sync Passwords","text":"<p>The <code>database =&gt; sync_passwords</code> option enables password synchronization. Password synchronization captures and hashes the users password upon login if they pass LDAP authentication. This helps in situations where you may want to provide a \"back up\" option in case your LDAP server is unreachable, as well as a way of determining if a users password is valid without having to call to your LDAP server and validate it for you.</p> <p>If you do not define the <code>sync_passwords</code> key or have it set <code>false</code>, a user is always applied a random 16 character hashed password. This hashed password is only set once upon initial import or login so no needless updates are performed on user records.</p>"},{"location":"docs/laravel/v1/auth/configuration/#sync-attributes","title":"Sync Attributes","text":"<p>The <code>database =&gt; sync_attributes</code> array defines a set of key-value pairs:</p> <ul> <li>The key of each array item is the column of your <code>users</code> database table</li> <li>The value is the name of the users LDAP attribute to set the database value to</li> </ul> <p>You do not need to add your users <code>guid</code> or <code>domain</code> database columns. These are done automatically for you.</p> <p>For further control on sync attributes, see the below attribute handler feature.</p>"},{"location":"docs/laravel/v1/auth/configuration/#sync-existing-records","title":"Sync Existing Records","text":"<p>The <code>database =&gt; sync_existing</code> array defines a set of key-value pairs:</p> <ul> <li>The key of each array item is the column of your <code>users</code> database table to query</li> <li>The value is the name of the users LDAP attribute to query inside of your database for</li> </ul> <p>If the LDAP attribute returns <code>null</code> for the given value, the value string will be used in the query instead. This is helpful to be able to use raw strings to scope your query by.</p> <p>Let's walk through an example.</p> <p>In our application, we have existing users inside of our Laravel applications database:</p> id name email password guid domain 1 Steve Bauman sbauman@local.com ... <code>null</code> <code>null</code> 2 John Doe jdoe@local.com ... <code>null</code> <code>null</code> <p>As you can see above, these users have <code>null</code> values for their <code>guid</code> and <code>domain</code> columns.</p> <p>If you do not define a <code>sync_existing</code> array, and a user logs in with <code>sbauman@local.com</code>, you will receive a SQL exception. This is because LdapRecord was unable to locate a local database user using the users GUID. If this occurs, LdapRecord attempts to insert a new user with the same email address.</p> <p>To solve this issue, we will insert the following <code>sync_existing</code> array:</p> <pre><code>'providers' =&gt; [\n    // ...\n\n    'ldap' =&gt; [\n        // ...\n        'database' =&gt; [\n            // ...\n            'sync_existing' =&gt; [\n                'email' =&gt; 'mail',\n            ],\n        ],\n    ],\n],\n</code></pre> <p>Now when <code>sbauman@local.com</code> attempts to log in, if the user cannot be located by their GUID, they will instead be located by their email address. Their GUID, domain, and sync attributes you define will then synchronize.</p>"},{"location":"docs/laravel/v1/auth/configuration/#all-available-options-example","title":"All Available Options Example","text":"<p>Here is a synchronized database provider fully configured with all available options set:</p> <pre><code>// config/auth.php\n\n'providers' =&gt; [\n    // ...\n\n    'ldap' =&gt; [\n        'driver' =&gt; 'ldap',\n        'model' =&gt; LdapRecord\\Models\\ActiveDirectory\\User::class,\n        'rules' =&gt; [],\n        'database' =&gt; [\n            'model' =&gt; App\\User::class,\n            'sync_passwords' =&gt; true,\n            'sync_attributes' =&gt; [\n                'name' =&gt; 'cn',\n                'email' =&gt; 'mail',\n            ],\n            'sync_existing' =&gt; [\n                'email' =&gt; 'mail',\n            ],\n            'password_column' =&gt; 'password',\n        ],\n    ],\n],\n</code></pre>"},{"location":"docs/laravel/v1/auth/configuration/#attribute-handlers","title":"Attribute Handlers","text":"<p>If you require logic for synchronizing attributes when users sign into your application or are being imported, you can create an attribute handler class responsible for setting / synchronizing your database models attributes from their LDAP model.</p> <p>This class you define must have a <code>handle</code> method. This method must accept the LDAP model you have configured as the first parameter and your Eloquent database model as the second.</p> <p>For the example below, we will create a handler named <code>AttributeHandler.php</code> inside of your <code>app/Ldap</code> folder:</p> <p>You do not need to call <code>save()</code> on your Eloquent database model. This is called for you after attribute synchronization.</p> <pre><code>&lt;?php\n\nnamespace App\\Ldap;\n\nuse App\\User as DatabaseUser;\nuse App\\Ldap\\User as LdapUser;\n\nclass AttributeHandler\n{\n    public function handle(LdapUser $ldap, DatabaseUser $database)\n    {\n        $database-&gt;name = $ldap-&gt;getFirstAttribute('cn');\n        $database-&gt;email = $ldap-&gt;getFirstAttribute('mail');\n    }\n}\n</code></pre> <p>Attribute handlers are created using Laravel's <code>app()</code> helper, so you may type-hint any dependencies you require in your handlers constructor to be made available during synchronization.</p> <p>Then inside of your <code>config/auth.php</code> file for your provider, set the attribute handler class as the <code>sync_attributes</code> value:</p> <pre><code>'providers' =&gt; [\n    // ...\n\n    'ldap' =&gt; [\n        // ...\n        'database' =&gt; [\n            // ...\n            'sync_attributes' =&gt; \\App\\Ldap\\LdapAttributeHandler::class,\n        ],\n    ],\n],\n</code></pre> <p>You may also add multiple if you'd prefer, or combine them with <code>key =&gt; value</code> pairs:</p> <pre><code>// ...\n'database' =&gt; [\n    // ...\n    'sync_attributes' =&gt; [\n        'name' =&gt; 'cn',\n        'email' =&gt; 'mail',\n        \\App\\Ldap\\MyFirstAttributeHandler::class,\n        \\App\\Ldap\\MySecondAttributeHandler::class,\n    ],\n],\n</code></pre>"},{"location":"docs/laravel/v1/auth/configuration/#authentication-rules","title":"Authentication Rules","text":"<p>LDAP authentication rules give you the ability to allow or deny users from signing into your application using a condition you would like to apply. These rules are executed after a user successfully passes LDAP authentication against your configured server.</p> <p>Think of them as a final authorization gate before they are allowed in.</p> <p>Authentication rules are never executed if a user fails LDAP authentication.</p> <p>Let's create an LDAP rule that only allows members of our domain <code>Administrators</code> group.</p> <p>To create an authentication rule, call the <code>make:ldap-rule</code> command:</p> <pre><code>php artisan make:ldap-rule OnlyAdministrators\n</code></pre> <p>A rule will then be created in your applications <code>app/Ldap/Rules</code> directory:</p> <pre><code>&lt;?php\n\nnamespace App\\Ldap\\Rules;\n\nuse LdapRecord\\Laravel\\Auth\\Rule;\n\nclass OnlyAdministrators extends Rule\n{\n    /**\n     * Check if the rule passes validation.\n     *\n     * @return bool\n     */\n    public function isValid()\n    {\n        //\n    }\n}\n</code></pre> <p>In the authentication rule, there are two properties made available to us.</p> <ul> <li>A <code>user</code> property that is the LdapRecord model of the authenticating user</li> <li>A <code>model</code> property that is the Eloquent model of the authenticating user</li> </ul> <p>The <code>model</code> property will be <code>null</code> if you are not using database synchronization.</p> <p>Now, we will update the <code>isValid</code> method to check the LDAP users <code>groups</code> relationship to see if they are a member:</p> <pre><code>&lt;?php\n\nnamespace App\\Ldap\\Rules;\n\nuse LdapRecord\\Laravel\\Auth\\Rule;\nuse LdapRecord\\Models\\ActiveDirectory\\Group;\n\nclass OnlyAdministrators extends Rule\n{\n    public function isValid()\n    {\n        $administrators = Group::find('cn=Administrators,dc=local,dc=com');\n\n        return $this-&gt;user-&gt;groups()-&gt;recursive()-&gt;exists($administrators);\n    }\n}\n</code></pre> <p>We call the <code>recursive</code> method on the relationship to make sure that we load groups of groups in case the user is not an immediate member of the <code>Administrators</code> group.</p> <p>Once we have our rule defined, we will add it into our authentication provider in the <code>config/auth.php</code> file:</p> <pre><code>'providers' =&gt; [\n    // ...\n\n    'ldap' =&gt; [\n        'driver' =&gt; 'ldap',\n        'model' =&gt; LdapRecord\\Models\\ActiveDirectory\\User::class,\n        'rules' =&gt; [\n            App\\Ldap\\Rules\\OnlyAdministrators::class,\n        ],\n    ],\n],\n</code></pre> <p>Now when you attempt to login to your application with a LDAP user that successfully passes LDAP authentication, they will need to be a member of the <code>Administrators</code> group.</p> <p>If you are caching your configuration, make sure you re-run <code>config:cache</code> to re-cache your modifications.</p>"},{"location":"docs/laravel/v1/auth/importing/","title":"Importing LDAP Users","text":""},{"location":"docs/laravel/v1/auth/importing/#introduction","title":"Introduction","text":"<p>LdapRecord-Laravel allows you to import users from your LDAP directories into your local database. This is done by executing the <code>php artisan ldap:import</code> command and is only available to LDAP authentication providers you configure with database synchronization.</p> <p>As it is with signing users into your application, the Eloquent database model you specify in your <code>config/auth.php</code> file is used for the creation and retrieval of users in your database.</p>"},{"location":"docs/laravel/v1/auth/importing/#attribute-synchronization","title":"Attribute Synchronization","text":"<p>The <code>sync_attributes</code> you define inside of your <code>config/auth.php</code> file for your provider will be used for importing and synchronizing users.</p> <p>Be sure to look at the documentation to get a further understanding on what is possible with this option.</p>"},{"location":"docs/laravel/v1/auth/importing/#syncing-existing-records","title":"Syncing Existing Records","text":"<p>The <code>sync_existing</code> array you define inside of your <code>config/auth.php</code> will be used to synchronize existing database records with your LDAP users.</p> <p>Be sure to look at the documentation to get a further understanding on what is possible with this option.</p>"},{"location":"docs/laravel/v1/auth/importing/#password-synchronization","title":"Password Synchronization","text":"<p>The <code>sync_passwords</code> option you define inside of your <code>config/auth.php</code> file is used when importing and synchronizing users. However, there are some main takeaways you must be aware of:</p> <ul> <li>Passwords cannot be retrieved from users who are being imported from your LDAP server. This would be a major security risk if this were possible. If a password is already   set for the user being imported, it will be left untouched. This is to retain a   possible synchronized password that was set upon login.</li> <li>Passwords will always be set to a hashed 16 character string if not already present. If the user being imported does not have a password, their password will be set to a   hashed 16 character random string using <code>Str::random</code>.</li> <li>Passwords will not be set if you have defined <code>false</code> for <code>password_column</code>.</li> </ul>"},{"location":"docs/laravel/v1/auth/importing/#running-the-command","title":"Running the command","text":"<p>To run the command you must insert the <code>provider</code> name that you have setup for LDAP database synchronization inside of your <code>config/auth.php</code> file. Let's walk through an example.</p> <p>In our application we have a configured authentication provider named <code>ldap</code>:</p> <pre><code>'providers' =&gt; [\n    // ...\n\n    'ldap' =&gt; [\n        // ...\n        'database' =&gt; [\n            // ...\n        ],\n    ],\n],\n</code></pre> <p>We will then insert the providers name into our import command and execute it:</p> <pre><code>php artisan ldap:import ldap\n</code></pre> <p>You will then be asked after a successful search in your directory:</p> <pre><code>Found 2 user(s).\n\nWould you like to display the user(s) to be imported / synchronized? (yes/no) [no]:\n&gt; y\n</code></pre> <p>A table will then be shown so you can confirm the import of the located users:</p> <pre><code>+-------------+-------------------+---------------------+\n| Name        | Account Name      | UPN                 |\n+-------------+-------------------+---------------------+\n| John Doe    | johndoe           | johndoe@local.com   |\n| Jane Doe    | janedoe           | janedoe@local.com   |\n+-------------+-------------------+---------------------+\n</code></pre> <p>Then, you will be asked to import the users shown and the import will begin:</p> <pre><code> Would you like these users to be imported / synchronized? (yes/no) [no]:\n &gt; y\n\n  2/2 [============================] 100%\n\nSuccessfully imported / synchronized 2 user(s).\n</code></pre>"},{"location":"docs/laravel/v1/auth/importing/#scheduling-the-command","title":"Scheduling the command","text":"<p>To run the import as a scheduled job, place the following in your <code>app/Console/Kernel.php</code> in the command scheduler:</p> <pre><code>protected function schedule(Schedule $schedule)\n{\n    // Import LDAP users hourly.\n    $schedule-&gt;command('ldap:import ldap', [\n        '--no-interaction',\n        '--restore',\n        '--delete',\n        '--filter' =&gt; '(objectclass=user)',\n    ])-&gt;hourly();\n}\n</code></pre> <p>The above scheduled import command will:</p> <ul> <li>Run without interaction and import new users as well as synchronize already imported users</li> <li>Restore user models who have been re-activated in your LDAP directory (if you're using Eloquent Soft Deletes)</li> <li>Soft-Delete user models who have been deactived in your LDAP directory (if you're using Eloquent Soft Deletes)</li> <li>Only import users that have an <code>objectclass</code> equal to user</li> </ul> <p>It's recommended to use model query scopes instead of the <code>--filter</code> option on your configured authentication LdapRecord model so LDAP users signing into your application are applied the same search filter.</p>"},{"location":"docs/laravel/v1/auth/importing/#programmatically-executing","title":"Programmatically Executing","text":"<p>You can call the <code>ldap:import</code> command using Laravel's Artisan facade to programmatically execute the import inside of your application wherever you'd like:</p> <pre><code>Artisan::call('ldap:import', ['provider' =&gt; 'ldap', '--no-interaction']);\n</code></pre> <p>To use other arguments and options, include them as array values:</p> <pre><code>Artisan::call('ldap:import', [\n    'provider' =&gt; 'ldap',\n    'user' =&gt; 'sbauman',\n    '--no-interaction',\n    '--restore' =&gt; true,\n    '--delete' =&gt; true,\n    '--delete-missing' =&gt; true,\n    '--filter' =&gt; '(cn=John Doe)',\n    '--attributes' =&gt; 'cn,mail,samaccountname',\n]);\n</code></pre>"},{"location":"docs/laravel/v1/auth/importing/#command-arguments","title":"Command Arguments","text":""},{"location":"docs/laravel/v1/auth/importing/#provider","title":"Provider","text":"<p>To execute the import command, you must supply an authentication provider name. This will retrieve the users from your configured LdapRecord model, and import them using your configured Eloquent model.</p> <p>For example, if you have kept the default <code>users</code> authentication provider name in your <code>config/auth.php</code> file, then you would execute:</p> <pre><code>php artisan ldap:import users\n</code></pre>"},{"location":"docs/laravel/v1/auth/importing/#user","title":"User","text":"<p>To import or synchronize a single user, insert one of their attributes (such as <code>mail</code>, <code>samaccountname</code>, <code>cn</code>) and LdapRecord will try to locate the user for you using Ambiguous Name Resolution. If your LDAP server does not support ANR, an equivalent query will be created automatically.</p> <p>This argument is completely optional.</p> <p>Important: Do not use the <code>--delete-missing</code> option with this argument. Otherwise, other LDAP users that have been imported will be soft-deleted (if configured &amp; enabled on your Eloquent model).</p> <pre><code>php artisan ldap:import ldap jdoe@email.com\n\nFound user 'John Doe'.\n\nWould you like to display the user(s) to be imported / synchronized? (yes/no) [no]:\n&gt; y\n</code></pre>"},{"location":"docs/laravel/v1/auth/importing/#command-options","title":"Command Options","text":""},{"location":"docs/laravel/v1/auth/importing/#filter","title":"Filter","text":"<p>The <code>--filter</code> (or <code>-f</code>) option allows you to apply a raw filter to further narrow down the users who are imported:</p> <p>Important: If your filter contains commas, or other types of \"escape\" level LDAP search filter characters, you must escape the value with a backslash (<code>\\</code>) before passing it into the search string. More on this below.</p> <pre><code>php artisan ldap:import ldap --filter \"(cn=John Doe)\"\n</code></pre>"},{"location":"docs/laravel/v1/auth/importing/#escaping","title":"Escaping","text":"<p>In some cases, you may need to pass commas or other escape level characters into the search filter.</p> <p>To do so, add a backslash (<code>\\</code>) before the character to escape it properly:</p> <pre><code>php artisan ldap:import ldap --filter \"(cn=Doe\\, John)\"\n</code></pre> <p>If this is not done, you will receive a <code>Bad search filter</code> exception during import.</p>"},{"location":"docs/laravel/v1/auth/importing/#attributes","title":"Attributes","text":"<p>The <code>--attributes</code> (or <code>-a</code>) option allows you to specify the attributes that should be returned from your LDAP server.</p> <p>This option is great for reducing memory usage for large imports, since all attributes will be returned from your LDAP server otherwise.</p> <p>Important: To use this option, you must comma separate each attribute in the command and include the attributes you have configured in your authentication provider.</p> <pre><code>php artisan ldap:import ldap --attributes \"cn,mail,sn,givenname,samaccountname\"\n</code></pre>"},{"location":"docs/laravel/v1/auth/importing/#delete","title":"Delete","text":"<p>This option is only available on Active Directory models.</p> <p>The <code>--delete</code> (or <code>-d</code>) option allows you to soft-delete deactivated LDAP users. No users will be deleted if your <code>User</code> Eloquent model does not have soft-deletes enabled.</p> <pre><code>php artisan ldap:import ldap --delete\n</code></pre>"},{"location":"docs/laravel/v1/auth/importing/#delete-missing","title":"Delete Missing","text":"<p>This option is available for all LDAP directories.</p> <p>The <code>--delete-missing</code> option allows you to soft-delete all LDAP users that were missing from the import. This is useful when a user has been deleted in your LDAP server, and therefore should be soft-deleted inside of your application, since they will not be returned in search results.</p> <p>This option has been designed to have the utmost safety of user data in mind. Here are some paramount things to understand with this option:</p> <p>No users will be deleted if soft-deletes are not enabled on your <code>User</code> eloquent model.</p> <p>Deletion will not occur. You must setup Soft Deletes on your <code>User</code> eloquent model.</p> <p>If no users have been successfully imported, no users will be soft-deleted.</p> <p>If an executed import does not successfully import any users, no users will be soft-deleted.</p> <p>Only users that belong to the domain you are importing will be soft-deleted.</p> <p>This means, all other users will be left untouched, such as local database users that were not imported from an LDAP server, as well as users that were imported from another domain.</p> <p>Soft-deleted users are reported in the log.</p> <p>When users are soft-deleted, a log entry will be created for each one:</p> <pre><code>User with [id = 2] has been soft-deleted due to being missing from LDAP import.\nUser with [id = 5] has been soft-deleted due to being missing from LDAP import.\n</code></pre>"},{"location":"docs/laravel/v1/auth/importing/#the-deletedmissing-event","title":"The DeletedMissing Event","text":"<p>A <code>DeletedMissing</code> event is fired in the event of any users being soft-deleted.</p> <p>You may listen for this event and access the IDs of the deleted users, as well as the Eloquent model that was used to perform the deletion, and the LdapRecord model that was used to perform the import.</p> <p>Here is an example listener that accesses this event and its properties:</p> <pre><code>// app/Listeners/UsersDeletedFromImport.php\n\nnamespace App\\Listeners;\n\nuse LdapRecord\\Laravel\\Events\\DeletedMissing;\n\nclass UsersDeletedFromImport\n{\n    public function handle(DeletedMissing $event)\n    {\n        // \\Illuminate\\Support\\Collection\n        $event-&gt;ids;\n\n        // \\LdapRecord\\Models\\ActiveDirectory\\User\n        $event-&gt;ldap;\n\n        // \\App\\User\n        $event-&gt;eloquent;\n    }\n}\n</code></pre>"},{"location":"docs/laravel/v1/auth/importing/#restore","title":"Restore","text":"<p>This option is only available on Active Directory models.</p> <p>The <code>--restore</code> (or <code>-r</code>) option allows you to restore soft-deleted re-activated LDAP users.</p> <pre><code>php artisan ldap:import ldap --restore\n</code></pre> <p>Typically, the <code>--restore</code> and <code>--delete</code> options would be used together to allow full synchronization of user disablements and restoration.</p>"},{"location":"docs/laravel/v1/auth/importing/#no-logging","title":"No Logging","text":"<p>The <code>--no-log</code> option allows you to disable logging during the command.</p> <pre><code>php artisan ldap:import ldap --no-log\n</code></pre> <p>By default this is enabled, regardless if <code>logging</code> is disabled in your <code>config/ldap.php</code> file.</p>"},{"location":"docs/laravel/v1/auth/importing/#no-interaction","title":"No Interaction","text":"<p>To run the import command via a schedule, use the <code>--no-interaction</code> flag:</p> <pre><code>php artisan ldap:import ldap --no-interaction\n</code></pre> <p>Users will be imported automatically with no prompts.</p> <p>You can also call the command from the Laravel Scheduler, or other commands:</p> <pre><code>// Importing one user\n$schedule-&gt;command('ldap:import ldap sbauman', ['--no-interaction'])\n            -&gt;everyMinute();\n\n// Importing all users\n$schedule-&gt;command('ldap:import ldap', ['--no-interaction'])\n            -&gt;everyMinute();\n\n// Importing users with a filter\n$dn = 'CN=Accounting,OU=SecurityGroups,DC=local,DC=com';\n\n$filter = sprintf('(memberof:1.2.840.113556.1.4.1941:=%s)', $dn);\n\n$schedule-&gt;command('ldap:import ldap', ['--no-interaction', '--filter' =&gt; $filter])\n    -&gt;everyMinute();\n</code></pre>"},{"location":"docs/laravel/v1/auth/importing/#additional-tips","title":"Additional Tips","text":"<ul> <li>Users who already exist inside your database will be updated with your configured providers <code>sync_attributes</code>.</li> <li>Users will never be force deleted from the import command. You will need to delete users manually   through your Eloquent model</li> <li>If you have a password mutator (setter) on your <code>User</code> Eloquent model, it will not override it.   This allows you to hash the random 16 character passwords in your own way.</li> <li>Imported (new) users will be reported in your log files:</li> </ul> <pre><code>[2020-01-29 14:51:51] local.INFO: Imported user johndoe\n</code></pre> <ul> <li>Users that fail to be imported are also reported in your log files, alongside the message of the exception that caused the failure:</li> </ul> <pre><code>[2020-01-29 14:51:51] local.ERROR: Unable to import user janedoe. SQLSTATE[23000]: Integrity constraint violation: 1048\n</code></pre>"},{"location":"docs/laravel/v1/auth/installation/","title":"Authentication Installation","text":"<p>If you are using database synchronization, you must publish the included migrations to add the following database columns to your <code>users</code> table:</p> Column Reason <code>guid</code> This is for storing your LDAP users <code>objectguid</code>. It is needed for locating and synchronizing your LDAP user to the database. <code>domain</code> This is for storing your LDAP users connection name. It is needed for storing your configured LDAP connection name of the user. <p>Publish the migration using the below command:</p> <pre><code>php artisan vendor:publish --provider=\"LdapRecord\\Laravel\\LdapAuthServiceProvider\"\n</code></pre> <p>Then, add the following interface and trait to your <code>app/User.php</code> model:</p> Type Interface <code>LdapRecord\\Laravel\\Auth\\LdapAuthenticatable</code> Trait <code>LdapRecord\\Laravel\\Auth\\AuthenticatesWithLdap</code> <pre><code>// app/User.php\n\n// ...\n\nuse LdapRecord\\Laravel\\Auth\\LdapAuthenticatable;\nuse LdapRecord\\Laravel\\Auth\\AuthenticatesWithLdap;\n\nclass User extends Authenticatable implements LdapAuthenticatable\n{\n    use Notifiable, AuthenticatesWithLdap;\n\n    // ...\n}\n</code></pre> <p>This trait and interface provide LdapRecord the ability of setting and getting your users <code>domain</code> and <code>guid</code> database columns upon authentication.</p>"},{"location":"docs/laravel/v1/auth/installation/#migration-customization","title":"Migration Customization","text":"<p>You may change the database column names on the published migration to anything you'd like. However, once you have done so, you must override the following methods in your Eloquent <code>User</code> model that are provided by the LdapRecord trait and interface:</p> <pre><code>// app/User.php\n\n// ...\n\nuse LdapRecord\\Laravel\\Auth\\LdapAuthenticatable;\nuse LdapRecord\\Laravel\\Auth\\AuthenticatesWithLdap;\n\nclass User extends Authenticatable implements LdapAuthenticatable\n{\n    // ...\n\n    public function getLdapDomainColumn()\n    {\n        return 'domain_column';\n    }\n\n    public function getLdapGuidColumn()\n    {\n        return 'guid_column';\n    }\n}\n</code></pre>"},{"location":"docs/laravel/v1/auth/laravel-jetstream/","title":"Laravel Jetstream","text":""},{"location":"docs/laravel/v1/auth/laravel-jetstream/#introduction","title":"Introduction","text":"<p>Laravel Jetstream utilizes Laravel Fortify for authentication under the hood. We will customize various aspects of it to allow our LDAP users to sign in successfully.</p>"},{"location":"docs/laravel/v1/auth/laravel-jetstream/#fortify-setup","title":"Fortify Setup","text":""},{"location":"docs/laravel/v1/auth/laravel-jetstream/#authentication-callback","title":"Authentication Callback","text":"<p>For this example application, we will authenticate our LDAP users with their email address using the LDAP attribute <code>mail</code>.</p> <p>For LdapRecord to properly locate the user in your directory during sign in, we will override Fortify's authentication callback using the <code>Fortify::authenticateUsing()</code> method in our <code>AuthServiceProvider.php</code> file:</p> <pre><code>// app/Providers/AuthServiceProvider.php\n\n// ...\nuse Laravel\\Fortify\\Fortify;\nuse Illuminate\\Support\\Facades\\Auth;\n\nclass AuthServiceProvider extends ServiceProvider\n{\n    // ...\n\n    public function boot()\n    {\n        $this-&gt;registerPolicies();\n\n        Fortify::authenticateUsing(function ($request) {\n            $validated = Auth::validate([\n                'mail' =&gt; $request-&gt;email,\n                'password' =&gt; $request-&gt;password\n            ]);\n\n            return $validated ? Auth::getLastAttempted() : null;\n        });\n    }\n}\n</code></pre> <p>As you can see above, we set the <code>mail</code> key which is passed to the LdapRecord authentication provider.</p> <p>A search query will be executed on your directory for a user that contains the <code>mail</code> attribute equal to the entered <code>email</code> that the user has submitted on your login form. The <code>password</code> key will not be used in the search.</p> <p>If a user cannot be located in your directory, or they fail authentication, they will be redirected to the login page normally with the \"Invalid credentials\" error message.</p> <p>You may also add extra key =&gt; value pairs in the <code>credentials</code> array to further scope the LDAP query. The <code>password</code> key is automatically ignored by LdapRecord.</p>"},{"location":"docs/laravel/v1/auth/laravel-jetstream/#feature-configuration","title":"Feature Configuration","text":"<p>Since we are synchronizing data from our LDAP server, we must disable the following features by commenting them out inside of the <code>config/fortify.php</code> file:</p> <pre><code>// config/fortify.php\n\n// Before:\n'features' =&gt; [\n    Features::registration(),\n    Features::resetPasswords(),\n    // Features::emailVerification(),\n    Features::updateProfileInformation(),\n    Features::updatePasswords(),\n    // Features::twoFactorAuthentication(),\n],\n\n// After:\n'features' =&gt; [\n    // Features::registration(),\n    // Features::resetPasswords(),\n    // Features::emailVerification(),\n    // Features::updateProfileInformation(),\n    // Features::updatePasswords(),\n    // Features::twoFactorAuthentication(),\n],\n</code></pre> <p>Important: You may keep <code>Features::registration()</code> enabled if you would like to continue accepting local application user registration. Keep in mind, if you continue to allow registration, you will need to either use multiple Laravel authentication guards, or setup the login fallback feature.</p>"},{"location":"docs/laravel/v1/auth/laravel-jetstream/#using-usernames","title":"Using Usernames","text":"<p>To authenticate your users by their username we must adjust some scaffolded code generated by Laravel Jetstream.</p> <p>In the following example, we will authenticate users by their <code>sAMAccountName</code>.</p>"},{"location":"docs/laravel/v1/auth/laravel-jetstream/#fortify-setup_1","title":"Fortify Setup","text":""},{"location":"docs/laravel/v1/auth/laravel-jetstream/#authentication-callback_1","title":"Authentication Callback","text":"<p>With our Fortiy configuration updated, we will jump into our <code>AuthServiceProvider.php</code> file and setup our authentication callback using the <code>Fortify::authenticateUsing()</code> method:</p> <pre><code>// app/Providers/AuthServiceProvider.php\n\n// ...\nuse Laravel\\Fortify\\Fortify;\nuse Illuminate\\Support\\Facades\\Auth;\n\nclass AuthServiceProvider extends ServiceProvider\n{\n    // ...\n\n    public function boot()\n    {\n        $this-&gt;registerPolicies();\n\n        Fortify::authenticateUsing(function ($request) {\n            $validated = Auth::validate([\n                'samaccountname' =&gt; $request-&gt;username,\n                'password' =&gt; $request-&gt;password\n            ]);\n\n            return $validated ? Auth::getLastAttempted() : null;\n        });\n    }\n}\n</code></pre>"},{"location":"docs/laravel/v1/auth/laravel-jetstream/#username-configuration","title":"Username Configuration","text":"<p>Inside of our <code>config/fortify.php</code> file, we must change the <code>username</code> option to <code>username</code> from <code>email</code>:</p> <pre><code>// config/fortify.php\n\n// Before:\n'username' =&gt; 'email',\n\n// After:\n'username' =&gt; 'username',\n</code></pre> <p>You will notice above that we are passing in an array of credentials with <code>samaccountname</code> as the key, and the requests <code>username</code> form input.</p>"},{"location":"docs/laravel/v1/auth/laravel-jetstream/#database-migration","title":"Database Migration","text":"<p>The built in <code>users</code> database table migration must also be modified to use a <code>username</code> column instead of <code>email</code>:</p> <pre><code>// database/migrations/2014_10_12_000000_create_users_table.php\n\n// Before:\n$table-&gt;string('email')-&gt;unique();\n\n// After:\n$table-&gt;string('username')-&gt;unique();\n</code></pre>"},{"location":"docs/laravel/v1/auth/laravel-jetstream/#sync-attributes","title":"Sync Attributes","text":"<p>When using usernames, we must also adjust the <code>sync_attributes</code> option inside of our <code>config/auth.php</code> file. We will adjust it to reflect our <code>username</code> database column to be synchronized with the <code>samaccountname</code> attribute:</p> <pre><code>// config/auth.php\n\n'providers' =&gt; [\n    // ...\n\n    'ldap' =&gt; [\n        // ...\n        'database' =&gt; [\n            // ...\n            'sync_attributes' =&gt; [\n                'name' =&gt; 'cn',\n                'username' =&gt; 'samaccountname',\n            ],\n        ],\n    ],\n],\n</code></pre> <p>Remember to add any additional database columns you need synchronized here.</p>"},{"location":"docs/laravel/v1/auth/laravel-jetstream/#login-view","title":"Login View","text":"<p>Now we must open up the <code>login.blade.php</code> view and swap the current HTML input field from <code>email</code> to <code>username</code> so we can retrieve it properly in our <code>Fortify::authenticateUsing()</code> callback:</p> <pre><code>&lt;!-- Before: --&gt;\n&lt;div&gt;\n  &lt;x-jet-label value=\"Email\" /&gt;\n  &lt;x-jet-input\n    class=\"block w-full mt-1\"\n    type=\"email\"\n    name=\"email\"\n    :value=\"old('email')\"\n    required\n    autofocus\n  /&gt;\n&lt;/div&gt;\n\n&lt;!-- After: --&gt;\n&lt;div&gt;\n  &lt;x-jet-label value=\"Username\" /&gt;\n  &lt;x-jet-input\n    class=\"block w-full mt-1\"\n    type=\"text\"\n    name=\"username\"\n    :value=\"old('username')\"\n    required\n    autofocus\n  /&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"docs/laravel/v1/auth/laravel-jetstream/#user-model","title":"User Model","text":"<p>If you plan on allowing non-LDAP users to register and login to your application, you must adjust the <code>$fillable</code> attributes property on your <code>app/Models/User.php</code> to include the <code>username</code> column instead of <code>email</code>:</p> <pre><code>// app/Models/User.php\n\nclass User extends Authenticatable implements LdapAuthenticatable\n{\n    // ...\n\n    // Before:\n    protected $fillable = [\n        'name',\n        'email',\n        'password',\n    ];\n\n    // After:\n    protected $fillable = [\n        'name',\n        'username',\n        'password',\n    ];\n}\n</code></pre>"},{"location":"docs/laravel/v1/auth/laravel-jetstream/#fallback-authentication","title":"Fallback Authentication","text":"<p>Database fallback allows the authentication of local database users if LDAP connectivity is not present, or an LDAP user cannot be found.</p> <p>To enable this feature, you must define a <code>fallback</code> array inside of the credentials you insert into the <code>Auth::validate()</code> method in your <code>Fortify::authenticateUsing()</code> callback:</p> <pre><code>// app/Providers/AuthServiceProvider.php\n\nuse Laravel\\Fortify\\Fortify;\nuse Illuminate\\Support\\Facades\\Auth;\n\nclass AuthServiceProvider extends ServiceProvider\n{\n    // ...\n\n    public function boot()\n    {\n        $this-&gt;registerPolicies();\n\n        Fortify::authenticateUsing(function ($request) {\n            $validated = Auth::validate([\n                'mail' =&gt; $request-&gt;email,\n                'password' =&gt; $request-&gt;password,\n                'fallback' =&gt; [\n                    'email' =&gt; $request-&gt;email,\n                    'password' =&gt; $request-&gt;password,\n                ],\n            ]);\n\n            return $validated ? Auth::getLastAttempted() : null;\n        });\n    }\n}\n</code></pre> <p>For example, given the following <code>users</code> database table:</p> id name email password guid domain 1 Steve Bauman sbauman@outlook.com ... <code>null</code> <code>null</code> <p>If a user attempts to login with the above email address and this user does not exist inside of your LDAP directory, then standard Eloquent authentication will be performed instead.</p> <p>This feature is ideal for environments where:</p> <ul> <li>LDAP server connectivity may be intermittent</li> <li>Or; You have regular users registering normally in your application</li> </ul> <p>If you would like your LDAP users to be able to sign in to your application when LDAP connectivity fails or is not present, you must enable the sync passwords option, so your LDAP users can sign in using their last successfully used password.  If an LDAP users password has not been synchronized, they will not be able to sign in.</p>"},{"location":"docs/laravel/v1/auth/laravel-jetstream/#eloquent-model-binding","title":"Eloquent Model Binding","text":"<p>If you are using database synchronization, model binding allows you to access the currently authenticated user's LdapRecord model from their Eloquent model. This grants you access to their LDAP data whenever you need it.</p> <p>To begin, insert the <code>LdapRecord\\Laravel\\Auth\\HasLdapUser</code> trait onto your User model:</p> <pre><code>// app/Models/User.php\n\n// ...\nuse LdapRecord\\Laravel\\Auth\\HasLdapUser;\nuse LdapRecord\\Laravel\\Auth\\LdapAuthenticatable;\nuse LdapRecord\\Laravel\\Auth\\AuthenticatesWithLdap;\n\nclass User extends Authenticatable implements LdapAuthenticatable\n{\n    //...\n\n    use HasLdapUser;\n\n    // ...\n}\n</code></pre> <p>Now, after an LDAP user logs into your application, their LdapRecord model will be available on their Eloquent model via the <code>ldap</code> property:</p> <p>If their LDAP model cannot be located, the returned value will be <code>null</code>.</p> <pre><code>// Instance of App\\User\n$user = Auth::user();\n\n// Instance of App\\Ldap\\User\n$user-&gt;ldap;\n\n// Get LDAP user attributes\necho $user-&gt;ldap-&gt;getFirstAttribute('cn');\n\n// Get LDAP user relationships:\n$groups = $user-&gt;ldap-&gt;groups()-&gt;get();\n</code></pre> <p>This property uses deferred loading -- which means that the users LDAP model only gets requested from your server when you attempt to access it. This prevents loading the model unnecessarily when it is not needed in your application.</p>"},{"location":"docs/laravel/v1/auth/laravel-jetstream/#displaying-ldap-error-messages","title":"Displaying LDAP Error Messages","text":"<p>When using Laravel Jetstream, LDAP error messages will now be displayed automatically to users. You do not need to configure or include the <code>ListensForLdapBindFailure</code> trait as you would using Laravel UI on the <code>LoginController</code>.</p>"},{"location":"docs/laravel/v1/auth/laravel-jetstream/#altering-the-response","title":"Altering the Response","text":"<p>Since this functionality is now automatically registered, if you would like to modify how an error is handled, call the <code>setErrorHandler</code> method on the <code>BindFailureListener</code> class inside of your <code>AuthServiceProvider.php</code> file:</p> <pre><code>// app/Providers/AuthServiceProvider.php\n\n// ...\nuse LdapRecord\\Laravel\\Auth\\BindFailureListener;\n\nclass AuthServiceProvider extends ServiceProvider\n{\n    // ...\n\n    public function boot()\n    {\n        $this-&gt;registerPolicies();\n\n        BindFailureListener::setErrorHandler(function ($message, $code = null) {\n            if ($code == '773') {\n                // The users password has expired. Redirect them.\n                abort(redirect('/password-reset'));\n            }\n        });\n    }\n}\n</code></pre> <p>Refer to the Password Policy Errors documentation to see what each code means.</p>"},{"location":"docs/laravel/v1/auth/laravel-jetstream/#changing-the-error-messages","title":"Changing the Error Messages","text":"<p>If you need to modify the translations of these error messages, create a new translation file named <code>errors.php</code> in your <code>resources</code> directory at the following path:</p> <p>The <code>vendor</code> directory (and each sub-directory) will have to be created manually.</p> <p>Then, paste in the following translations in the file and modify where necessary:</p> <pre><code>&lt;?php\n\nreturn [\n    'user_not_found' =&gt; 'User not found.',\n    'user_not_permitted_at_this_time' =&gt; 'Not permitted to logon at this time.',\n    'user_not_permitted_to_login' =&gt; 'Not permitted to logon at this workstation.',\n    'password_expired' =&gt; 'Your password has expired.',\n    'account_disabled' =&gt; 'Your account is disabled.',\n    'account_expired' =&gt; 'Your account has expired.',\n    'user_must_reset_password' =&gt; 'You must reset your password before logging in.',\n    'user_account_locked' =&gt; 'Your account is locked.',\n];\n</code></pre>"},{"location":"docs/laravel/v1/auth/laravel-ui/","title":"Laravel UI","text":""},{"location":"docs/laravel/v1/auth/laravel-ui/#introduction","title":"Introduction","text":"<p>Now that we have updated our default authentication guard to use our new <code>ldap</code> provider, we will jump into the default <code>LoginController</code> that is included with the Laravel UI package.</p>"},{"location":"docs/laravel/v1/auth/laravel-ui/#login-controller","title":"Login Controller","text":"<p>For this example application, we will authenticate our LDAP users with their email address using the LDAP attribute <code>mail</code>.</p> <p>For LdapRecord to properly locate the user in your directory during sign in, we will override the <code>credentials</code> method in the <code>LoginController</code>:</p> <pre><code>// app/Http/Controllers/Auth/LoginController.php\n\nuse Illuminate\\Http\\Request;\n\nprotected function credentials(Request $request)\n{\n    return [\n        'mail' =&gt; $request-&gt;email,\n        'password' =&gt; $request-&gt;password,\n    ];\n}\n</code></pre> <p>As you can see above, we set the <code>mail</code> key which is passed to the LdapRecord authentication provider.</p> <p>A search query will be executed on your directory for a user that contains the <code>mail</code> attribute equal to the entered <code>email</code> that the user has submitted on your login form. The <code>password</code> key will not be used in the search.</p> <p>If a user cannot be located in your directory, or they fail authentication, they will be redirected to the login page normally with the \"Invalid credentials\" error message.</p> <p>You may also add extra key =&gt; value pairs in the <code>credentials</code> array to further scope the LDAP query. The <code>password</code> key is automatically ignored by LdapRecord.</p>"},{"location":"docs/laravel/v1/auth/laravel-ui/#using-usernames","title":"Using Usernames","text":"<p>In corporate environments, users are often used to signing into their computers with their username. You can certainly keep this flow easy for them - we just need to change a couple things.</p> <p>First, you will need to change the <code>email</code> column in the database migration that creates your <code>users</code> table to <code>username</code>, as this represents what it will now contain:</p> <pre><code>Schema::create('users', function (Blueprint $table) {\n    // ...\n\n    // Before...\n    $table-&gt;string('email')-&gt;unique();\n\n    // After...\n    $table-&gt;string('username')-&gt;unique();\n});\n</code></pre> <p>Make sure you run your migrations using <code>php artisan migrate</code>.</p> <p>Once we've changed the name of the column, we'll jump into the <code>config/auth.php</code> configuration and modify our LDAP user providers <code>sync_attributes</code> to synchronize this changed column.</p> <p>In this example, we will use the users <code>sAMAccountName</code> as their username which is common in Active Directory environments:</p> <pre><code>// config/auth.php\n\n'providers' =&gt; [\n    // ...\n\n    'ldap' =&gt; [\n        // ...\n\n        'database' =&gt; [\n            // ...\n\n            'sync_attributes' =&gt; [\n                'name' =&gt; 'cn',\n                'username' =&gt; 'samaccountname',\n            ],\n        ],\n    ],\n],\n</code></pre> <p>Now, since we have changed the way our users sign in to our application from the default <code>email</code> field, we need to modify our HTML login form to reflect this. Let's jump into our <code>auth/login.blade.php</code>:</p> <pre><code>&lt;!-- resources/views/auth/login.blade.php --&gt;\n\n&lt;!-- Before... --&gt;\n&lt;input\n  id=\"email\"\n  type=\"email\"\n  class=\"form-control @error('email') is-invalid @enderror\"\n  name=\"email\"\n  value=\"{{ old('email') }}\"\n  required\n  autocomplete=\"email\"\n  autofocus\n/&gt;\n\n&lt;!-- After... --&gt;\n&lt;input\n  id=\"username\"\n  type=\"text\"\n  class=\"form-control @error('username') is-invalid @enderror\"\n  name=\"username\"\n  value=\"{{ old('username') }}\"\n  required\n  autocomplete=\"username\"\n  autofocus\n/&gt;\n</code></pre> <p>After changing the HTML input, we now must modify our <code>LoginController</code> to use this new field. We do this by overriding the <code>username</code> method, and updating our <code>credentials</code> method:</p> <pre><code>// app/Http/Controllers/Auth/LoginController.php\n\nuse Illuminate\\Http\\Request;\n\npublic function username()\n{\n    return 'username';\n}\n\nprotected function credentials(Request $request)\n{\n    return [\n        'samaccountname' =&gt; $request-&gt;username,\n        'password' =&gt; $request-&gt;password,\n    ];\n}\n</code></pre> <p>You can now sign in to your application using usernames instead of email addresses.</p>"},{"location":"docs/laravel/v1/auth/laravel-ui/#fallback-authentication","title":"Fallback Authentication","text":"<p>Database fallback allows the authentication of local database users if LDAP connectivity is not present, or an LDAP user cannot be found.</p> <p>To enable this feature, you must define a <code>fallback</code> array inside of the credentials you return from the <code>credentials()</code> method inside of your <code>LoginController</code>:</p> <pre><code>protected function credentials(Request $request)\n{\n    return [\n        'mail' =&gt; $request-&gt;email,\n        'password' =&gt; $request-&gt;password,\n        'fallback' =&gt; [\n            'email' =&gt; $request-&gt;email,\n            'password' =&gt; $request-&gt;password,\n        ],\n    ];\n}\n</code></pre> <p>For example, given the following <code>users</code> database table:</p> id name email password guid domain 1 Steve Bauman sbauman@outlook.com ... <code>null</code> <code>null</code> <p>If a user attempts to login with the above email address and this user does not exist inside of your LDAP directory, then standard Eloquent authentication will be performed instead.</p> <p>This feature is ideal for environments where:</p> <ul> <li>LDAP server connectivity may be intermittent</li> <li>Or; You have regular users registering normally in your application</li> </ul> <p>If you would like your LDAP users to be able to sign in to your application when LDAP connectivity fails or is not present, you must enable the sync passwords option, so your LDAP users can sign in using their last used password.  If an LDAP users password has not been synchronized, they will not be able to sign in.</p>"},{"location":"docs/laravel/v1/auth/laravel-ui/#eloquent-model-binding","title":"Eloquent Model Binding","text":"<p>If you are using database synchronization, model binding allows you to access the currently authenticated user's LdapRecord model from their Eloquent model. This grants you access to their LDAP data whenever you need it.</p> <p>To begin, insert the <code>LdapRecord\\Laravel\\Auth\\HasLdapUser</code> trait onto your User model:</p> <pre><code>// app/User.php\n\n// ...\n\nuse LdapRecord\\Laravel\\Auth\\HasLdapUser;\nuse LdapRecord\\Laravel\\Auth\\LdapAuthenticatable;\nuse LdapRecord\\Laravel\\Auth\\AuthenticatesWithLdap;\n\nclass User extends Authenticatable implements LdapAuthenticatable\n{\n    use Notifiable, AuthenticatesWithLdap, HasLdapUser;\n\n    // ...\n}\n</code></pre> <p>Now, after an LDAP user logs into your application, their LdapRecord model will be available on their Eloquent model via the <code>ldap</code> property:</p> <p>If their LDAP model cannot be located, the returned will be <code>null</code>.</p> <pre><code>// Instance of App\\User\n$user = Auth::user();\n\n// Instance of App\\Ldap\\User\n$user-&gt;ldap;\n\n// Get LDAP user attributes\necho $user-&gt;ldap-&gt;getFirstAttribute('cn');\n\n// Get LDAP user relationships:\n$groups = $user-&gt;ldap-&gt;groups()-&gt;get();\n</code></pre> <p>This property uses deferred loading -- which means that the users LDAP model only gets requested from your server when you attempt to access it. This prevents loading the model unnecessarily when it is not needed in your application.</p>"},{"location":"docs/laravel/v1/auth/laravel-ui/#displaying-ldap-error-messages","title":"Displaying LDAP Error Messages","text":"<p>When a user fails LDAP authentication due to their password / account expiring, account lockout, or their password requiring to be changed, specific error codes will be sent back from your server. LdapRecord can interpret these for you and display helpful error messages to users upon failing authentication.</p> <p>To add this functionality, you must add the following trait to your <code>LoginController</code>:</p> <pre><code>LdapRecord\\Laravel\\Auth\\ListensForLdapBindFailure\n</code></pre> <p>Example:</p> <pre><code>// app/Http/Controllers/Auth/LoginController.php\n\n// ...\n\nuse LdapRecord\\Laravel\\Auth\\ListensForLdapBindFailure;\n\nclass LoginController extends Controller\n{\n    use AuthenticatesUsers, ListensForLdapBindFailure;\n\n    // ...\n</code></pre> <p>However, this feature will only register automatically if your <code>LoginController</code> resides in the default <code>App\\Http\\Controllers\\Auth</code> namespace. If you have changed the location of your <code>LoginController</code>, you must modify the constructor and add the following method call to register the LDAP listener:</p> <pre><code>// app/Http/Controllers/Auth/LoginController.php\n\n// ...\n\nuse LdapRecord\\Laravel\\Auth\\ListensForLdapBindFailure;\n\nclass LoginController extends Controller\n{\n    use AuthenticatesUsers, ListensForLdapBindFailure;\n\n    public function __construct()\n    {\n        $this-&gt;middleware('guest')-&gt;except('logout');\n\n        $this-&gt;listenForLdapBindFailure();\n    }\n\n    // ...\n}\n</code></pre>"},{"location":"docs/laravel/v1/auth/laravel-ui/#altering-the-response","title":"Altering the Response","text":"<p>By default, when an LDAP bind failure occurs, a <code>ValidationException</code> will be thrown which will redirect users to your login page and display the error. If you would like to modify this behaviour, you will need to override the method <code>handleLdapBindError</code>.</p> <p>This method will include the error message as the first parameter and the error code as the second.</p> <p>This is useful for checking for specific Active Directory response codes and returning a response:</p> <pre><code>// app/Http/Controllers/Auth/LoginController.php\n\n// ...\n\nclass LoginController extends Controller\n{\n    // ...\n\n    use ListensForLdapBindFailure {\n        handleLdapBindError as baseHandleLdapBindError;\n    }\n\n    protected function handleLdapBindError($message, $code = null)\n    {\n        if ($code == '773') {\n            // The users password has expired. Redirect them.\n            abort(redirect('/password-reset'));\n        }\n\n        $this-&gt;baseHandleLdapBindError($message, $code);\n    }\n\n    // ...\n}\n</code></pre> <p>Refer to the Password Policy Errors documentation to see what each code means.</p>"},{"location":"docs/laravel/v1/auth/laravel-ui/#changing-the-error-messages","title":"Changing the Error Messages","text":"<p>If you need to modify the translations of these error messages, create a new translation file named <code>errors.php</code> in your <code>resources</code> directory at the following path:</p> <p>The <code>vendor</code> directory (and each sub-directory) will have to be created manually.</p> <p>Then, paste in the following translations in the file and modify where necessary:</p> <pre><code>&lt;?php\n\nreturn [\n    'user_not_found' =&gt; 'User not found.',\n    'user_not_permitted_at_this_time' =&gt; 'Not permitted to logon at this time.',\n    'user_not_permitted_to_login' =&gt; 'Not permitted to logon at this workstation.',\n    'password_expired' =&gt; 'Your password has expired.',\n    'account_disabled' =&gt; 'Your account is disabled.',\n    'account_expired' =&gt; 'Your account has expired.',\n    'user_must_reset_password' =&gt; 'You must reset your password before logging in.',\n    'user_account_locked' =&gt; 'Your account is locked.',\n];\n</code></pre>"},{"location":"docs/laravel/v1/auth/multi-domain/","title":"Multi-Domain Authentication","text":""},{"location":"docs/laravel/v1/auth/multi-domain/#introduction","title":"Introduction","text":"<p>LdapRecord-Laravel allows you to authenticate users from as many LDAP directories as you'd like.</p> <p>This useful when you have separate domains that are not joined in a trust.</p>"},{"location":"docs/laravel/v1/auth/multi-domain/#step-1-configuration","title":"Step 1 - Configuration","text":"<p>To begin, you must create two separate LdapRecord models for each of your domains.</p> <p>Having two separate models allows you to configure their connections independently.</p>"},{"location":"docs/laravel/v1/auth/multi-domain/#configuring-the-ldap-connections","title":"Configuring the LDAP Connections","text":"<p>For this guide, we will have two example domains named <code>Alpha</code> and <code>Bravo</code>. We first need to set up these domain connections in our <code>ldap.php</code> configuration file:</p> <pre><code>// config/ldap.php\n\n// ...\n\n'connections' =&gt; [\n    'alpha' =&gt; [\n        // ...\n    ],\n\n    'bravo' =&gt; [\n        // ...\n    ],\n],\n</code></pre> <p>Remember to test your connections using <code>php artisan ldap:test</code> to ensure you are able to connect to each of your LDAP servers.</p> <p>Now we have our connections configured, you must create a <code>User</code> model for each one.</p> <p>Let's go ahead and create them by running the below commands:</p> <pre><code>php artisan make:ldap-model Alpha\\User\n</code></pre> <pre><code>php artisan make:ldap-model Bravo\\User\n</code></pre> <p>The <code>Alpha</code> and <code>Bravo</code> sub-directories will be created for you automatically.</p> <p>Then, we must edit their connections to reflect the connection name in the <code>config/ldap.php</code> file:</p> <pre><code>// app/Ldap/Alpha/User.php\n\nclass User extends Model\n{\n    protected $connection = 'alpha';\n\n    // ...\n}\n</code></pre> <pre><code>// app/Ldap/Bravo/User.php\n\nclass User extends Model\n{\n    protected $connection = 'bravo';\n\n    // ...\n}\n</code></pre> <p>You may want these models to extend the built-in models, as they include functionality that you do not need to build yourself. It's completely up to you.</p>"},{"location":"docs/laravel/v1/auth/multi-domain/#configuring-the-authentication-guards","title":"Configuring the Authentication Guards","text":"<p>For each of our LDAP connections, we will setup new authentication providers, as well as their own guard inside of our <code>config/auth.php</code> file:</p> <pre><code>// config/auth.php\n\n'guards' =&gt; [\n    'alpha' =&gt; [\n        'driver' =&gt; 'session',\n        'provider' =&gt; 'alpha',\n    ],\n\n    'bravo' =&gt; [\n        'driver' =&gt; 'session',\n        'provider' =&gt; 'bravo',\n    ],\n],\n\n'providers' =&gt; [\n    // ...\n\n    'alpha' =&gt; [\n        // ...\n        'model' =&gt; App\\Ldap\\Alpha\\User::class,\n    ],\n\n    'bravo' =&gt; [\n        // ...\n        'model' =&gt; App\\Ldap\\Bravo\\User::class,\n    ],\n],\n</code></pre>"},{"location":"docs/laravel/v1/auth/multi-domain/#step-2-login-controller-setup","title":"Step 2 - Login Controller Setup","text":"<p>To start authenticating users from both of your LDAP domains, we need to modify our <code>LoginController</code>.</p> <p>If you do not have a <code>LoginController</code>, follow Laravel's Authentication Quick-Start guide to scaffold the controllers and views you need to continue below.</p> <p>LdapRecord-Laravel comes with a built-in trait that makes authenticating users from multiple directories easier. Go ahead and add it to the <code>LoginController</code>:</p> <pre><code>// app/Http/Controllers/Auth/LoginController.php\n\nuse LdapRecord\\Laravel\\Auth\\MultiDomainAuthentication;\n\nclass LoginController extends Controller\n{\n    use AuthenticatesUsers, MultiDomainAuthentication;\n\n    // ...\n</code></pre> <p>Due to each domain requiring it's own <code>guard</code> that we've configured in our <code>config/auth.php</code> file, we need to be able to determine which domain the user who is attempting to login in is from, so we can tell Laravel which guard to use for authenticating the user.</p> <p>Let's walk through two examples of how we can determine their domain:</p> Example Description Domain Selection Using a <code>&lt;select&gt;</code> dropdown Email Address Suffix Using the users email address suffx / hostname (eg. <code>@domain.com</code>)"},{"location":"docs/laravel/v1/auth/multi-domain/#domain-selection","title":"Domain Selection","text":"<p>In this example, we will add an HTML <code>&lt;select&gt;</code> input containing an <code>&lt;option&gt;</code> for each domain we want to allow users to login to. This allows the user to select the domain from the dropdown, enter their credentials, and then attempt signing in.</p> <p>First, we will open up our <code>login.blade.php</code> file, and add the select option:</p> <pre><code>&lt;!-- resources/views/auth/login.blade.php --&gt;\n\n&lt;form method=\"POST\" action=\"{{ route('login') }}\"&gt;\n    @csrf\n\n    &lt;div class=\"form-group row\"&gt;\n        &lt;select name=\"domain\" class=\"form-control\"&gt;\n            @foreach(['alpha' =&gt; 'Alpha', 'bravo' =&gt; 'Bravo'] as $guard =&gt; $name)\n            &lt;option value=\"{{ $guard }}\" {{ old('domain') == $guard ? 'selected' : '' }}&gt;{{ $name }}&lt;/option&gt;\n            @endforeach\n        &lt;/select&gt;\n    &lt;/div&gt;\n\n    &lt;!-- ... --&gt;\n&lt;/form&gt;\n</code></pre> <p>Now, inside of our <code>LoginController.php</code>, we will override the <code>guard()</code> method:</p> <pre><code>// app/Http/Controllers/Auth/LoginController.php\n\n// ...\n\npublic function guard()\n{\n    return $this-&gt;getLdapGuard();\n}\n</code></pre> <p>The <code>guard()</code> method is responsible for returning the name of the authentication guard the user is signing into, or signing out of. We must override this to have control over determining the suitable guard for the user signing in.</p> <p>By default, the <code>MultiDomainAuthentication</code> trait will attempt to retrieve the users <code>guard</code>, from the request <code>domain</code> input value.</p> <p>If you name your <code>&lt;select&gt;</code> input differently, simply override the <code>getLdapGuardFromRequest()</code> method and return its value instead.</p> <pre><code>// app/Http/Controllers/Auth/LoginController.php\n\n// ...\n\npublic function guard()\n{\n    return $this-&gt;getLdapGuard();\n}\n\npublic function getLdapGuardFromRequest(Request $request)\n{\n    return $request-&gt;get('my-select-input');\n}\n</code></pre>"},{"location":"docs/laravel/v1/auth/multi-domain/#email-address-suffix","title":"Email Address Suffix","text":"<p>In this example, we will be determining the users domain from their email addresses host name (eg. <code>@alpha.com</code> and <code>@bravo.com</code>).</p> <p>Using this method, we do not need to modify our <code>login.blade.php</code> form. Instead, we will jump into our <code>LoginController.php</code>, and override the <code>guard()</code> and <code>getLdapGuardFromRequest()</code> methods:</p> <pre><code>// app/Http/Controllers/Auth/LoginController.php\n\n// ...\n\npublic function guard()\n{\n    return $this-&gt;getLdapGuard();\n}\n\npublic function getLdapGuardFromRequest(Request $request)\n{\n    $guards = [\n        'alpha.com' =&gt; 'alpha',\n        'bravo.com' =&gt; 'bravo',\n    ];\n\n    $domain = explode('@', $request-&gt;get('email'))[1];\n\n    return $guards[$domain] ?? 'alpha';\n}\n</code></pre> <p>The <code>guard()</code> method is responsible for returning the name of the authentication guard the user is signing into, or signing out of. We must override this to have control over determining the suitable guard for the user signing in.</p> <p>The <code>getLdapGuardFromRequest()</code> method is responsible for determining the suitable <code>guard</code> for the user using their given email address upon sign in.</p> <p>If the user enters an email that is not available in our <code>$guards</code> array lookup, we will return the <code>alpha</code> guard by default, and the authentication attempt will be made to our <code>alpha</code> domain.</p> <p>You may wish to add a request validation rule instead to prevent users from signing in with invalid email domain. The way you implement this is totally up to you.</p>"},{"location":"docs/laravel/v1/auth/multi-domain/#step-3-updating-your-web-routes","title":"Step 3 - Updating Your Web Routes","text":"<p>Having multiple authentication guards means that we need to update the <code>auth</code> middleware that is covering our protected application routes inside of our <code>routes/web.php</code> file.</p> <p>Luckily, this middleware accepts a list of guards you would like to use. You will need to add both of the guards you created above for both LDAP domains to be able to access the same protected routes:</p> <p>By default, if no guards are given to the Laravel <code>auth</code> middleware, it will attempt to use the <code>default</code> guard configured - we do not want this behaviour.</p> <pre><code>// routes/web.php\n\nRoute::group(function () {\n    // Both alpha and bravo domains can access these routes...\n})-&gt;middleware('auth:alpha,bravo');\n</code></pre> <p>If you would like to restrict routes to certain domains, only include one of them when adding the <code>auth</code> middleware to a route:</p> <pre><code>// routes/web.php\n\nRoute::group(function () {\n    // Only alpha domain users can access these routes...\n})-&gt;middleware('auth:alpha');\n</code></pre> <p>This is extremely handy for permission management - as authenticated users from certain domains can only access the routes that have been defined for their domain.</p>"},{"location":"docs/laravel/v1/auth/quickstart-laravel-ui/","title":"Authentication Quickstart","text":""},{"location":"docs/laravel/v1/auth/quickstart-laravel-ui/#introduction","title":"Introduction","text":"<p>Please complete the LdapRecord-Laravel quickstart guide to install LdapRecord and configure your LDAP connection prior to setting up authentication.</p> <p>Before you begin, this guide assumes you have published Laravel's default authentication scaffolding using the <code>laravel/ui</code> package.</p> <p>If you haven't done this yet, please follow Laravel's auth scaffolding guide to get started, then head back here once done.</p>"},{"location":"docs/laravel/v1/auth/quickstart-laravel-ui/#debugging","title":"Debugging","text":"<p>Inside of your <code>config/ldap.php</code> file, ensure you have <code>logging</code> enabled during the setup of authentication. Doing this will help you immensely in debugging connectivity and authentication issues.</p> <p>If you encounter issues along the way, be sure to open your <code>storage/logs</code> directory after you attempt signing in to your application and see what issues may be occurring.</p> <p>In addition, you may also run the below artisan command to test connectivity to your LDAP server:</p> <pre><code>php artisan ldap:test\n</code></pre>"},{"location":"docs/laravel/v1/auth/quickstart-laravel-ui/#plain-ldap-authentication","title":"Plain LDAP Authentication","text":""},{"location":"docs/laravel/v1/auth/quickstart-laravel-ui/#step-1-configure-the-authentication-driver","title":"Step 1 - Configure the Authentication Driver","text":"<p>Inside of your <code>config/auth.php</code> file, we must add a new provider in the <code>providers</code> array.</p> <p>In this example, we will create a provider named <code>ldap</code>:</p> <pre><code>// config/auth.php\n\n'providers' =&gt; [\n    // ...\n\n    'ldap' =&gt; [\n        'driver' =&gt; 'ldap',\n        'model' =&gt; LdapRecord\\Models\\ActiveDirectory\\User::class,\n    ],\n\n    // ...\n],\n</code></pre> <p>If you are using OpenLDAP, you must switch the providers <code>model</code> option to:</p> <pre><code>LdapRecord\\Models\\OpenLDAP\\User::class\n</code></pre> <p>Once you have setup your <code>ldap</code> provider, you must update the <code>provider</code> value in the <code>web</code> guard:</p> <pre><code>// config/auth.php\n\n'guards' =&gt; [\n    'web' =&gt; [\n        'driver' =&gt; 'session',\n        'provider' =&gt; 'ldap', // Changed to 'ldap'\n    ],\n\n    // ...\n],\n</code></pre>"},{"location":"docs/laravel/v1/auth/quickstart-laravel-ui/#step-2-setting-up-your-logincontroller","title":"Step 2 - Setting up your LoginController","text":"<p>Now we must change our <code>LoginController</code> to allow LdapRecord to properly locate users who are attempting to sign into our application. We do this by changing the <code>credentials</code> method. In this method we will return an array that contains the users username and password.</p> <p>The array keys you set here are important. The <code>password</code> key must be present, as this is sent directly to your LDAP server for verification.</p> <p>The other key must be the name of the LDAP attribute you want LdapRecord to locate the authenticating user with. It must be an attribute that has a unique value per user in your directory. <code>uid</code>, <code>sAMAccountName</code>, <code>mail</code>, or <code>userPrincipalName</code> are good examples of attributes that have a unique value per user.</p> <p>In this example we want to use the users <code>mail</code> LDAP attribute to sign them into our application.</p> <pre><code>use Illuminate\\Http\\Request;\n\nclass LoginController extends Controller\n{\n    // ...\n\n    protected function credentials(Request $request)\n    {\n        return [\n            'mail' =&gt; $request-&gt;get('email'),\n            'password' =&gt; $request-&gt;get('password'),\n        ];\n    }\n}\n</code></pre>"},{"location":"docs/laravel/v1/auth/quickstart-laravel-ui/#step-3-modifying-the-layout-blade-view","title":"Step 3 - Modifying The Layout Blade View","text":"<p>When we use plain LDAP authentication, an instance of the LdapRecord <code>model</code> you have configured for authentication will be returned when calling the <code>Auth::user()</code> method. This means that our currently published blade views will throw an exception due to using <code>Auth::user()-&gt;name</code> call inside of the view file <code>views/layouts/app.blade.php</code>.</p> <p>You must change the syntax to the following:</p> <pre><code>&lt;!-- resources/views/layouts/app.blade.php --&gt;\n\n&lt;!-- From... --&gt;\n{{ Auth::user()-&gt;name }}\n\n&lt;!-- To... --&gt;\n{{ Auth::user()-&gt;getFirstAttribute('cn') }}\n</code></pre> <p>Once you've updated the syntax, your application is now ready to authenticate LDAP users.</p>"},{"location":"docs/laravel/v1/auth/quickstart-laravel-ui/#synchronized-database-authentication","title":"Synchronized Database Authentication","text":""},{"location":"docs/laravel/v1/auth/quickstart-laravel-ui/#step-1-publish-the-migration","title":"Step 1 - Publish the Migration","text":"<p>LdapRecord requires you to have two additional user database columns.</p> Column Reason <code>guid</code> This is for storing your LDAP users <code>objectguid</code>. It is needed for locating and synchronizing your LDAP user to the database. <code>domain</code> This is for storing your LDAP users connection name. It is needed for storing your configured LDAP connection name of the user. <p>Go ahead and publish the migration using the below command:</p> <pre><code>php artisan vendor:publish --provider=\"LdapRecord\\Laravel\\LdapAuthServiceProvider\"\n</code></pre> <p>Then, run the migrations with the <code>artisan migrate</code> command:</p> <pre><code>php artisan migrate\n</code></pre>"},{"location":"docs/laravel/v1/auth/quickstart-laravel-ui/#step-2-configure-the-authentication-driver","title":"Step 2 - Configure the Authentication Driver","text":"<p>Inside of your <code>config/auth.php</code> file, we must add a new provider in the <code>providers</code> array.</p> <p>In this example, we will create a provider named <code>ldap</code>:</p> <pre><code>// config/auth.php\n\n'providers' =&gt; [\n    // ...\n\n    'ldap' =&gt; [\n        'driver' =&gt; 'ldap',\n        'model' =&gt; LdapRecord\\Models\\ActiveDirectory\\User::class,\n        'database' =&gt; [\n            'model' =&gt; App\\User::class,\n            'sync_passwords' =&gt; false,\n            'sync_attributes' =&gt; [\n                'name' =&gt; 'cn',\n                'email' =&gt; 'mail',\n            ],\n        ],\n    ],\n],\n</code></pre> <p>If you are using OpenLDAP, you must switch the providers <code>model</code> option to:</p> <pre><code>LdapRecord\\Models\\OpenLDAP\\User::class\n</code></pre> <p>If you are using a different LDAP type, you will need to define your own LDAP model and insert it there. This model is used for locating the authenticating user in your LDAP directory.</p> <p>Once you have setup your <code>ldap</code> provider, you must update the <code>provider</code> value in the <code>web</code> guard:</p> <pre><code>// config/auth.php\n\n'guards' =&gt; [\n    'web' =&gt; [\n        'driver' =&gt; 'session',\n        'provider' =&gt; 'ldap', // Changed to 'ldap'\n    ],\n\n    // ...\n],\n</code></pre>"},{"location":"docs/laravel/v1/auth/quickstart-laravel-ui/#step-3-setting-up-your-database-user-model","title":"Step 3 - Setting up your database user model","text":"<p>Now, we must add the following trait and interface to our <code>User</code> Eloquent model:</p> Type Name Interface <code>LdapRecord\\Laravel\\Auth\\LdapAuthenticatable</code> Trait <code>LdapRecord\\Laravel\\Auth\\AuthenticatesWithLdap</code> <pre><code>// app/User.php\n\n// ...\nuse LdapRecord\\Laravel\\Auth\\LdapAuthenticatable;\nuse LdapRecord\\Laravel\\Auth\\AuthenticatesWithLdap;\n\nclass User extends Authenticatable implements LdapAuthenticatable\n{\n    use Notifiable, AuthenticatesWithLdap;\n\n    // ...\n}\n</code></pre> <p>These are required so LdapRecord can set and retrieve your users <code>domain</code> and <code>guid</code> database columns.</p> <p>If you would like to override the database column names that are used, you can override the following methods:</p> Methods <code>User::getLdapDomainColumn()</code> <code>User::getLdapGuidColumn()</code>"},{"location":"docs/laravel/v1/auth/quickstart-laravel-ui/#step-4-setting-up-your-logincontroller","title":"Step 4 - Setting up your LoginController:","text":"<p>Now we must change our <code>LoginController</code> to allow LdapRecord to properly locate users who are attempting to sign into our application. We do this by changing the <code>credentials</code> method. In this method we will return an array that contains the users username and password.</p> <p>The array keys you set here are important. The <code>password</code> key must be present, as this is sent directly to your LDAP server for verification.</p> <p>The other key must be the name of the LDAP attribute you want LdapRecord to locate the authenticating user with. It must be an attribute that has a unique value per user in your directory. <code>uid</code>, <code>sAMAccountName</code>, <code>mail</code>, or <code>userPrincipalName</code> are good examples of attributes that have a unique value per user.</p> <p>In this example we want to use the users <code>mail</code> LDAP attribute to sign them into our application.</p> <pre><code>use Illuminate\\Http\\Request;\n\nclass LoginController extends Controller\n{\n    // ...\n\n    protected function credentials(Request $request)\n    {\n        return [\n            'mail' =&gt; $request-&gt;get('email'),\n            'password' =&gt; $request-&gt;get('password'),\n        ];\n    }\n}\n</code></pre> <p>Your application is now ready to authenticate LDAP users.</p>"},{"location":"docs/laravel/v1/auth/quickstart/","title":"Authentication Quickstart","text":""},{"location":"docs/laravel/v1/auth/quickstart/#introduction","title":"Introduction","text":"<p>Please complete the LdapRecord-Laravel quickstart guide to install LdapRecord and configure your LDAP connection prior to setting up authentication.</p> <p>Before you begin, this guide assumes you have published Laravel's authentication scaffolding using the <code>laravel/jetstream</code> package.</p> <p>If you haven't done this yet, please follow Laravel Jetstream's scaffolding guide to get started, then head back here once done.</p>"},{"location":"docs/laravel/v1/auth/quickstart/#debugging","title":"Debugging","text":"<p>Inside of your <code>config/ldap.php</code> file, ensure you have <code>logging</code> enabled during the setup of authentication. Doing this will help you immensely in debugging connectivity and authentication issues.</p> <p>If you encounter issues along the way, be sure to open your <code>storage/logs</code> directory after you attempt signing in to your application and see what issues may be occurring.</p> <p>In addition, you may also run the below artisan command to test connectivity to each of your configured LDAP servers:</p> <pre><code>php artisan ldap:test\n</code></pre>"},{"location":"docs/laravel/v1/auth/quickstart/#plain-ldap-authentication","title":"Plain LDAP Authentication","text":""},{"location":"docs/laravel/v1/auth/quickstart/#step-1-configure-the-authentication-driver","title":"Step 1 - Configure the Authentication Driver","text":"<p>Inside of your <code>config/auth.php</code> file, we must add a new provider in the <code>providers</code> array.</p> <p>In this example, we will create a provider named <code>ldap</code>:</p> <pre><code>// config/auth.php\n\n'providers' =&gt; [\n    // ...\n\n    'ldap' =&gt; [\n        'driver' =&gt; 'ldap',\n        'model' =&gt; LdapRecord\\Models\\ActiveDirectory\\User::class,\n    ],\n\n    // ...\n],\n</code></pre> <p>If you are using OpenLDAP, you must switch the providers <code>model</code> option to:</p> <pre><code>LdapRecord\\Models\\OpenLDAP\\User::class\n</code></pre> <p>Once you have setup your <code>ldap</code> provider, you must update the <code>provider</code> value in the <code>web</code> guard:</p> <pre><code>// config/auth.php\n\n'guards' =&gt; [\n    'web' =&gt; [\n        'driver' =&gt; 'session',\n        'provider' =&gt; 'ldap', // Changed to 'ldap'\n    ],\n\n    // ...\n],\n</code></pre>"},{"location":"docs/laravel/v1/auth/quickstart/#step-2-setting-up-laravel-fortify","title":"Step 2 - Setting up Laravel Fortify","text":""},{"location":"docs/laravel/v1/auth/quickstart/#authentication-callback","title":"Authentication Callback","text":"<p>Laravel Jetstream uses Laravel Fortify for authentication. We will configure its various features to support signing in with LdapRecord.</p> <p>To support LDAP authentication, we must call the <code>Fortify::authenticateUsing()</code> and supply our own callback, overriding Laravel Fortify's default:</p> <p>We will call the above in our <code>AuthServiceProvider.php</code> file, inside the <code>boot()</code> method:</p> <pre><code>// app/Providers/AuthServiceProvider.php\n\n// ...\nuse Laravel\\Fortify\\Fortify;\nuse Illuminate\\Support\\Facades\\Auth;\n\nclass AuthServiceProvider extends ServiceProvider\n{\n    // ...\n\n    public function boot()\n    {\n        $this-&gt;registerPolicies();\n\n        Fortify::authenticateUsing(function ($request) {\n            $validated = Auth::validate([\n                'mail' =&gt; $request-&gt;email,\n                'password' =&gt; $request-&gt;password\n            ]);\n\n            return $validated ? Auth::getLastAttempted() : null;\n        });\n    }\n}\n</code></pre> <p>As you can see above in the <code>Fortify::authenticateUsing()</code> callback, we are passing an array of the users credentials to the <code>Auth::validate()</code> method. Most notibly, we set the <code>mail</code> key in this credentials array which is passed to the LdapRecord authentication provider.</p> <p>Upon a user attempting to sign in, a search query will be executed on your directory for a user that contains the <code>mail</code> attribute equal to the entered <code>email</code> that the user has submitted on your login form. The <code>password</code> key will not be used in the search.</p> <p>If a user cannot be located in your directory, or they fail authentication, they will be redirected to the login page normally with the \"Invalid credentials\" error message.</p> <p>You may also add extra key =&gt; value pairs in the <code>credentials</code> array to further scope the LDAP query. The <code>password</code> key is automatically ignored by LdapRecord.</p>"},{"location":"docs/laravel/v1/auth/quickstart/#feature-configuration","title":"Feature Configuration","text":"<p>When using plain LDAP authentication, we must disable various Jetstream and Fortify features, such as teams, two-factor authentication, profile photos, API, registration, updating profile information, and resetting / updating passwords. We will make these changes in the <code>config/jetstream.php</code> and <code>config/fority.php</code> configuration files respectively:</p> <pre><code>// config/fortify.php\n\n// Before:\n'features' =&gt; [\n    Features::registration(),\n    Features::resetPasswords(),\n    // Features::emailVerification(),\n    Features::updateProfileInformation(),\n    Features::updatePasswords(),\n    Features::twoFactorAuthentication([\n        'confirmPassword' =&gt; true,\n    ]),\n],\n\n// After:\n'features' =&gt; [\n    // Features::registration(),\n    // Features::resetPasswords(),\n    // Features::emailVerification(),\n    // Features::updateProfileInformation(),\n    // Features::updatePasswords(),\n    // Features::twoFactorAuthentication([\n    //     'confirmPassword' =&gt; true,\n    // ]),\n],\n</code></pre> <pre><code>// config/jetstream.php\n\n// Before:\n'features' =&gt; [\n    Features::profilePhotos(),\n    Features::api(),\n    Features::teams(),\n],\n\n// After:\n'features' =&gt; [\n    // Features::profilePhotos(),\n    // Features::api(),\n    // Features::teams(),\n],\n</code></pre> <p>These features must be disabled since we cannot persist profile data, two-factor authentication codes, and more, into the users LDAP object.</p>"},{"location":"docs/laravel/v1/auth/quickstart/#step-3-modifying-blade-views","title":"Step 3 - Modifying Blade Views","text":"<p>When we use plain LDAP authentication, an instance of the LdapRecord <code>model</code> you have configured for authentication will be returned when calling the <code>Auth::user()</code> method. This means that our currently published blade views will immediately throw an exception due to calls such as: <code>Auth::user()-&gt;name</code>. Most notably, the <code>views/navigation-dropdown.php</code> file, if you are using the Livewire stack.</p> <p>You must change the syntax to the following wherever it is found:</p> <pre><code>&lt;!-- From... --&gt;\n{{ Auth::user()-&gt;name }}\n\n&lt;!-- To... --&gt;\n{{ Auth::user()-&gt;getFirstAttribute('cn') }}\n</code></pre> <p>You will have to remove other calls completely, such as:</p> <pre><code>{{ Auth::user()-&gt;profile_photo_url }}\n</code></pre> <p>These calls directly rely on Laravel's scaffolded database columns.</p> <p>Once you've made the necessary modifications shown above, your application is now ready to authenticate LDAP users.</p>"},{"location":"docs/laravel/v1/auth/quickstart/#synchronized-database-authentication","title":"Synchronized Database Authentication","text":""},{"location":"docs/laravel/v1/auth/quickstart/#step-1-publish-the-migration","title":"Step 1 - Publish the Migration","text":"<p>LdapRecord requires you to have two additional user database columns.</p> Column Reason <code>guid</code> This is for storing your LDAP users <code>objectguid</code>. It is needed for locating and synchronizing your LDAP user to the database. <code>domain</code> This is for storing your LDAP users connection name. It is needed for storing your configured LDAP connection name of the user. <p>Go ahead and publish the migration using the below command:</p> <pre><code>php artisan vendor:publish --provider=\"LdapRecord\\Laravel\\LdapAuthServiceProvider\"\n</code></pre> <p>Then, run the migrations with the <code>artisan migrate</code> command:</p> <pre><code>php artisan migrate\n</code></pre>"},{"location":"docs/laravel/v1/auth/quickstart/#step-2-configure-the-authentication-driver","title":"Step 2 - Configure the Authentication Driver","text":"<p>Inside of your <code>config/auth.php</code> file, we must add a new provider in the <code>providers</code> array.</p> <p>In this example, we will create a provider named <code>ldap</code>:</p> <pre><code>// config/auth.php\n\n'providers' =&gt; [\n    // ...\n\n    'ldap' =&gt; [\n        'driver' =&gt; 'ldap',\n        'model' =&gt; LdapRecord\\Models\\ActiveDirectory\\User::class,\n        'database' =&gt; [\n            'model' =&gt; App\\Models\\User::class,\n            'sync_passwords' =&gt; false,\n            'sync_attributes' =&gt; [\n                'name' =&gt; 'cn',\n                'email' =&gt; 'mail',\n            ],\n        ],\n    ],\n],\n</code></pre> <p>If you are using OpenLDAP, you must switch the providers <code>model</code> option to:</p> <pre><code>LdapRecord\\Models\\OpenLDAP\\User::class\n</code></pre> <p>If you are using a different LDAP type, you will need to define your own LDAP model and insert it there. This model is used for locating the authenticating user in your LDAP directory.</p> <p>Once you have setup your <code>ldap</code> provider, you must update the <code>provider</code> value in the <code>web</code> guard:</p> <pre><code>// config/auth.php\n\n'guards' =&gt; [\n    'web' =&gt; [\n        'driver' =&gt; 'session',\n        'provider' =&gt; 'ldap', // Changed to 'ldap'\n    ],\n\n    // ...\n],\n</code></pre>"},{"location":"docs/laravel/v1/auth/quickstart/#step-3-setting-up-your-database-user-model","title":"Step 3 - Setting up your database user model","text":"<p>Now, we must add the following trait and interface to our <code>User</code> Eloquent model:</p> Type Name Interface <code>LdapRecord\\Laravel\\Auth\\LdapAuthenticatable</code> Trait <code>LdapRecord\\Laravel\\Auth\\AuthenticatesWithLdap</code> <pre><code>// app/Models/User.php\n\n// ...\nuse LdapRecord\\Laravel\\Auth\\LdapAuthenticatable;\nuse LdapRecord\\Laravel\\Auth\\AuthenticatesWithLdap;\n\nclass User extends Authenticatable implements LdapAuthenticatable\n{\n    use AuthenticatesWithLdap;\n\n    // ...\n}\n</code></pre> <p>These are required so LdapRecord can set and retrieve your users <code>domain</code> and <code>guid</code> database columns.</p> <p>If you would like to override the database column names that are used, you can override the following methods:</p> Methods <code>User::getLdapDomainColumn()</code> <code>User::getLdapGuidColumn()</code>"},{"location":"docs/laravel/v1/auth/quickstart/#step-4-setting-up-laravel-fortify","title":"Step 4 - Setting up Laravel Fortify:","text":""},{"location":"docs/laravel/v1/auth/quickstart/#authentication-callback-password-confirmation","title":"Authentication Callback &amp; Password Confirmation","text":"<p>Laravel Jetstream uses Laravel Fortify for authentication. We will configure its various features to support signing in with LdapRecord.</p> <p>To support LDAP authentication, we must call the following two methods and supply our own callbacks, overriding Laravel Fortify's default:</p> <ul> <li><code>Fortify::authenticateUsing()</code></li> <li><code>Fortify::confirmPasswordsUsing()</code></li> </ul> <p>We will call the above in our <code>AuthServiceProvider.php</code> file, inside the <code>boot()</code> method:</p> <pre><code>// app/Providers/AuthServiceProvider.php\n\n// ...\nuse App\\Models\\User;\nuse Laravel\\Fortify\\Fortify;\nuse Illuminate\\Support\\Facades\\Auth;\n\nclass AuthServiceProvider extends ServiceProvider\n{\n    // ...\n\n    public function boot()\n    {\n        $this-&gt;registerPolicies();\n\n        Fortify::authenticateUsing(function ($request) {\n            $validated = Auth::validate([\n                'mail' =&gt; $request-&gt;email,\n                'password' =&gt; $request-&gt;password\n            ]);\n\n            return $validated ? Auth::getLastAttempted() : null;\n        });\n\n        Fortify::confirmPasswordsUsing(function (User $user, $password) {\n            return Auth::validate([\n                'mail' =&gt; $user-&gt;email,\n                'password' =&gt; $password,\n            ]);\n        });\n    }\n}\n</code></pre> <p>As you can see above, we are passing an array of the users credentials to the <code>Auth::validate()</code> method. Most notibly, we set the <code>mail</code> key in this credentials array which is passed to the LdapRecord authentication provider.</p> <p>Upon a user attempting to sign in, a search query will be executed on your directory for a user that contains the <code>mail</code> attribute equal to the entered <code>email</code> that the user has submitted on your login form. The <code>password</code> key will not be used in the search.</p> <p>If a user cannot be located in your directory, or they fail authentication, they will be redirected to the login page normally with the \"Invalid credentials\" error message.</p> <p>You may also add extra key =&gt; value pairs in the <code>credentials</code> array to further scope the LDAP query. The <code>password</code> key is automatically ignored by LdapRecord.</p>"},{"location":"docs/laravel/v1/auth/quickstart/#feature-configuration_1","title":"Feature Configuration","text":"<p>Since we are synchronizing data from our LDAP server, we must disable several features by commenting them out inside of the <code>config/fortify.php</code> file:</p> <pre><code>// config/fortify.php\n\n// Before:\n'features' =&gt; [\n    Features::registration(),\n    Features::resetPasswords(),\n    // Features::emailVerification(),\n    Features::updateProfileInformation(),\n    Features::updatePasswords(),\n    Features::twoFactorAuthentication([\n        'confirmPassword' =&gt; true,\n    ]),\n],\n\n// After:\n'features' =&gt; [\n    // Features::registration(),\n    // Features::resetPasswords(),\n    // Features::emailVerification(),\n    // Features::updateProfileInformation(),\n    // Features::updatePasswords(),\n    Features::twoFactorAuthentication([\n        'confirmPassword' =&gt; true,\n    ]),\n],\n</code></pre> <p>Important: You may keep <code>Features::registration()</code> enabled if you would like to continue accepting local application user registration. Keep in mind, if you continue to allow registration, you will need to either use multiple Laravel authentication guards, or setup the login fallback feature.</p> <p>Your application is now ready to authenticate LDAP users.</p>"},{"location":"docs/laravel/v1/auth/restricting-sign-in/","title":"Restricting Sign In","text":""},{"location":"docs/laravel/v1/auth/restricting-sign-in/#using-only-manually-imported-users","title":"Using Only Manually Imported Users","text":"<p>To allow only manually imported LDAP users who exist inside of your database to sign in to your application, you must create an authentication rule.</p> <p>Let's create this rule using the below artisan command:</p> <pre><code>php artisan make:ldap-rule OnlyImportedUsers\n</code></pre> <p>A new rule will be created inside <code>app/Ldap/Rules/OnlyImportedUsers.php</code></p> <p>Inside this rule, we will simply return whether the users Eloquent model exists:</p> <pre><code>&lt;?php\n\nnamespace App\\Ldap\\Rules;\n\nuse LdapRecord\\Laravel\\Auth\\Rule;\n\nclass OnlyImportedUsers extends Rule\n{\n    /**\n     * Check if the rule passes validation.\n     *\n     * @return bool\n     */\n    public function isValid()\n    {\n        return $this-&gt;model-&gt;exists;\n    }\n}\n</code></pre> <p>Remember, inside the generated <code>Rule</code>, the <code>$model</code> property is the Eloquent database instance of the user, while the <code>$user</code> property is the LdapRecord instance.</p> <p>Once you've completed modifying the rule, add it into your <code>config/auth.php</code> file where your LDAP user provider has been configured:</p> <pre><code>// config/auth.php\n\n'providers' =&gt; [\n    // ...\n\n    'ldap' =&gt; [\n        'driver' =&gt; 'ldap',\n        'model' =&gt; LdapRecord\\Models\\ActiveDirectory\\User::class,\n        'rules' =&gt; [\n            App\\Ldap\\Rules\\OnlyImportedUsers::class, // &lt;-- Added here.\n        ],\n    ],\n],\n</code></pre> <p>Make sure you run <code>php artisan config:clear</code> if you are caching your configuration files.</p> <p>Now when you attempt to sign in to your application, you will only be able to sign in with a user who has already been imported into your local applications database.</p>"},{"location":"docs/laravel/v1/auth/restricting-sign-in/#using-an-organizational-unit","title":"Using an Organizational Unit","text":"<p>To use an Organizational Unit which contains your users that you want to allow sign in to your application, we will leverage LdapRecord model scopes.</p> <p>In our application, we have an Organizational Unit named <code>Accounting</code> with the following Distinguished Name:</p> <pre><code>ou=Accounting,ou=Users,dc=local,dc=com\n</code></pre> <p>Let's create a new model scope using the below command:</p> <pre><code>php artisan make:ldap-scope OnlyAccountingUsers\n</code></pre> <p>Now inside of the generated scope, we will limit the query to only return users who are contained inside the our <code>Accounting</code> OU:</p> <pre><code>&lt;?php\n\nnamespace App\\Ldap\\Scopes;\n\nuse LdapRecord\\Models\\Model;\nuse LdapRecord\\Models\\Scope;\nuse LdapRecord\\Query\\Model\\Builder;\n\nclass OnlyAccountingUsers implements Scope\n{\n    /**\n     * Apply the scope to the given query.\n     *\n     * @param Builder $query\n     * @param Model   $model\n     *\n     * @return void\n     */\n    public function apply(Builder $query, Model $model)\n    {\n        $query-&gt;in('ou=Accounting,ou=Users,dc=local,dc=com');\n\n        // You can also make this \"environment aware\" if needed:\n        // $query-&gt;in(env('LDAP_USER_SCOPE'));\n    }\n}\n</code></pre> <p>After modifying the scope, we can now add the scope to our LDAP user model.</p> <p>If you are using one of the built-in predefined models, you can add the global scope to the model inside your <code>AuthServiceProvider::boot()</code> method:</p> <pre><code>// app/Providers/AuthServiceProvider.php\n\n/**\n * Register any authentication / authorization services.\n *\n * @return void\n */\npublic function boot()\n{\n    $this-&gt;registerPolicies();\n\n    \\LdapRecord\\Models\\ActiveDirectory\\User::addGlobalScope(\n        new OnlyAccountingUsers\n    );\n}\n</code></pre> <p>If you have created your own LDAP model, add the scope in the inside your models static <code>boot</code> method:</p> <pre><code>&lt;?php\n\nnamespace App\\Ldap;\n\nuse LdapRecord\\Models\\Model;\nuse App\\Ldap\\Scopes\\CompanyScope;\n\nclass User extends Model\n{\n    /**\n     * The \"booting\" method of the model.\n     *\n     * @return void\n     */\n    protected static function boot()\n    {\n        parent::boot();\n\n        static::addGlobalScope(new OnlyAccountingUsers);\n    }\n}\n</code></pre> <p>Now when you attempt to sign in to your application, only users who are contained inside the <code>Accounting</code> OU will be allowed to authenticate.</p>"},{"location":"docs/laravel/v1/auth/restricting-sign-in/#using-a-group-membership","title":"Using a Group Membership","text":"<p>To use a group membership for authorizing signing in to your application, we will use an authentication rule.</p> <p>In our example application, we want to only allow users who are members of a single group to authenticate. This group will be called <code>Help Desk</code>.</p> <p>Let's create our new authentication rule by running the below command:</p> <pre><code>php artisan make:ldap-rule OnlyHelpDeskUsers\n</code></pre> <p>A new rule will be created inside <code>app/Ldap/Rules/OnlyHelpDeskUsers.php</code></p> <p>In the newly generated rule, we can check for group membership in various ways, as well as check for nested group membership, and even for multiple group memberships.</p> <p>Let's walk through each example.</p>"},{"location":"docs/laravel/v1/auth/restricting-sign-in/#checking-for-a-single-group","title":"Checking for a single group","text":"<p>When checking for a single group, we will use the relation <code>exists()</code> method:</p> <pre><code>/**\n * Check if the rule passes validation.\n *\n * @return bool\n */\npublic function isValid()\n{\n    return $this-&gt;user-&gt;groups()-&gt;exists(\n        'cn=Help Desk,ou=Groups,dc=local,dc=com'\n    );\n}\n</code></pre> <p>With the <code>exists()</code> method, we can also use an LdapRecord <code>Model</code> instance:</p> <p>This approach is useful, so an exception will be thrown when the group cannot be located.</p> <pre><code>public function isValid()\n{\n    return $this-&gt;user-&gt;groups()-&gt;exists(\n        Group::findOrFail('cn=Help Desk,ou=Groups,dc=local,dc=com')\n    );\n}\n</code></pre> <p>Or; A Common Name (<code>cn</code>):</p> <pre><code>public function isValid()\n{\n    return $this-&gt;user-&gt;groups()-&gt;exists('Help Desk');\n}\n</code></pre>"},{"location":"docs/laravel/v1/auth/restricting-sign-in/#checking-for-multiple-groups","title":"Checking for multiple groups","text":"<p>To check that the user has all of a given set of groups, we will use the <code>exists()</code> method:</p> <pre><code>public function isValid()\n{\n    return $this-&gt;user-&gt;groups()-&gt;exists(\n        'cn=Help Desk,ou=Groups,dc=local,dc=com',\n        'cn=Site Admins,ou=Groups,dc=local,dc=com'\n    );\n}\n</code></pre> <p>We can also use <code>Model</code> instances:</p> <pre><code>public function isValid()\n{\n    return $this-&gt;user-&gt;groups()-&gt;exists([\n        Group::findOrFail('cn=Help Desk,ou=Groups,dc=local,dc=com'),\n        Group::findOrFail('cn=Site Admins,ou=Groups,dc=local,dc=com'),\n    ]);\n}\n</code></pre> <p>Or; Common Names (<code>cn</code>):</p> <pre><code>public function isValid()\n{\n    return $this-&gt;user-&gt;groups()-&gt;exists([\n        'Help Desk', 'Site Admins'\n    ]);\n}\n</code></pre>"},{"location":"docs/laravel/v1/auth/restricting-sign-in/#checking-for-any-given-groups","title":"Checking for any given groups","text":"<p>To check that a user has any of a given set of groups, we will use the <code>contains()</code> method:</p> <pre><code>public function isValid()\n{\n    return $this-&gt;user-&gt;groups()-&gt;contains([\n        'Help Desk', 'Accounting'\n    ]);\n}\n</code></pre> <p>You can also provide a <code>Model</code> instance or Distinguished Name into the <code>contains</code> method.</p> <p>This will allow members of either the <code>Help Desk</code> or <code>Accounting</code> group to authenticate.</p>"},{"location":"docs/laravel/v1/auth/restricting-sign-in/#checking-for-nested-groups-recursively","title":"Checking for nested group(s) recursively","text":"<p>Nested group checking allows LdapRecord to search recursively if a user is a member of a particular group.</p> <p>For example, if a user is a member of an <code>Accounting</code> group, and this <code>Accounting</code> group is a member of an <code>Office</code> group, you can tell LdapRecord to search recursively for the <code>Office</code> group:</p> <pre><code>public function isValid()\n{\n    return $this-&gt;user-&gt;groups()-&gt;recursive()-&gt;exists('Office');\n}\n</code></pre> <p>Using the above example without the <code>recursive</code> call, it will fail to determine the users group membership, since LdapRecord is only searching for immediate memberships of the user:</p> <pre><code>public function isValid()\n{\n    // Only searching immediate group memberships:\n    return $this-&gt;user-&gt;groups()-&gt;exists('Office');\n}\n</code></pre>"},{"location":"docs/laravel/v1/auth/setup/","title":"Authentication Setup","text":"<p>Once you have configured a new authentication provider, you will have to set up your authentication guard to use this new provider as the default.</p> <p>For this example, we will change our default <code>web</code> guard to use our new <code>ldap</code> provider:</p> <pre><code>// config/auth.php\n\n'guards' =&gt; [\n    'web' =&gt; [\n        'driver' =&gt; 'session',\n        'provider' =&gt; 'ldap', // Changed from 'users'\n    ],\n\n    // ...\n],\n</code></pre>"},{"location":"docs/laravel/v1/auth/setup/#authentication-scaffolding","title":"Authentication Scaffolding","text":"<p>LdapRecord-Laravel supports both Laravel Jetstream and Laravel UI out-of-the-box. Select whichever authentication scaffolding you feel suits your application best.</p> <ul> <li>Laravel UI</li> <li>Laravel Jetstream</li> </ul>"},{"location":"docs/laravel/v1/auth/testing/","title":"Testing","text":""},{"location":"docs/laravel/v1/auth/testing/#introduction","title":"Introduction","text":"<p>LdapRecord-Laravel prides itself on giving you a great and easy testing experience using the Directory Emulator. Using it, we can test authentication rules, scopes and group memberships.</p>"},{"location":"docs/laravel/v1/auth/testing/#getting-started","title":"Getting Started","text":"<p>Before we begin, you must require the <code>doctrine/dbal</code> into your composers <code>require-dev</code> for testing. This is due to the <code>$table-&gt;dropColumns(['guid', 'domain'])</code> call inside of the additional LdapRecord auth migration and that we are using SQLite in our test environment.</p> <p>This package is required for modifying columns - as described in the Laravel documentation.</p> <p>To do so, run the following command:</p> <pre><code>composer require doctrine/dbal --dev\n</code></pre>"},{"location":"docs/laravel/v1/auth/testing/#creating-the-test","title":"Creating the test","text":"<p>Let's whip up a test by running the following command:</p> <pre><code>php artisan make:test LdapAuthenticationTest\n</code></pre> <p>Inside of our generated test, we'll make use of the following traits:</p> <p>DatabaseMigrations</p> <pre><code>Illuminate\\Foundation\\Testing\\DatabaseMigrations\n</code></pre> <p>Using this trait will execute our migrations and ensure our database is ready to import our LDAP user.</p> <p>WithFaker</p> <pre><code>Illuminate\\Foundation\\Testing\\WithFaker\n</code></pre> <p>Using this trait provides us with generating fake UUID's (great for creating mock \"guids\"), names and emails.</p> <p>Let's add a <code>test_auth_works</code> method into the generated test:</p> <pre><code>&lt;?php\n\nnamespace Tests\\Feature;\n\nuse Illuminate\\Foundation\\Testing\\DatabaseMigrations;\nuse Illuminate\\Foundation\\Testing\\WithFaker;\nuse Illuminate\\Support\\Facades\\Auth;\nuse LdapRecord\\Laravel\\Testing\\DirectoryEmulator;\nuse LdapRecord\\Models\\ActiveDirectory\\User;\nuse Tests\\TestCase;\n\nclass LdapAuthenticationTest extends TestCase\n{\n    use DatabaseMigrations, WithFaker;\n\n    public function test_auth_works()\n    {\n        $fake = DirectoryEmulator::setup('default');\n\n        $ldapUser = User::create([\n            'cn' =&gt; $this-&gt;faker-&gt;name,\n            'mail' =&gt; $this-&gt;faker-&gt;email,\n            'objectguid' =&gt; $this-&gt;faker-&gt;uuid,\n        ]);\n\n        $fake-&gt;actingAs($ldapUser);\n\n        $this-&gt;post('/login', [\n            'email' =&gt; $ldapUser-&gt;mail[0],\n            'password' =&gt; 'secret',\n        ])-&gt;assertRedirect('/home');\n\n        $user = Auth::user();\n\n        $this-&gt;assertInstanceOf(\\App\\User::class, $user);\n        $this-&gt;assertEquals($ldapUser-&gt;mail[0], $user-&gt;email);\n        $this-&gt;assertEquals($ldapUser-&gt;cn[0], $user-&gt;name);\n    }\n}\n</code></pre> <p>Let's deconstruct what's going on here step by step.</p> <pre><code>$fake = DirectoryEmulator::setup('default');\n</code></pre> <p>This first line creates a new Directory Emulator for our LDAP connection named <code>default</code> inside of our <code>config/ldap.php</code> file. It returns a fake LDAP connection that we can use to indicate that the user we create in this fake directory will successfully pass LDAP authentication.</p> <pre><code>$user = User::create([\n    'cn' =&gt; $this-&gt;faker-&gt;name,\n    'mail' =&gt; $this-&gt;faker-&gt;email,\n    'objectguid' =&gt; $this-&gt;faker-&gt;uuid,\n]);\n</code></pre> <p>On the second line, we're creating our fake LDAP user who will be signing into our application. You'll notice that we assign the attributes that are inside of our <code>sync_attributes</code> specified inside of our <code>config/auth.php</code> file, as well as the users <code>objectguid</code>.</p> <p>If you're using OpenLDAP, the <code>objectguid</code> field may be <code>entryUUID</code> or <code>uid</code>.</p> <p>This is a good place to test attribute synchronization.</p> <pre><code>$fake-&gt;actingAs($user);\n</code></pre> <p>This third line, we are asserting that the user we have created will automatically pass LDAP authentication. If we remove this line, attempting to authenticate as the user will fail, as they are not allowed to bind using your fake connection.</p> <pre><code>$this-&gt;post('/login', [\n    'email' =&gt; $user-&gt;mail[0],\n    'password' =&gt; 'secret',\n])-&gt;assertRedirect('/home');\n</code></pre> <p>Fourth, we are sending a post request to our <code>login</code> page, with our LDAP users email address. The password can be anything, since we asserted above (using the <code>actingAs()</code> method) that the user will pass, regardless of what password we use.</p> <p>If your application has password synchronization enabled, this is a good place to send various passwords and assert that the hashes match after a successful login.</p> <pre><code>$user = Auth::user();\n\n$this-&gt;assertInstanceOf(\\App\\User::class, $user);\n$this-&gt;assertEquals($ldapUser-&gt;mail[0], $user-&gt;email);\n$this-&gt;assertEquals($ldapUser-&gt;cn[0], $user-&gt;name);\n</code></pre> <p>Finally, we'll check to make sure we can retrieve the successfully authenticated user and that their attributes were successfully synchronized into our Eloquent database model.</p>"},{"location":"docs/laravel/v1/auth/testing/#scopes","title":"Scopes","text":"<p>To test scopes that you apply to the LdapRecord model you are using for authentication, you will need to apply the attributes to the fake user you create to test that they can be properly located during authentication.</p> <p>For example, if you created a scope that enforces users to be inside of an Organizational Unit, then we must create our fake user inside of that Organizational Unit for the user to be located - as you would using a real LDAP directory. Let's walk through this.</p> <p>Below we have our scope that will enforce users to be located inside of an Organizational Unit named <code>Administrators</code>:</p> <pre><code>namespace App\\Ldap\\Scopes;\n\nuse LdapRecord\\Models\\Model;\nuse LdapRecord\\Models\\Scope;\nuse LdapRecord\\Query\\Model\\Builder;\nuse LdapRecord\\Models\\ActiveDirectory\\OrganizationalUnit;\n\nclass AdministratorsScope implements Scope\n{\n    public function apply(Builder $query, Model $model)\n    {\n        $ou = OrganizationalUnit::where('ou', '=', 'Accounting')-&gt;first();\n\n        $query-&gt;in($ou);\n    }\n}\n</code></pre> <p>And we have also added it into our model:</p> <pre><code>namespace App\\Ldap;\n\nuse LdapRecord\\Models\\Model;\nuse App\\Ldap\\Scopes\\AdministratorsScope;\n\nclass User extends Model\n{\n    protected static function boot()\n    {\n        parent::boot();\n\n        static::addGlobalScope(new AdministratorsScope());\n    }\n}\n</code></pre> <p>Now let's create our test. To do so, we'll setup everything as we have in the above test example, but we will create our user inside of the <code>Administrators</code> Organizational Unit:</p> <pre><code>public function test_auth_works()\n{\n    $fake = DirectoryEmulator::setup('default');\n\n    $ou = OrganizationalUnit::create(['ou' =&gt; 'Administrators']);\n\n    $ldapUser = (new User)-&gt;inside($ou);\n\n    $ldapUser-&gt;save([\n        'mail' =&gt; $this-&gt;faker-&gt;email,\n        'cn' =&gt; $this-&gt;faker-&gt;name,\n        'objectguid' =&gt; $this-&gt;faker-&gt;uuid,\n    ]);\n\n    $fake-&gt;actingAs($ldapUser);\n\n    $this-&gt;post('/login', [\n        'email' =&gt; $ldapUser-&gt;mail[0],\n        'password' =&gt; 'secret',\n    ])-&gt;assertRedirect('/home');\n\n    $user = Auth::user();\n\n    $this-&gt;assertInstanceOf(\\App\\User::class, $user);\n    $this-&gt;assertEquals($ldapUser-&gt;mail[0], $user-&gt;email);\n    $this-&gt;assertEquals($ldapUser-&gt;cn[0], $user-&gt;name);\n}\n</code></pre> <p>To test the opposite of the above - such as a user who is not located inside the <code>Administrators</code> OU, simply create them inside a different OU, or inside the root of your emulated directory:</p> <pre><code>public function test_auth_fails()\n{\n    $fake = DirectoryEmulator::setup('default');\n\n    $ldapUser = User::create([\n        'cn' =&gt; $this-&gt;faker-&gt;name,\n        'mail' =&gt; $this-&gt;faker-&gt;email,\n        'objectguid' =&gt; $this-&gt;faker-&gt;uuid,\n    ]);\n\n    $fake-&gt;actingAs($ldapUser);\n\n    $this-&gt;post('/login', [\n        'email' =&gt; $ldapUser-&gt;mail[0],\n        'password' =&gt; 'secret',\n    ])-&gt;assertSessionHasErrors('email');\n\n    $this-&gt;assertFalse(Auth::check());\n}\n</code></pre> <p>Even though we have asserted that the user passes LDAP authentication (<code>$fake-&gt;actingAs($ldapUser)</code>), authentication will fail due to the user not being able to be located due to our scope we have created.</p> <p>We have also modified our redirect assertion to instead validate that the <code>email</code> session key contains errors. This key will contain the <code>Invalid credentials</code> message.</p>"},{"location":"docs/laravel/v1/auth/testing/#rules","title":"Rules","text":"<p>As with testing scopes, to test rules we must either apply or omit data on our fake user to test our LDAP authentication rules.</p> <p>An authentication rule is great for checking if a user is a member of a certain group before allowing them to authenticate. Let's walk through an example and test this.</p> <p>Our application requires the user to be a member of a group called <code>Help Desk</code>. With that requirement, here is our created authentication rule:</p> <pre><code>&lt;?php\n\nnamespace App\\Ldap\\Rules;\n\nuse LdapRecord\\Laravel\\Auth\\Rule;\nuse LdapRecord\\Models\\ActiveDirectory\\Group;\n\nclass HelpDeskEmployee extends Rule\n{\n    public function isValid()\n    {\n        $group = Group::where('name', '=', 'Help Desk')-&gt;first();\n\n        return $this-&gt;user-&gt;groups()-&gt;exists($group);\n    }\n}\n</code></pre> <p>This rule has also been added into our providers configuration inside our <code>config/auth.php</code> file:</p> <pre><code>// ...\n\n'providers' =&gt; [\n    // ...\n\n    'ldap' =&gt; [\n        // ...\n        'rules' =&gt; [\n            \\App\\Ldap\\Rules\\HelpDeskEmployee::class,\n        ],\n    ],\n]\n</code></pre> <p>Now we can create our test to ensure only users who are members of the group can authenticate:</p> <pre><code>public function test_auth_works()\n{\n    $fake = DirectoryEmulator::setup('default');\n\n    $ldapGroup = Group::create(['cn' =&gt; 'Help Desk']);\n\n    $ldapUser = User::create([\n        'cn' =&gt; $this-&gt;faker-&gt;name,\n        'mail' =&gt; $this-&gt;faker-&gt;email,\n        'objectguid' =&gt; $this-&gt;faker-&gt;uuid,\n        'memberof' =&gt; [$ldapGroup-&gt;getDn()],\n    ]);\n\n    $ldapGroup-&gt;members()-&gt;attach($ldapUser);\n\n    $fake-&gt;actingAs($ldapUser);\n\n    $this-&gt;post('/login', [\n        'email' =&gt; $ldapUser-&gt;mail[0],\n        'password' =&gt; 'secret',\n    ])-&gt;assertRedirect('/home');\n\n    $user = Auth::user();\n\n    $this-&gt;assertInstanceOf(\\App\\User::class, $user);\n    $this-&gt;assertEquals($ldapUser-&gt;mail[0], $user-&gt;email);\n    $this-&gt;assertEquals($ldapUser-&gt;cn[0], $user-&gt;name);\n}\n</code></pre> <p>As you can see above, we created a <code>Help Desk</code> group, added the group into the users <code>memberof</code> attribute (due to this field being virtual) and have attached them to the group.</p> <p>Now let's create a test to ensure users who are not members of the group can't authenticate.</p> <pre><code>public function test_auth_fails()\n{\n    $fake = DirectoryEmulator::setup('default');\n\n    $ldapUser = User::create([\n        'cn' =&gt; $this-&gt;faker-&gt;name,\n        'mail' =&gt; $this-&gt;faker-&gt;email,\n        'objectguid' =&gt; $this-&gt;faker-&gt;uuid,\n    ]);\n\n    $fake-&gt;actingAs($ldapUser);\n\n    $this-&gt;post('/login', [\n        'email' =&gt; $ldapUser-&gt;mail[0],\n        'password' =&gt; 'secret',\n    ])-&gt;assertSessionHasErrors('email');\n\n    $this-&gt;assertFalse(Auth::check());\n}\n</code></pre> <p>The above test passes because we have not added our LDAP user into any groups - so the <code>exists()</code> check inside of our rule returns <code>false</code>.</p>"},{"location":"docs/laravel/v1/auth/testing/#sso-windows-authentication","title":"SSO / Windows Authentication","text":"<p>To test Sigle-Sign-On (or Windows Authentication) for your Laravel application, you must set the authenticating users down-level logon name as a server variable.</p> <p>This server variable (typically <code>$_SERVER['AUTH_USER']</code>) is what the <code>WindowsAuthenticate</code> middleware reads to locate the authenticated user from your LDAP directory.</p> <p>To set server variables for upcoming requests inside of your Laravel tests, use the <code>withServerVariables()</code> method:</p> <pre><code>public function test_windows_authentication_works()\n{\n    DirectoryEmulator::setup('default');\n\n    $ldapUser = User::create([\n        'cn' =&gt; $this-&gt;faker-&gt;name,\n        'mail' =&gt; $this-&gt;faker-&gt;email,\n        'objectguid' =&gt; $this-&gt;faker-&gt;uuid,\n        'samaccountname' =&gt; $this-&gt;faker-&gt;userName,\n    ]);\n\n    // Replace 'DOMAIN' with your domain from your configured LDAP\n    // `base_dn`. For example, if your `base_dn` is equal to\n    // 'dc=company,dc=com', then you would use 'COMPANY'.\n    $authUser = implode('\\\\', [\n        'DOMAIN', $ldapUser-&gt;getFirstAttribute('samaccountname')\n    ]);\n\n    // Set the server variables for the upcoming request.\n    $this-&gt;withServerVariables([\n        WindowsAuthenticate::$serverKey =&gt; $authUser\n    ]);\n\n    // Attempt accessing a protected page:\n    $this-&gt;get('/dashboard')-&gt;assertOk();\n\n    // Ensure the user was authenticated:\n    $this-&gt;assertTrue(Auth::check());\n}\n</code></pre>"},{"location":"docs/laravel/v1/auth/sso/","title":"Pass-through / SSO Authentication","text":"<p>Pass-through authentication allows your users to be automatically signed in when they access your application on a Windows domain joined computer. This feature is ideal for in-house corporate environments.</p> <p>However, this feature assumes that you have enabled Windows Authentication in IIS, or have enabled it in some other means with Apache. LdapRecord does not set this up for you. To enable Windows Authentication, visit the IIS configuration guide.</p> <p>When you have it enabled on your server, and a user visits your application from a domain joined computer, the users <code>sAMAccountName</code> becomes available on a PHP server variable (<code>$_SERVER['AUTH_USER']</code>).</p> <p>LdapRecord provides a middleware that you apply to your stack which retrieves this username from the request, attempts to locate the user in your directory, then logs the user in.</p>"},{"location":"docs/laravel/v1/auth/sso/setup/","title":"Pass-through / SSO Setup","text":""},{"location":"docs/laravel/v1/auth/sso/setup/#middleware","title":"Middleware","text":"<p>To enable single-sign-on in your Laravel application, insert the included <code>WindowsAuthenticate</code> middleware on your middleware stack inside your <code>app/Http/Kernel.php</code> file:</p> <pre><code>protected $middlewareGroups = [\n    'web' =&gt; [\n        // ...\n        \\LdapRecord\\Laravel\\Middleware\\WindowsAuthenticate::class,\n    ],\n];\n</code></pre> <p>The <code>WindowsAuthenticate</code> middleware uses the rules you have configured inside your <code>config/auth.php</code> file. A user may successfully authenticate against your LDAP server when visiting your site, but depending on your rules, may not be imported or logged in.</p>"},{"location":"docs/laravel/v1/auth/sso/setup/#multi-domain-sso","title":"Multi-Domain SSO","text":"<p>To be able to use multi-domain single-sign-on, your LDAP directory servers must first be joined in a trust.</p> <p>Consider we have two domains: alpha.local and bravo.local.</p> <p>If you have a web server that is joined to the alpha.local domain that is hosting your Laravel application, it must allow users to authenticate to the bravo.local domain.</p> <p>Once you have a working trust defined between your domains, you must follow the steps of setting up multi-domain authentication. You may skip step 2, if you do not need a login page for your users.</p> <p>After completing the above linked guide, you must instruct the <code>WindowsAuthenticate</code> middleware to utilize your LDAP authentication guards that you have configured in your <code>config/auth.php</code> file by calling the <code>guards</code> method:</p> <pre><code>// app/Providers/AuthServiceProvider.php\n\n/**\n * Register any authentication / authorization services.\n *\n * @return void\n */\npublic function boot()\n{\n    $this-&gt;registerPolicies();\n\n    WindowsAuthenticate::guards(['alpha', 'bravo']);\n}\n</code></pre> <p>Or, if you prefer, you may define the <code>WindowsAuthenticate</code> middleware as a named middleware inside your <code>app/Http/Kernel.php</code>, and insert the guard names in the definition of your routes:</p> <pre><code>// app/Http/Kernel.php\n\n/**\n * The application's route middleware.\n *\n * These middleware may be assigned to groups or used individually.\n *\n * @var array\n */\nprotected $routeMiddleware = [\n    'auth' =&gt; \\App\\Http\\Middleware\\Authenticate::class,\n    'auth.windows' =&gt; \\LdapRecord\\Laravel\\Middleware\\WindowsAuthenticate::class,\n    // ...\n],\n</code></pre> <p>Then, utilize it inside your routes file:</p> <p>Remember, when guarding your routes that require authentication via the <code>auth</code> middleware, you must add both guard names into it as well.</p> <pre><code>// routes/web.php\n\nRoute::middleware([\n    'auth.windows:alpha,bravo',\n    'auth:alpha,bravo',\n])-&gt;group(function () {\n    // ...\n});\n</code></pre> <p>The actual ordering of the middleware definition is important here, so your users that are accessing your site through single-sign-on are logged in, prior to the <code>auth</code> middleware. Otherwise, they will be simply redirected to your login page.</p>"},{"location":"docs/laravel/v1/auth/sso/setup/#sso-domain-verification","title":"SSO Domain Verification","text":"<p>To prevent security issues using multiple-domain authentication using the <code>WindowsAuthenticate</code> middleware, domain verification will be performed on the authenticating user.</p> <p>This verification checks if the users domain name is contained inside of their full distinguished name, which is retrieved from each of your configured LDAP guards.</p> <p>Only 'Domain Components' are checked in the users distinguished name. More on this below.</p> <p>To describe this issue in further detail -- the <code>WindowsAuthenticate</code> middleware retrieves all of your configured authentication guards inside of your <code>config/auth.php</code> file. It then determines which one is using the <code>ldap</code> driver, and attempts to locate the authenticating users from each connection.</p> <p>Since there is the possibility of users having the same <code>sAMAccountName</code> on two separate domains, LdapRecord must verify that the user retrieved from your domain is in-fact the user who is connecting to your Laravel application via Single-Sign-On.</p> <p>For example, if a user visits your Laravel application with the username of:</p> <pre><code>ACME\\sbauman\n</code></pre> <p>And LdapRecord locates a user with the distinguished name of:</p> <pre><code>cn=sbauman,ou=users,dc=local,dc=com\n</code></pre> <p>They will be denied authentication. This is because the authenticating user has a domain of <code>ACME</code>, but it is not contained inside of their distinguished name domain components (<code>dc</code>).</p> <p>Using the same example, if the located users distinguished name is:</p> <pre><code>cn=sbauman,ou=users,dc=acme,dc=com\n</code></pre> <p>Then they will be allowed to authenticate, as their <code>ACME</code> domain exists inside of their distinguished name domain components (<code>dc=acme</code>). Comparison against each domain component will be performed in a case-insensitive manor.</p> <p>If you would like to disable this check, you must call the static method <code>bypassDomainVerification</code> on the <code>WindowsAuthenticate</code> middleware inside of your <code>AuthServiceProvider</code>:</p> <p>Important: This is a security issue if you use multi-domain authentication, since users who have the same <code>sAMAccountName</code> could sign in as each other. You have been warned. If however, you connect to only one domain inside your application, there is no security issue, and you may disable this check as shown below.</p> <pre><code>// app/Providers/AuthServiceProvider.php\n\n/**\n * Register any authentication / authorization services.\n *\n * @return void\n */\npublic function boot()\n{\n    $this-&gt;registerPolicies();\n\n    WindowsAuthenticate::bypassDomainVerification();\n}\n</code></pre>"},{"location":"docs/laravel/v1/auth/sso/setup/#changing-the-server-key","title":"Changing the Server Key","text":"<p>By default, the <code>WindowsAuthenticate</code> middleware uses the <code>AUTH_USER</code> key inside of PHP's <code>$_SERVER</code> array (<code>$_SERVER['AUTH_USER']</code>). If you would like to change this, call the <code>serverKey</code> method on the <code>WindowsAuthenticate</code> middleware inside of your <code>AuthServiceProvider</code>:</p> <pre><code>// app/Providers/AuthServiceProvider.php\n\n/**\n * Register any authentication / authorization services.\n *\n * @return void\n */\npublic function boot()\n{\n    $this-&gt;registerPolicies();\n\n    WindowsAuthenticate::serverKey('PHP_AUTH_USER');\n}\n</code></pre>"},{"location":"docs/laravel/v1/auth/sso/setup/#remember-single-sign-on-users","title":"Remember Single-Sign-On users","text":"<p>As of LdapRecord-Laravel version <code>v1.9.0</code>, users signed in to your application via the <code>WindowsAuthenticate</code> middleware will no longer be automatically \"remembered\".</p> <p>This shouldn't have any effect on your application, but if you need to re-enable this feature, you must call the <code>rememberAuthenticatedUsers</code> method on the <code>WindowsAuthenticate</code> middleware inside of your <code>AuthServiceProvider</code>:</p> <pre><code>// app/Providers/AuthServiceProvider.php\n\n/**\n * Register any authentication / authorization services.\n *\n * @return void\n */\npublic function boot()\n{\n    $this-&gt;registerPolicies();\n\n    WindowsAuthenticate::rememberAuthenticatedUsers();\n}\n</code></pre>"},{"location":"docs/laravel/v1/auth/sso/setup/#selective-bypassing-single-sign-on","title":"Selective / Bypassing Single-Sign-On","text":"<p>Occasionally you may need to allow users who are not a part of the domain to login to your application, as well as allowing domain users to automatically sign in via Single-Sign-On.</p> <p>Depending on your web servers OS, this process can be different.</p>"},{"location":"docs/laravel/v1/auth/sso/setup/#linux-httpd","title":"Linux (HTTPD)","text":"<p>If you're using the Apache <code>httpd</code> server with plugins enabling the sharing of a domain joined user's username via the <code>REMOTE_USER</code> server variable, you must update the <code>WindowsAuthenticate</code> middleware to use this variable, instead of the default <code>AUTH_USER</code>.</p> <p>To do this, call the <code>WindowsAuthenticate::serverKey()</code> method in your <code>AuthServiceProvider::boot()</code> method:</p> <pre><code>// app/Providers/AuthServiceProvider.php\n\n/**\n * Register any authentication / authorization services.\n *\n * @return void\n */\npublic function boot()\n{\n    $this-&gt;registerPolicies();\n\n    WindowsAuthenticate::serverKey('REMOTE_USER');\n}\n</code></pre> <p>If a user is not on a domain joined computer, then the <code>REMOTE_USER</code> variable will be <code>null</code> and the <code>WindowsAuthenticate</code> middleware will be automatically bypassed, allowing regular web application users to sign in.</p>"},{"location":"docs/laravel/v1/auth/sso/setup/#windows-iis","title":"Windows (IIS)","text":"<p>A Windows hosted application with NTLM / Windows authentication enabled is unfortunately all-or-nothing on your entire web application instance. This means, you cannot enable a single HTTP endpoint in your application to use Single-Sign-On or exempt a portion of your application. However, there is a workaround that is used frequently in the industry.</p> <p>The goal is to have two URL's that point to the same Laravel application. One has Windows authentication enabled, and another does not. This is typically identified by an <code>sso</code> sub-domain:</p> <pre><code>&lt;!-- Standard URL --&gt;\nmy-app.com\n\n&lt;!-- Single-Sign-On URL --&gt;\nsso.my-app.com\n</code></pre> <p>To do this, you must create a new IIS application instance and point to the same Laravel application. Then, you simply have Windows authentication enabled on one instance, and left disabled on another.</p> <p>Nothing needs to be done in your Laravel application. The <code>WindowsAuthenticate</code> middleware will only attempt to authenticate users when the <code>AUTH_USER</code> server key is present, so it can remain in the global middleware stack.</p>"},{"location":"docs/laravel/v1/auth/sso/setup/#forcing-logouts-on-non-single-sign-on-users","title":"Forcing logouts on non Single-Sign-On users","text":"<p>If a user successfully authenticates to your Laravel application through single-sign-on, and their LDAP account happens to be deleted or disabled, the user will remain authenticated to your application for the duration of your Laravel application's session.</p> <p>If you would like all users in your application to be signed out automatically if SSO credentials are not available from your web server, call the <code>logoutUnauthenticatedUsers</code> method on the <code>WindowsAuthenticate</code> middleware in your <code>AuthServiceProvider::boot()</code> method:</p> <p>Important: Only enable this feature if Single-Sign-On is the only way you authenticate users. If a non-Single-Sign-On user has a session open, it will be ended automatically on their next request.</p> <pre><code>// app/Providers/AuthServiceProvider.php\n\n/**\n * Register any authentication / authorization services.\n *\n * @return void\n */\npublic function boot()\n{\n    $this-&gt;registerPolicies();\n\n    WindowsAuthenticate::logoutUnauthenticatedUsers();\n}\n</code></pre>"},{"location":"docs/laravel/v2/","title":"Overview","text":"<p>LdapRecord-Laravel is a package that provides you the ability to search your LDAP directory, perform operations, and authenticate LDAP users into your Laravel application.</p> <p>It uses the core LdapRecord package under the hood, so be sure to look at its documentation so you have an understanding of how everything works. It was created with the mindset of porting Laravel's fantastic Eloquent database ORM to an LDAP equivalent.</p> <p>If you ever encounter issues or simply need some help getting up and running, please feel free to create an issue and I would be happy to help you out.</p> <p>If you require immediate support, consider becoming a sponsor to receive issue priority so you get up and running as fast as possible.</p> <p>Let's get started!</p>"},{"location":"docs/laravel/v2/configuration/","title":"Configuration","text":"<p>Important: It's recommended to only use one approach listed in this guide below. Using both approaches to configure your LDAP connections may lead to unexpected results.</p> <p>LdapRecord-Laravel provides two ways to configure your connections:</p> <ul> <li>Using a published configuration file</li> <li>Using an environment file (.env)</li> </ul>"},{"location":"docs/laravel/v2/configuration/#using-a-published-configuration-file","title":"Using a published configuration file","text":"<p>To publish the <code>ldap.php</code> configuration file, execute the below artisan command:</p> <pre><code>php artisan vendor:publish --provider=\"LdapRecord\\Laravel\\LdapServiceProvider\"\n</code></pre> <p>The <code>ldap.php</code> file will then be created inside of your applications <code>config</code>, directory.</p> <p>Inside the configuration file, setup your LDAP connections, or paste the following in your <code>.env</code> file to get started quicky:</p> <p>Review the LDAP configuration documentation to see what each option is used for.</p> <pre><code>LDAP_LOGGING=true\nLDAP_CONNECTION=default\nLDAP_HOST=127.0.0.1\nLDAP_USERNAME=\"cn=user,dc=local,dc=com\"\nLDAP_PASSWORD=secret\nLDAP_PORT=389\nLDAP_BASE_DN=\"dc=local,dc=com\"\nLDAP_TIMEOUT=5\nLDAP_SSL=false\nLDAP_TLS=false\n</code></pre> <p>If you'd like to configure more options that are specified in the <code>ldap.php</code> file, you may create your own env variables to control those options.</p>"},{"location":"docs/laravel/v2/configuration/#using-an-environment-file-env","title":"Using an environment file (.env)","text":"<p>LDAP connections may be configured directly in your <code>.env</code> without having to publish any configuration files.</p> <p>If your application has a single connection, you can paste the below env to get started right away:</p> <pre><code>LDAP_LOGGING=true\nLDAP_CONNECTION=default\nLDAP_CONNECTIONS=default\n\nLDAP_DEFAULT_HOSTS=10.0.0.1\nLDAP_DEFAULT_USERNAME=\"cn=admin,dc=local,dc=com\"\nLDAP_DEFAULT_PASSWORD=secret\nLDAP_DEFAULT_PORT=389\nLDAP_DEFAULT_BASE_DN=\"dc=local,dc=com\"\nLDAP_DEFAULT_TIMEOUT=5\nLDAP_DEFAULT_SSL=false\nLDAP_DEFAULT_TLS=false\n</code></pre> <p>To setup multiple connections, you may use a comma-separated list of connection names using the <code>LDAP_CONNECTIONS</code> variable:</p> <pre><code>LDAP_CONNECTIONS=alpha,bravo\n</code></pre> <p>Next, set your default LDAP connection by using the <code>LDAP_CONNECTION</code> variable:</p> <pre><code>LDAP_CONNECTION=alpha\n</code></pre> <p>Then, to configure options for each connection you have specified, you must suffix them by <code>LDAP_{CONNECTION}_</code>:</p> <pre><code>LDAP_LOGGING=true\nLDAP_CONNECTION=alpha\nLDAP_CONNECTIONS=alpha,bravo\n\nLDAP_ALPHA_HOSTS=10.0.0.1,10.0.0.2\nLDAP_ALPHA_USERNAME=\"cn=admin,dc=alpha,dc=com\"\nLDAP_ALPHA_PASSWORD=secret\nLDAP_ALPHA_PORT=389\nLDAP_ALPHA_BASE_DN=\"dc=alpha,dc=com\"\nLDAP_ALPHA_TIMEOUT=5\nLDAP_ALPHA_SSL=false\nLDAP_ALPHA_TLS=false\n\nLDAP_BRAVO_HOSTS=11.0.0.1,11.0.0.2\nLDAP_BRAVO_USERNAME=\"cn=admin,dc=bravo,dc=com\"\nLDAP_BRAVO_PASSWORD=secret\nLDAP_BRAVO_PORT=389\nLDAP_BRAVO_BASE_DN=\"dc=bravo,dc=com\"\nLDAP_BRAVO_TIMEOUT=5\nLDAP_BRAVO_SSL=false\nLDAP_BRAVO_TLS=false\n</code></pre> <p>To configure PHP LDAP options for a connection using an env variable, use the configuration name pattern <code>LDAP_{CONNECTION}_OPT_{NAME}</code>.</p> <p>For example, you may configure the option <code>LDAP_OPT_X_TLS_CERTFILE</code> for a connection named <code>alpha</code> like so:</p> <pre><code>LDAP_ALPHA_OPT_X_TLS_CERTFILE=/usr/bin/etc/path\n</code></pre>"},{"location":"docs/laravel/v2/configuration/#testing-your-connection","title":"Testing your connection","text":"<p>Once you have your connection(s) configured, run a quick test to make sure they've been setup properly:</p> <pre><code>php artisan ldap:test\n</code></pre>"},{"location":"docs/laravel/v2/debugging/","title":"Debugging","text":""},{"location":"docs/laravel/v2/debugging/#connectivity","title":"Connectivity","text":"<p>LdapRecord-Laravel comes with a built-in command to test connectivity to your LDAP servers. The exception message, error code, and diagnostic message are displayed after a failure to bind to your LDAP server.</p> <p>To test your connectivity, run the following command:</p> <pre><code>php artisan ldap:test\n</code></pre> <p>Then, the following will be output:</p> <pre><code>Testing LDAP connection [default]...\n\n+------------+------------+-----------------+-------------------------------------------------------------------------------------------------------------+---------------+\n| Connection | Successful | Username        | Message                                                                                                     | Response Time |\n+------------+------------+-----------------+-------------------------------------------------------------------------------------------------------------+---------------+\n| default    | \u2718 No       | user@local.com  | ldap_bind(): Unable to bind to server: Can't contact LDAP server. Error Code: [-1] Diagnostic Message: null | 5008.72ms     |\n+------------+------------+-----------------+-------------------------------------------------------------------------------------------------------------+---------------+\n</code></pre> <p>The returned error codes and diagnostic messages can help you greatly when attempting to debug SSL and TLS connectivity issues.</p>"},{"location":"docs/laravel/v2/debugging/#tls-ssl","title":"TLS &amp; SSL","text":"<p>TLS and SSL can be very tricky to get up and running. You will most likely have to place an <code>ldap.conf</code> file onto your local / production server to indicate that you would like to either bypass TLS / SSL certificate verification, or use a valid certificate that you have retrieved from your LDAP server.</p> <p>This process is fully documented on the configuration documentation. It includes per operating system level instructions on where your <code>ldap.conf</code> file is located (or where it must be created), as well as what it must contain.</p> <p>Important: You must restart your web server after making changes to the <code>ldap.conf</code> file. In some cases, you may even have to restart your workstation or server for the changes to take effect.</p>"},{"location":"docs/laravel/v2/debugging/#directory-and-objects","title":"Directory and Objects","text":"<p>LdapRecord-Laravel comes with a built-in command to browse and navigate through your LDAP directories interactively.</p> <p>To browse your directory, use the <code>ldap:browse {connection}</code> command:</p> <p>Note: If no connection is specified, the browse command will connect to your default LDAP connection.</p> <pre><code>php artisan ldap:browse\n</code></pre>"},{"location":"docs/laravel/v2/debugging/#logging-in","title":"Logging In","text":"<p>To debug issues logging in, its recommended to first complete the following steps:</p> <ol> <li>Enabled logging via the <code>logging</code> key inside of your <code>config/ldap.php</code> file     (or by enabling it via your <code>.env</code> by using the <code>LDAP_LOGGING</code> key)</li> <li>Clear your configurations cache (if enabled) by running the <code>php artisan config:clear</code> command</li> <li>Add the <code>ListensForLdapBindFailure</code> trait onto your <code>LoginController</code></li> <li>Attempt logging in again</li> </ol> <p>After completing the above, the first thing to lookout for is whether a red error message is being displayed underneath your username / email field.</p> <p>If you do not see any error message and are immediately returned back to the login page, then you have likely changed the username field on your <code>resources/views/auth/login.blade.php</code> but have not updated it inside of your <code>LoginController</code>, or vice versa.</p> <p>For example, if you want users to login by a <code>username</code> instead of their <code>email</code>, make sure you've changed this via the <code>username</code> method, and the <code>credentials</code> method on your <code>LoginController</code></p> <pre><code>// app/Http/Controllers/Auth/LoginController.php\n\nuse Illuminate\\Http\\Request;\n\npublic function username()\n{\n    // This is the name of the HTML 'input' inside\n    // of our 'login.blade.php' view:\n    return 'username';\n}\n\nprotected function credentials(Request $request)\n{\n    // 'samaccountname' is the attribute we are using to\n    // locate users in our LDAP directory with. The\n    // value of the key must be the input name of\n    // our HTML input, as shown above:\n    return [\n        'samaccountname' =&gt; $request-&gt;get('username'),\n        'password' =&gt; $request-&gt;get('password'),\n    ];\n}\n</code></pre> <p>If you simply see an Invalid Credentials, or Can't contact LDAP server error, refer to your log files inside of your applications <code>storage/logs</code> directory to investigate further. With <code>logging</code> enabled, all LDAP searches, binds, failures and exceptions will be reported there.</p>"},{"location":"docs/laravel/v2/events/","title":"Events","text":""},{"location":"docs/laravel/v2/events/#introduction","title":"Introduction","text":"<p>LdapRecord includes a robust event dispatcher that allows you to listen for various events that occur, such as authentication and object creation / modification.</p> <p>For example, you may wish to send a notification when an LDAP object is modified. You can listen for the model <code>Saved</code> event and then send an email regarding the change.</p>"},{"location":"docs/laravel/v2/events/#creating-the-listener","title":"Creating the Listener","text":"<p>To get started, we will create an event listener in the <code>app/Ldap/Listeners</code> directory and create a new file named <code>ObjectModified.php</code>. This will contain a class that will listen for the <code>Saved</code> model event.</p> <p>You will have to create the <code>Ldap</code> and <code>Listeners</code> sub directories.</p> <pre><code>&lt;?php\n\nnamespace App\\Ldap\\Listeners;\n\nuse LdapRecord\\Models\\Events\\Saved;\nuse Illuminate\\Support\\Facades\\Mail;\n\nclass ObjectModified\n{\n    public function handle(Saved $event)\n    {\n        $objectName = $event-&gt;getModel()-&gt;getName();\n\n        // Send an email when the object has been modified.\n        Mail::raw(\"Object [$objectName] has been modified.\", function ($message) {\n            $message-&gt;from('notifier@company.com', 'LDAP Notifier');\n            $message-&gt;to('it-support@company.com');\n            $message-&gt;subject('LDAP Object Modified');\n        });\n    }\n}\n</code></pre> <p>For a list of all LdapRecord events, view the core events documentation.</p>"},{"location":"docs/laravel/v2/events/#creating-the-service-provider","title":"Creating the Service Provider","text":"<p>Next, we will create a new Laravel service provider. This is where we will register our LDAP event listeners. We will call it <code>LdapEventServiceProvider</code>. Execute the below command to generate it:</p> <pre><code>php artisan make:provider LdapEventServiceProvider\n</code></pre> <p>Add the provider to your <code>config/app.php</code> configuration file:</p> <pre><code>// config/app.php\n\nreturn [\n    // ...\n\n    'providers' =&gt; [\n        // ...\n        \\App\\Providers\\LdapEventServiceProvider::class,\n    ],\n];\n</code></pre> <p>Then, in the generated provider we will update it to the following:</p> <pre><code>&lt;?php\n\nnamespace App\\Providers;\n\nuse LdapRecord\\Container;\nuse Illuminate\\Support\\ServiceProvider;\n\nclass LdapEventServiceProvider extends ServiceProvider\n{\n    /**\n     * The LDAP event listener mappings for the application.\n     *\n     * @return array\n     */\n    protected $listen = [\n        \\LdapRecord\\Models\\Events\\Saved::class =&gt; [\n            \\App\\Ldap\\ObjectModified::class\n        ],\n    ];\n\n    /**\n     * Register the application LDAP event listeners.\n     *\n     * @return void\n     */\n    public function boot()\n    {\n        $dispatcher = Container::getEventDispatcher();\n\n        foreach ($this-&gt;listen as $event =&gt; $listeners) {\n            foreach (array_unique($listeners) as $listener) {\n                $dispatcher-&gt;listen($event, $listener);\n            }\n        }\n    }\n}\n</code></pre> <p>We've removed the <code>register</code> method in the above generated class. We won't need it here.</p> <p>As you can see above, we can add LdapRecord events to the <code>$listen</code> property as the key, and the listeners as the value. This allows you to attach mulitple listeners to the same event.</p>"},{"location":"docs/laravel/v2/extending/","title":"Extending","text":""},{"location":"docs/laravel/v2/extending/#introduction","title":"Introduction","text":"<p>Important: Extendability has been added in v2.3.0.</p> <p>LdapRecord relies on Laravel's application container for making most of the instances that control all of the major features of LdapRecord. This allows you to modify and/or adjust core methods with ease.</p> <p>Please be mindful of what you override, as certain events may not be fired and things may not work as documented, depending on your own custom implementation of features and what has been changed.</p>"},{"location":"docs/laravel/v2/extending/#authentication","title":"Authentication","text":"<p>To override the class that attempts authentication against your LDAP server, call the <code>LdapRecord::authenticateUsersUsing()</code> method, and provide a class name or closure, which extends the built-in authenticator.</p> <p>Create the authenticator:</p> <pre><code>namespace App\\Ldap;\n\nuse LdapRecord\\Models\\Model;\nuse LdapRecord\\Laravel\\LdapUserAuthenticator;\n\nclass UserAuthenticator extends LdapUserAuthenticator\n{\n    /**\n     * Attempt authenticating against the LDAP domain.\n     *\n     * @param Model  $user\n     * @param string $password\n     *\n     * @return bool\n     */\n    public function attempt(Model $user, $password)\n    {\n        // Attempt authentication...\n\n        // $user-&gt;getConnection()-&gt;auth()-&gt;attempt($user-&gt;getDn(), $password)...\n    }\n}\n</code></pre> <p>Register the binding:</p> <pre><code>// app/Providers/AppServiceProvider.php\n\nuse App\\Ldap\\UserAuthenticator;\n\nclass AppServiceProvider extends ServiceProvider\n{\n    /**\n     * Register application services.\n     *\n     * @return void\n     */\n    public function register()\n    {\n        LdapRecord::authenticateUsersUsing(UserAuthenticator::class);\n    }\n}\n</code></pre>"},{"location":"docs/laravel/v2/extending/#user-repository","title":"User Repository","text":"<p>To override the class that queries your LDAP server for users during authentication and importing, call the <code>LdapRecord::locateUsersUsing()</code> method, and provide a class name or closure, which extends the built-in user repository.</p> <p>Create the class:</p> <pre><code>namespace App\\Ldap;\n\nuse LdapRecord\\Laravel\\LdapUserRepository;\n\nclass UserRepository extends LdapUserRepository\n{\n    /**\n     * Retrieve a user by the given credentials.\n     *\n     * @param array $credentials\n     *\n     * @return \\LdapRecord\\Models\\Model|null\n     */\n    public function findByCredentials(array $credentials = [])\n    {\n        // Locate the user by their credentials...\n\n        // $this-&gt;query()-&gt;where(['...'])\n    }\n}\n</code></pre> <p>Register the binding:</p> <pre><code>// app/Providers/AppServiceProvider.php\n\nuse App\\Ldap\\UserRepository;\n\nclass AppServiceProvider extends ServiceProvider\n{\n    /**\n     * Register application services.\n     *\n     * @return void\n     */\n    public function register()\n    {\n        LdapRecord::locateUsersUsing(UserRepository::class);\n    }\n}\n</code></pre>"},{"location":"docs/laravel/v2/extending/#user-synchronizer","title":"User Synchronizer","text":"<p>To override the class that synchronizes your LDAP users during authentication and importing, call the <code>LdapRecord::synchronizeUsersUsing()</code> method, and provide a class name or closure, which extends the built-in user sychronizer.</p> <p>Create the class:</p> <pre><code>namespace App\\Ldap;\n\nuse LdapRecord\\Laravel\\Import\\UserSynchronizer;\n\nclass Synchronizer extends UserSynchronizer\n{\n    /**\n     * Synchronize the Eloquent database model with the LDAP model.\n     *\n     * @param LdapModel     $object\n     * @param EloquentModel $eloquent\n     * @param array         $data\n     *\n     * @return EloquentModel\n     */\n    public function synchronize(LdapModel $object, EloquentModel $eloquent, array $data = [])\n    {\n        // Set attributes onto the users Eloquent model...\n\n        // $eloquent-&gt;name = $object-&gt;getFirstAttribute('cn');\n    }\n}\n</code></pre> <p>Register the binding:</p> <pre><code>// app/Providers/AppServiceProvider.php\n\nuse App\\Ldap\\Synchronizer;\n\nclass AppServiceProvider extends ServiceProvider\n{\n    /**\n     * Register application services.\n     *\n     * @return void\n     */\n    public function register()\n    {\n        LdapRecord::synchronizeUsersUsing(Synchronizer::class);\n    }\n}\n</code></pre>"},{"location":"docs/laravel/v2/importing/","title":"Importing LDAP Objects","text":""},{"location":"docs/laravel/v2/importing/#introduction","title":"Introduction","text":"<p>If you are looking to import LDAP users into your application, view this guide instead.</p> <p>With LdapRecord-Laravel, you can easily import and synchronize LDAP objects into a database table using a given Eloquent model. This is useful for importing groups, memberships and more.</p>"},{"location":"docs/laravel/v2/importing/#getting-started","title":"Getting Started","text":"<p>For this example, we will be importing LDAP groups into our applications database table <code>groups</code>.</p> <p>Our groups table simply contains a <code>name</code> column, however to import LDAP objects into it, we must add two extra database columns:</p> Column Reason <code>guid</code> This is for storing your LDAP objects <code>objectguid</code>. It is needed for locating and synchronizing your LDAP object to the database. <code>domain</code> This is for storing your LDAP objects connection name. It is needed for storing your configured LDAP connection name of the object. <p>For brevity, we will not be showing the creation of the <code>groups</code> database table migration.</p>"},{"location":"docs/laravel/v2/importing/#creating-the-migration","title":"Creating the Migration","text":"<p>Generate a migration to add these columns onto our <code>groups</code> table:</p> <pre><code>php artisan make:migration add_ldap_columns_to_groups_table\n</code></pre> <p>Then, we'll add the new required columns to the migration:</p> <pre><code>class AddLdapColumnsToGroupsTable extends Migration\n{\n    /**\n     * Run the migrations.\n     */\n    public function up()\n    {\n        Schema::table('groups', function (Blueprint $table) {\n            $table-&gt;string('guid')-&gt;unique()-&gt;nullable();\n            $table-&gt;string('domain')-&gt;nullable();\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     */\n    public function down()\n    {\n        Schema::table('groups', function (Blueprint $table) {\n            $table-&gt;dropColumn(['guid', 'domain']);\n        });\n    }\n}\n</code></pre> <p>After finishing setting up the above migration, make sure you run it:</p> <pre><code>php artisan migrate\n</code></pre>"},{"location":"docs/laravel/v2/importing/#setting-up-the-eloquent-model","title":"Setting Up the Eloquent Model","text":"<p>For the importer to be able to properly interface with your Eloquent model, you must apply the following trait and interface onto your Eloquent model you are using to perform the import.</p> Type Interface <code>LdapRecord\\Laravel\\LdapImportable</code> Trait <code>LdapRecord\\Laravel\\ImportableFromLdap</code> <pre><code>// app/Group.php\n\nnamespace App;\n\nuse LdapRecord\\Laravel\\LdapImportable;\nuse LdapRecord\\Laravel\\ImportableFromLdap;\n\nclass Group extends Authenticatable implements LdapImportable\n{\n    use ImportableFromLdap;\n\n    // ...\n}\n</code></pre> <p>Your model is now ready for importing.</p>"},{"location":"docs/laravel/v2/importing/#running-the-import","title":"Running the Import","text":""},{"location":"docs/laravel/v2/importing/#defining-sync-attributes","title":"Defining Sync Attributes","text":"<p>Prior to running the import, you must define a configuration array. This configuration array must contain an array of <code>sync_attributes</code>, that reference the database column (the key) and the LDAP attribute (the value):</p> <pre><code>$config = [\n    'sync_attributes' =&gt; [\n        'name' =&gt; 'cn'\n    ],\n];\n</code></pre> <p>As with importing LDAP users, you may also use an attribute handler if you require extra logic when setting database values from the object.</p> <pre><code>$config = ['sync_attributes' =&gt; \\App\\Ldap\\AttributeHandler::class];\n</code></pre>"},{"location":"docs/laravel/v2/importing/#performing-the-import","title":"Performing the Import","text":"<p>To perform the import, you must use the <code>LdapRecord\\Laravel\\Import\\Synchronizer</code> class.</p> <p>This class accepts your Eloquent model class as the first parameter, and your configuration array into the second:</p> <p>Important: An unsaved Eloquent model will be returned after running the synchronizer. This means you must call <code>save()</code> on the resulting model.</p> <pre><code>use App\\Group as EloquentGroup;\nuse LdapRecord\\Laravel\\Import\\Synchronizer;\nuse LdapRecord\\Models\\ActiveDirectory\\Group as LdapGroup;\n\n// Create the synchronizer.\n$synchronizer = new Synchronizer(EloquentGroup::class, $config = [\n    'sync_attributes' =&gt; [\n        'name' =&gt; 'cn'\n    ],\n]);\n\n// Import each group from the directory.\nforeach (LdapGroup::get() as $group) {\n    $synchronizer-&gt;run($group)-&gt;save();\n}\n</code></pre> <p>The above can easily be placed into a scheduled job if you'd prefer the import to be ran in the background of your application.</p>"},{"location":"docs/laravel/v2/installation/","title":"Installation","text":"<p>LdapRecord-Laravel requires the following:</p> Requirements PHP &gt;= 7.3 Laravel &gt;= 5.6 PHP LDAP extension enabled An LDAP server (Active Directory, OpenLDAP, FreeIPA etc.) <p>Require LdapRecord-Laravel via composer:</p> <pre><code>composer require directorytree/ldaprecord-laravel\n</code></pre> <p>Now you're ready to start configuring your connection(s).</p>"},{"location":"docs/laravel/v2/license/","title":"License","text":"<p>LdapRecord-Laravel is open-sourced software licensed under the MIT license.</p>"},{"location":"docs/laravel/v2/lumen/","title":"LdapRecord-Lumen","text":""},{"location":"docs/laravel/v2/lumen/#introduction","title":"Introduction","text":"<p>LdapRecord-Lumen gives you the features of LdapRecord-Laravel using Lumen.</p>"},{"location":"docs/laravel/v2/lumen/#installation","title":"Installation","text":"<p>LdapRecord-Lumen requires the following:</p> Requirements PHP &gt;= 7.3 Lumen &gt;= 5.6 PHP LDAP extension enabled An LDAP server (Active Directory, OpenLDAP, FreeIPA etc.) <p>Require LdapRecord-Laravel via composer:</p> <pre><code>composer require directorytree/ldaprecord-lumen\n</code></pre> <p>Once composer completes, register the <code>LdapServiceProvider</code> inside of your <code>bootstrap/app.php</code> file:</p> <pre><code>// bootstrap/app.php\n\n$app-&gt;register(\\LdapRecord\\Lumen\\LdapServiceProvider::class);\n</code></pre>"},{"location":"docs/laravel/v2/lumen/#configuration","title":"Configuration","text":"<p>Publish the <code>ldap.php</code> configuration file via the <code>make:ldap-config</code> command:</p> <pre><code>php artisan make:ldap-config\n</code></pre> <p>A new LDAP configuration file will be created in your <code>config</code> directory.</p> <p>Then, inside of your <code>.env</code> file, paste the following to configure your LDAP connection:</p> <pre><code>LDAP_LOGGING=true\nLDAP_CONNECTION=default\nLDAP_HOST=127.0.0.1\nLDAP_USERNAME=\"cn=user,dc=local,dc=com\"\nLDAP_PASSWORD=secret\nLDAP_PORT=389\nLDAP_BASE_DN=\"dc=local,dc=com\"\nLDAP_TIMEOUT=5\nLDAP_SSL=false\nLDAP_TLS=false\n</code></pre>"},{"location":"docs/laravel/v2/lumen/#usage","title":"Usage","text":"<p>You can now begin using LdapRecord inside of your Lumen application:</p> <pre><code>// routes/web.php\n\nuse LdapRecord\\Models\\ActiveDirectory\\User;\n\n$router-&gt;get('/users', function () {\n    return User::get();\n});\n</code></pre>"},{"location":"docs/laravel/v2/testing/","title":"Testing","text":""},{"location":"docs/laravel/v2/testing/#introduction","title":"Introduction","text":"<p>Testing LDAP integration for PHP has always been quite difficult. Any type of integration that is needed, you either need a real LDAP server to test against, or you mock every response given and assume the logic you have in place will work until you do live testing with a real LDAP server. This is finicky and hard to test in an easy way.</p> <p>That's where the LdapRecord Directory Emulator comes in.</p>"},{"location":"docs/laravel/v2/testing/#directory-emulator","title":"Directory Emulator","text":"<p>The Directory Emulator dynamically replaces the LDAP connection you specify with a fake one. This fake connection sets up an SQLite database that resembles an LDAP directory and allows you to store, update, delete, move, rename, and query LDAP objects through LdapRecord.</p> <p>The SQLite database can be stored as file so you can utilize it in your application, or you can use an in-memory database for running unit tests. It's the perfect suite for testing the LDAP integration in your Laravel applications.</p> <p>When you query a model that uses the connection you have setup with the Directory Emulator, LdapRecord dynamically swaps query filters with Eloquent SQL queries, effectively allowing you to query objects you create inside of your emulated directory.</p>"},{"location":"docs/laravel/v2/testing/#getting-started","title":"Getting Started","text":"<p>To begin, let's say we have an application that lists LDAP users inside of your configured directory.</p> <p>Inside of our <code>config/ldap.php</code> file, we have defined our single <code>default</code> connection:</p> <pre><code>// config/ldap.php\n\n'default' =&gt; env('LDAP_CONNECTION', 'default'),\n\n'connections' =&gt; [\n    'default' =&gt; [\n        // ...\n        'base_dn' =&gt; 'dc=local,dc=com',\n    ],\n],\n</code></pre> <p>We have a <code>UsersController</code> that displays the LDAP users:</p> <pre><code>use App\\Ldap\\User;\n\npublic class UsersController extends Controller\n{\n    public function index()\n    {\n        $users = User::get();\n\n        return view('ldap.users', ['users' =&gt; $users]);\n    }\n}\n</code></pre> <p>And our view that simply lists all the users:</p> <pre><code>&lt;table&gt;\n  &lt;thead&gt;\n    &lt;tr&gt;\n      &lt;th&gt;Username&lt;/th&gt;\n      &lt;th&gt;Full Name&lt;/th&gt;\n    &lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    @foreach($users as $user)\n    &lt;tr&gt;\n      &lt;td&gt;{{ $user-&gt;getFirstAttribute('samaccountname') }}&lt;/td&gt;\n      &lt;td&gt;{{ $user-&gt;getFirstAttribute('cn') }}&lt;/td&gt;\n    &lt;/tr&gt;\n    @endforeach\n  &lt;/tbody&gt;\n&lt;/table&gt;\n</code></pre> <p>To test this would involve a ton of mocking - which we want to avoid. With the Directory Emulator, we can populate a fake LDAP server with objects utilizing our actual connection configuration.</p> <p>Let's create a test for the <code>UserController@index</code> method. We'll create a Laravel test running the following command:</p> <pre><code>php artisan make:test LdapUserControllerTest\n</code></pre> <p>Now that we have our test, let's attempt to test our <code>index</code> method:</p> <pre><code>use App\\Ldap\\User;\nuse LdapRecord\\Laravel\\Testing\\DirectoryEmulator;\n\nclass LdapUserControllerTest extends TestCase\n{\n    public function test_index_works()\n    {\n        DirectoryEmulator::setup('default');\n\n        $user = User::create([\n            'cn' =&gt; 'John Doe',\n            'samaccountname' =&gt; 'jdoe',\n        ]);\n\n        $this-&gt;assertEquals('cn=John Doe,dc=local,dc=com', $user-&gt;getDn());\n\n        $this-&gt;visit('/ldap/users')\n            -&gt;assertSee($user-&gt;getFirstAttribute('cn'))\n            -&gt;assertSee($user-&gt;getFirstAttribute('samaccountname'));\n    }\n}\n</code></pre> <p>As with actual LDAP objects created in a live directory using LdapRecord models, when you create LDAP objects in the emulated directory, they will use your connections configured <code>base_dn</code> to create distinguished names.</p>"},{"location":"docs/laravel/v2/testing/#using-a-sqlite-file-database","title":"Using a SQLite File Database","text":"<p>To use a SQLite file database, you must supply an array to the second parameter of the <code>DirectoryEmulator::setup</code> method and provide a file path using the <code>database</code> key where you would like the SQLite file to be stored:</p> <p>If the file does not exist already, it will be created for you automatically.</p> <pre><code>$file = storage_path('ldap_test_database.sqlite');\n\nDirectoryEmulator::setup('default', ['database' =&gt; $file]);\n</code></pre>"},{"location":"docs/laravel/v2/testing/#emulated-queries","title":"Emulated Queries","text":"<p>The Directory Emulator also emulates LDAP queries. However, there are limitations. It currently does not support the following features:</p> <ul> <li><code>raw</code> filters</li> <li><code>anr</code> (Ambiguous Name Resolution) filters</li> <li>Virtual attributes (such as <code>memberof</code>, <code>entryUUID</code> and more)</li> </ul> <p>Using the emulator, you can create a diverse LDAP object tree in your unit tests and ensure your application is querying the proper objects.</p> <p>The examples below use LdapRecord models, but you may also use a raw LdapRecord <code>Connection</code>.</p> <p>Let's update our example controller to retrieve users inside of a specific OU, and a company name:</p> <pre><code>public class UsersController extends Controller\n{\n    public function index()\n    {\n        $ou = OrganizationalUnit::find('ou=Accounting,dc=local,dc=com');\n\n        $users = User::in($ou)-&gt;where('company', '=', 'Acme')-&gt;get();\n\n        return view('ldap.users', ['users' =&gt; $users]);\n    }\n}\n</code></pre> <p>Now we can update our test by creating an Organizational Unit and then creating a user inside of that OU and assert that we only see the proper user:</p> <pre><code>public function test_index_works()\n{\n    DirectoryEmulator::setup('default');\n\n    $user = User::create([\n        'cn' =&gt; 'John Doe',\n        'samaccountname' =&gt; 'johndoe',\n    ]);\n\n    $ou = OrganizationalUnit::create([\n        'ou' =&gt; 'Accounting',\n    ]);\n\n    $accountant = (new User)-&gt;inside($ou)-&gt;save([\n        'cn' =&gt; 'Jane Doe',\n        'samaccountname' =&gt; 'janedoe',\n    ]);\n\n    $this-&gt;visit('/ldap/users')\n        -&gt;assertSee($accountant-&gt;getFirstAttribute('cn'))\n        -&gt;assertSee($accountant-&gt;getFirstAttribute('samaccountname'))\n        -&gt;assertDontSee($user-&gt;getFirstAttribute('cn'))\n        -&gt;assertDontSee($user-&gt;getFirstAttribute('samaccountname'));\n}\n</code></pre> <p>As you can see, this is extremely effective for testing your LDAP query integrations.</p>"},{"location":"docs/laravel/v2/testing/#working-with-relationships","title":"Working with Relationships","text":""},{"location":"docs/laravel/v2/testing/#has-one","title":"Has One","text":"<p>A <code>hasOne</code> relationship is easy to test. In this example, we will set the <code>manager</code> of another user:</p> <pre><code>$user = User::create(['cn' =&gt; 'Jane']);\n\n$manager = User::create(['cn' =&gt; 'John']);\n\n$user-&gt;manager()-&gt;attach($manager);\n</code></pre> <p>Then, you can retrieve the users manager:</p> <pre><code>$manager = $user-&gt;manager()-&gt;first();\n</code></pre>"},{"location":"docs/laravel/v2/testing/#has-many","title":"Has Many","text":"<p>Since some attributes are virtual in LDAP (such as the the <code>memberof</code> attribute on User objects in Active Directory), you will have to populate some attributes manually to mimic these virtual attributes. Let's walk through an example.</p> <p>In our application, we want to test that a user is a member of a particular group.</p> <p>First, we will create our group and user and add the user to the group:</p> <pre><code>$user = User::create(['cn' =&gt; 'John']);\n\n$group = Group::create(['cn' =&gt; 'Accounting']);\n\n$user-&gt;groups()-&gt;attach($group);\n</code></pre> <p>Now, if we attempt to retrieve the <code>$group-&gt;members()</code> relationship, we won't receive any results, but we will when using the <code>$user-&gt;groups()</code> relationship:</p> <pre><code>// Empty collection returned!\n$users = $group-&gt;members()-&gt;get();\n\n// A collection containing 'Accounting' group returned.\n$groups = $user-&gt;groups()-&gt;get();\n</code></pre> <p>The <code>$user-&gt;groups()</code> relationship works because it queries for groups that contain a <code>member</code> attribute equal to the users distinguished name. This <code>member</code> attribute is set on the <code>$group</code> instance that you pass into the <code>attach()</code> method.</p> <p>The <code>$group-&gt;members()</code> relationship does not work because it queries for objects that contain a <code>memberof</code> attribute to locate objects that are members. The <code>memberof</code> attribute is virtual, so we must populate it manually to get our relationships working on both directions:</p> <pre><code>$group = Group::create(['cn' =&gt; 'Accounting']);\n\n$user = User::create([\n    'cn' =&gt; 'John',\n    'memberof' =&gt; [$group-&gt;getDn()],\n]);\n\n$user-&gt;groups()-&gt;attach($group);\n\n// Returns the user 'John'.\n$users = $group-&gt;members()-&gt;first();\n\n// Returns 'Accounting' group.\n$groups = $user-&gt;groups()-&gt;first();\n</code></pre>"},{"location":"docs/laravel/v2/testing/#has-many-in","title":"Has Many In","text":"<p>Similarly with the <code>hasMany</code> relationship, when using a <code>hasManyIn</code> relationship, you must pre-populate a users virtual attribute for queries to properly locate members of a group.</p>"},{"location":"docs/laravel/v2/upgrading/","title":"Upgrading to Version 2","text":""},{"location":"docs/laravel/v2/upgrading/#ldaprecord-v2-core","title":"LdapRecord v2 Core","text":"<p>The core LdapRecord repository has been updated to version 2.</p> <p>Please visit the upgrade guide to see any changes in the core that may have an impact on your application.</p>"},{"location":"docs/laravel/v2/upgrading/#authentication-events","title":"Authentication Events","text":"<p>Authentication events have been moved into a new namespace with a new name, and modified properties.</p> <p>This action was taken to unify the event structure accross all authentication events.</p> <p>Important: Each event class listed below has its parent namespace <code>LdapRecord\\Laravel</code> omitted for brevity.</p> v1 v2 <code>Events\\Authenticating</code> <code>Events\\Auth\\Binding</code> <code>Events\\Authenticated</code> <code>Events\\Auth\\Bound</code> <code>Events\\AuthenticationFailed</code> <code>Events\\Auth\\BindFailed</code> <code>Events\\AuthenticationRejected</code> <code>Events\\Auth\\Rejected</code> <code>Events\\AuthenticatedWithWindows</code> <code>Events\\Auth\\CompletedWithWindows</code> <code>Events\\AuthenticatedModelTrashed</code> <code>Events\\Auth\\EloquentUserTrashed</code> <code>Events\\DiscoveredWithCredentials</code> <code>Events\\Auth\\DiscoveredWithCredentials</code>"},{"location":"docs/laravel/v2/upgrading/#import-events","title":"Import Events","text":"<p>Import events have been moved into a new namespace with a new name, and modified properties.</p> <p>Important: Each event class listed below has its parent namespace <code>LdapRecord\\Laravel</code> omitted for brevity.</p> v1 v2 <code>Events\\Imported</code> <code>Events\\Import\\Imported</code> <code>Events\\Importing</code> <code>Events\\Import\\Importing</code> <code>Events\\Synchronized</code> <code>Events\\Import\\Synchronized</code> <code>Events\\Synchronizing</code> <code>Events\\Import\\Synchronizing</code> <code>Events\\DeletedMissing</code> <code>Events\\Import\\DeletedMissing</code>"},{"location":"docs/laravel/v2/upgrading/#attribute-hydrator-changes","title":"Attribute Hydrator Changes","text":"<p>Attribute Hydrator classes have been moved into a new namespace.</p> <p>They have maintained the same API as v1.</p> <p>Important: Each event class listed below has its parent namespace <code>LdapRecord\\Laravel</code> omitted for brevity.</p> v1 v2 <code>EloquentHydrator</code> <code>Import\\EloquentHydrator</code> <code>EloquentUserHydrator</code> <code>Import\\EloquentUserHydrator</code> <code>Hydrators\\Hydrator</code> <code>Import\\Hydrators\\Hydrator</code> <code>Hydrators\\GuidHydrator</code> <code>Import\\Hydrators\\GuidHydrator</code> <code>Hydrators\\DomainHydrator</code> <code>Import\\Hydrators\\DomainHydrator</code> <code>Hydrators\\PasswordHydrator</code> <code>Import\\Hydrators\\PasswordHydrator</code> <code>Hydrators\\AttributeHydrator</code> <code>Import\\Hydrators\\AttributeHydrator</code>"},{"location":"docs/laravel/v2/upgrading/#ldapimporter-changes","title":"LdapImporter Changes","text":"<p>The <code>LdapRecord\\Laravel\\LdapImporter</code> has been moved and renamed to <code>LdapRecord\\Laravel\\Import\\Synchronizer</code>.</p> <p>It maintains the same API as v1, with some new public methods for convenience.</p>"},{"location":"docs/laravel/v2/upgrading/#ldapuserimporter-changes","title":"LdapUserImporter Changes","text":"<p>The <code>LdapRecord\\Laravel\\LdapUserImporter</code> has been moved and renamed to <code>LdapRecord\\Laravel\\Import\\UserSynchronizer</code>.</p> <p>It maintains the same API as v1.</p>"},{"location":"docs/laravel/v2/upgrading/#directory-emulator","title":"Directory Emulator","text":"<p>When running application tests using the <code>DirectoryEmulator</code> your must now call <code>DirectoryEmulator::tearDown()</code> in PHPUnit's <code>tearDown()</code> method:</p> <pre><code>protected function tearDown(): void\n{\n    DirectoryEmulator::teardown();\n\n    parent::tearDown();\n}\n</code></pre>"},{"location":"docs/laravel/v2/usage/","title":"Usage","text":""},{"location":"docs/laravel/v2/usage/#models","title":"Models","text":"<p>This usage documentation is intentionally kept short and sweet to prevent duplication. Be sure to review the core LdapRecord documentation as it explains all of LdapRecord's features in-depth.</p> <p>Once you've configured your connections in your <code>config/ldap.php</code> file, you're ready to start running queries and operations on your LDAP server.</p> <p>If you're connecting to an Active Directory or OpenLDAP server, you may utilize the built-in models to get up and running right away.</p> <p>If you would like to create your own models, you can generate one via the <code>make:ldap-model</code> command:</p> <pre><code>php artisan make:ldap-model User\n</code></pre> <p>This will create a new LdapRecord model inside of your application in the <code>app/Ldap</code> folder.</p> <p>If the <code>Ldap</code> folder does not exist, it will be created automatically.</p> <p>By default, the generated model will not have any <code>$objectClasses</code> set. LdapRecord requires this attribute to be set for objects to be created properly in your directory.</p> <p>If no <code>$objectClasses</code> are set, queries will not be scoped to the object you are querying and you will have to set the models <code>$objectClasses</code> manually before creating new objects.</p> <pre><code>namespace App\\Ldap;\n\nuse LdapRecord\\Models\\Model;\n\nclass User extends Model\n{\n    public static $objectClasses = [\n        'top',\n        'person',\n        'organizationalperson',\n        'user',\n    ];\n}\n</code></pre> <p>You may want to extend from the <code>LdapRecord\\Models\\ActiveDirectory\\Entry</code> class to utilize some helper methods that are limited to the use of Active Directory.  This can save you time from having to implement functionality manually.</p>"},{"location":"docs/laravel/v2/usage/#searching","title":"Searching","text":"<p>To begin querying your model, you can statically call query methods off of the model:</p> <pre><code>$users = User::where('company', '=', 'Acme')-&gt;get();\n</code></pre> <p>When using the above example model for searching your LDAP directory, the following filter will be used:</p> <pre><code>(&amp;(objectclass=top)(objectclass=person)(objectclass=organizationalperson)(objectclass=user)(company=Acme))\n</code></pre>"},{"location":"docs/laravel/v2/usage/#creating-updating","title":"Creating / Updating","text":"<p>To create a new object in your directory, call the <code>create</code> method:</p> <pre><code>$user = User::create([\n    'company'   =&gt; 'Acme',\n    'givenname' =&gt; 'Steve',\n    'sn'        =&gt; 'Bauman',\n    'cn'        =&gt; 'Steve Bauman',\n]);\n</code></pre> <p>When creating the above example model, the <code>objectclass</code> attribute will automatically be sent with all other attributes you have set for the user creation. This effectively creates the proper object in your directory.</p> <p>You may also create a new model instance, set its attributes, and call the <code>save</code> method:</p> <pre><code>$user = new User;\n\n$user-&gt;cn = 'Steve Bauman';\n$user-&gt;givenname = 'Steve';\n$user-&gt;sn = 'Bauman';\n$user-&gt;company = 'Acme';\n\n$user-&gt;save();\n</code></pre> <p>Similarly, to update an object, modify a model that was returned from a query and call the <code>save</code> method:</p> <pre><code>$user = User::find('cn=Steve Bauman,dc=local,dc=com');\n\n$user-&gt;company = 'Acme';\n\n$user-&gt;save();\n</code></pre> <p>If you need help understanding user creation and management, take a look at the Active Directory user management tutorial.</p>"},{"location":"docs/laravel/v2/usage/#scopes","title":"Scopes","text":"<p>Sometimes you may need to utilize several of the same query filters around your application. Model scopes are a perfect for this, as you can extract these filters into its own class and apply it to a model query.</p> <p>Be sure to take a peek at the query scopes documentation for a more in-depth look.</p> <p>To create a new model scope, call the command:</p> <pre><code>php artisan make:ldap-scope OnlyAccountants\n</code></pre> <p>This will create a new model scope in your applications <code>app\\Ldap\\Scopes</code> directory.</p> <pre><code>namespace App\\Ldap\\Scopes;\n\nuse LdapRecord\\Models\\Model;\nuse LdapRecord\\Models\\Scope;\nuse LdapRecord\\Query\\Model\\Builder;\n\nclass OnlyAccountants implements Scope\n{\n    public function apply(Builder $query, Model $model)\n    {\n        $query-&gt;where('title', '=', 'Accountant');\n    }\n}\n</code></pre> <p>Now, you can either apply this scope globally so the query filter is applied on every query of your model, or apply it when you need it. Let's walk through both.</p> <p>To apply your scope globally, override your models protected static <code>boot</code> method, and then call the <code>addGlobalScope</code> method:</p> <pre><code>namespace App\\Ldap;\n\nuse LdapRecord\\Models\\Model;\nuse App\\Ldap\\Scopes\\OnlyAccountants;\n\nclass User extends Model\n{\n    // ...\n\n    protected static function boot()\n    {\n        parent::boot();\n\n        static::addGlobalScope(new OnlyAccountants);\n    }\n}\n</code></pre> <p>You must pass a new instance of your scope into the <code>addGlobalScope</code> method, not the class name.</p> <p>Any search queries that are performed on your <code>User</code> model will now be properly scoped.</p> <p>If you wish to apply a scope in certain situations, you may use the <code>withGlobalScope</code> method:</p> <pre><code>$accountants = User::withGlobalScope('accountants', new OnlyAccountants)-&gt;get();\n</code></pre> <p>As you may have noticed above, you must provide a named string for the scope you are passing in.</p>"},{"location":"docs/laravel/v2/usage/#basic-authentication","title":"Basic Authentication","text":"<p>Sometimes you simply want to know if a users LDAP credentials are valid. To do this, you must retrieve your LDAP connection from the LdapRecord connection container.</p> <p>To do so, you must call the <code>getConnection</code> method on the <code>Container</code> and pass in the name of your connection that appears in your <code>config/ldap.php</code> file:</p> <pre><code>use LdapRecord\\Container;\n\n$connection = Container::getConnection('default');\n</code></pre> <p>To retrieve your <code>default</code> connection that you have set in your <code>ldap.php</code> configuration file, call the <code>getDefaultConnection</code> method:</p> <pre><code>use LdapRecord\\Container;\n\n$connection = Container::getDefaultConnection();\n</code></pre> <p>Once you have your connection, call the <code>auth()-&gt;attempt</code> method with your users Distinguished Name and their password:</p> <pre><code>use LdapRecord\\Container;\n\n$connection = Container::getConnection('default');\n\nif ($connection-&gt;auth()-&gt;attempt('cn=user,dc=local,dc=com', 'SuperSecret')) {\n    // Credentials are valid!\n}\n</code></pre> <p>If you don't want your user to have to enter in their Distinguished Name, locate the user in your directory first who is attempting to authenticate, and then pass in their Distinguished Name:</p> <pre><code>use LdapRecord\\Container;\nuse LdapRecord\\Models\\ActiveDirectory\\User;\n\n$connection = Container::getConnection('default');\n\n$user = User::findByOrFail('samaccountname', 'sbauman');\n\nif ($connection-&gt;auth()-&gt;attempt($user-&gt;getDn(), 'SuperSecret')) {\n    // Credentials are valid!\n}\n</code></pre> <p>If you need to determine why the users authentication is failing (for example, if their password has expired), you can retrieve the last message that was generated from your LDAP server. This message will usually contain a code that you can use to determine the cause of failure:</p> <pre><code>if ($connection-&gt;auth()-&gt;attempt($user-&gt;getDn(), 'SuperSecret')) {\n    // Credentials are valid!\n} else {\n    $message = $connection-&gt;getLdapConnection()-&gt;getDiagnosticMessage();\n\n    if (strpos($message, '532') !== false) {\n        return \"Your password has expired.\";\n    }\n}\n</code></pre>"},{"location":"docs/laravel/v2/versioning/","title":"Versioning","text":"<p>LdapRecord-Laravel is versioned under the Semantic Versioning guidelines as much as possible.</p> <p>Major versions of LdapRecord-Laravel will always be kept in sync with the core LdapRecord repository. This means when LdapRecord-Laravel hits <code>v2.0.0</code>, LdapRecord <code>^v2.0</code> will be used.</p> <p>Releases will be numbered with the following format:</p> <p><code>&lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;</code></p> <p>And constructed with the following guidelines:</p> <ul> <li>Breaking backward compatibility bumps the major and resets the minor and patch.</li> <li>New additions without breaking backward compatibility bumps the minor and resets the patch.</li> <li>Bug fixes and misc changes bumps the patch.</li> </ul> <p>Minor versions are not maintained individually, and you're encouraged to upgrade through to the next minor version.</p> <p>Major versions are maintained individually through separate branches.</p>"},{"location":"docs/laravel/v2/auth/","title":"Authentication Overview","text":"<p>LdapRecord-Laravel comes with two ways to authenticate LDAP users into your application. Read each use case below and select one that best suits your needs.</p>"},{"location":"docs/laravel/v2/auth/#plain-authentication","title":"Plain Authentication","text":"<ul> <li>You don't need to attach any data to your LDAP users.</li> <li>You're okay with your application being inaccessible if your LDAP server is down.</li> <li>Your application critically depends on LDAP user roles and status (i.e. user enablement/disablement, group memberships).</li> </ul> <p>Plain Authentication Overview</p>"},{"location":"docs/laravel/v2/auth/#synchronized-database-authentication","title":"Synchronized Database Authentication","text":"<ul> <li>You need to attach data to your LDAP users.</li> <li>Your application may need to authenticate other registered non-LDAP users.</li> <li>Your application must be accessible if your LDAP server is unavailable or down.</li> </ul> <p>Synchronized Database Authentication Overview</p>"},{"location":"docs/laravel/v2/auth/#configure-without-credentials","title":"Configure Without Credentials","text":"<p>To configure LdapRecord-Laravel authentication without credentails your LDAP server much have anonymous binding enabled. When binding anonymously, your permissions must be open enough so that users who need to sign into your Laravel application can be read from your ActiveDirectory server, along with the attribute you are using for authentication.</p> <p>To bind anonymously to your LDAP server, set your <code>username</code> and <code>password</code> to <code>null</code> inside of your configuration.</p> <p>Important: A base DN must still be configured for searches to return results.</p> <p>If anonymous binding is disabled, you must configure a <code>username</code> and <code>password</code> to connect to your LDAP server.</p>"},{"location":"docs/laravel/v2/auth/#why-does-ldaprecord-require-credentials","title":"Why Does LdapRecord Require Credentials?","text":"<p>Think of it like a database connection to your application. LdapRecord needs credentials to search your directory for the user who is attempting to sign into your Laravel application by the attribute of your choosing. Without this access, it cannot search. You would have to have users enter in their full distinguished name to be able to sign in. Once signed in, LDAP access would be lost as soon as the PHP request ends, leaving most of the features in LdapRecord-Laravel in a non-working state.</p>"},{"location":"docs/laravel/v2/auth/configuration/","title":"Authentication Configuration","text":""},{"location":"docs/laravel/v2/auth/configuration/#introduction","title":"Introduction","text":"<p>To configure LDAP authentication, you must define or update a <code>provider</code> inside of your <code>config/auth.php</code> file.</p> <p>Let's walk through configuring both LDAP authentication mechanisms.</p>"},{"location":"docs/laravel/v2/auth/configuration/#plain-authentication","title":"Plain Authentication","text":"<p>To create a plain LDAP authentication provider, navigate to the <code>providers</code> array, and paste the following <code>ldap</code> provider:</p> <pre><code>// config/auth.php\n\n'providers' =&gt; [\n    // ...\n\n    'ldap' =&gt; [\n        'driver' =&gt; 'ldap',\n        'model' =&gt; LdapRecord\\Models\\ActiveDirectory\\User::class,\n        'rules' =&gt; [],\n    ],\n],\n</code></pre> <p>If your application requires more than one LDAP connection, you must create a new provider for each connection.</p> <p>This new provider must have its own unique <code>model</code> class set which must use your alternate configured connection using the <code>$connection</code> property.</p> <p>In the scenario of having multiple LDAP connections, it may be helpful to namespace the LDAP models you create with the desired connection. For example:</p> <pre><code>App\\Ldap\\DomainAlpha\\User\n</code></pre> <p>This will allow you to segregate scopes, rules and other classes to their relating connection.</p>"},{"location":"docs/laravel/v2/auth/configuration/#driver","title":"Driver","text":"<p>The <code>driver</code> option must be <code>ldap</code> as this is what indicates to Laravel the proper authentication driver to use.</p>"},{"location":"docs/laravel/v2/auth/configuration/#model","title":"Model","text":"<p>The <code>model</code> option must be the class name of your LdapRecord model. This model will be used for fetching users from your directory.</p>"},{"location":"docs/laravel/v2/auth/configuration/#rules","title":"Rules","text":"<p>The <code>rules</code> option must be an array of class names of authentication rules.</p>"},{"location":"docs/laravel/v2/auth/configuration/#synchronized-database-authentication","title":"Synchronized Database Authentication","text":"<p>To create a synchronized database LDAP authentication provider, navigate to the <code>providers</code> array, and paste the following <code>ldap</code> provider:</p> <p>If your application requires two or more LDAP connections, you must create a new provider for each connection.</p> <pre><code>// config/auth.php\n\n'providers' =&gt; [\n    // ...\n\n    'ldap' =&gt; [\n        'driver' =&gt; 'ldap',\n        'model' =&gt; LdapRecord\\Models\\ActiveDirectory\\User::class,\n        'rules' =&gt; [],\n        'database' =&gt; [\n            'model' =&gt; App\\Models\\User::class,\n            'sync_passwords' =&gt; false,\n            'sync_attributes' =&gt; [\n                'name' =&gt; 'cn',\n                'email' =&gt; 'mail',\n            ],\n        ],\n    ],\n],\n</code></pre> <p>As you can see above, a <code>database</code> array is used to configure the association between your LDAP user and your Eloquent user.</p>"},{"location":"docs/laravel/v2/auth/configuration/#database-model","title":"Database Model","text":"<p>The <code>database =&gt; model</code> key is the class name of the Eloquent model that will be used for creating and retrieving LDAP users from your applications database.</p> <p>Be sure to add the required trait and interface to this model as shown in the installation guide.</p>"},{"location":"docs/laravel/v2/auth/configuration/#password-column","title":"Password Column","text":"<p>If your application uses a different password column than <code>password</code>, then you can configure it using the <code>password_column</code> key inside of your providers configuration:</p> <pre><code>'providers' =&gt; [\n    // ...\n\n    'ldap' =&gt; [\n        // ...\n        'database' =&gt; [\n            // ...\n            'password_column' =&gt; 'my_password_column',\n        ],\n    ],\n],\n</code></pre> <p>You can also set the value to <code>false</code> if your database table does not have any password column at all:</p> <pre><code>'providers' =&gt; [\n    // ...\n\n    'ldap' =&gt; [\n        // ...\n        'database' =&gt; [\n            // ...\n            'password_column' =&gt; false,\n        ],\n    ],\n],\n</code></pre>"},{"location":"docs/laravel/v2/auth/configuration/#sync-passwords","title":"Sync Passwords","text":"<p>The <code>database =&gt; sync_passwords</code> option enables password synchronization. Password synchronization captures and hashes the users password upon login if they pass LDAP authentication. This helps in situations where you may want to provide a \"back up\" option in case your LDAP server is unreachable, as well as a way of determining if a users password is valid without having to call to your LDAP server and validate it for you.</p> <p>If you do not define the <code>sync_passwords</code> key or have it set <code>false</code>, a user is always applied a random 16 character hashed password. This hashed password is only set once upon initial import or login so no needless updates are performed on user records.</p>"},{"location":"docs/laravel/v2/auth/configuration/#sync-attributes","title":"Sync Attributes","text":"<p>The <code>database =&gt; sync_attributes</code> array defines a set of key-value pairs:</p> <ul> <li>The key of each array item is the column of your <code>users</code> database table</li> <li>The value is the name of the users LDAP attribute to set the database value to</li> </ul> <p>You do not need to add your users <code>guid</code> or <code>domain</code> database columns. These are done automatically for you.</p> <p>For further control on sync attributes, see the below attribute handler feature.</p>"},{"location":"docs/laravel/v2/auth/configuration/#sync-existing-records","title":"Sync Existing Records","text":"<p>The <code>database =&gt; sync_existing</code> array defines a set of key-value pairs:</p> <ul> <li>The key of each array item is the column of your <code>users</code> database table to query</li> <li>The value is the name of the users LDAP attribute to query inside of your database for</li> </ul> <p>If the LDAP attribute returns <code>null</code> for the given value, the value string will be used in the query instead. This is helpful to be able to use raw strings to scope your query by.</p> <p>Let's walk through an example.</p> <p>In our application, we have existing users inside of our Laravel applications database:</p> id name email password guid domain 1 Steve Bauman sbauman@local.com ... <code>null</code> <code>null</code> 2 John Doe jdoe@local.com ... <code>null</code> <code>null</code> <p>As you can see above, these users have <code>null</code> values for their <code>guid</code> and <code>domain</code> columns.</p> <p>If you do not define a <code>sync_existing</code> array, and a user logs in with <code>sbauman@local.com</code>, you will receive a SQL exception. This is because LdapRecord was unable to locate a local database user using the users GUID. If this occurs, LdapRecord attempts to insert a new user with the same email address.</p> <p>To solve this issue, we will insert the following <code>sync_existing</code> array:</p> <pre><code>'providers' =&gt; [\n    // ...\n\n    'ldap' =&gt; [\n        // ...\n        'database' =&gt; [\n            // ...\n            'sync_existing' =&gt; [\n                'email' =&gt; 'mail',\n            ],\n        ],\n    ],\n],\n</code></pre> <p>Now when <code>sbauman@local.com</code> attempts to log in, if the user cannot be located by their GUID, they will instead be located by their email address. Their GUID, domain, and sync attributes you define will then synchronize.</p>"},{"location":"docs/laravel/v2/auth/configuration/#all-available-options-example","title":"All Available Options Example","text":"<p>Here is a synchronized database provider fully configured with all available options set:</p> <pre><code>// config/auth.php\n\n'providers' =&gt; [\n    // ...\n\n    'ldap' =&gt; [\n        'driver' =&gt; 'ldap',\n        'model' =&gt; LdapRecord\\Models\\ActiveDirectory\\User::class,\n        'rules' =&gt; [],\n        'database' =&gt; [\n            'model' =&gt; App\\Models\\User::class,\n            'sync_passwords' =&gt; true,\n            'sync_attributes' =&gt; [\n                'name' =&gt; 'cn',\n                'email' =&gt; 'mail',\n            ],\n            'sync_existing' =&gt; [\n                'email' =&gt; 'mail',\n            ],\n            'password_column' =&gt; 'password',\n        ],\n    ],\n],\n</code></pre>"},{"location":"docs/laravel/v2/auth/configuration/#attribute-handlers","title":"Attribute Handlers","text":"<p>If you require logic for synchronizing attributes when users sign into your application or are being imported, you can create an attribute handler class responsible for setting / synchronizing your database models attributes from their LDAP model.</p> <p>This class you define must have a <code>handle</code> method. This method must accept the LDAP model you have configured as the first parameter and your Eloquent database model as the second.</p> <p>For the example below, we will create a handler named <code>AttributeHandler.php</code> inside of your <code>app/Ldap</code> folder:</p> <p>You do not need to call <code>save()</code> on your Eloquent database model. This is called for you after attribute synchronization.</p> <pre><code>&lt;?php\n\nnamespace App\\Ldap;\n\nuse App\\Models\\User as DatabaseUser;\nuse App\\Ldap\\User as LdapUser;\n\nclass AttributeHandler\n{\n    public function handle(LdapUser $ldap, DatabaseUser $database)\n    {\n        $database-&gt;name = $ldap-&gt;getFirstAttribute('cn');\n        $database-&gt;email = $ldap-&gt;getFirstAttribute('mail');\n    }\n}\n</code></pre> <p>Attribute handlers are created using Laravel's <code>app()</code> helper, so you may type-hint any dependencies you require in your handlers constructor to be made available during synchronization.</p> <p>Then inside of your <code>config/auth.php</code> file for your provider, set the attribute handler class as the <code>sync_attributes</code> value:</p> <pre><code>'providers' =&gt; [\n    // ...\n\n    'ldap' =&gt; [\n        // ...\n        'database' =&gt; [\n            // ...\n            'sync_attributes' =&gt; \\App\\Ldap\\LdapAttributeHandler::class,\n        ],\n    ],\n],\n</code></pre> <p>You may also add multiple if you'd prefer, or combine them with <code>key =&gt; value</code> pairs:</p> <pre><code>// ...\n'database' =&gt; [\n    // ...\n    'sync_attributes' =&gt; [\n        'name' =&gt; 'cn',\n        'email' =&gt; 'mail',\n        \\App\\Ldap\\MyFirstAttributeHandler::class,\n        \\App\\Ldap\\MySecondAttributeHandler::class,\n    ],\n],\n</code></pre>"},{"location":"docs/laravel/v2/auth/multi-domain/","title":"Multi-Domain Authentication","text":""},{"location":"docs/laravel/v2/auth/multi-domain/#introduction","title":"Introduction","text":"<p>LdapRecord-Laravel allows you to authenticate users from as many LDAP directories as you'd like.</p> <p>This useful when you have separate domains that are not joined in a trust.</p>"},{"location":"docs/laravel/v2/auth/multi-domain/#configuration","title":"Configuration","text":"<p>To begin, you must create two separate LdapRecord models for each of your domains.</p> <p>Having two separate models allows you to configure their connections independently.</p>"},{"location":"docs/laravel/v2/auth/multi-domain/#configuring-the-ldap-connections","title":"Configuring the LDAP Connections","text":"<p>For this guide, we will have two example domains named <code>Alpha</code> and <code>Bravo</code>. We first need to set up these domain connections in our <code>ldap.php</code> configuration file:</p> <pre><code>// config/ldap.php\n\n// ...\n\n'connections' =&gt; [\n    'alpha' =&gt; [\n        // ...\n    ],\n\n    'bravo' =&gt; [\n        // ...\n    ],\n],\n</code></pre> <p>Remember to test your connections using <code>php artisan ldap:test</code> to ensure you are able to connect to each of your LDAP servers.</p> <p>Now we have our connections configured, you must create a <code>User</code> model for each one.</p> <p>Let's go ahead and create them by running the below commands:</p> <pre><code>php artisan make:ldap-model Alpha\\User\n</code></pre> <pre><code>php artisan make:ldap-model Bravo\\User\n</code></pre> <p>The <code>Alpha</code> and <code>Bravo</code> sub-directories will be created for you automatically.</p> <p>Then, we must edit their connections to reflect the connection name in the <code>config/ldap.php</code> file:</p> <pre><code>// app/Ldap/Alpha/User.php\n\nclass User extends Model\n{\n    protected $connection = 'alpha';\n\n    // ...\n}\n</code></pre> <pre><code>// app/Ldap/Bravo/User.php\n\nclass User extends Model\n{\n    protected $connection = 'bravo';\n\n    // ...\n}\n</code></pre> <p>You may want these models to extend the built-in models, as they include functionality that you do not need to build yourself. It's completely up to you.</p>"},{"location":"docs/laravel/v2/auth/multi-domain/#configuring-the-authentication-guards","title":"Configuring the Authentication Guards","text":"<p>For each of our LDAP connections, we will setup new authentication providers, as well as their own guard inside of our <code>config/auth.php</code> file:</p> <pre><code>// config/auth.php\n\n'guards' =&gt; [\n    'alpha' =&gt; [\n        'driver' =&gt; 'session',\n        'provider' =&gt; 'alpha',\n    ],\n\n    'bravo' =&gt; [\n        'driver' =&gt; 'session',\n        'provider' =&gt; 'bravo',\n    ],\n],\n\n'providers' =&gt; [\n    // ...\n\n    'alpha' =&gt; [\n        // ...\n        'model' =&gt; App\\Ldap\\Alpha\\User::class,\n    ],\n\n    'bravo' =&gt; [\n        // ...\n        'model' =&gt; App\\Ldap\\Bravo\\User::class,\n    ],\n],\n</code></pre>"},{"location":"docs/laravel/v2/auth/multi-domain/#authentication-approaches","title":"Authentication Approaches","text":"<p>Due to each domain requiring it's own <code>guard</code> that we've configured in our <code>config/auth.php</code> file, we need to be able to determine which domain the user who is attempting to login in is from, so we can tell Laravel which guard to use for authenticating the user.</p> <p>Let's walk through two examples of how we could determine their domain:</p> Example Description Domain Selection Using a <code>&lt;select&gt;</code> dropdown Email Address Suffix Using the users email address suffx / hostname (eg. <code>@domain.com</code>)"},{"location":"docs/laravel/v2/auth/multi-domain/#domain-selection","title":"Domain Selection","text":"<p>In this example, we will add an HTML <code>&lt;select&gt;</code> input containing an <code>&lt;option&gt;</code> for each domain we want to allow users to login to. This allows the user to select the domain from the dropdown, enter their credentials, and then attempt signing in.</p> <p>First, we will open up our <code>login.blade.php</code> file, and add the select option:</p> <pre><code>&lt;!-- resources/views/auth/login.blade.php --&gt;\n\n&lt;form method=\"POST\" action=\"{{ route('login') }}\"&gt;\n    @csrf\n\n    &lt;div class=\"form-group row\"&gt;\n        &lt;select name=\"domain\" class=\"form-control\"&gt;\n            @foreach(['alpha' =&gt; 'Alpha', 'bravo' =&gt; 'Bravo'] as $guard =&gt; $name)\n                &lt;option value=\"{{ $guard }}\" {{ old('domain') == $guard ? 'selected' : '' }}&gt;{{ $name }}&lt;/option&gt;\n            @endforeach\n        &lt;/select&gt;\n    &lt;/div&gt;\n\n    &lt;!-- ... --&gt;\n&lt;/form&gt;\n</code></pre> <p>Then we must update our authentication logic to use the guard the user has selected during login:</p> <pre><code>$credentials = [\n    'mail' =&gt; $request-&gt;email,\n    'password' =&gt; $request-&gt;password,\n];\n\nAuth::shouldUse($request-&gt;domain);\n\nif (Auth::attempt($credentials)) {\n    return redirect('/dashboard');\n}\n</code></pre>"},{"location":"docs/laravel/v2/auth/multi-domain/#email-address-suffix","title":"Email Address Suffix","text":"<p>In this example, we will be determining the users domain from their email addresses host name (eg. <code>@alpha.com</code> and <code>@bravo.com</code>).</p> <p>Using this method, we will simply split out their email address domain and use a lookup table to retrieve the proper guard:</p> <pre><code>$credentials = [\n    'mail' =&gt; $request-&gt;email,\n    'password' =&gt; $request-&gt;password,\n];\n\n$guards = [\n    'alpha.com' =&gt; 'alpha',\n    'bravo.com' =&gt; 'bravo',\n];\n\n$domain = explode('@', $request-&gt;email)[1];\n\n$guard = $guards[$domain] ?? 'alpha';\n\nAuth::shouldUse($guard);\n\nif (Auth::attempt($credentials)) {\n    return redirect('/dashboard');\n}\n</code></pre>"},{"location":"docs/laravel/v2/auth/multi-domain/#updating-your-web-routes","title":"Updating Your Web Routes","text":"<p>Having multiple authentication guards means that we need to update the <code>auth</code> middleware that is covering our protected application routes inside of our <code>routes/web.php</code> file.</p> <p>Luckily, this middleware accepts a comma separated list of guards you would like to protect your routes by. You will need to add both of the guards you created above:</p> <p>By default, if no guards are given to the Laravel <code>auth</code> middleware, it will attempt to use the <code>default</code> guard configured inside of your <code>config/auth.php</code> file.</p> <p>Before:</p> <pre><code>// routes/web.php\n\nRoute::middleware('auth')-&gt;group(function () {\n    // ...\n})\n</code></pre> <p>After:</p> <pre><code>// routes/web.php\n\nRoute::middleware('auth:alpha,bravo')-&gt;group(function () {\n    // Both alpha and bravo domains can access these routes...\n});\n</code></pre> <p>If you would like to restrict routes to certain domains, only include one of them when adding the <code>auth</code> middleware to a route:</p> <pre><code>// routes/web.php\n\nRoute::group(function () {\n    // Only alpha domain users can access these routes...\n})-&gt;middleware('auth:alpha');\n</code></pre> <p>This is extremely handy for permission management - as authenticated users from certain domains can only access the routes that have been defined for their domain.</p> <p>You are now ready to authenticate users with multiple domains.</p>"},{"location":"docs/laravel/v2/auth/restricting-login/","title":"Restricting Login","text":""},{"location":"docs/laravel/v2/auth/restricting-login/#introduction","title":"Introduction","text":"<p>LdapRecord-Laravel provides various ways you can prevent certain users from logging into your application. Let's walk through some approaches.</p>"},{"location":"docs/laravel/v2/auth/restricting-login/#using-a-group-membership","title":"Using a Group Membership","text":"<p>To use a group membership for authorizing signing in to your application, we will use an authentication rule.</p> <p>In our example application, we want to only allow users who are members of a single group to authenticate. This group will be called <code>Help Desk</code>.</p> <p>Let's create our new authentication rule by running the below command:</p> <pre><code>php artisan make:ldap-rule OnlyHelpDeskUsers\n</code></pre> <p>A new rule will be created inside <code>app/Ldap/Rules/OnlyHelpDeskUsers.php</code></p> <p>In the newly generated rule, we can check for group membership in various ways, as well as check for nested group membership, and even for multiple group memberships.</p> <p>Let's walk through each example.</p>"},{"location":"docs/laravel/v2/auth/restricting-login/#checking-for-a-single-group","title":"Checking for a single group","text":"<p>When checking for a single group, we will use the relation <code>exists()</code> method:</p> <pre><code>/**\n * Check if the rule passes validation.\n *\n * @return bool\n */\npublic function isValid()\n{\n    return $this-&gt;user-&gt;groups()-&gt;exists(\n        'cn=Help Desk,ou=Groups,dc=local,dc=com'\n    );\n}\n</code></pre> <p>With the <code>exists()</code> method, we can also use an LdapRecord <code>Model</code> instance:</p> <p>This approach is useful, so an exception will be thrown when the group cannot be located.</p> <pre><code>public function isValid()\n{\n    return $this-&gt;user-&gt;groups()-&gt;exists(\n        Group::findOrFail('cn=Help Desk,ou=Groups,dc=local,dc=com')\n    );\n}\n</code></pre> <p>Or; A Common Name (<code>cn</code>):</p> <pre><code>public function isValid()\n{\n    return $this-&gt;user-&gt;groups()-&gt;exists('Help Desk');\n}\n</code></pre>"},{"location":"docs/laravel/v2/auth/restricting-login/#checking-for-multiple-groups","title":"Checking for multiple groups","text":"<p>To check that the user has all of a given set of groups, we will use the <code>exists()</code> method:</p> <pre><code>public function isValid()\n{\n    return $this-&gt;user-&gt;groups()-&gt;exists(\n        'cn=Help Desk,ou=Groups,dc=local,dc=com',\n        'cn=Site Admins,ou=Groups,dc=local,dc=com'\n    );\n}\n</code></pre> <p>We can also use <code>Model</code> instances:</p> <pre><code>public function isValid()\n{\n    return $this-&gt;user-&gt;groups()-&gt;exists([\n        Group::findOrFail('cn=Help Desk,ou=Groups,dc=local,dc=com'),\n        Group::findOrFail('cn=Site Admins,ou=Groups,dc=local,dc=com'),\n    ]);\n}\n</code></pre> <p>Or; Common Names (<code>cn</code>):</p> <pre><code>public function isValid()\n{\n    return $this-&gt;user-&gt;groups()-&gt;exists([\n        'Help Desk', 'Site Admins'\n    ]);\n}\n</code></pre>"},{"location":"docs/laravel/v2/auth/restricting-login/#checking-for-any-given-groups","title":"Checking for any given groups","text":"<p>To check that a user has any of a given set of groups, we will use the <code>contains()</code> method:</p> <pre><code>public function isValid()\n{\n    return $this-&gt;user-&gt;groups()-&gt;contains([\n        'Help Desk', 'Accounting'\n    ]);\n}\n</code></pre> <p>You can also provide a <code>Model</code> instance or Distinguished Name into the <code>contains</code> method.</p> <p>This will allow members of either the <code>Help Desk</code> or <code>Accounting</code> group to authenticate.</p>"},{"location":"docs/laravel/v2/auth/restricting-login/#checking-for-nested-groups-recursively","title":"Checking for nested group(s) recursively","text":"<p>Nested group checking allows LdapRecord to search recursively if a user is a member of a particular group.</p> <p>For example, if a user is a member of an <code>Accounting</code> group, and this <code>Accounting</code> group is a member of an <code>Office</code> group, you can tell LdapRecord to search recursively for the <code>Office</code> group:</p> <pre><code>public function isValid()\n{\n    return $this-&gt;user-&gt;groups()-&gt;recursive()-&gt;exists('Office');\n}\n</code></pre> <p>Using the above example without the <code>recursive</code> call, it will fail to determine the users group membership, since LdapRecord is only searching for immediate memberships of the user:</p> <pre><code>public function isValid()\n{\n    // Only searching immediate group memberships:\n    return $this-&gt;user-&gt;groups()-&gt;exists('Office');\n}\n</code></pre>"},{"location":"docs/laravel/v2/auth/restricting-login/#using-an-organizational-unit","title":"Using an Organizational Unit","text":"<p>To use an Organizational Unit which contains your users that you want to allow sign in to your application, we will leverage LdapRecord model scopes.</p> <p>In our application, we have an Organizational Unit named <code>Accounting</code> with the following Distinguished Name:</p> <pre><code>ou=Accounting,ou=Users,dc=local,dc=com\n</code></pre> <p>Let's create a new model scope using the below command:</p> <pre><code>php artisan make:ldap-scope OnlyAccountingUsers\n</code></pre> <p>Now inside of the generated scope, we will limit the query to only return users who are contained inside the our <code>Accounting</code> OU:</p> <pre><code>&lt;?php\n\nnamespace App\\Ldap\\Scopes;\n\nuse LdapRecord\\Models\\Model;\nuse LdapRecord\\Models\\Scope;\nuse LdapRecord\\Query\\Model\\Builder;\n\nclass OnlyAccountingUsers implements Scope\n{\n    /**\n     * Apply the scope to the given query.\n     *\n     * @param Builder $query\n     * @param Model   $model\n     *\n     * @return void\n     */\n    public function apply(Builder $query, Model $model)\n    {\n        $query-&gt;in('ou=Accounting,ou=Users,dc=local,dc=com');\n\n        // You can also make this \"environment aware\" if needed:\n        // $query-&gt;in(env('LDAP_USER_SCOPE'));\n    }\n}\n</code></pre> <p>After modifying the scope, we can now add the scope to our LDAP user model.</p> <p>If you are using one of the built-in predefined models, you can add the global scope to the model inside your <code>AuthServiceProvider::boot()</code> method:</p> <pre><code>// app/Providers/AuthServiceProvider.php\nuse App\\Ldap\\Scopes\\OnlyAccountingUsers;\n\n/**\n * Register any authentication / authorization services.\n *\n * @return void\n */\npublic function boot()\n{\n    $this-&gt;registerPolicies();\n\n    \\LdapRecord\\Models\\ActiveDirectory\\User::addGlobalScope(\n        new OnlyAccountingUsers\n    );\n}\n</code></pre> <p>If you have created your own LDAP model, add the scope in the inside your models static <code>boot</code> method:</p> <pre><code>&lt;?php\n\nnamespace App\\Ldap;\n\nuse LdapRecord\\Models\\Model;\nuse App\\Ldap\\Scopes\\CompanyScope;\n\nclass User extends Model\n{\n    /**\n     * The \"booting\" method of the model.\n     *\n     * @return void\n     */\n    protected static function boot()\n    {\n        parent::boot();\n\n        static::addGlobalScope(new OnlyAccountingUsers);\n    }\n}\n</code></pre> <p>Now when you attempt to sign in to your application, only users who are contained inside the <code>Accounting</code> OU will be allowed to authenticate.</p>"},{"location":"docs/laravel/v2/auth/restricting-login/#using-only-manually-imported-users","title":"Using Only Manually Imported Users","text":"<p>To enforce only manually imported LDAP users who exist inside of your database to sign in to your application, you must use an authentication rule.</p> <p>LdapRecord-Laravel includes this authentication rule out-of-the-box:</p> <pre><code>LdapRecord\\Laravel\\Auth\\Rules\\OnlyImported\n</code></pre> <p>To use this rule, insert it into the <code>rules</code> array into your authentication provider configuration inside of the <code>config/auth.php</code> file:</p> <pre><code>// config/auth.php\n\n'providers' =&gt; [\n    // ...\n\n    'ldap' =&gt; [\n        'driver' =&gt; 'ldap',\n        'model' =&gt; LdapRecord\\Models\\ActiveDirectory\\User::class,\n        'rules' =&gt; [\n            LdapRecord\\Laravel\\Auth\\Rules\\OnlyImported::class, // &lt;-- Added here.\n        ],\n    ],\n],\n</code></pre> <p>Make sure you run <code>php artisan config:clear</code> if you are caching your configuration files.</p> <p>Now when you attempt to sign in to your application, you will only be able to sign in with a user who has already been imported into your local applications database.</p>"},{"location":"docs/laravel/v2/auth/testing/","title":"Testing","text":""},{"location":"docs/laravel/v2/auth/testing/#introduction","title":"Introduction","text":"<p>LdapRecord-Laravel prides itself on giving you a great and easy testing experience using the Directory Emulator. Using it, we can test authentication rules, scopes and group memberships.</p>"},{"location":"docs/laravel/v2/auth/testing/#getting-started","title":"Getting Started","text":"<p>Before we begin, you must require the <code>doctrine/dbal</code> into your composers <code>require-dev</code> for testing. This is due to the <code>$table-&gt;dropColumns(['guid', 'domain'])</code> call inside of the additional LdapRecord auth migration and that we are using SQLite in our test environment.</p> <p>This package is required for modifying columns - as described in the Laravel documentation.</p> <p>To do so, run the following command:</p> <pre><code>composer require doctrine/dbal --dev\n</code></pre>"},{"location":"docs/laravel/v2/auth/testing/#creating-the-test","title":"Creating the test","text":"<p>Let's whip up a test by running the following command:</p> <pre><code>php artisan make:test LdapAuthenticationTest\n</code></pre> <p>Inside of our generated test, we'll make use of the following traits:</p> <p>DatabaseMigrations</p> <pre><code>Illuminate\\Foundation\\Testing\\DatabaseMigrations\n</code></pre> <p>Using this trait will execute our migrations and ensure our database is ready to import our LDAP user.</p> <p>WithFaker</p> <pre><code>Illuminate\\Foundation\\Testing\\WithFaker\n</code></pre> <p>Using this trait provides us with generating fake UUID's (great for creating mock \"guids\"), names and emails.</p> <p>Let's add a <code>test_auth_works</code> method into the generated test:</p> <pre><code>&lt;?php\n\nnamespace Tests\\Feature;\n\nuse Illuminate\\Foundation\\Testing\\DatabaseMigrations;\nuse Illuminate\\Foundation\\Testing\\WithFaker;\nuse Illuminate\\Support\\Facades\\Auth;\nuse LdapRecord\\Laravel\\Testing\\DirectoryEmulator;\nuse LdapRecord\\Models\\ActiveDirectory\\User;\nuse Tests\\TestCase;\n\nclass LdapAuthenticationTest extends TestCase\n{\n    use DatabaseMigrations, WithFaker;\n\n    public function test_auth_works()\n    {\n        $fake = DirectoryEmulator::setup('default');\n\n        $ldapUser = User::create([\n            'cn' =&gt; $this-&gt;faker-&gt;name,\n            'mail' =&gt; $this-&gt;faker-&gt;email,\n            'objectguid' =&gt; $this-&gt;faker-&gt;uuid,\n        ]);\n\n        $fake-&gt;actingAs($ldapUser);\n\n        $this-&gt;post('/login', [\n            'email' =&gt; $ldapUser-&gt;mail[0],\n            'password' =&gt; 'secret',\n        ])-&gt;assertRedirect('/home');\n\n        $user = Auth::user();\n\n        $this-&gt;assertInstanceOf(\\App\\Models\\User::class, $user);\n        $this-&gt;assertEquals($ldapUser-&gt;mail[0], $user-&gt;email);\n        $this-&gt;assertEquals($ldapUser-&gt;cn[0], $user-&gt;name);\n    }\n}\n</code></pre> <p>Let's deconstruct what's going on here step by step.</p> <pre><code>$fake = DirectoryEmulator::setup('default');\n</code></pre> <p>This first line creates a new Directory Emulator for our LDAP connection named <code>default</code> inside of our <code>config/ldap.php</code> file. It returns a fake LDAP connection that we can use to indicate that the user we create in this fake directory will successfully pass LDAP authentication.</p> <pre><code>$user = User::create([\n    'cn' =&gt; $this-&gt;faker-&gt;name,\n    'mail' =&gt; $this-&gt;faker-&gt;email,\n    'objectguid' =&gt; $this-&gt;faker-&gt;uuid,\n]);\n</code></pre> <p>On the second line, we're creating our fake LDAP user who will be signing into our application. You'll notice that we assign the attributes that are inside of our <code>sync_attributes</code> specified inside of our <code>config/auth.php</code> file, as well as the users <code>objectguid</code>.</p> <p>If you're using OpenLDAP, the <code>objectguid</code> field may be <code>entryUUID</code> or <code>uid</code>.</p> <p>This is a good place to test attribute synchronization.</p> <pre><code>$fake-&gt;actingAs($user);\n</code></pre> <p>This third line, we are asserting that the user we have created will automatically pass LDAP authentication. If we remove this line, attempting to authenticate as the user will fail, as they are not allowed to bind using your fake connection.</p> <pre><code>$this-&gt;post('/login', [\n    'email' =&gt; $user-&gt;mail[0],\n    'password' =&gt; 'secret',\n])-&gt;assertRedirect('/home');\n</code></pre> <p>Fourth, we are sending a post request to our <code>login</code> page, with our LDAP users email address. The password can be anything, since we asserted above (using the <code>actingAs()</code> method) that the user will pass, regardless of what password we use.</p> <p>If your application has password synchronization enabled, this is a good place to send various passwords and assert that the hashes match after a successful login.</p> <pre><code>$user = Auth::user();\n\n$this-&gt;assertInstanceOf(\\App\\Models\\User::class, $user);\n$this-&gt;assertEquals($ldapUser-&gt;mail[0], $user-&gt;email);\n$this-&gt;assertEquals($ldapUser-&gt;cn[0], $user-&gt;name);\n</code></pre> <p>Finally, we'll check to make sure we can retrieve the successfully authenticated user and that their attributes were successfully synchronized into our Eloquent database model.</p>"},{"location":"docs/laravel/v2/auth/testing/#scopes","title":"Scopes","text":"<p>To test scopes that you apply to the LdapRecord model you are using for authentication, you will need to apply the attributes to the fake user you create to test that they can be properly located during authentication.</p> <p>For example, if you created a scope that enforces users to be inside of an Organizational Unit, then we must create our fake user inside of that Organizational Unit for the user to be located - as you would using a real LDAP directory. Let's walk through this.</p> <p>Below we have our scope that will enforce users to be located inside of an Organizational Unit named <code>Administrators</code>:</p> <pre><code>namespace App\\Ldap\\Scopes;\n\nuse LdapRecord\\Models\\Model;\nuse LdapRecord\\Models\\Scope;\nuse LdapRecord\\Query\\Model\\Builder;\nuse LdapRecord\\Models\\ActiveDirectory\\OrganizationalUnit;\n\nclass AdministratorsScope implements Scope\n{\n    public function apply(Builder $query, Model $model)\n    {\n        $ou = OrganizationalUnit::where('ou', '=', 'Accounting')-&gt;first();\n\n        $query-&gt;in($ou);\n    }\n}\n</code></pre> <p>And we have also added it into our model:</p> <pre><code>namespace App\\Ldap;\n\nuse LdapRecord\\Models\\Model;\nuse App\\Ldap\\Scopes\\AdministratorsScope;\n\nclass User extends Model\n{\n    protected static function boot()\n    {\n        parent::boot();\n\n        static::addGlobalScope(new AdministratorsScope());\n    }\n}\n</code></pre> <p>Now let's create our test. To do so, we'll setup everything as we have in the above test example, but we will create our user inside of the <code>Administrators</code> Organizational Unit:</p> <pre><code>public function test_auth_works()\n{\n    $fake = DirectoryEmulator::setup('default');\n\n    $ou = OrganizationalUnit::create(['ou' =&gt; 'Administrators']);\n\n    $ldapUser = (new User)-&gt;inside($ou);\n\n    $ldapUser-&gt;save([\n        'mail' =&gt; $this-&gt;faker-&gt;email,\n        'cn' =&gt; $this-&gt;faker-&gt;name,\n        'objectguid' =&gt; $this-&gt;faker-&gt;uuid,\n    ]);\n\n    $fake-&gt;actingAs($ldapUser);\n\n    $this-&gt;post('/login', [\n        'email' =&gt; $ldapUser-&gt;mail[0],\n        'password' =&gt; 'secret',\n    ])-&gt;assertRedirect('/home');\n\n    $user = Auth::user();\n\n    $this-&gt;assertInstanceOf(\\App\\Models\\User::class, $user);\n    $this-&gt;assertEquals($ldapUser-&gt;mail[0], $user-&gt;email);\n    $this-&gt;assertEquals($ldapUser-&gt;cn[0], $user-&gt;name);\n}\n</code></pre> <p>To test the opposite of the above - such as a user who is not located inside the <code>Administrators</code> OU, simply create them inside a different OU, or inside the root of your emulated directory:</p> <pre><code>public function test_auth_fails()\n{\n    $fake = DirectoryEmulator::setup('default');\n\n    $ldapUser = User::create([\n        'cn' =&gt; $this-&gt;faker-&gt;name,\n        'mail' =&gt; $this-&gt;faker-&gt;email,\n        'objectguid' =&gt; $this-&gt;faker-&gt;uuid,\n    ]);\n\n    $fake-&gt;actingAs($ldapUser);\n\n    $this-&gt;post('/login', [\n        'email' =&gt; $ldapUser-&gt;mail[0],\n        'password' =&gt; 'secret',\n    ])-&gt;assertSessionHasErrors('email');\n\n    $this-&gt;assertFalse(Auth::check());\n}\n</code></pre> <p>Even though we have asserted that the user passes LDAP authentication (<code>$fake-&gt;actingAs($ldapUser)</code>), authentication will fail due to the user not being able to be located due to our scope we have created.</p> <p>We have also modified our redirect assertion to instead validate that the <code>email</code> session key contains errors. This key will contain the <code>Invalid credentials</code> message.</p>"},{"location":"docs/laravel/v2/auth/testing/#rules","title":"Rules","text":"<p>As with testing scopes, to test rules we must either apply or omit data on our fake user to test our LDAP authentication rules.</p> <p>An authentication rule is great for checking if a user is a member of a certain group before allowing them to authenticate. Let's walk through an example and test this.</p> <p>Our application requires the user to be a member of a group called <code>Help Desk</code>. With that requirement, here is our created authentication rule:</p> <pre><code>&lt;?php\n\nnamespace App\\Ldap\\Rules;\n\nuse LdapRecord\\Laravel\\Auth\\Rule;\nuse LdapRecord\\Models\\ActiveDirectory\\Group;\n\nclass HelpDeskEmployee extends Rule\n{\n    public function isValid()\n    {\n        $group = Group::where('name', '=', 'Help Desk')-&gt;first();\n\n        return $this-&gt;user-&gt;groups()-&gt;exists($group);\n    }\n}\n</code></pre> <p>This rule has also been added into our providers configuration inside our <code>config/auth.php</code> file:</p> <pre><code>// ...\n\n'providers' =&gt; [\n    // ...\n\n    'ldap' =&gt; [\n        // ...\n        'rules' =&gt; [\n            \\App\\Ldap\\Rules\\HelpDeskEmployee::class,\n        ],\n    ],\n]\n</code></pre> <p>Now we can create our test to ensure only users who are members of the group can authenticate:</p> <pre><code>public function test_auth_works()\n{\n    $fake = DirectoryEmulator::setup('default');\n\n    $ldapGroup = Group::create(['cn' =&gt; 'Help Desk']);\n\n    $ldapUser = User::create([\n        'cn' =&gt; $this-&gt;faker-&gt;name,\n        'mail' =&gt; $this-&gt;faker-&gt;email,\n        'objectguid' =&gt; $this-&gt;faker-&gt;uuid,\n        'memberof' =&gt; [$ldapGroup-&gt;getDn()],\n    ]);\n\n    $ldapGroup-&gt;members()-&gt;attach($ldapUser);\n\n    $fake-&gt;actingAs($ldapUser);\n\n    $this-&gt;post('/login', [\n        'email' =&gt; $ldapUser-&gt;mail[0],\n        'password' =&gt; 'secret',\n    ])-&gt;assertRedirect('/home');\n\n    $user = Auth::user();\n\n    $this-&gt;assertInstanceOf(\\App\\Models\\User::class, $user);\n    $this-&gt;assertEquals($ldapUser-&gt;mail[0], $user-&gt;email);\n    $this-&gt;assertEquals($ldapUser-&gt;cn[0], $user-&gt;name);\n}\n</code></pre> <p>As you can see above, we created a <code>Help Desk</code> group, added the group into the users <code>memberof</code> attribute (due to this field being virtual) and have attached them to the group.</p> <p>Now let's create a test to ensure users who are not members of the group can't authenticate.</p> <pre><code>public function test_auth_fails()\n{\n    $fake = DirectoryEmulator::setup('default');\n\n    $ldapUser = User::create([\n        'cn' =&gt; $this-&gt;faker-&gt;name,\n        'mail' =&gt; $this-&gt;faker-&gt;email,\n        'objectguid' =&gt; $this-&gt;faker-&gt;uuid,\n    ]);\n\n    $fake-&gt;actingAs($ldapUser);\n\n    $this-&gt;post('/login', [\n        'email' =&gt; $ldapUser-&gt;mail[0],\n        'password' =&gt; 'secret',\n    ])-&gt;assertSessionHasErrors('email');\n\n    $this-&gt;assertFalse(Auth::check());\n}\n</code></pre> <p>The above test passes because we have not added our LDAP user into any groups - so the <code>exists()</code> check inside of our rule returns <code>false</code>.</p>"},{"location":"docs/laravel/v2/auth/testing/#sso-windows-authentication","title":"SSO / Windows Authentication","text":"<p>To test Sigle-Sign-On (or Windows Authentication) for your Laravel application, you must set the authenticating users down-level logon name as a server variable.</p> <p>This server variable (typically <code>$_SERVER['AUTH_USER']</code>) is what the <code>WindowsAuthenticate</code> middleware reads to locate the authenticated user from your LDAP directory.</p> <p>To set server variables for upcoming requests inside of your Laravel tests, use the <code>withServerVariables()</code> method:</p> <pre><code>public function test_windows_authentication_works()\n{\n    DirectoryEmulator::setup('default');\n\n    $ldapUser = User::create([\n        'cn' =&gt; $this-&gt;faker-&gt;name,\n        'mail' =&gt; $this-&gt;faker-&gt;email,\n        'objectguid' =&gt; $this-&gt;faker-&gt;uuid,\n        'samaccountname' =&gt; $this-&gt;faker-&gt;userName,\n    ]);\n\n    // Replace 'DOMAIN' with your domain from your configured LDAP\n    // `base_dn`. For example, if your `base_dn` is equal to\n    // 'dc=company,dc=com', then you would use 'COMPANY'.\n    $authUser = implode('\\\\', [\n        'DOMAIN', $ldapUser-&gt;getFirstAttribute('samaccountname')\n    ]);\n\n    // Set the server variables for the upcoming request.\n    $this-&gt;withServerVariables([\n        WindowsAuthenticate::$serverKey =&gt; $authUser\n    ]);\n\n    // Attempt accessing a protected page:\n    $this-&gt;get('/dashboard')-&gt;assertOk();\n\n    // Ensure the user was authenticated:\n    $this-&gt;assertTrue(Auth::check());\n}\n</code></pre>"},{"location":"docs/laravel/v2/auth/database/","title":"Database Authentication Overview","text":"<p>Synchronized Database LDAP Authentication means that an LDAP user which successfully passes LDAP authentication will be created &amp; synchronized to your local applications database. This is helpful as you can attach typical relational database information to them, such as blog posts, attachments, etc.</p> <p>When a user is successfully authenticated, the Laravel <code>Auth::user()</code> method will return an instance of your configured Eloquent database model:</p> <pre><code>use Illuminate\\Support\\Facades\\Auth;\n\n$credentials = [\n    'mail' =&gt; 'jdoe@local.com',\n    'password' =&gt; 'secret',\n];\n\nif (Auth::attempt($credentials)) {\n    $user = Auth::user();\n\n    // Returns true:\n    $user instanceof \\App\\Models\\User;\n}\n</code></pre> <p>Subsequent requests to your application with logged in users will retrieve the logged in user from your database, rather than your LDAP directory. This means your application will stay operational if connectivity to your LDAP server is dropped.</p>"},{"location":"docs/laravel/v2/auth/database/configuration/","title":"Database Auth Configuration","text":""},{"location":"docs/laravel/v2/auth/database/configuration/#introduction","title":"Introduction","text":"<p>To configure a synchronized database LDAP authentication provider, navigate to the <code>providers</code> array inside of your <code>config/auth.php</code> file, and paste the following <code>users</code> provider:</p> <p>You will have to remove/alter the default <code>users</code> provider, or create your own.</p> <pre><code>// config/auth.php\n\n'providers' =&gt; [\n    // ...\n\n    'users' =&gt; [\n        'driver' =&gt; 'ldap',\n        'model' =&gt; LdapRecord\\Models\\ActiveDirectory\\User::class,\n        'rules' =&gt; [],\n        'database' =&gt; [\n            'model' =&gt; App\\Models\\User::class,\n            'sync_passwords' =&gt; false,\n            'sync_attributes' =&gt; [\n                'name' =&gt; 'cn',\n                'email' =&gt; 'mail',\n            ],\n        ],\n    ],\n],\n</code></pre> <p>As you can see above, a <code>database</code> array is used to configure the association between your LDAP user and your Eloquent user.</p> <p>Important:  If your application requires more than one LDAP connection, you must create a new provider for each connection.  This new provider must have its own unique <code>model</code> class which must use your alternate configured connection name using the <code>$connection</code> property.</p> <p>In the scenario of having multiple LDAP connections, it may be helpful to namespace the LDAP models you create with the desired connection. For example:</p> <pre><code>App\\Ldap\\DomainAlpha\\User\n</code></pre> <p>This will allow you to segregate scopes, rules and other classes to their relating connection.</p>"},{"location":"docs/laravel/v2/auth/database/configuration/#driver","title":"Driver","text":"<p>The <code>driver</code> option must be <code>ldap</code> as this is what indicates to Laravel the proper authentication driver to use.</p>"},{"location":"docs/laravel/v2/auth/database/configuration/#model","title":"Model","text":"<p>The <code>model</code> option must be the class name of your LdapRecord model. This model will be used for fetching users from your directory.</p>"},{"location":"docs/laravel/v2/auth/database/configuration/#rules","title":"Rules","text":"<p>The <code>rules</code> option must be an array of authentication rule class name's.</p>"},{"location":"docs/laravel/v2/auth/database/configuration/#overview","title":"Overview","text":"<p>LDAP authentication rules give you the ability to allow or deny users from signing into your application using a condition you would like to apply. These rules are executed after a user successfully passes LDAP authentication against your configured server.</p> <p>Think of them as a final authorization gate before they are allowed in.</p> <p>Authentication rules are never executed if a user fails LDAP authentication.</p>"},{"location":"docs/laravel/v2/auth/database/configuration/#creating-rules","title":"Creating Rules","text":"<p>Let's create an LDAP rule that only allows members of our domain <code>Administrators</code> group.</p> <p>To create an authentication rule, call the <code>make:ldap-rule</code> command:</p> <pre><code>php artisan make:ldap-rule OnlyAdministrators\n</code></pre> <p>A rule will then be created in your applications <code>app/Ldap/Rules</code> directory:</p> <pre><code>&lt;?php\n\nnamespace App\\Ldap\\Rules;\n\nuse LdapRecord\\Laravel\\Auth\\Rule;\n\nclass OnlyAdministrators extends Rule\n{\n    /**\n     * Check if the rule passes validation.\n     *\n     * @return bool\n     */\n    public function isValid()\n    {\n        //\n    }\n}\n</code></pre> <p>In the authentication rule, there are two properties made available to us.</p> <ul> <li>A <code>$user</code> property that is the LdapRecord model of the authenticating user</li> <li>A <code>$model</code> property that is the Eloquent model of the authenticating user</li> </ul> <p>Now, we will update the <code>isValid</code> method to check the LDAP users <code>groups</code> relationship to see if they are a member:</p> <pre><code>&lt;?php\n\nnamespace App\\Ldap\\Rules;\n\nuse LdapRecord\\Laravel\\Auth\\Rule;\nuse LdapRecord\\Models\\ActiveDirectory\\Group;\n\nclass OnlyAdministrators extends Rule\n{\n    public function isValid()\n    {\n        $administrators = Group::find('cn=Administrators,dc=local,dc=com');\n\n        return $this-&gt;user-&gt;groups()-&gt;recursive()-&gt;exists($administrators);\n    }\n}\n</code></pre> <p>We call the <code>recursive</code> method on the relationship to make sure that we load groups of groups in case the user is not an immediate member of the <code>Administrators</code> group.</p> <p>Once we have our rule defined, we will add it into our authentication provider in the <code>config/auth.php</code> file:</p> <pre><code>'providers' =&gt; [\n    // ...\n\n    'users' =&gt; [\n        'driver' =&gt; 'ldap',\n        'model' =&gt; LdapRecord\\Models\\ActiveDirectory\\User::class,\n        'rules' =&gt; [\n            App\\Ldap\\Rules\\OnlyAdministrators::class,\n        ],\n        'database' =&gt; [\n            // ...\n        ],\n    ],\n],\n</code></pre> <p>Now when you attempt to login to your application with a LDAP user that successfully passes LDAP authentication, they will need to be a member of the <code>Administrators</code> group.</p> <p>If you are caching your configuration, make sure you re-run <code>config:cache</code> to re-cache your modifications.</p>"},{"location":"docs/laravel/v2/auth/database/configuration/#database-model","title":"Database Model","text":"<p>The <code>database =&gt; model</code> key is the class name of the Eloquent model that will be used for creating and retrieving LDAP users from your applications database.</p> <p>Be sure to add the required trait and interface to this model as shown in the installation guide.</p>"},{"location":"docs/laravel/v2/auth/database/configuration/#sync-password-column","title":"Sync Password Column","text":"<p>If your application uses a different password column than <code>password</code>, then you can configure it using the <code>password_column</code> key inside of your providers configuration:</p> <pre><code>'providers' =&gt; [\n    // ...\n\n    'users' =&gt; [\n        // ...\n        'database' =&gt; [\n            // ...\n            'password_column' =&gt; 'my_password_column',\n        ],\n    ],\n],\n</code></pre> <p>You can also set the value to <code>false</code> if your database table does not have any password column at all:</p> <pre><code>'providers' =&gt; [\n    // ...\n\n    'users' =&gt; [\n        // ...\n        'database' =&gt; [\n            // ...\n            'password_column' =&gt; false,\n        ],\n    ],\n],\n</code></pre>"},{"location":"docs/laravel/v2/auth/database/configuration/#sync-passwords","title":"Sync Passwords","text":"<p>The <code>database =&gt; sync_passwords</code> option enables password synchronization.</p> <p>Password synchronization captures and hashes the users password upon login if they pass LDAP authentication. This helps in situations where you may want to provide a \"back up\" option in case your LDAP server is unreachable, as well as a way of determining if a users password is valid without having to call to your LDAP server and validate it for you.</p> <p>If you do not define the <code>sync_passwords</code> key or have it set <code>false</code>, a user is always applied a random 16 character hashed password. This hashed password is only set once upon initial import or login so no needless updates are performed on user records.</p>"},{"location":"docs/laravel/v2/auth/database/configuration/#sync-attributes","title":"Sync Attributes","text":"<p>The <code>database =&gt; sync_attributes</code> array defines a set of key-value pairs that describe which database column should be set and to which LDAP property:</p> <pre><code>'sync_attributes' =&gt; [\n    'email' =&gt; 'mail',\n    'name' =&gt; 'cn',\n]\n</code></pre> <ul> <li>The key of each array item is the attribute of your <code>User</code> Eloquent model</li> <li>The value is the name of the users LDAP attribute to set the Eloquent model attribute value to</li> </ul> <p>You do not need to add your users <code>guid</code> or <code>domain</code> database columns. These are done automatically for you.</p> <p>For further control on sync attributes, see the below attribute handler feature.</p>"},{"location":"docs/laravel/v2/auth/database/configuration/#sync-existing-records","title":"Sync Existing Records","text":"<p>The <code>database =&gt; sync_existing</code> array defines a set of key-value pairs that describe how existing database users should be sychronized:</p> <pre><code>'sync_existing' =&gt; [\n    'email' =&gt; 'mail',\n],\n</code></pre> <ul> <li>The key of each array item is the column of your <code>users</code> database table to query</li> <li>The value is the name of the users LDAP attribute to set the database value to</li> </ul> <p>Alternatively inside of each <code>value</code> key, you may provide an array with an <code>attribute</code> key containing the LDAP attribute name and an <code>operator</code> key to use for the query when retrieving a record from the database. More on this below.</p> <p>Important: If the LDAP attribute returns <code>null</code> for the given value, the actual value will be used in the query instead. This is helpful to be able to use raw strings to scope your query by.</p> <p>Let's walk through an example.</p> <p>In our application, we have existing users inside of our database:</p> id name email password guid domain 1 Steve Bauman sbauman@local.com ... <code>null</code> <code>null</code> 2 John Doe jdoe@local.com ... <code>null</code> <code>null</code> <p>As you can see above, these users have <code>null</code> values for their <code>guid</code> and <code>domain</code> columns.</p> <p>If you do not define a <code>sync_existing</code> array and a user logs in with <code>sbauman@local.com</code>, you will receive a SQL exception. This is because LdapRecord was unable to locate a local database user using the users GUID. If this occurs, LdapRecord will attempt to insert a new user with the same email address.</p> <p>To resolve this issue, we will insert the following <code>sync_existing</code> array:</p> <pre><code>'providers' =&gt; [\n    // ...\n\n    'users' =&gt; [\n        // ...\n        'database' =&gt; [\n            // ...\n            'sync_existing' =&gt; [\n                'email' =&gt; 'mail',\n            ],\n        ],\n    ],\n],\n</code></pre> <p>Now when <code>sbauman@local.com</code> attempts to log in, if the user cannot be located by their GUID, they will instead be located by their email address. Their GUID, domain, and sync attributes you define will then synchronize.</p>"},{"location":"docs/laravel/v2/auth/database/configuration/#database-compatibility","title":"Database Compatibility","text":"<p>In some database drivers, such as Postgres, there is case-sensitivity when executing <code>where</code> clauses with the equals (<code>=</code>) operator. Consider the following data in your database:</p> id name email password guid domain 1 Steve Bauman sbauman@local.com ... <code>null</code> <code>null</code> 2 John Doe jdoe@local.com ... <code>null</code> <code>null</code> <p>However, inside of the LDAP server, the <code>mail</code> attribute for Steve's record is actually <code>SBauman@local.com</code>. While he could successfully authenticate, the existing record would not be found in our database due to Postgres' more strict SQL grammar. Changing the <code>sync_existing</code> configuration to the following array syntax would allow us to change the operator from an equals (<code>=</code>) to an <code>ilike</code>.</p> <pre><code>'sync_existing' =&gt; [\n    'email' =&gt; [\n        'attribute' =&gt; 'mail',\n        'operator' =&gt; 'ilike',\n    ],\n],\n</code></pre> <p>By replacing the value of the array to be an array with the <code>attribute</code> and <code>operator</code> keys, we can fine-tune the query syntax to be more flexible to your needs.</p>"},{"location":"docs/laravel/v2/auth/database/configuration/#attribute-handlers","title":"Attribute Handlers","text":"<p>If you require logic for synchronizing attributes when users sign into your application or are being imported, you can create an attribute handler class responsible for setting / synchronizing your database models attributes from their LDAP model.</p> <p>This class you define must have a <code>handle</code> method. This method must accept the LDAP model you have configured as the first parameter and your Eloquent database model as the second.</p> <p>For the example below, we will create a handler named <code>AttributeHandler.php</code> inside of your <code>app/Ldap</code> folder:</p> <p>You do not need to call <code>save()</code> on your Eloquent database model. This is called for you after attribute synchronization.</p> <pre><code>&lt;?php\n\nnamespace App\\Ldap;\n\nuse App\\Models\\User as DatabaseUser;\nuse App\\Ldap\\User as LdapUser;\n\nclass AttributeHandler\n{\n    public function handle(LdapUser $ldap, DatabaseUser $database)\n    {\n        $database-&gt;name = $ldap-&gt;getFirstAttribute('cn');\n        $database-&gt;email = $ldap-&gt;getFirstAttribute('mail');\n    }\n}\n</code></pre> <p>Attribute handlers are created using Laravel's <code>app()</code> helper, so you may type-hint any dependencies you require in your handlers constructor to be made available during synchronization.</p> <p>Then inside of your <code>config/auth.php</code> file for your provider, set the attribute handler class as the <code>sync_attributes</code> value:</p> <pre><code>'providers' =&gt; [\n    // ...\n\n    'users' =&gt; [\n        // ...\n        'database' =&gt; [\n            // ...\n            'sync_attributes' =&gt; \\App\\Ldap\\AttributeHandler::class,\n        ],\n    ],\n],\n</code></pre> <p>You may also add multiple if you'd prefer, or combine them with <code>key =&gt; value</code> pairs:</p> <pre><code>// ...\n'database' =&gt; [\n    // ...\n    'sync_attributes' =&gt; [\n        'name' =&gt; 'cn',\n        'email' =&gt; 'mail',\n        \\App\\Ldap\\MyFirstAttributeHandler::class,\n        \\App\\Ldap\\MySecondAttributeHandler::class,\n    ],\n],\n</code></pre> <p>Attributes you specify are synchronized in order (first to last), so you may access the already synchronized attributes in subsequent attribute handlers.</p>"},{"location":"docs/laravel/v2/auth/database/configuration/#all-available-options","title":"All Available Options","text":"<p>Below is a synchronized database provider that is configured with all available options:</p> <pre><code>// config/auth.php\n\n'providers' =&gt; [\n    // ...\n\n    'users' =&gt; [\n        'driver' =&gt; 'ldap',\n        'model' =&gt; LdapRecord\\Models\\ActiveDirectory\\User::class,\n        'rules' =&gt; [],\n        'database' =&gt; [\n            'model' =&gt; App\\Models\\User::class,\n            'sync_passwords' =&gt; true,\n            'sync_attributes' =&gt; [\n                'name' =&gt; 'cn',\n                'email' =&gt; 'mail',\n            ],\n            'sync_existing' =&gt; [\n                'email' =&gt; 'mail',\n            ],\n            'password_column' =&gt; 'password',\n        ],\n    ],\n],\n</code></pre>"},{"location":"docs/laravel/v2/auth/database/importing/","title":"Importing LDAP Users","text":""},{"location":"docs/laravel/v2/auth/database/importing/#introduction","title":"Introduction","text":"<p>LdapRecord-Laravel allows you to import users from your LDAP directories into your local database. This is done by executing the <code>php artisan ldap:import</code> command and is only available to LDAP authentication providers you configure with database synchronization.</p> <p>As it is with signing users into your application, the Eloquent database model you specify in your <code>config/auth.php</code> file is used for the creation and retrieval of users in your database.</p>"},{"location":"docs/laravel/v2/auth/database/importing/#attribute-synchronization","title":"Attribute Synchronization","text":"<p>The <code>sync_attributes</code> you define inside of your <code>config/auth.php</code> file for your provider will be used for importing and synchronizing users.</p> <p>Be sure to look at the documentation to get a further understanding on what is possible with this option.</p>"},{"location":"docs/laravel/v2/auth/database/importing/#syncing-existing-records","title":"Syncing Existing Records","text":"<p>The <code>sync_existing</code> array you define inside of your <code>config/auth.php</code> will be used to synchronize existing database records with your LDAP users.</p> <p>Be sure to look at the documentation to get a further understanding on what is possible with this option.</p>"},{"location":"docs/laravel/v2/auth/database/importing/#password-synchronization","title":"Password Synchronization","text":"<p>The <code>sync_passwords</code> option you define inside of your <code>config/auth.php</code> file is used when importing and synchronizing users. However, there are some caveats you must be aware of:</p> <ul> <li>Passwords cannot be retrieved from users who are being imported from your LDAP server. This would be a major security risk if this were possible. If a password is already   set for the user being imported, it will be left untouched. This is to retain a   possible synchronized password that was set upon login.</li> <li>Passwords will always be set to a hashed 16 character string if not already present. If the user being imported does not have a password, their password will be set to a   hashed 16 character random string using <code>Str::random</code>.</li> <li>Passwords will not be set if you have defined <code>false</code> for <code>password_column</code>.</li> </ul>"},{"location":"docs/laravel/v2/auth/database/importing/#running-the-command","title":"Running the command","text":"<p>To run the command you must insert the <code>provider</code> name that you have setup for LDAP database synchronization inside of your <code>config/auth.php</code> file. Let's walk through an example.</p> <p>In our application we have a configured authentication provider named <code>ldap</code>:</p> <pre><code>'providers' =&gt; [\n    // ...\n\n    'ldap' =&gt; [\n        // ...\n        'database' =&gt; [\n            // ...\n        ],\n    ],\n],\n</code></pre> <p>We will then insert the providers name into our import command and execute it:</p> <pre><code>php artisan ldap:import users\n</code></pre> <p>You will then be asked after a successful search in your directory:</p> <pre><code>Found 2 user(s).\n\nWould you like to display the user(s) to be imported / synchronized? (yes/no) [no]:\n&gt; y\n</code></pre> <p>A table will then be shown so you can confirm the import of the located users:</p> <pre><code>+-------------+-------------------+---------------------+\n| Name        | Account Name      | UPN                 |\n+-------------+-------------------+---------------------+\n| John Doe    | johndoe           | johndoe@local.com   |\n| Jane Doe    | janedoe           | janedoe@local.com   |\n+-------------+-------------------+---------------------+\n</code></pre> <p>Then, you will be asked to import the users shown and the import will begin:</p> <pre><code> Would you like these users to be imported / synchronized? (yes/no) [no]:\n &gt; y\n\n  2/2 [============================] 100%\n\nSuccessfully imported / synchronized 2 user(s).\n</code></pre>"},{"location":"docs/laravel/v2/auth/database/importing/#scheduling-the-command","title":"Scheduling the command","text":"<p>To run the import as a scheduled job, place the following in your <code>app/Console/Kernel.php</code> in the command scheduler:</p> <pre><code>protected function schedule(Schedule $schedule)\n{\n    // Import LDAP users hourly.\n    $schedule-&gt;command('ldap:import users', [\n        '--no-interaction',\n        '--restore',\n        '--delete',\n        '--filter' =&gt; '(objectclass=user)',\n    ])-&gt;hourly();\n}\n</code></pre> <p>The above scheduled import command will:</p> <ul> <li>Run without interaction and import new users as well as synchronize already imported users</li> <li>Restore user models who have been re-activated in your LDAP directory (if you're using Eloquent Soft Deletes)</li> <li>Soft-Delete user models who have been deactived in your LDAP directory (if you're using Eloquent Soft Deletes)</li> <li>Only import objects that have an <code>objectclass</code> containing <code>user</code></li> </ul> <p>It's recommended to use model query scopes instead of the <code>--filter</code> option on your configured authentication LdapRecord model so LDAP users signing into your application are applied the same search filter.</p>"},{"location":"docs/laravel/v2/auth/database/importing/#programmatically-executing","title":"Programmatically Executing","text":"<p>You can call the <code>ldap:import</code> command using Laravel's Artisan facade to programmatically execute the import inside of your application wherever you'd like:</p> <pre><code>Artisan::call('ldap:import', ['provider' =&gt; 'ldap', '--no-interaction']);\n</code></pre> <p>To use other arguments and options, include them as array values:</p> <pre><code>Artisan::call('ldap:import', [\n    'provider' =&gt; 'ldap',\n    'user' =&gt; 'sbauman',\n    '--no-interaction',\n    '--restore' =&gt; true,\n    '--delete' =&gt; true,\n    '--delete-missing' =&gt; true,\n    '--filter' =&gt; '(cn=John Doe)',\n    '--scopes' =&gt; 'App\\Ldap\\Scopes\\OnlyAdmins',\n    '--attributes' =&gt; 'cn,mail,samaccountname',\n]);\n</code></pre>"},{"location":"docs/laravel/v2/auth/database/importing/#events","title":"Events","text":"<p>When executing the <code>ldap:import</code> command, LdapRecord-Laravel will fire various events that you may register listeners on:</p> <p>Important: Each event listed below has the parent namespace of <code>LdapRecord\\Laravel\\Events\\Import\\</code>.</p> Event Fired Occurrence <code>Completed</code> When an import has fully completed. Once per <code>ldap:import</code> execution. <code>Deleted</code> When an import has soft-deleted a user. Each time a user is soft-deleted during an <code>ldap:import</code> execution. <code>DeletedMissing</code> When an import has soft-deleted missing users. Once per <code>ldap:import</code> execution. <code>Imported</code> When a user has been imported. Each time a user is imported via <code>ldap:import</code> execution, or authentication. <code>ImportFailed</code> When an exception occurs during import or synchronization. Each time a user fails to be synchronized or imported via <code>ldap:import</code> execution, or authentication. <code>Importing</code> When a non-existent user is being imported. Each time a non-existent user is imported via <code>ldap:import</code> execution, or authentication. <code>Restored</code> When a previously soft-deleted user is being restored (un-deleted). Each time a soft-deleted user is restored via an <code>ldap:import</code> execution. <code>Saved</code> When a user has been saved after import or synchronization. Each time a user is saved via <code>ldap:import</code> execution, or authentication. <code>Started</code> When an import has been started. Once per <code>ldap:import</code> execution. <code>Synchronized</code> When a user has been synchronized with any defined sync attributes. Each time a user is synchronized via an <code>ldap:import</code> execution, or authentication. <code>Synchronizing</code> When a user is beginning to be synchronized. Each time a user is synchronizing via an <code>ldap:import</code> execution, or authentication."},{"location":"docs/laravel/v2/auth/database/importing/#command-arguments","title":"Command Arguments","text":""},{"location":"docs/laravel/v2/auth/database/importing/#provider","title":"Provider","text":"<p>To execute the import command, you must supply an authentication provider name. This will retrieve the users from your configured LdapRecord model, and import them using your configured Eloquent model.</p> <p>For example, if you have kept the default <code>users</code> authentication provider name in your <code>config/auth.php</code> file, then you would execute:</p> <pre><code>php artisan ldap:import users\n</code></pre>"},{"location":"docs/laravel/v2/auth/database/importing/#user","title":"User","text":"<p>To import or synchronize a single user, insert one of their attributes (such as <code>mail</code>, <code>samaccountname</code>, <code>cn</code>) and LdapRecord will try to locate the user for you using Ambiguous Name Resolution. If your LDAP server does not support ANR, an equivalent query will be created automatically.</p> <p>This argument is completely optional.</p> <p>Important: Do not use the <code>--delete-missing</code> option with this argument. Otherwise, other LDAP users that have been imported will be soft-deleted (if configured &amp; enabled on your Eloquent model).</p> <pre><code>php artisan ldap:import users jdoe@email.com\n\nFound user 'John Doe'.\n\nWould you like to display the user(s) to be imported / synchronized? (yes/no) [no]:\n&gt; y\n</code></pre>"},{"location":"docs/laravel/v2/auth/database/importing/#command-options","title":"Command Options","text":""},{"location":"docs/laravel/v2/auth/database/importing/#chunk","title":"Chunk","text":"<p>Important: This option is available as of v2.5.0.</p> <p>The <code>--chunk</code> (or <code>-c</code>) option allows you to import users by chunk.</p> <p>The option takes a number that indicates how many users per-chunk you would like to import.</p> <p>Use this option if you are running out of memory during large imports.</p> <pre><code>php artisan ldap:import users --chunk 500\n</code></pre>"},{"location":"docs/laravel/v2/auth/database/importing/#filter","title":"Filter","text":"<p>The <code>--filter</code> (or <code>-f</code>) option allows you to apply a raw filter to further narrow down the users who are imported:</p> <p>Important: If your filter contains commas, or other types of \"escape\" level LDAP search filter characters, you must escape the value with a backslash (<code>\\</code>) before passing it into the search string. More on this below.</p> <pre><code>php artisan ldap:import users --filter \"(cn=John Doe)\"\n</code></pre>"},{"location":"docs/laravel/v2/auth/database/importing/#escaping","title":"Escaping","text":"<p>In some cases, you may need to pass commas or other escape level characters into the search filter.</p> <p>To do so, add a backslash (<code>\\</code>) before the character to escape it properly:</p> <pre><code>php artisan ldap:import users --filter \"(cn=Doe\\, John)\"\n</code></pre> <p>If this is not done, you will receive a <code>Bad search filter</code> exception during import.</p>"},{"location":"docs/laravel/v2/auth/database/importing/#scopes","title":"Scopes","text":"<p>Important: This feature is available as of v2.7.0.</p> <p>The <code>--scopes</code> (or <code>-s</code>) option allows you to specify model query scopes that will apply to the underlying LdapRecord query builder instance when searching for users to import with your configured model.</p> <p>This allows you to not have to extend the built-in models to apply global scopes, as well as having scopes that only apply during import.</p> <p>Note: Since these scopes only apply during import, you may want to configure the OnlyImported authentication rule so that only users who have been imported successfully with your configured scopes, can log into your application.</p> <pre><code>php artisan ldap:import users --scopes \"App\\Ldap\\Scopes\\OnlyAdministrators\"\n</code></pre> <p>You may also provide several scopes, via comma separation:</p> <pre><code>php artisan ldap:import users --scopes \"App\\Ldap\\Scopes\\OnlyUsers,App\\Ldap\\Scopes\\ExcludeComputerObjects\"\n</code></pre>"},{"location":"docs/laravel/v2/auth/database/importing/#attributes","title":"Attributes","text":"<p>The <code>--attributes</code> (or <code>-a</code>) option allows you to specify the attributes that should be returned from your LDAP server.</p> <p>This option is great for reducing memory usage for large imports, since all attributes will be returned from your LDAP server otherwise.</p> <p>Important: To use this option, you must comma separate each attribute in the command and include the attributes you have configured in your authentication provider.</p> <pre><code>php artisan ldap:import users --attributes \"cn,mail,sn,givenname,samaccountname\"\n</code></pre>"},{"location":"docs/laravel/v2/auth/database/importing/#delete","title":"Delete","text":"<p>This option is only available on Active Directory models.</p> <p>The <code>--delete</code> (or <code>-d</code>) option allows you to soft-delete deactivated LDAP users. No users will be deleted if your <code>User</code> Eloquent model does not have soft-deletes enabled.</p> <pre><code>php artisan ldap:import users --delete\n</code></pre>"},{"location":"docs/laravel/v2/auth/database/importing/#delete-missing","title":"Delete Missing","text":"<p>This option is available for all LDAP directories.</p> <p>The <code>--delete-missing</code> option allows you to soft-delete all LDAP users that were missing from the import. This is useful when a user has been deleted in your LDAP server, and therefore should be soft-deleted inside of your application, since they will not be returned in search results.</p> <p>This option has been designed to have the utmost safety of user data in mind. Here are some paramount things to understand with this option:</p> <p>No users will be deleted if soft-deletes are not enabled on your <code>User</code> eloquent model.</p> <p>Deletion will not occur. You must setup Soft Deletes on your <code>User</code> eloquent model.</p> <p>If no users have been successfully imported, no users will be soft-deleted.</p> <p>If an executed import does not successfully import any users, no users will be soft-deleted.</p> <p>Only users that belong to the domain you are importing will be soft-deleted.</p> <p>This means, all other users will be left untouched, such as local database users that were not imported from an LDAP server, as well as users that were imported from another domain.</p> <p>Soft-deleted users are reported in the log.</p> <p>When users are soft-deleted, a log entry will be created for each one:</p> <pre><code>User with [id = 2] has been soft-deleted due to being missing from LDAP import.\nUser with [id = 5] has been soft-deleted due to being missing from LDAP import.\n</code></pre>"},{"location":"docs/laravel/v2/auth/database/importing/#the-deletedmissing-event","title":"The DeletedMissing Event","text":"<p>A <code>DeletedMissing</code> event is fired in the event of any users being soft-deleted.</p> <p>You may listen for this event and access the IDs of the deleted users, as well as the Eloquent model that was used to perform the deletion, and the LdapRecord model that was used to perform the import.</p> <p>Here is an example listener that accesses this event and its properties:</p> <pre><code>// app/Listeners/UsersDeletedFromImport.php\n\nnamespace App\\Listeners;\n\nuse LdapRecord\\Laravel\\Events\\Import\\DeletedMissing;\n\nclass UsersDeletedFromImport\n{\n    public function handle(DeletedMissing $event)\n    {\n        // \\Illuminate\\Support\\Collection\n        $event-&gt;deleted;\n\n        // \\LdapRecord\\Models\\ActiveDirectory\\User\n        $event-&gt;ldapModel;\n\n        // \\Illuminate\\Database\\Eloquent\\Model\n        $event-&gt;eloquentModel;\n    }\n}\n</code></pre>"},{"location":"docs/laravel/v2/auth/database/importing/#restore","title":"Restore","text":"<p>This option is only available on Active Directory models.</p> <p>The <code>--restore</code> (or <code>-r</code>) option allows you to restore soft-deleted re-activated LDAP users.</p> <pre><code>php artisan ldap:import users --restore\n</code></pre> <p>Typically, the <code>--restore</code> and <code>--delete</code> options would be used together to allow full synchronization of user disablements and restoration.</p>"},{"location":"docs/laravel/v2/auth/database/importing/#no-logging","title":"No Logging","text":"<p>The <code>--no-log</code> option allows you to disable logging during the command.</p> <pre><code>php artisan ldap:import users --no-log\n</code></pre> <p>By default this is enabled, regardless if <code>logging</code> is disabled in your <code>config/ldap.php</code> file.</p>"},{"location":"docs/laravel/v2/auth/database/importing/#no-interaction","title":"No Interaction","text":"<p>To run the import command via a schedule, use the <code>--no-interaction</code> flag:</p> <pre><code>php artisan ldap:import users --no-interaction\n</code></pre> <p>Users will be imported automatically with no prompts.</p> <p>You can also call the command from the Laravel Scheduler, or other commands:</p> <pre><code>// Importing one user\n$schedule-&gt;command('ldap:import users sbauman', ['--no-interaction'])\n            -&gt;everyMinute();\n\n// Importing all users\n$schedule-&gt;command('ldap:import users', ['--no-interaction'])\n            -&gt;everyMinute();\n\n// Importing users with a filter\n$dn = 'CN=Accounting,OU=SecurityGroups,DC=local,DC=com';\n\n$filter = sprintf('(memberof:1.2.840.113556.1.4.1941:=%s)', $dn);\n\n$schedule-&gt;command('ldap:import users', ['--no-interaction', '--filter' =&gt; $filter])\n    -&gt;everyMinute();\n</code></pre>"},{"location":"docs/laravel/v2/auth/database/importing/#additional-tips","title":"Additional Tips","text":"<ul> <li>Users who already exist inside your database will be updated with your configured providers <code>sync_attributes</code>.</li> <li>Users will never be force deleted from the import command. You will need to delete users manually   through your Eloquent model</li> <li>If you have a password mutator (setter) on your <code>User</code> Eloquent model, it will not override it.   This allows you to hash the random 16 character passwords in your own way.</li> <li>Imported (new) users will be reported in your log files:</li> </ul> <pre><code>[2020-01-29 14:51:51] local.INFO: Imported user johndoe\n</code></pre> <ul> <li>Users that fail to be imported are also reported in your log files, alongside the message of the exception that caused the failure:</li> </ul> <pre><code>[2020-01-29 14:51:51] local.ERROR: Unable to import user janedoe. SQLSTATE[23000]: Integrity constraint violation: 1048\n</code></pre>"},{"location":"docs/laravel/v2/auth/database/installation/","title":"Database Authentication Installation","text":""},{"location":"docs/laravel/v2/auth/database/installation/#introduction","title":"Introduction","text":"<p>Database authentication requires the addition of two (2) database columns inside of your <code>users</code> database table:</p> <ul> <li><code>guid</code>  This is for storing your LDAP users <code>objectguid</code>. It is used for locating and synchronizing your LDAP user.</li> <li><code>domain</code>  This is for storing your LDAP users connection name. It is used to identify users from different domains.</li> </ul>"},{"location":"docs/laravel/v2/auth/database/installation/#publishing-the-required-migration","title":"Publishing The Required Migration","text":"<p>Publish the migration using the below command:</p> <pre><code>php artisan vendor:publish --provider=\"LdapRecord\\Laravel\\LdapAuthServiceProvider\"\n</code></pre> <p>Then run the migration using the below command:</p> <pre><code>php artisan migrate\n</code></pre>"},{"location":"docs/laravel/v2/auth/database/installation/#add-the-required-trait-and-interface","title":"Add The Required Trait and Interface","text":"<p>Add the following interface and trait to your <code>User</code> Eloquent model:</p> <ul> <li>Trait: <code>LdapRecord\\Laravel\\Auth\\AuthenticatesWithLdap</code></li> <li>Interface: <code>LdapRecord\\Laravel\\Auth\\LdapAuthenticatable</code></li> </ul> <pre><code>// app/User.php\n\n// ...\n\nuse LdapRecord\\Laravel\\Auth\\LdapAuthenticatable;\nuse LdapRecord\\Laravel\\Auth\\AuthenticatesWithLdap;\n\nclass User extends Authenticatable implements LdapAuthenticatable\n{\n    use Notifiable, AuthenticatesWithLdap;\n\n    // ...\n}\n</code></pre> <p>This trait and interface provide LdapRecord the ability of setting and getting your users <code>domain</code> and <code>guid</code> database columns upon authentication.</p>"},{"location":"docs/laravel/v2/auth/database/installation/#migration-customization","title":"Migration Customization","text":"<p>You may change the database column names in the published migration to anything you would like. However, once you have done so, you must override the following methods in your Eloquent <code>User</code> model that are provided by the above mentioned LdapRecord trait and interface:</p> <pre><code>// app/User.php\n\n// ...\n\nuse LdapRecord\\Laravel\\Auth\\LdapAuthenticatable;\nuse LdapRecord\\Laravel\\Auth\\AuthenticatesWithLdap;\n\nclass User extends Authenticatable implements LdapAuthenticatable\n{\n    // ...\n\n    public function getLdapDomainColumn()\n    {\n        return 'my_domain_column';\n    }\n\n    public function getLdapGuidColumn()\n    {\n        return 'my_guid_column';\n    }\n}\n</code></pre>"},{"location":"docs/laravel/v2/auth/database/laravel-breeze/","title":"Laravel Breeze","text":""},{"location":"docs/laravel/v2/auth/database/laravel-breeze/#introduction","title":"Introduction","text":"<p>Important: Before getting started, please complete the below guides:</p> <ul> <li>Installation Guide</li> <li>Configuration Guide</li> </ul> <p>Laravel Breeze provides basic authentication scaffolding out-of-the-box.</p> <p>This guide will show you how to integrate LdapRecord-Laravel using this scaffolding.</p>"},{"location":"docs/laravel/v2/auth/database/laravel-breeze/#debugging","title":"Debugging","text":"<p>Inside of your <code>config/ldap.php</code> file, ensure you have <code>logging</code> enabled during the setup of authentication. Doing this will help you immensely in debugging connectivity and authentication issues.</p> <p>If you encounter issues along the way, be sure to open your <code>storage/logs</code> directory after you attempt signing in to your application and see what issues may be occurring.</p> <p>In addition, you may also run the below artisan command to test connectivity to your LDAP server:</p> <pre><code>php artisan ldap:test\n</code></pre>"},{"location":"docs/laravel/v2/auth/database/laravel-breeze/#login-request","title":"Login Request","text":"<p>For this example application, we will authenticate our LDAP users with their email address using the LDAP attribute <code>mail</code>.</p> <p>For LdapRecord to properly locate the user in your directory during sign in, we will override the <code>authenticate</code> method in the <code>LoginRequest</code>, and pass in an array with the <code>mail</code> key (which is the attribute we are wanting to retrieve our LDAP users by) and the users <code>password</code>:</p> <pre><code>// app/Http/Requests/Auth/LoginRequest.php\n\n/**\n * Attempt to authenticate the request's credentials.\n *\n * @return void\n *\n * @throws \\Illuminate\\Validation\\ValidationException\n */\npublic function authenticate()\n{\n    $this-&gt;ensureIsNotRateLimited();\n\n    $credentials = [\n        'mail' =&gt; $this-&gt;email,\n        'password' =&gt; $this-&gt;password,\n    ];\n\n    if (! Auth::attempt($credentials, $this-&gt;filled('remember'))) {\n        RateLimiter::hit($this-&gt;throttleKey());\n\n        throw ValidationException::withMessages([\n            'email' =&gt; __('auth.failed'),\n        ]);\n    }\n\n    RateLimiter::clear($this-&gt;throttleKey());\n}\n</code></pre> <p>That's it! You are now ready to authenticate LDAP users into your application.</p>"},{"location":"docs/laravel/v2/auth/database/laravel-breeze/#using-usernames","title":"Using Usernames","text":"<p>To authenticate your users by their username we must adjust some scaffolded code generated by Laravel Breeze.</p> <p>In the following example, we will authenticate users by their <code>sAMAccountName</code>.</p>"},{"location":"docs/laravel/v2/auth/database/laravel-breeze/#sync-attributes","title":"Sync Attributes","text":"<p>We will first need to adjust our <code>sync_attributes</code> array, located inside of our <code>config/auth.php</code> file.</p> <p>The only thing we need to change is the <code>email</code> key:</p> <p>From:</p> <pre><code>// config/auth.php\n\n'sync_attributes' =&gt; [\n    // ...\n    'email' =&gt; 'mail',\n],\n</code></pre> <p>To:</p> <pre><code>// config/auth.php\n\n'sync_attributes' =&gt; [\n    // ...\n    'username' =&gt; 'samaccountname',\n],\n</code></pre>"},{"location":"docs/laravel/v2/auth/database/laravel-breeze/#user-migration","title":"User Migration","text":"<p>Now that we have adjusted our synchronized attributes, we need to adjust the <code>users</code> database table migration.</p> <p>Similarly as above, we only need to change the <code>email</code> column to <code>username</code>:</p> <p>From:</p> <pre><code>Schema::create('users', function (Blueprint $table) {\n    // ...\n    $table-&gt;string('email')-&gt;unique();\n    // ...\n});\n</code></pre> <p>To:</p> <pre><code>Schema::create('users', function (Blueprint $table) {\n    // ...\n    $table-&gt;string('username')-&gt;unique();\n    // ...\n});\n</code></pre>"},{"location":"docs/laravel/v2/auth/database/laravel-breeze/#login-form","title":"Login Form","text":"<p>We're almost there. We will now need to update the input HTML field inside of the scaffolded <code>login.blade.php</code> view:</p> <p>From:</p> <pre><code>&lt;!-- resources/views/auth/login.blade.php --&gt;\n\n&lt;!-- Email Address --&gt;\n&lt;div&gt;\n  &lt;x-label for=\"email\" :value=\"__('Email')\" /&gt;\n\n  &lt;x-input\n    id=\"email\"\n    class=\"block w-full mt-1\"\n    type=\"email\"\n    name=\"email\"\n    :value=\"old('email')\"\n    required\n    autofocus\n  /&gt;\n&lt;/div&gt;\n</code></pre> <p>To:</p> <pre><code>&lt;!-- resources/views/auth/login.blade.php --&gt;\n\n&lt;!-- Username --&gt;\n&lt;div&gt;\n  &lt;x-label for=\"username\" :value=\"__('Username')\" /&gt;\n\n  &lt;x-input\n    id=\"username\"\n    class=\"block w-full mt-1\"\n    type=\"text\"\n    name=\"username\"\n    :value=\"old('username')\"\n    required\n    autofocus\n  /&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"docs/laravel/v2/auth/database/laravel-breeze/#login-request_1","title":"Login Request","text":"<p>This last step requires adjusting the <code>rules()</code> and <code>authenticate()</code> methods inside of the scaffolded <code>LoginRequest.php</code> class:</p> <p>From:</p> <pre><code>// app/Http/Requests/Auth/LoginRequest.php\n\npublic function rules()\n{\n    return [\n        'email' =&gt; 'required|string|email',\n        'password' =&gt; 'required|string',\n    ];\n}\n\npublic function authenticate()\n{\n    $this-&gt;ensureIsNotRateLimited();\n\n    if (! Auth::attempt($request-&gt;only('email', 'password'), $this-&gt;filled('remember'))) {\n        RateLimiter::hit($this-&gt;throttleKey());\n\n        throw ValidationException::withMessages([\n            'email' =&gt; __('auth.failed'),\n        ]);\n    }\n\n    RateLimiter::clear($this-&gt;throttleKey());\n}\n</code></pre> <p>To:</p> <pre><code>// app/Http/Requests/Auth/LoginRequest.php\n\npublic function rules()\n{\n    return [\n        'username' =&gt; 'required|string',\n        'password' =&gt; 'required|string',\n    ];\n}\n\npublic function authenticate()\n{\n    $this-&gt;ensureIsNotRateLimited();\n\n    $credentials = [\n        'samaccountname' =&gt; $this-&gt;username,\n        'password' =&gt; $this-&gt;password,\n    ];\n\n    if (! Auth::attempt($credentials, $this-&gt;filled('remember'))) {\n        RateLimiter::hit($this-&gt;throttleKey());\n\n        throw ValidationException::withMessages([\n            'email' =&gt; __('auth.failed'),\n        ]);\n    }\n\n    RateLimiter::clear($this-&gt;throttleKey());\n}\n</code></pre> <p>You are now ready to login LDAP users by their username!</p>"},{"location":"docs/laravel/v2/auth/database/laravel-breeze/#fallback-authentication","title":"Fallback Authentication","text":"<p>Database fallback allows the authentication of local database users if:</p> <ul> <li>LDAP connectivity is not present.</li> <li>Or; An LDAP user cannot be found.</li> </ul> <p>For example, given the following <code>users</code> database table:</p> id name email password guid domain 1 Steve Bauman sbauman@outlook.com ... <code>null</code> <code>null</code> <p>If a user attempts to login with the above email address and this user does not exist inside of your LDAP directory, then standard Eloquent authentication will be performed instead.</p> <p>This feature is ideal for environments where:</p> <ul> <li>LDAP server connectivity may be intermittent.</li> <li>Or; You have regular users registering normally in your application.</li> </ul> <p>To enable this feature, you must define a <code>fallback</code> array inside of the <code>$credentials</code> you pass to the <code>Auth::attempt()</code> method inside of your <code>LoginRequest</code>:</p> <pre><code>// app/Http/Requests/Auth/LoginRequest.php\n\npublic function authenticate()\n{\n    $this-&gt;ensureIsNotRateLimited();\n\n    $credentials = [\n        'mail' =&gt; $this-&gt;email,\n        'password' =&gt; $this-&gt;password,\n        'fallback' =&gt; [\n            'email' =&gt; $this-&gt;email,\n            'password' =&gt; $this-&gt;password,\n        ],\n    ];\n\n    if (! Auth::attempt($credentials, $this-&gt;filled('remember'))) {\n        RateLimiter::hit($this-&gt;throttleKey());\n\n        throw ValidationException::withMessages([\n            'email' =&gt; __('auth.failed'),\n        ]);\n    }\n\n    RateLimiter::clear($this-&gt;throttleKey());\n}\n</code></pre> <p>If you would like your LDAP users to be able to sign in to your application when LDAP connectivity fails or is not present, you must enable the sync passwords option, so your LDAP users can sign in using their last used password.  If an LDAP users password has not been synchronized, they will not be able to sign in.</p>"},{"location":"docs/laravel/v2/auth/database/laravel-breeze/#eloquent-model-binding","title":"Eloquent Model Binding","text":"<p>Model binding allows you to access the currently authenticated user's LdapRecord model from their Eloquent model. This grants you access to their LDAP model whenever you need it.</p> <p>To begin, insert the <code>LdapRecord\\Laravel\\Auth\\HasLdapUser</code> trait onto your <code>User</code> eloquent model:</p> <pre><code>// app/Models/User.php\n\n// ...\n\nuse LdapRecord\\Laravel\\Auth\\HasLdapUser;\nuse LdapRecord\\Laravel\\Auth\\LdapAuthenticatable;\nuse LdapRecord\\Laravel\\Auth\\AuthenticatesWithLdap;\n\nclass User extends Authenticatable implements LdapAuthenticatable\n{\n    use HasFactory, Notifiable, AuthenticatesWithLdap, HasLdapUser;\n\n    // ...\n}\n</code></pre> <p>Now, after an LDAP user logs into your application, their LdapRecord model will be available on their Eloquent model via the <code>ldap</code> property:</p> <p>If their LDAP model cannot be located, the returned will be <code>null</code>.</p> <pre><code>// Instance of App\\Models\\User:\n$user = Auth::user();\n\n// Instance of LdapRecord\\Models\\Model:\n$user-&gt;ldap;\n\n// Get LDAP user attributes:\necho $user-&gt;ldap-&gt;getFirstAttribute('cn');\n\n// Get LDAP user relationships:\n$groups = $user-&gt;ldap-&gt;groups()-&gt;get();\n</code></pre> <p>This property uses deferred loading -- which means that the users LDAP model only gets requested from your server when you attempt to access it. This prevents loading the model unnecessarily when it is not needed in your application.</p>"},{"location":"docs/laravel/v2/auth/database/laravel-breeze/#displaying-ldap-error-messages","title":"Displaying LDAP Error Messages","text":"<p>When a user fails LDAP authentication due to their password / account expiring, account lockout, or their password requiring to be changed, specific error codes will be sent back from your server. LdapRecord can interpret these for you and display helpful error messages to users upon failing authentication.</p> <p></p> <p>To enable this feature, you will have to:</p> <ol> <li>Navigate to the scaffolded <code>AuthenticatedSessionController.php</code></li> <li>Insert the <code>ListensForLdapBindFailure</code> trait</li> <li>Call the <code>listenForLdapBindFailure()</code> method in the constructor:</li> </ol> <pre><code>// app/Http/Controllers/Auth/AuthenticatedSessionController.php\n\nuse LdapRecord\\Laravel\\Auth\\ListensForLdapBindFailure;\n\nclass AuthenticatedSessionController extends Controller\n{\n    use ListensForLdapBindFailure;\n\n    public function __construct()\n    {\n        $this-&gt;listenForLdapBindFailure();\n    }\n\n    // ...\n}\n</code></pre>"},{"location":"docs/laravel/v2/auth/database/laravel-breeze/#changing-the-input-field","title":"Changing The Input Field","text":"<p>By default, LdapRecord-Laravel will attach the LDAP error to the <code>email</code> input field. If you're using a different input field, you can customize it by adding a <code>username</code> property to the <code>AuthenticatedSessionController</code>:</p> <pre><code>use LdapRecord\\Laravel\\Auth\\ListensForLdapBindFailure;\n\nclass AuthenticatedSessionController extends Controller\n{\n    use ListensForLdapBindFailure;\n\n    protected $username = 'username';\n\n    public function __construct()\n    {\n        $this-&gt;listenForLdapBindFailure();\n    }\n\n    // ...\n}\n</code></pre>"},{"location":"docs/laravel/v2/auth/database/laravel-breeze/#changing-the-error-messages","title":"Changing the Error Messages","text":"<p>If you need to modify the translations of these error messages, create a new translation file named <code>errors.php</code> in your <code>resources</code> directory at the following path:</p> <p>The <code>vendor</code> directory (and each sub-directory) will have to be created manually.</p>"},{"location":"docs/laravel/v2/auth/database/laravel-breeze/#laravel-9","title":"Laravel &gt;= 9","text":"<pre><code>lang/\n\u2514\u2500\u2500 vendor/\n    \u2514\u2500\u2500 ldap/\n        \u2514\u2500\u2500 en/\n            \u2514\u2500\u2500 errors.php\n</code></pre>"},{"location":"docs/laravel/v2/auth/database/laravel-breeze/#laravel-8","title":"Laravel &lt;= 8","text":"<pre><code>resources/\n\u2514\u2500\u2500 lang/\n    \u2514\u2500\u2500 vendor/\n        \u2514\u2500\u2500 ldap/\n            \u2514\u2500\u2500 en/\n                \u2514\u2500\u2500 errors.php\n</code></pre> <p>Then, paste in the following translations in the file and modify where necessary:</p> <pre><code>&lt;?php\n\nreturn [\n    'user_not_found' =&gt; 'User not found.',\n    'user_not_permitted_at_this_time' =&gt; 'Not permitted to logon at this time.',\n    'user_not_permitted_to_login' =&gt; 'Not permitted to logon at this workstation.',\n    'password_expired' =&gt; 'Your password has expired.',\n    'account_disabled' =&gt; 'Your account is disabled.',\n    'account_expired' =&gt; 'Your account has expired.',\n    'user_must_reset_password' =&gt; 'You must reset your password before logging in.',\n    'user_account_locked' =&gt; 'Your account is locked.',\n];\n</code></pre>"},{"location":"docs/laravel/v2/auth/database/laravel-breeze/#altering-the-response","title":"Altering the Response","text":"<p>By default, when an LDAP bind failure occurs, a <code>ValidationException</code> will be thrown which will redirect users to your login page and display the error. If you would like to modify this behaviour, you will need to override the method <code>handleLdapBindError</code>.</p> <p>This method will include the error <code>$message</code> as the first parameter and the error <code>$code</code> as the second. This is useful for checking for specific Active Directory response codes and returning a response:</p> <pre><code>use Illuminate\\Validation\\ValidationException;\nuse LdapRecord\\Laravel\\Auth\\ListensForLdapBindFailure;\n\nclass AuthenticatedSessionController extends Controller\n{\n    use ListensForLdapBindFailure;\n\n    protected function handleLdapBindError($message, $code = null)\n    {\n        if ($code == '773') {\n            // The users password has expired. Redirect them.\n            abort(redirect('/password-reset'));\n        }\n\n        throw ValidationException::withMessages([\n            'email' =&gt; \"Whoops! LDAP server cannot be reached.\",\n        ]);\n    }\n\n    // ...\n}\n</code></pre> <p>Refer to the Password Policy Errors documentation to see what each code means.</p>"},{"location":"docs/laravel/v2/auth/database/laravel-jetstream/","title":"Laravel Jetstream","text":""},{"location":"docs/laravel/v2/auth/database/laravel-jetstream/#introduction","title":"Introduction","text":"<p>Important: Before getting started, please complete the below guides:</p> <ul> <li>Installation Guide</li> <li>Configuration Guide</li> </ul> <p>Laravel Jetstream provides robust authentication scaffolding out-of-the-box. It utilizes Laravel Fortify for authentication under the hood.</p> <p>We will customize various aspects of Jetsream and Fortify to allow LDAP users to sign into the application.</p>"},{"location":"docs/laravel/v2/auth/database/laravel-jetstream/#debugging","title":"Debugging","text":"<p>Inside of your <code>config/ldap.php</code> file, ensure you have <code>logging</code> enabled during the setup of authentication. Doing this will help you immensely in debugging connectivity and authentication issues.</p> <p>If you encounter issues along the way, be sure to open your <code>storage/logs</code> directory after you attempt signing in to your application and see what issues may be occurring.</p> <p>In addition, you may also run the below artisan command to test connectivity to your LDAP server:</p> <pre><code>php artisan ldap:test\n</code></pre>"},{"location":"docs/laravel/v2/auth/database/laravel-jetstream/#fortify-setup","title":"Fortify Setup","text":""},{"location":"docs/laravel/v2/auth/database/laravel-jetstream/#authentication-callback","title":"Authentication Callback","text":"<p>For this example application, we will authenticate our LDAP users with their email address using the LDAP attribute <code>mail</code>.</p> <p>For LdapRecord to properly locate the user in your directory during sign in, we will override Fortify's authentication callback using the <code>Fortify::authenticateUsing()</code> method in our <code>AuthServiceProvider.php</code> file:</p> <pre><code>// app/Providers/AuthServiceProvider.php\n\n// ...\nuse Laravel\\Fortify\\Fortify;\nuse Illuminate\\Support\\Facades\\Auth;\n\nclass AuthServiceProvider extends ServiceProvider\n{\n    // ...\n\n    public function boot()\n    {\n        $this-&gt;registerPolicies();\n\n        Fortify::authenticateUsing(function ($request) {\n            $validated = Auth::validate([\n                'mail' =&gt; $request-&gt;email,\n                'password' =&gt; $request-&gt;password\n            ]);\n\n            return $validated ? Auth::getLastAttempted() : null;\n        });\n    }\n}\n</code></pre> <p>As you can see above, we set the <code>mail</code> key which is passed to the LdapRecord authentication provider.</p> <p>A search query will be executed on your LDAP directory for a user that contains the <code>mail</code> attribute equal to the entered <code>email</code> that the user has submitted on your login form. The <code>password</code> key will not be used in the search.</p> <p>If a user cannot be located in your directory, or they fail authentication, they will be redirected to the login page normally with the \"Invalid credentials\" error message.</p> <p>You may also add extra key =&gt; value pairs in the <code>credentials</code> array to further scope the LDAP query. The <code>password</code> key is automatically ignored by LdapRecord.</p>"},{"location":"docs/laravel/v2/auth/database/laravel-jetstream/#feature-configuration","title":"Feature Configuration","text":"<p>Since we are synchronizing data from our LDAP server, we must disable the following features by commenting them out inside of the <code>config/fortify.php</code> file:</p> <pre><code>// config/fortify.php\n\n// Before:\n'features' =&gt; [\n    Features::registration(),\n    Features::resetPasswords(),\n    // Features::emailVerification(),\n    Features::updateProfileInformation(),\n    Features::updatePasswords(),\n    // Features::twoFactorAuthentication(),\n],\n\n// After:\n'features' =&gt; [\n    // Features::registration(),\n    // Features::resetPasswords(),\n    // Features::emailVerification(),\n    // Features::updateProfileInformation(),\n    // Features::updatePasswords(),\n    // Features::twoFactorAuthentication(),\n],\n</code></pre> <p>Important: You may keep <code>Features::registration()</code> enabled if you would like to continue accepting local application user registration. Keep in mind, if you continue to allow registration, you will need to either use multiple Laravel authentication guards, or setup the login fallback feature.</p>"},{"location":"docs/laravel/v2/auth/database/laravel-jetstream/#using-usernames","title":"Using Usernames","text":"<p>To authenticate your users by their username we must adjust some scaffolded code generated by Laravel Jetstream.</p> <p>In the following example, we will authenticate users by their <code>sAMAccountName</code>.</p>"},{"location":"docs/laravel/v2/auth/database/laravel-jetstream/#fortify-setup_1","title":"Fortify Setup","text":""},{"location":"docs/laravel/v2/auth/database/laravel-jetstream/#authentication-callback_1","title":"Authentication Callback","text":"<p>With our Fortiy configuration updated, we will jump into our <code>AuthServiceProvider.php</code> file and setup our authentication callback using the <code>Fortify::authenticateUsing()</code> method:</p> <pre><code>// app/Providers/AuthServiceProvider.php\n\n// ...\nuse Laravel\\Fortify\\Fortify;\nuse Illuminate\\Support\\Facades\\Auth;\n\nclass AuthServiceProvider extends ServiceProvider\n{\n    // ...\n\n    public function boot()\n    {\n        $this-&gt;registerPolicies();\n\n        Fortify::authenticateUsing(function ($request) {\n            $validated = Auth::validate([\n                'samaccountname' =&gt; $request-&gt;username,\n                'password' =&gt; $request-&gt;password\n            ]);\n\n            return $validated ? Auth::getLastAttempted() : null;\n        });\n    }\n}\n</code></pre>"},{"location":"docs/laravel/v2/auth/database/laravel-jetstream/#username-configuration","title":"Username Configuration","text":"<p>Inside of our <code>config/fortify.php</code> file, we must change the <code>username</code> option to <code>username</code> from <code>email</code>:</p> <pre><code>// config/fortify.php\n\n// Before:\n'username' =&gt; 'email',\n\n// After:\n'username' =&gt; 'username',\n</code></pre> <p>You will notice above that we are passing in an array of credentials with <code>samaccountname</code> as the key, and the requests <code>username</code> form input.</p>"},{"location":"docs/laravel/v2/auth/database/laravel-jetstream/#database-migration","title":"Database Migration","text":"<p>The built in <code>users</code> database table migration must also be modified to use a <code>username</code> column instead of <code>email</code>:</p> <pre><code>// database/migrations/2014_10_12_000000_create_users_table.php\n\n// Before:\n$table-&gt;string('email')-&gt;unique();\n\n// After:\n$table-&gt;string('username')-&gt;unique();\n</code></pre>"},{"location":"docs/laravel/v2/auth/database/laravel-jetstream/#sync-attributes","title":"Sync Attributes","text":"<p>When using usernames, we must also adjust the <code>sync_attributes</code> option inside of our <code>config/auth.php</code> file. We will adjust it to reflect our <code>username</code> database column to be synchronized with the <code>samaccountname</code> attribute:</p> <pre><code>// config/auth.php\n\n'providers' =&gt; [\n    // ...\n\n    'ldap' =&gt; [\n        // ...\n        'database' =&gt; [\n            // ...\n            'sync_attributes' =&gt; [\n                'name' =&gt; 'cn',\n                'username' =&gt; 'samaccountname',\n            ],\n        ],\n    ],\n],\n</code></pre> <p>Remember to add any additional database columns you need synchronized here.</p>"},{"location":"docs/laravel/v2/auth/database/laravel-jetstream/#login-view","title":"Login View","text":"<p>Now we must open up the <code>login.blade.php</code> view and swap the current HTML input field from <code>email</code> to <code>username</code> so we can retrieve it properly in our <code>Fortify::authenticateUsing()</code> callback:</p> <pre><code>&lt;!-- Before: --&gt;\n&lt;div&gt;\n  &lt;x-jet-label value=\"Email\" /&gt;\n  &lt;x-jet-input\n    class=\"block w-full mt-1\"\n    type=\"email\"\n    name=\"email\"\n    :value=\"old('email')\"\n    required\n    autofocus\n  /&gt;\n&lt;/div&gt;\n\n&lt;!-- After: --&gt;\n&lt;div&gt;\n  &lt;x-jet-label value=\"Username\" /&gt;\n  &lt;x-jet-input\n    class=\"block w-full mt-1\"\n    type=\"text\"\n    name=\"username\"\n    :value=\"old('username')\"\n    required\n    autofocus\n  /&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"docs/laravel/v2/auth/database/laravel-jetstream/#user-model","title":"User Model","text":"<p>If you plan on allowing non-LDAP users to register and login to your application, you must adjust the <code>$fillable</code> attributes property on your <code>app/Models/User.php</code> to include the <code>username</code> column instead of <code>email</code>:</p> <pre><code>// app/Models/User.php\n\nclass User extends Authenticatable implements LdapAuthenticatable\n{\n    // ...\n\n    // Before:\n    protected $fillable = [\n        'name',\n        'email',\n        'password',\n    ];\n\n    // After:\n    protected $fillable = [\n        'name',\n        'username',\n        'password',\n    ];\n}\n</code></pre>"},{"location":"docs/laravel/v2/auth/database/laravel-jetstream/#fallback-authentication","title":"Fallback Authentication","text":"<p>Database fallback allows the authentication of local database users if LDAP connectivity is not present, or an LDAP user cannot be found.</p> <p>To enable this feature, you must define a <code>fallback</code> array inside of the credentials you insert into the <code>Auth::validate()</code> method in your <code>Fortify::authenticateUsing()</code> callback:</p> <pre><code>// app/Providers/AuthServiceProvider.php\n\nuse Laravel\\Fortify\\Fortify;\nuse Illuminate\\Support\\Facades\\Auth;\n\nclass AuthServiceProvider extends ServiceProvider\n{\n    // ...\n\n    public function boot()\n    {\n        $this-&gt;registerPolicies();\n\n        Fortify::authenticateUsing(function ($request) {\n            $validated = Auth::validate([\n                'mail' =&gt; $request-&gt;email,\n                'password' =&gt; $request-&gt;password,\n                'fallback' =&gt; [\n                    'email' =&gt; $request-&gt;email,\n                    'password' =&gt; $request-&gt;password,\n                ],\n            ]);\n\n            return $validated ? Auth::getLastAttempted() : null;\n        });\n    }\n}\n</code></pre> <p>For example, given the following <code>users</code> database table:</p> id name email password guid domain 1 Steve Bauman sbauman@outlook.com ... <code>null</code> <code>null</code> <p>If a user attempts to login with the above email address and this user does not exist inside of your LDAP directory, then standard Eloquent authentication will be performed instead.</p> <p>This feature is ideal for environments where:</p> <ul> <li>LDAP server connectivity may be intermittent</li> <li>Or; You have regular users registering normally in your application</li> </ul> <p>If you would like your LDAP users to be able to sign in to your application when LDAP connectivity fails or is not present, you must enable the sync passwords option, so your LDAP users can sign in using their last successfully used password.  If an LDAP users password has not been synchronized, they will not be able to sign in.</p>"},{"location":"docs/laravel/v2/auth/database/laravel-jetstream/#eloquent-model-binding","title":"Eloquent Model Binding","text":"<p>Model binding allows you to access the currently authenticated user's LdapRecord model from their Eloquent model. This grants you access to their LDAP model whenever you need it.</p> <p>To begin, insert the <code>LdapRecord\\Laravel\\Auth\\HasLdapUser</code> trait onto your User model:</p> <pre><code>// app/Models/User.php\n\n// ...\nuse LdapRecord\\Laravel\\Auth\\HasLdapUser;\nuse LdapRecord\\Laravel\\Auth\\LdapAuthenticatable;\nuse LdapRecord\\Laravel\\Auth\\AuthenticatesWithLdap;\n\nclass User extends Authenticatable implements LdapAuthenticatable\n{\n    //...\n\n    use HasLdapUser;\n\n    // ...\n}\n</code></pre> <p>Now, after an LDAP user logs into your application, their LdapRecord model will be available on their Eloquent model via the <code>ldap</code> property:</p> <p>If their LDAP model cannot be located, the returned value will be <code>null</code>.</p> <pre><code>// Instance of App\\Models\\User\n$user = Auth::user();\n\n// Instance of App\\Ldap\\User\n$user-&gt;ldap;\n\n// Get LDAP user attributes\necho $user-&gt;ldap-&gt;getFirstAttribute('cn');\n\n// Get LDAP user relationships:\n$groups = $user-&gt;ldap-&gt;groups()-&gt;get();\n</code></pre> <p>This property uses deferred loading -- which means that the users LDAP model only gets requested from your server when you attempt to access it. This prevents loading the model unnecessarily when it is not needed in your application.</p>"},{"location":"docs/laravel/v2/auth/database/laravel-jetstream/#displaying-ldap-error-messages","title":"Displaying LDAP Error Messages","text":"<p>When using Laravel Jetstream, LDAP error messages will now be displayed automatically to users. You do not need to configure or include the <code>ListensForLdapBindFailure</code> trait as you would using Laravel UI on the <code>LoginController</code>.</p>"},{"location":"docs/laravel/v2/auth/database/laravel-jetstream/#altering-the-response","title":"Altering the Response","text":"<p>Since this functionality is now automatically registered, if you would like to modify how an error is handled, call the <code>setErrorHandler</code> method on the <code>BindFailureListener</code> class inside of your <code>AuthServiceProvider.php</code> file:</p> <pre><code>// app/Providers/AuthServiceProvider.php\n\n// ...\nuse LdapRecord\\Laravel\\Auth\\BindFailureListener;\n\nclass AuthServiceProvider extends ServiceProvider\n{\n    // ...\n\n    public function boot()\n    {\n        $this-&gt;registerPolicies();\n\n        BindFailureListener::setErrorHandler(function ($message, $code = null) {\n            if ($code == '773') {\n                // The users password has expired. Redirect them.\n                abort(redirect('/password-reset'));\n            }\n        });\n    }\n}\n</code></pre> <p>Refer to the Password Policy Errors documentation to see what each code means.</p>"},{"location":"docs/laravel/v2/auth/database/laravel-jetstream/#changing-the-error-messages","title":"Changing the Error Messages","text":"<p>If you need to modify the translations of these error messages, create a new translation file named <code>errors.php</code> in your <code>resources</code> directory at the following path:</p> <p>The <code>vendor</code> directory (and each sub-directory) will have to be created manually.</p>"},{"location":"docs/laravel/v2/auth/database/laravel-jetstream/#laravel-9","title":"Laravel &gt;= 9","text":"<pre><code>lang/\n\u2514\u2500\u2500 vendor/\n    \u2514\u2500\u2500 ldap/\n        \u2514\u2500\u2500 en/\n            \u2514\u2500\u2500 errors.php\n</code></pre>"},{"location":"docs/laravel/v2/auth/database/laravel-jetstream/#laravel-8","title":"Laravel &lt;= 8","text":"<pre><code>resources/\n\u2514\u2500\u2500 lang/\n    \u2514\u2500\u2500 vendor/\n        \u2514\u2500\u2500 ldap/\n            \u2514\u2500\u2500 en/\n                \u2514\u2500\u2500 errors.php\n</code></pre> <p>Then, paste in the following translations in the file and modify where necessary:</p> <pre><code>&lt;?php\n\nreturn [\n    'user_not_found' =&gt; 'User not found.',\n    'user_not_permitted_at_this_time' =&gt; 'Not permitted to logon at this time.',\n    'user_not_permitted_to_login' =&gt; 'Not permitted to logon at this workstation.',\n    'password_expired' =&gt; 'Your password has expired.',\n    'account_disabled' =&gt; 'Your account is disabled.',\n    'account_expired' =&gt; 'Your account has expired.',\n    'user_must_reset_password' =&gt; 'You must reset your password before logging in.',\n    'user_account_locked' =&gt; 'Your account is locked.',\n];\n</code></pre>"},{"location":"docs/laravel/v2/auth/database/laravel-jetstream/#teams","title":"Teams","text":""},{"location":"docs/laravel/v2/auth/database/laravel-jetstream/#default-team-assignment","title":"Default Team Assignment","text":"<p>Since LDAP users are not registered through Jetstream's interface and are instead created through an import or successful authentication, you will have to assign their default team by utilizing LdapRecord's <code>Imported</code> event, which is fired directly after a new user has been imported or created inside of your applications database.</p> <p>Create the event listener executing the below command:</p> <pre><code>php artisan make:listener AssignTeam --event=\"LdapRecord\\Laravel\\Events\\Import\\Imported\"\n</code></pre> <p>Inside of the event listener, attach the users team as you would during a normal users registration through the registration interface:</p> <pre><code>namespace App\\Listeners;\n\nuse App\\Models\\Team;\nuse LdapRecord\\Laravel\\Events\\Import\\Imported;\n\nclass AssignTeam\n{\n    /**\n     * Handle the event.\n     *\n     * @param Imported $event\n     *\n     * @return void\n     */\n    public function handle(Imported $event)\n    {\n        $user = $event-&gt;eloquent;\n\n        $user-&gt;ownedTeams()-&gt;save(Team::forceCreate([\n            'user_id' =&gt; $user-&gt;id,\n            'name' =&gt; explode(' ', $user-&gt;name, 2)[0].\"'s Team\",\n            'personal_team' =&gt; true,\n        ]));\n    }\n}\n</code></pre> <p>Finally, register the event inside of your <code>EventServiceProvider</code>:</p> <pre><code>// app/Providers/EventServiceProvider.php\n\nuse App\\Listeners\\AssignTeam;\nuse LdapRecord\\Laravel\\Events\\Import\\Imported;\n\n/**\n * The event listener mappings for the application.\n *\n * @var array\n */\nprotected $listen = [\n    Imported::class =&gt; [\n        AssignTeam::class,\n    ],\n];\n</code></pre>"},{"location":"docs/laravel/v2/auth/database/laravel-sanctum/","title":"Laravel Sanctum","text":""},{"location":"docs/laravel/v2/auth/database/laravel-sanctum/#introduction","title":"Introduction","text":"<p>Laravel Sanctum provides a featherweight authentication system for SPAs and simple APIs.</p> <p>Since LdapRecord-Laravel provides a database authentication driver, it integrates with Sanctum directly, similarly to the built in <code>eloquent</code> driver.</p> <p>Important: Before getting started, please complete the below guides:</p> <ul> <li>Installation Guide</li> <li>Configuration Guide</li> <li>Sanctum Installation Guide</li> </ul>"},{"location":"docs/laravel/v2/auth/database/laravel-sanctum/#preparing-the-user-eloquent-model","title":"Preparing The User Eloquent Model","text":"<p>If you've followed the above guides, your Eloquent user model should resemble the below:</p> <pre><code>// app/Models/User.php\n\n// ...\nuse Laravel\\Sanctum\\HasApiTokens;\nuse LdapRecord\\Laravel\\Auth\\HasLdapUser;\nuse LdapRecord\\Laravel\\Auth\\LdapAuthenticatable;\n\nclass User extends Authenticatable implements LdapAuthenticatable\n{\n    // ...\n    use HasApiTokens;\n    use AuthenticatesWithLdap;\n    // ...\n}\n</code></pre>"},{"location":"docs/laravel/v2/auth/database/laravel-sanctum/#spa-authentication","title":"SPA Authentication","text":"<p>Important:</p> <p>Please read Laravel Sanctum's SPA Authentication setup guide before proceeding.</p> <p>SPA Authentication means that you have a frontend-based application that will be sending requests to your own application's protected route endpoints (via the <code>auth:sanctum</code> middleware).</p>"},{"location":"docs/laravel/v2/auth/database/laravel-sanctum/#preparing-the-authentication-guard","title":"Preparing The Authentication Guard","text":"<p>Laravel Sanctum will utilize the <code>web</code> authentication guard specified in your <code>config/auth.php</code> file by default.</p> <p>Make sure this guard exists and is utilizing the <code>session</code> driver:</p> <pre><code>// config/auth.php\n\n'guards' =&gt; [\n    'web' =&gt; [\n        'driver' =&gt; 'session',\n        'provider' =&gt; 'users',\n    ],\n\n    // ...\n],\n</code></pre> <p>If you want to change the guard Sanctum uses, publish it's configuration file by running the below command:</p> <p>Important: As mentioned above, any custom guard must use a <code>session</code> driver for Sanctum to function.</p> <pre><code>php artisan vendor:publish --tag=\"sanctum-config\"\n</code></pre> <p>Then, update the <code>guard</code> configuration option:</p> <pre><code>// config/sanctum.php\n\n'guard' =&gt; ['web'],\n</code></pre>"},{"location":"docs/laravel/v2/auth/database/laravel-sanctum/#setting-up-the-sanctum-middleware","title":"Setting Up The Sanctum Middleware","text":"<p>If you're going to be sending requests to your <code>/api</code> endpoints from your application's frontend, you must insert a Sanctum middleware into your Laravel application's <code>api</code> middleware group for those requests to be automatically authenticated.</p> <p>This means that users who have logged into your frontend application will not need to manually provide a Sanctum token to send requests to your protected <code>/api</code> endpoints. This middleware is responsible for booting up the session during API requests that are received from your frontend:</p> <p>Important:</p> <p>The position of this middleware is crucial. The <code>throttle:api</code> middleware will utilize a different throttle cache key for authenticated users than guests.</p> <p>Since the <code>EnsureFrontendRequestsAreStateful</code> is inserted before <code>throttle:api</code>, the session will be started and an authenticated user will exist, allowing the <code>throttle:api</code> to access them and bind a unique throttle key to them.</p> <p>You may have to tweak this <code>throttle:api</code> middleware if your frontend application sends large amounts of API requests.</p> <pre><code>// app/Http/Kernel.php\n\nprotected $middlewareGroups = [\n    // ...\n\n    'api' =&gt; [\n        \\Laravel\\Sanctum\\Http\\Middleware\\EnsureFrontendRequestsAreStateful::class, // &lt;-- Inserted here.\n        'throttle:api',\n        \\Illuminate\\Routing\\Middleware\\SubstituteBindings::class,\n    ],\n],\n</code></pre> <p>How does Sanctum know that the request came from your frontend? Well, it does this by checking the domain that the request was sent from to see if it matches with your application server's URL, or one of the URL's configured inside of the <code>sanctum.php</code> configuration file:</p> <pre><code>// config/sanctum.php\n\n'stateful' =&gt; explode(',', env('SANCTUM_STATEFUL_DOMAINS', sprintf(\n    '%s%s',\n    'localhost,localhost:3000,127.0.0.1,127.0.0.1:8000,::1',\n    Sanctum::currentApplicationUrlWithPort()\n))),\n</code></pre> <p>As you can see, various <code>localhost</code> domains are included, which is why we can test with Sanctum locally.</p>"},{"location":"docs/laravel/v2/auth/database/laravel-sanctum/#logging-in","title":"Logging In","text":"<p>Important:</p> <p>It's recommended to use Laravel Fortify as a starting point for authenticating users. This guide assumes you have setup authentication using one of the documented packages.</p> <p>As mentioned in the Laravel Sanctum documentation, you must first initialize a CSRF cookie by requesting one from an endpoint Sanctum integrates into your application automatically (<code>/sanctum/csrf-token</code>). When you send a request to this endpoint, your application will send cookie headers back, containing the X-CSRF token.</p> <p>Once a successful <code>204</code> (No content) response is received from the CSRF token endpoint resulting in a new CSRF cookie containing the token, you may send a login request to your application. This login request will initialize the session by sending back a new session cookie in the header (upon providing valid credentials).</p> <p>When this session cookie is received by your web browser, <code>axios</code> (and other HTTP JavaScript clients) should automatically send this cookie along with any subsequent requests. Laravel Sanctum will read this cookie that is sent along your request and authenticate the user for you, allowing the user to access protected routes.</p> <p>Here's how a login request via <code>axios</code> could be made:</p> <pre><code>let credentials = {\n    email: 'john@local.com',\n    password: 'secret',\n};\n\naxios.get('/sanctum/csrf-cookie').then(response =&gt; {\n    axios.post('/login', credentials).then('...');\n});\n</code></pre>"},{"location":"docs/laravel/v2/auth/database/laravel-sanctum/#api-token-authentication","title":"API Token Authentication","text":"<p>Important:</p> <p>Please read Laravel Sanctum's API Token Authentication setup guide before proceeding.</p> <p>If your application is going to provide an API to end users or external services, you will need to implement API token authentication.</p>"},{"location":"docs/laravel/v2/auth/database/laravel-sanctum/#issuing-api-tokens","title":"Issuing API Tokens","text":"<p>To start issuing new user API tokens, we will take Sanctum's default suggested endpoint for issuing tokens, and then tweak it a little bit.</p> <p>Open your <code>routes/api.php</code> file, and paste the below:</p> <pre><code>// routes/api.php\n\nuse App\\Models\\User;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Route;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Validation\\ValidationException;\n\nRoute::middleware('auth:sanctum')-&gt;get('/user', function (Request $request) {\n    return $request-&gt;user();\n});\n\nRoute::post('sanctum/token', function (Request $request) {\n    $request-&gt;validate([\n        'email' =&gt; 'required|email',\n        'password' =&gt; 'required',\n        'device_name' =&gt; 'required',\n    ]);\n\n    // Remember, an LDAP query will be executed on all the array\n    // elements in the credentials array (excluding \"password\").\n    // Here, we're locating a user via their \"mail\" attribute.\n    $credentials = [\n        'mail' =&gt; $request-&gt;email,\n        'password' =&gt; $request-&gt;password,\n    ];\n\n    if (Auth::validate($credentials)) {\n        $user = Auth::getLastAttempted();\n\n        return [\n            'token' =&gt; $user-&gt;createToken($request-&gt;device_name)-&gt;plainTextToken\n        ];\n    }\n\n    throw ValidationException::withMessages([\n        'email' =&gt; ['The provided credentials are incorrect.'],\n    ]);\n});\n</code></pre> <p>This is all that is needed to generate new API tokens, and to start using those tokens to authenticate against your server with.</p> <p>Let's make sure these endpoints work with some tests.</p>"},{"location":"docs/laravel/v2/auth/database/laravel-sanctum/#testing","title":"Testing","text":""},{"location":"docs/laravel/v2/auth/database/laravel-sanctum/#tinkerwell-testing","title":"Tinkerwell Testing","text":"<p>To test your Sanctum endpoint with Tinkerwell, serve your Laravel application by running the below command:</p> <pre><code>php artisan serve\n\n&gt; Starting Laravel development server: http://127.0.0.1:8000\n</code></pre> <p>Then, send a post request to <code>api/sanctum/token</code>:</p> <pre><code>use Illuminate\\Support\\Facades\\Http;\n\n$data = [\n  'email' =&gt; 'johndoe@local.com',\n  'password' =&gt; 'secret',\n  'device_name' =&gt; 'browser',\n];\n\n$response = Http::baseUrl('http://127.0.0.1:8000')\n  -&gt;withHeaders(['accept' =&gt; 'application/json'])\n  -&gt;post('api/sanctum/token', $data)\n  -&gt;json();\n\n// ['token' =&gt; '5|iSO2wH8W....']\ndd($response);\n</code></pre> <p>To ensure the token works, capture a returned token from the above request, and send it with <code>Authorization</code> headers to <code>api/user</code>:</p> <pre><code>$token = '5|iSO2wH8W....';\n\n$response = Http::baseUrl('http://127.0.0.1:8000')\n  -&gt;withHeaders(['accept' =&gt; 'application/json'])\n  -&gt;withToken($token)\n  -&gt;get('api/user')\n  -&gt;body();\n\n// ['id' =&gt; 1, 'name' =&gt; 'John Doe', ...]\ndd($response);\n</code></pre>"},{"location":"docs/laravel/v2/auth/database/laravel-sanctum/#phpunit-testing","title":"PHPUnit Testing","text":"<p>Important: If you are using SQLite to test, remember to install <code>doctrine/dbal</code> before getting started, as mentioned in the test guide:</p> <p><code>bash composer require doctrine/dbal --dev</code></p> <p>To begin, let's create a Sanctum test to make sure both our API endpoints are working:</p> <pre><code>php artisan make:test SanctumTokenTest\n</code></pre> <p>Open the new file and erase the existing example test:</p> <pre><code>namespace Tests\\Feature;\n\nuse Tests\\TestCase;\nuse Illuminate\\Foundation\\Testing\\WithFaker;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\n\nclass SanctumTokenTest extends TestCase\n{\n}\n</code></pre> <p>We'll need to <code>use</code> the <code>DatabaseMigrations</code> trait to run our application's migrations:</p> <pre><code>// ...\nuse Illuminate\\Foundation\\Testing\\DatabaseMigrations;\n\nclass SanctumTokenTest extends TestCase\n{\n    use DatabaseMigrations;\n}\n</code></pre> <p>Now let's add a test to ensure our LDAP user can authenticate and get an API token:</p> <pre><code>namespace Tests\\Feature;\n\nuse Tests\\TestCase;\nuse App\\Models\\User;\nuse Laravel\\Sanctum\\PersonalAccessToken;\nuse Illuminate\\Testing\\Fluent\\AssertableJson;\nuse LdapRecord\\Laravel\\Testing\\DirectoryEmulator;\nuse Illuminate\\Foundation\\Testing\\DatabaseMigrations;\nuse LdapRecord\\Models\\ActiveDirectory\\User as LdapUser;\n\nclass SanctumTokenTest extends TestCase\n{\n    use DatabaseMigrations;\n\n    protected function tearDown(): void\n    {\n        DirectoryEmulator::tearDown();\n\n        parent::tearDown();\n    }\n\n    public function testLdapUserCanRetrieveToken()\n    {\n        // Setup the directory emulator to create a fake, existing LDAP user:\n        $fake = DirectoryEmulator::setup();\n\n        // Remember to supply the \"sync_attributes\" you have assigned inside\n        // of your config/auth.php. You will receive an exception if any\n        // non-nullable SQL fields are not present on the LDAP user:\n        $ldapUser = LdapUser::create([\n            'cn' =&gt; 'John Doe',\n            'mail' =&gt; 'john@local.com',\n        ]);\n\n        // Set the user to automatically pass LDAP authentication:\n        $fake-&gt;actingAs($ldapUser);\n\n        // Post the token endpoint and ensure a new token was created:\n        $this-&gt;postJson('api/sanctum/token', [\n            'email' =&gt; $ldapUser-&gt;mail[0],\n            'password' =&gt; 'secret',\n            'device_name' =&gt; 'browser',\n        ])-&gt;assertJson(\n            fn (AssertableJson $json) =&gt; $json-&gt;whereType('token', 'string')\n        );\n\n        // Ensure the user was imported:\n        $this-&gt;assertDatabaseHas(User::class, [\n            'email' =&gt; $ldapUser-&gt;mail[0],\n            'name' =&gt; $ldapUser-&gt;cn[0],\n        ]);\n\n        // Ensure a token exists:\n        $this-&gt;assertDatabaseCount(PersonalAccessToken::class, 1);\n    }\n}\n</code></pre> <p>Great, now let's add a test to ensure an existing LDAP user that fails authentication is not imported, and no token is created:</p> <pre><code>class SanctumTokenTest extends TestCase\n{\n    // ...\n\n    public function testLdapUserCannotRetrieveTokenWithInvalidPassword()\n    {\n        DirectoryEmulator::setup();\n\n        $ldapUser = LdapUser::create([\n            'cn' =&gt; 'John Doe',\n            'mail' =&gt; 'john@local.com',\n        ]);\n\n        // Post the token endpoint and ensure a validation error is thrown:\n        $this-&gt;postJson('api/sanctum/token', [\n            'email' =&gt; $ldapUser-&gt;mail[0],\n            'password' =&gt; 'secret',\n            'device_name' =&gt; 'browser',\n        ])-&gt;assertJsonValidationErrors([\n            'email' =&gt; 'The provided credentials are incorrect.'\n        ]);\n\n        // Ensure the user was not imported:\n        $this-&gt;assertDatabaseMissing(User::class, [\n            'email' =&gt; $ldapUser-&gt;mail[0],\n            'name' =&gt; $ldapUser-&gt;cn[0],\n        ]);\n\n        // Ensure no token was created:\n        $this-&gt;assertDatabaseCount(PersonalAccessToken::class, 0);\n    }\n}\n</code></pre> <p>Nice, now let's add another to ensure our LDAP users can authenticate using their token:</p> <pre><code>class SanctumTokenTest extends TestCase\n{\n    // ...\n\n    public function testLdapUserCanUseTokenOnProtectedRoutes()\n    {\n        $fake = DirectoryEmulator::setup();\n\n        $ldapUser = LdapUser::create([\n            'cn' =&gt; 'John Doe',\n            'mail' =&gt; 'john@local.com',\n        ]);\n\n        $fake-&gt;actingAs($ldapUser);\n\n        // Post the token endpoint and grab the API token:\n        $plainTextToken = $this-&gt;postJson('api/sanctum/token', [\n            'email' =&gt; $ldapUser-&gt;mail[0],\n            'password' =&gt; 'secret',\n            'device_name' =&gt; 'browser',\n        ])-&gt;json('token');\n\n        // Attempt retrieving the user using the returned token:\n        $this-&gt;getJson('api/user', [\n            'Authorization' =&gt; \"Bearer $plainTextToken\",\n        ])-&gt;assertJsonStructure([\n            'id',\n            'guid',\n            'name',\n            'email',\n            'domain',\n        ]);\n    }\n}\n</code></pre> <p>Great. Now we have our API Sanctum endpoints tested against our LDAP integration!</p>"},{"location":"docs/laravel/v2/auth/database/laravel-ui/","title":"Laravel UI","text":""},{"location":"docs/laravel/v2/auth/database/laravel-ui/#introduction","title":"Introduction","text":"<p>Important: Before getting started, please complete the below guides:</p> <ul> <li>Installation Guide</li> <li>Configuration Guide</li> </ul> <p>Laravel UI provides basic authentication scaffolding out-of-the-box.</p> <p>This guide will show you how to integrate LdapRecord-Laravel using this scaffolding.</p>"},{"location":"docs/laravel/v2/auth/database/laravel-ui/#debugging","title":"Debugging","text":"<p>Inside of your <code>config/ldap.php</code> file, ensure you have <code>logging</code> enabled during the setup of authentication. Doing this will help you immensely in debugging connectivity and authentication issues.</p> <p>If you encounter issues along the way, be sure to open your <code>storage/logs</code> directory after you attempt signing in to your application and see what issues may be occurring.</p> <p>In addition, you may also run the below artisan command to test connectivity to your LDAP server:</p> <pre><code>php artisan ldap:test\n</code></pre>"},{"location":"docs/laravel/v2/auth/database/laravel-ui/#login-controller","title":"Login Controller","text":"<p>For this example application, we will authenticate our LDAP users with their email address using the LDAP attribute <code>mail</code>.</p> <p>For LdapRecord to properly locate the user in your directory during sign in, we will override the <code>credentials</code> method in the <code>LoginController</code>:</p> <pre><code>// app/Http/Controllers/Auth/LoginController.php\n\nuse Illuminate\\Http\\Request;\n\nprotected function credentials(Request $request)\n{\n    return [\n        'mail' =&gt; $request-&gt;email,\n        'password' =&gt; $request-&gt;password,\n    ];\n}\n</code></pre> <p>As you can see above, we set the <code>mail</code> key which is passed to the LdapRecord authentication provider.</p> <p>A search query will be executed on your LDAP directory for a user that contains the <code>mail</code> attribute equal to the entered <code>email</code> that the user has submitted on your login form. The <code>password</code> key will not be used in the search.</p> <p>If a user cannot be located in your directory, or they fail authentication, they will be redirected to the login page normally with the \"Invalid credentials\" error message.</p> <p>You may also add extra key =&gt; value pairs in the <code>credentials</code> array to further scope the LDAP query. The <code>password</code> key is automatically ignored by LdapRecord.</p>"},{"location":"docs/laravel/v2/auth/database/laravel-ui/#using-usernames","title":"Using Usernames","text":"<p>In corporate environments, users are often used to signing into their computers with their username. You can certainly keep this flow easy for them - we just need to change a couple things.</p> <p>First, you will need to change the <code>email</code> column in the database migration that creates your <code>users</code> table to <code>username</code>, as this represents what it will now contain:</p> <pre><code>Schema::create('users', function (Blueprint $table) {\n    // ...\n\n    // Before...\n    $table-&gt;string('email')-&gt;unique();\n\n    // After...\n    $table-&gt;string('username')-&gt;unique();\n});\n</code></pre> <p>Make sure you run your migrations using <code>php artisan migrate</code>.</p> <p>Once we've changed the name of the column, we'll jump into the <code>config/auth.php</code> configuration and modify our LDAP user providers <code>sync_attributes</code> to synchronize this changed column.</p> <p>In this example, we will use the users <code>sAMAccountName</code> as their username which is common in Active Directory environments:</p> <pre><code>// config/auth.php\n\n'providers' =&gt; [\n    // ...\n\n    'ldap' =&gt; [\n        // ...\n\n        'database' =&gt; [\n            // ...\n\n            'sync_attributes' =&gt; [\n                'name' =&gt; 'cn',\n                'username' =&gt; 'samaccountname',\n            ],\n        ],\n    ],\n],\n</code></pre> <p>Now, since we have changed the way our users sign in to our application from the default <code>email</code> field, we need to modify our HTML login form to reflect this. Let's jump into our <code>auth/login.blade.php</code>:</p> <pre><code>&lt;!-- resources/views/auth/login.blade.php --&gt;\n\n&lt;!-- Before... --&gt;\n&lt;input\n  id=\"email\"\n  type=\"email\"\n  class=\"form-control @error('email') is-invalid @enderror\"\n  name=\"email\"\n  value=\"{{ old('email') }}\"\n  required\n  autocomplete=\"email\"\n  autofocus\n/&gt;\n\n&lt;!-- After... --&gt;\n&lt;input\n  id=\"username\"\n  type=\"text\"\n  class=\"form-control @error('username') is-invalid @enderror\"\n  name=\"username\"\n  value=\"{{ old('username') }}\"\n  required\n  autocomplete=\"username\"\n  autofocus\n/&gt;\n</code></pre> <p>After changing the HTML input, we now must modify our <code>LoginController</code> to use this new field. We do this by overriding the <code>username</code> method, and updating our <code>credentials</code> method:</p> <pre><code>// app/Http/Controllers/Auth/LoginController.php\n\nuse Illuminate\\Http\\Request;\n\npublic function username()\n{\n    return 'username';\n}\n\nprotected function credentials(Request $request)\n{\n    return [\n        'samaccountname' =&gt; $request-&gt;username,\n        'password' =&gt; $request-&gt;password,\n    ];\n}\n</code></pre> <p>You can now sign in to your application using usernames instead of email addresses.</p>"},{"location":"docs/laravel/v2/auth/database/laravel-ui/#fallback-authentication","title":"Fallback Authentication","text":"<p>Database fallback allows the authentication of local database users if:</p> <ul> <li>LDAP connectivity is not present.</li> <li>Or; An LDAP user cannot be found.</li> </ul> <p>For example, given the following <code>users</code> database table:</p> id name email password guid domain 1 Steve Bauman sbauman@outlook.com ... <code>null</code> <code>null</code> <p>If a user attempts to login with the above email address and this user does not exist inside of your LDAP directory, then standard Eloquent authentication will be performed instead.</p> <p>This feature is ideal for environments where:</p> <ul> <li>LDAP server connectivity may be intermittent.</li> <li>Or; You have regular users registering normally in your application.</li> </ul> <p>To enable this feature, you must define a <code>fallback</code> array inside of the credentials you return from the <code>credentials()</code> method inside of your <code>LoginController</code>:</p> <pre><code>protected function credentials(Request $request)\n{\n    return [\n        'mail' =&gt; $request-&gt;email,\n        'password' =&gt; $request-&gt;password,\n        'fallback' =&gt; [\n            'email' =&gt; $request-&gt;email,\n            'password' =&gt; $request-&gt;password,\n        ],\n    ];\n}\n</code></pre> <p>If you would like your LDAP users to be able to sign in to your application when LDAP connectivity fails or is not present, you must enable the sync passwords option, so your LDAP users can sign in using their last used password.  If an LDAP users password has not been synchronized, they will not be able to sign in.</p>"},{"location":"docs/laravel/v2/auth/database/laravel-ui/#eloquent-model-binding","title":"Eloquent Model Binding","text":"<p>Model binding allows you to access the currently authenticated user's LdapRecord model from their Eloquent model. This grants you access to their LDAP model whenever you need it.</p> <p>To begin, insert the <code>LdapRecord\\Laravel\\Auth\\HasLdapUser</code> trait onto your <code>User</code> eloquent model:</p> <pre><code>// app/User.php\n\n// ...\n\nuse LdapRecord\\Laravel\\Auth\\HasLdapUser;\nuse LdapRecord\\Laravel\\Auth\\LdapAuthenticatable;\nuse LdapRecord\\Laravel\\Auth\\AuthenticatesWithLdap;\n\nclass User extends Authenticatable implements LdapAuthenticatable\n{\n    use Notifiable, AuthenticatesWithLdap, HasLdapUser;\n\n    // ...\n}\n</code></pre> <p>Now, after an LDAP user logs into your application, their LdapRecord model will be available on their Eloquent model via the <code>ldap</code> property:</p> <p>If their LDAP model cannot be located, the returned will be <code>null</code>.</p> <pre><code>// Instance of App\\Models\\User:\n$user = Auth::user();\n\n// Instance of LdapRecord\\Models\\Model:\n$user-&gt;ldap;\n\n// Get LDAP user attributes:\necho $user-&gt;ldap-&gt;getFirstAttribute('cn');\n\n// Get LDAP user relationships:\n$groups = $user-&gt;ldap-&gt;groups()-&gt;get();\n</code></pre> <p>This property uses deferred loading -- which means that the users LDAP model only gets requested from your server when you attempt to access it. This prevents loading the model unnecessarily when it is not needed in your application.</p>"},{"location":"docs/laravel/v2/auth/database/laravel-ui/#displaying-ldap-error-messages","title":"Displaying LDAP Error Messages","text":"<p>When a user fails LDAP authentication due to their password / account expiring, account lockout, or their password requiring to be changed, specific error codes will be sent back from your server. LdapRecord can interpret these for you and display helpful error messages to users upon failing authentication.</p> <p></p> <p>To add this functionality, you must add the following trait to your <code>LoginController</code>:</p> <pre><code>LdapRecord\\Laravel\\Auth\\ListensForLdapBindFailure\n</code></pre> <p>Example:</p> <pre><code>// app/Http/Controllers/Auth/LoginController.php\n\n// ...\n\nuse LdapRecord\\Laravel\\Auth\\ListensForLdapBindFailure;\n\nclass LoginController extends Controller\n{\n    use AuthenticatesUsers, ListensForLdapBindFailure;\n\n    // ...\n</code></pre> <p>However, this feature will only register automatically if your <code>LoginController</code> resides in the default <code>App\\Http\\Controllers\\Auth</code> namespace. If you have changed the location of your <code>LoginController</code>, you must modify the constructor and add the following method call to register the LDAP listener:</p> <pre><code>// app/Http/Controllers/Auth/LoginController.php\n\n// ...\nuse LdapRecord\\Laravel\\Auth\\ListensForLdapBindFailure;\n\nclass LoginController extends Controller\n{\n    use AuthenticatesUsers, ListensForLdapBindFailure;\n\n    public function __construct()\n    {\n        $this-&gt;middleware('guest')-&gt;except('logout');\n\n        $this-&gt;listenForLdapBindFailure();\n    }\n\n    // ...\n}\n</code></pre>"},{"location":"docs/laravel/v2/auth/database/laravel-ui/#changing-the-error-messages","title":"Changing the Error Messages","text":"<p>If you need to modify the translations of these error messages, create a new translation file named <code>errors.php</code> in your <code>resources</code> directory at the following path:</p> <p>The <code>vendor</code> directory (and each sub-directory) will have to be created manually.</p>"},{"location":"docs/laravel/v2/auth/database/laravel-ui/#laravel-9","title":"Laravel &gt;= 9","text":"<pre><code>lang/\n\u2514\u2500\u2500 vendor/\n    \u2514\u2500\u2500 ldap/\n        \u2514\u2500\u2500 en/\n            \u2514\u2500\u2500 errors.php\n</code></pre>"},{"location":"docs/laravel/v2/auth/database/laravel-ui/#laravel-8","title":"Laravel &lt;= 8","text":"<pre><code>resources/\n\u2514\u2500\u2500 lang/\n    \u2514\u2500\u2500 vendor/\n        \u2514\u2500\u2500 ldap/\n            \u2514\u2500\u2500 en/\n                \u2514\u2500\u2500 errors.php\n</code></pre> <p>Then, paste in the following translations in the file and modify where necessary:</p> <pre><code>&lt;?php\n\nreturn [\n    'user_not_found' =&gt; 'User not found.',\n    'user_not_permitted_at_this_time' =&gt; 'Not permitted to logon at this time.',\n    'user_not_permitted_to_login' =&gt; 'Not permitted to logon at this workstation.',\n    'password_expired' =&gt; 'Your password has expired.',\n    'account_disabled' =&gt; 'Your account is disabled.',\n    'account_expired' =&gt; 'Your account has expired.',\n    'user_must_reset_password' =&gt; 'You must reset your password before logging in.',\n    'user_account_locked' =&gt; 'Your account is locked.',\n];\n</code></pre>"},{"location":"docs/laravel/v2/auth/database/laravel-ui/#altering-the-response","title":"Altering The Response","text":"<p>By default, when an LDAP bind failure occurs, a <code>ValidationException</code> will be thrown which will redirect users to your login page and display the error. If you would like to modify this behaviour, you will need to override the method <code>handleLdapBindError</code>.</p> <p>This method will include the error <code>$message</code> as the first parameter and the error <code>$code</code> as the second. This is useful for checking for specific Active Directory response codes and returning a response:</p> <pre><code>// app/Http/Controllers/Auth/LoginController.php\n\n// ...\nuse Illuminate\\Validation\\ValidationException;\nuse LdapRecord\\Laravel\\Auth\\ListensForLdapBindFailure;\n\nclass LoginController extends Controller\n{\n    // ...\n\n    use ListensForLdapBindFailure;\n\n    protected function handleLdapBindError($message, $code = null)\n    {\n        if ($code == '773') {\n            // The users password has expired. Redirect them.\n            abort(redirect('/password-reset'));\n        }\n\n       throw ValidationException::withMessages([\n            'email' =&gt; \"Whoops! LDAP server cannot be reached.\",\n        ]);\n    }\n\n    // ...\n}\n</code></pre> <p>Refer to the Password Policy Errors documentation to see what each code means.</p>"},{"location":"docs/laravel/v2/auth/database/logging-in/","title":"Logging In","text":"<p>Once you have configured a new authentication provider, you're ready to start logging users into your application.</p> <p>Logging in is simple -- you only need to use Laravel's <code>Auth</code> facade:</p> <pre><code>use Illuminate\\Support\\Facades\\Auth;\n\n$credentials = [\n    'mail' =&gt; 'jdoe@local.com',\n    'password' =&gt; 'password',\n];\n\nif (Auth::attempt($credentials)) {\n    $user = Auth::user();\n\n    return redirect('/dashboard')-&gt;with([\n        'message' =&gt; \"Welcome back, {$user-&gt;name}\"\n    ]);\n}\n</code></pre> <p>As you can see above, we set the <code>mail</code> key which is passed to the LdapRecord authentication provider.</p> <p>A search query will be executed on your LDAP directory for a user that contains the <code>mail</code> attribute equal to the entered email address. The <code>password</code> key will not be used in the search.</p> <p>If you wish to login a user by their username instead, simply change the <code>mail</code> key to whichever attribute you would like to locate the user by in your LDAP directory. For example, <code>samaccountname</code>:</p> <p>Important: Keep in mind you will have to alter your <code>sync_attributes</code> inside of your <code>config/auth.php</code> file to synchronize this field into your <code>users</code> database record if you have not already done so.</p> <pre><code>use Illuminate\\Support\\Facades\\Auth;\n\n$credentials = [\n    'samaccountname' =&gt; 'jdoe',\n    'password' =&gt; 'password',\n];\n\nif (Auth::attempt($credentials)) {\n    //\n}\n</code></pre>"},{"location":"docs/laravel/v2/auth/plain/","title":"Plain Authentication Overview","text":"<p>If you have an application that doesn't require any user data to be synchronized to your database, then you can utilize plain LDAP authentication.</p> <p>It is paramount to understand that upon every request a logged in user makes to your application, an LDAP search request will be made to retrieve them. If you do not want this to occur, you must use synchronized database authentication.</p> <p>When a user is successfully authenticated, the Laravel <code>Auth::user()</code> method will return an instance of your configured LdapRecord model:</p> <pre><code>use Illuminate\\Support\\Facades\\Auth;\n\n$credentials = [\n    'mail' =&gt; 'jdoe@local.com',\n    'password' =&gt; 'secret',\n];\n\nif (Auth::attempt($credentials)) {\n    $user = Auth::user();\n\n    // Returns true:\n    $user instanceof \\LdapRecord\\Models\\Model;\n}\n</code></pre>"},{"location":"docs/laravel/v2/auth/plain/configuration/","title":"Plain Auth Configuration","text":""},{"location":"docs/laravel/v2/auth/plain/configuration/#introduction","title":"Introduction","text":"<p>To configure a plain LDAP authentication provider, navigate to the <code>providers</code> array inside of your <code>config/auth.php</code> file, and paste the following <code>users</code> provider:</p> <p>You will have to remove/alter the default <code>users</code> provider, or create your own.</p> <pre><code>// config/auth.php\n\n'providers' =&gt; [\n    // ...\n\n    'users' =&gt; [\n        'driver' =&gt; 'ldap',\n        'model' =&gt; LdapRecord\\Models\\ActiveDirectory\\User::class,\n        'rules' =&gt; [],\n    ],\n],\n</code></pre> <p>Important: If your application requires more than one LDAP connection, you must create a new provider for each connection.  This new provider must have its own unique <code>model</code> class which must use your alternate configured connection name using the <code>$connection</code> property.</p> <p>In the scenario of having multiple LDAP connections, it may be helpful to namespace the LDAP models you create with the desired connection. For example:</p> <pre><code>App\\Ldap\\DomainAlpha\\User\n</code></pre> <p>This will allow you to segregate scopes, rules and other classes to their relating connection.</p>"},{"location":"docs/laravel/v2/auth/plain/configuration/#driver","title":"Driver","text":"<p>The <code>driver</code> option must be <code>ldap</code> as this is what indicates to Laravel the proper authentication driver to use.</p>"},{"location":"docs/laravel/v2/auth/plain/configuration/#model","title":"Model","text":"<p>The <code>model</code> option must be the class name of your LdapRecord model. This model will be used for fetching users from your directory.</p>"},{"location":"docs/laravel/v2/auth/plain/configuration/#using-your-own-model","title":"Using your own model","text":"<p>If you're using an LDAP directory that is not directly supported by LdapRecord, you may publish your own model using the below command:</p> <pre><code>php artisan make:ldap-model User\n</code></pre> <p>The model will be created inside of the <code>app/Ldap</code> directory.</p> <p>Once created, insert the following interface and trait onto the model:</p> <p>Interface:</p> <pre><code>Illuminate\\Contracts\\Auth\\Authenticatable\n</code></pre> <p>Trait:</p> <pre><code>LdapRecord\\Models\\Concerns\\CanAuthenticate\n</code></pre> <p>Finally, you must define a <code>$guidKey</code> property which will contain the name of the attribute your LDAP directory uses to store its unique identifier.</p> <p>Important: Don't forget to also define the models <code>$objectClasses</code>.</p> <pre><code>namespace App\\Ldap;\n\nuse LdapRecord\\Models\\Model;\nuse LdapRecord\\Models\\Concerns\\CanAuthenticate;\nuse Illuminate\\Contracts\\Auth\\Authenticatable;\n\nclass User extends Model implements Authenticatable\n{\n    use CanAuthenticate;\n\n    public static $objectClasses = ['...'];\n\n    protected $guidKey = 'uuid';\n}\n</code></pre>"},{"location":"docs/laravel/v2/auth/plain/configuration/#rules","title":"Rules","text":"<p>The <code>rules</code> option must be an array of authentication rule class names.</p>"},{"location":"docs/laravel/v2/auth/plain/configuration/#overview","title":"Overview","text":"<p>LDAP authentication rules give you the ability to allow or deny users from signing into your application using a condition you would like to apply. These rules are executed after a user successfully passes LDAP authentication against your configured server.</p> <p>Think of them as a final authorization gate before they are allowed in.</p> <p>Authentication rules are never executed if a user fails LDAP authentication.</p>"},{"location":"docs/laravel/v2/auth/plain/configuration/#creating-rules","title":"Creating Rules","text":"<p>Let's create an LDAP rule that only allows members of our domain <code>Administrators</code> group.</p> <p>To create an authentication rule, call the <code>make:ldap-rule</code> command:</p> <pre><code>php artisan make:ldap-rule OnlyAdministrators\n</code></pre> <p>A rule will then be created in your applications <code>app/Ldap/Rules</code> directory:</p> <pre><code>&lt;?php\n\nnamespace App\\Ldap\\Rules;\n\nuse LdapRecord\\Laravel\\Auth\\Rule;\n\nclass OnlyAdministrators extends Rule\n{\n    /**\n     * Check if the rule passes validation.\n     *\n     * @return bool\n     */\n    public function isValid()\n    {\n        //\n    }\n}\n</code></pre> <p>In the authentication rule, a <code>$user</code> property will be made available to us.</p> <p>Now, we will update the <code>isValid</code> method to check the LDAP users <code>groups</code> relationship to see if they are a member:</p> <pre><code>&lt;?php\n\nnamespace App\\Ldap\\Rules;\n\nuse LdapRecord\\Laravel\\Auth\\Rule;\nuse LdapRecord\\Models\\ActiveDirectory\\Group;\n\nclass OnlyAdministrators extends Rule\n{\n    public function isValid()\n    {\n        $administrators = Group::find('cn=Administrators,dc=local,dc=com');\n\n        return $this-&gt;user-&gt;groups()-&gt;recursive()-&gt;exists($administrators);\n    }\n}\n</code></pre> <p>We call the <code>recursive</code> method on the relationship to make sure that we load groups of groups in case the user is not an immediate member of the <code>Administrators</code> group.</p> <p>Once we have our rule defined, we will add it into our authentication provider in the <code>config/auth.php</code> file:</p> <pre><code>'providers' =&gt; [\n    // ...\n\n    'users' =&gt; [\n        'driver' =&gt; 'ldap',\n        'model' =&gt; LdapRecord\\Models\\ActiveDirectory\\User::class,\n        'rules' =&gt; [\n            App\\Ldap\\Rules\\OnlyAdministrators::class,\n        ],\n    ],\n],\n</code></pre> <p>Now when you attempt to login to your application with a LDAP user that successfully passes LDAP authentication, they will need to be a member of the <code>Administrators</code> group.</p> <p>If you are caching your configuration, make sure you re-run <code>config:cache</code> to re-cache your modifications.</p>"},{"location":"docs/laravel/v2/auth/plain/laravel-breeze/","title":"Laravel Breeze","text":""},{"location":"docs/laravel/v2/auth/plain/laravel-breeze/#introduction","title":"Introduction","text":"<p>Important: Before getting started, please complete the configuration guide.</p> <p>Laravel Breeze provides basic authentication scaffolding out-of-the-box.</p> <p>This guide will show you how to integrate LdapRecord-Laravel using this scaffolding.</p>"},{"location":"docs/laravel/v2/auth/plain/laravel-breeze/#debugging","title":"Debugging","text":"<p>Inside of your <code>config/ldap.php</code> file, ensure you have <code>logging</code> enabled during the setup of authentication. Doing this will help you immensely in debugging connectivity and authentication issues.</p> <p>If you encounter issues along the way, be sure to open your <code>storage/logs</code> directory after you attempt signing in to your application and see what issues may be occurring.</p> <p>In addition, you may also run the below artisan command to test connectivity to your LDAP server:</p> <pre><code>php artisan ldap:test\n</code></pre>"},{"location":"docs/laravel/v2/auth/plain/laravel-breeze/#sessions","title":"Sessions","text":"<p>Before we begin, if you are using the <code>database</code> session driver, you must change the <code>user_id</code> column from its default type. This is due to LDAP Object GUID's being stored as the user's ID, which is not compatible with the unsigned big integer type:</p> <p>From:</p> <pre><code>Schema::create('sessions', function (Blueprint $table) {\n    // ...\n    $table-&gt;foreignId('user_id')-&gt;nullable()-&gt;index();\n    // ...\n});\n</code></pre> <p>To:</p> <pre><code>Schema::create('sessions', function (Blueprint $table) {\n    // ...\n    $table-&gt;string('user_id')-&gt;nullable()-&gt;index();\n    // ...\n});\n</code></pre>"},{"location":"docs/laravel/v2/auth/plain/laravel-breeze/#login-request","title":"Login Request","text":"<p>For this example application, we will authenticate our LDAP users with their email address using the LDAP attribute <code>mail</code>.</p> <p>For LdapRecord to properly locate the user in your directory during sign in, we will override the <code>authenticate</code> method in the <code>LoginRequest</code>, and pass in an array with the <code>mail</code> key (which is the attribute we are wanting to retrieve our LDAP users by) and the users <code>password</code>:</p> <pre><code>// app/Http/Requests/Auth/LoginRequest.php\n\n/**\n * Attempt to authenticate the request's credentials.\n *\n * @return void\n *\n * @throws \\Illuminate\\Validation\\ValidationException\n */\npublic function authenticate()\n{\n    $this-&gt;ensureIsNotRateLimited();\n\n    $credentials = [\n        'mail' =&gt; $this-&gt;email,\n        'password' =&gt; $this-&gt;password,\n    ];\n\n    if (! Auth::attempt($credentials, $this-&gt;filled('remember'))) {\n        RateLimiter::hit($this-&gt;throttleKey());\n\n        throw ValidationException::withMessages([\n            'email' =&gt; __('auth.failed'),\n        ]);\n    }\n\n    RateLimiter::clear($this-&gt;throttleKey());\n}\n</code></pre>"},{"location":"docs/laravel/v2/auth/plain/laravel-breeze/#blade-views","title":"Blade Views","text":"<p>Once you have completed updating your <code>LoginRequest.php</code> class, you will then have to navigate to any Blade views that contain references to <code>Auth::user()</code>. Remember, when using plain authentication, LdapRecord models are returned, not Eloquent.</p> <p>In the standard scaffolding, this occurs namely in the <code>navigation.blade.php</code> view:</p> <p>From:</p> <pre><code>&lt;!-- resources/views/layouts/navigation.blade.php --&gt;\n\n{{ Auth::user()-&gt;name }} {{ Auth::user()-&gt;email }}\n</code></pre> <p>To:</p> <pre><code>&lt;!-- resources/views/layouts/navigation.blade.php --&gt;\n\n{{ Auth::user()-&gt;getName() }} {{ Auth::user()-&gt;getFirstAttribute('mail') }}\n</code></pre> <p>That's it! You are now ready to authenticate LDAP users into your application.</p>"},{"location":"docs/laravel/v2/auth/plain/laravel-breeze/#using-usernames","title":"Using Usernames","text":"<p>To authenticate your users by their username we must adjust some scaffolded code generated by Laravel Breeze.</p> <p>In the following example, we will authenticate users by their <code>sAMAccountName</code>.</p>"},{"location":"docs/laravel/v2/auth/plain/laravel-breeze/#login-form","title":"Login Form","text":"<p>We will first need to update the input HTML field inside of the scaffolded <code>login.blade.php</code> view:</p> <p>From:</p> <pre><code>&lt;!-- resources/views/auth/login.blade.php --&gt;\n\n&lt;!-- Email Address --&gt;\n&lt;div&gt;\n  &lt;x-label for=\"email\" :value=\"__('Email')\" /&gt;\n\n  &lt;x-input\n    id=\"email\"\n    class=\"block w-full mt-1\"\n    type=\"email\"\n    name=\"email\"\n    :value=\"old('email')\"\n    required\n    autofocus\n  /&gt;\n&lt;/div&gt;\n</code></pre> <p>To:</p> <pre><code>&lt;!-- resources/views/auth/login.blade.php --&gt;\n\n&lt;!-- Username --&gt;\n&lt;div&gt;\n  &lt;x-label for=\"username\" :value=\"__('Username')\" /&gt;\n\n  &lt;x-input\n    id=\"username\"\n    class=\"block w-full mt-1\"\n    type=\"text\"\n    name=\"username\"\n    :value=\"old('username')\"\n    required\n    autofocus\n  /&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"docs/laravel/v2/auth/plain/laravel-breeze/#login-request_1","title":"Login Request","text":"<p>Lastly, we must adjust the <code>rules()</code> and <code>authenticate()</code> methods inside of the scaffolded <code>LoginRequest.php</code> class:</p> <p>From:</p> <pre><code>// app/Http/Requests/Auth/LoginRequest.php\n\npublic function rules()\n{\n    return [\n        'email' =&gt; 'required|string|email',\n        'password' =&gt; 'required|string',\n    ];\n}\n\npublic function authenticate()\n{\n    $this-&gt;ensureIsNotRateLimited();\n\n    if (! Auth::attempt($request-&gt;only('email', 'password'), $this-&gt;filled('remember'))) {\n        RateLimiter::hit($this-&gt;throttleKey());\n\n        throw ValidationException::withMessages([\n            'email' =&gt; __('auth.failed'),\n        ]);\n    }\n\n    RateLimiter::clear($this-&gt;throttleKey());\n}\n</code></pre> <p>To:</p> <pre><code>// app/Http/Requests/Auth/LoginRequest.php\n\npublic function rules()\n{\n    return [\n        'username' =&gt; 'required|string',\n        'password' =&gt; 'required|string',\n    ];\n}\n\npublic function authenticate()\n{\n    $this-&gt;ensureIsNotRateLimited();\n\n    $credentials = [\n        'samaccountname' =&gt; $this-&gt;username,\n        'password' =&gt; $this-&gt;password,\n    ];\n\n    if (! Auth::attempt($credentials, $this-&gt;filled('remember'))) {\n        RateLimiter::hit($this-&gt;throttleKey());\n\n        throw ValidationException::withMessages([\n            'username' =&gt; __('auth.failed'),\n        ]);\n    }\n\n    RateLimiter::clear($this-&gt;throttleKey());\n}\n</code></pre> <p>You are now ready to login LDAP users by their username!</p>"},{"location":"docs/laravel/v2/auth/plain/laravel-jetstream/","title":"Laravel Jetstream","text":""},{"location":"docs/laravel/v2/auth/plain/laravel-jetstream/#introduction","title":"Introduction","text":"<p>Important: Before getting started, please complete the configuration guide.</p> <p>Laravel Jetstream utilizes Laravel Fortify for authentication under the hood. We will customize various aspects of it to allow LDAP users to sign into the application.</p>"},{"location":"docs/laravel/v2/auth/plain/laravel-jetstream/#fortify-setup","title":"Fortify Setup","text":""},{"location":"docs/laravel/v2/auth/plain/laravel-jetstream/#authentication-callback","title":"Authentication Callback","text":"<p>For this example application, we will authenticate our LDAP users with their email address using the LDAP attribute <code>mail</code>.</p> <p>For LdapRecord to properly locate the user in your directory during sign in, we will override Fortify's authentication callback using the <code>Fortify::authenticateUsing()</code> method in our <code>AuthServiceProvider.php</code> file:</p> <pre><code>// app/Providers/AuthServiceProvider.php\n\n// ...\nuse Laravel\\Fortify\\Fortify;\nuse Illuminate\\Support\\Facades\\Auth;\n\nclass AuthServiceProvider extends ServiceProvider\n{\n    // ...\n\n    public function boot()\n    {\n        $this-&gt;registerPolicies();\n\n        Fortify::authenticateUsing(function ($request) {\n            $validated = Auth::validate([\n                'mail' =&gt; $request-&gt;email,\n                'password' =&gt; $request-&gt;password\n            ]);\n\n            return $validated ? Auth::getLastAttempted() : null;\n        });\n    }\n}\n</code></pre> <p>As you can see above, we set the <code>mail</code> key which is passed to the LdapRecord authentication provider.</p> <p>A search query will be executed on your LDAP directory for a user that contains the <code>mail</code> attribute equal to the entered <code>email</code> that the user has submitted on your login form. The <code>password</code> key will not be used in the search.</p> <p>If a user cannot be located in your directory, or they fail authentication, they will be redirected to the login page normally with the \"Invalid credentials\" error message.</p> <p>You may also add extra key =&gt; value pairs in the <code>credentials</code> array to further scope the LDAP query. The <code>password</code> key is automatically ignored by LdapRecord.</p>"},{"location":"docs/laravel/v2/auth/plain/laravel-jetstream/#feature-configuration","title":"Feature Configuration","text":"<p>Since we are synchronizing data from our LDAP server, we must disable the following features by commenting them out inside of the <code>config/fortify.php</code> file:</p> <pre><code>// config/fortify.php\n\n// Before:\n'features' =&gt; [\n    Features::registration(),\n    Features::resetPasswords(),\n    // Features::emailVerification(),\n    Features::updateProfileInformation(),\n    Features::updatePasswords(),\n    // Features::twoFactorAuthentication(),\n],\n\n// After:\n'features' =&gt; [\n    // Features::registration(),\n    // Features::resetPasswords(),\n    // Features::emailVerification(),\n    // Features::updateProfileInformation(),\n    // Features::updatePasswords(),\n    // Features::twoFactorAuthentication(),\n],\n</code></pre> <p>Important: You may keep <code>Features::registration()</code> enabled if you would like to continue accepting local application user registration. Keep in mind, if you continue to allow registration, you will need to either use multiple Laravel authentication guards, or setup the login fallback feature.</p>"},{"location":"docs/laravel/v2/auth/plain/laravel-jetstream/#sessions","title":"Sessions","text":"<p>If you are using the <code>database</code> session driver, you must change the <code>user_id</code> column from its default type. This is due to LDAP Object GUID's being stored as the user's ID, which is not compatible with the unsigned big integer type:</p> <p>From:</p> <pre><code>public function up()\n{\n    Schema::create('sessions', function (Blueprint $table) {\n        // ...\n        $table-&gt;foreignId('user_id')-&gt;nullable()-&gt;index();\n        // ...\n    });\n}\n</code></pre> <p>To:</p> <pre><code>public function up()\n{\n    Schema::create('sessions', function (Blueprint $table) {\n        // ...\n        $table-&gt;uuid('user_id')-&gt;nullable()-&gt;index();\n        // ...\n    });\n}\n</code></pre>"},{"location":"docs/laravel/v2/auth/plain/laravel-jetstream/#using-usernames","title":"Using Usernames","text":"<p>To authenticate your users by their username we must adjust some scaffolded code generated by Laravel Jetstream.</p> <p>In the following example, we will authenticate users by their <code>sAMAccountName</code>.</p>"},{"location":"docs/laravel/v2/auth/plain/laravel-jetstream/#fortify-setup_1","title":"Fortify Setup","text":""},{"location":"docs/laravel/v2/auth/plain/laravel-jetstream/#authentication-callback_1","title":"Authentication Callback","text":"<p>With our Fortiy configuration updated, we will jump into our <code>AuthServiceProvider.php</code> file and setup our authentication callback using the <code>Fortify::authenticateUsing()</code> method:</p> <pre><code>// app/Providers/AuthServiceProvider.php\n\n// ...\nuse Laravel\\Fortify\\Fortify;\nuse Illuminate\\Support\\Facades\\Auth;\n\nclass AuthServiceProvider extends ServiceProvider\n{\n    // ...\n\n    public function boot()\n    {\n        $this-&gt;registerPolicies();\n\n        Fortify::authenticateUsing(function ($request) {\n            $validated = Auth::validate([\n                'samaccountname' =&gt; $request-&gt;username,\n                'password' =&gt; $request-&gt;password\n            ]);\n\n            return $validated ? Auth::getLastAttempted() : null;\n        });\n    }\n}\n</code></pre>"},{"location":"docs/laravel/v2/auth/plain/laravel-jetstream/#username-configuration","title":"Username Configuration","text":"<p>Inside of our <code>config/fortify.php</code> file, we must change the <code>username</code> option to <code>username</code> from <code>email</code>:</p> <pre><code>// config/fortify.php\n\n// Before:\n'username' =&gt; 'email',\n\n// After:\n'username' =&gt; 'username',\n</code></pre> <p>You will notice above that we are passing in an array of credentials with <code>samaccountname</code> as the key, and the requests <code>username</code> form input.</p>"},{"location":"docs/laravel/v2/auth/plain/laravel-jetstream/#login-view","title":"Login View","text":"<p>Now we must open up the <code>login.blade.php</code> view and swap the current HTML input field from <code>email</code> to <code>username</code> so we can retrieve it properly in our <code>Fortify::authenticateUsing()</code> callback:</p> <pre><code>&lt;!-- Before: --&gt;\n&lt;div&gt;\n  &lt;x-jet-label value=\"Email\" /&gt;\n  &lt;x-jet-input\n    class=\"block w-full mt-1\"\n    type=\"email\"\n    name=\"email\"\n    :value=\"old('email')\"\n    required\n    autofocus\n  /&gt;\n&lt;/div&gt;\n\n&lt;!-- After: --&gt;\n&lt;div&gt;\n  &lt;x-jet-label value=\"Username\" /&gt;\n  &lt;x-jet-input\n    class=\"block w-full mt-1\"\n    type=\"text\"\n    name=\"username\"\n    :value=\"old('username')\"\n    required\n    autofocus\n  /&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"docs/laravel/v2/auth/plain/laravel-jetstream/#displaying-ldap-error-messages","title":"Displaying LDAP Error Messages","text":"<p>When using Laravel Jetstream, LDAP error messages will now be displayed automatically to users. You do not need to configure or include the <code>ListensForLdapBindFailure</code> trait as you would using Laravel UI on the <code>LoginController</code>.</p>"},{"location":"docs/laravel/v2/auth/plain/laravel-jetstream/#altering-the-response","title":"Altering the Response","text":"<p>Since this functionality is now automatically registered, if you would like to modify how an error is handled, call the <code>setErrorHandler</code> method on the <code>BindFailureListener</code> class inside of your <code>AuthServiceProvider.php</code> file:</p> <pre><code>// app/Providers/AuthServiceProvider.php\n\n// ...\nuse LdapRecord\\Laravel\\Auth\\BindFailureListener;\n\nclass AuthServiceProvider extends ServiceProvider\n{\n    // ...\n\n    public function boot()\n    {\n        $this-&gt;registerPolicies();\n\n        BindFailureListener::setErrorHandler(function ($message, $code = null) {\n            if ($code == '773') {\n                // The users password has expired. Redirect them.\n                abort(redirect('/password-reset'));\n            }\n        });\n    }\n}\n</code></pre> <p>Refer to the Password Policy Errors documentation to see what each code means.</p>"},{"location":"docs/laravel/v2/auth/plain/laravel-jetstream/#changing-the-error-messages","title":"Changing the Error Messages","text":"<p>If you need to modify the translations of these error messages, create a new translation file named <code>errors.php</code> in your <code>resources</code> directory at the following path:</p> <p>The <code>vendor</code> directory (and each sub-directory) will have to be created manually.</p>"},{"location":"docs/laravel/v2/auth/plain/laravel-jetstream/#laravel-9","title":"Laravel &gt;= 9","text":"<pre><code>lang/\n\u2514\u2500\u2500 vendor/\n    \u2514\u2500\u2500 ldap/\n        \u2514\u2500\u2500 en/\n            \u2514\u2500\u2500 errors.php\n</code></pre>"},{"location":"docs/laravel/v2/auth/plain/laravel-jetstream/#laravel-8","title":"Laravel &lt;= 8","text":"<pre><code>resources/\n\u2514\u2500\u2500 lang/\n    \u2514\u2500\u2500 vendor/\n        \u2514\u2500\u2500 ldap/\n            \u2514\u2500\u2500 en/\n                \u2514\u2500\u2500 errors.php\n</code></pre> <p>Then, paste in the following translations in the file and modify where necessary:</p> <pre><code>&lt;?php\n\nreturn [\n    'user_not_found' =&gt; 'User not found.',\n    'user_not_permitted_at_this_time' =&gt; 'Not permitted to logon at this time.',\n    'user_not_permitted_to_login' =&gt; 'Not permitted to logon at this workstation.',\n    'password_expired' =&gt; 'Your password has expired.',\n    'account_disabled' =&gt; 'Your account is disabled.',\n    'account_expired' =&gt; 'Your account has expired.',\n    'user_must_reset_password' =&gt; 'You must reset your password before logging in.',\n    'user_account_locked' =&gt; 'Your account is locked.',\n];\n</code></pre>"},{"location":"docs/laravel/v2/auth/plain/laravel-ui/","title":"Laravel UI","text":""},{"location":"docs/laravel/v2/auth/plain/laravel-ui/#introduction","title":"Introduction","text":"<p>Important: Before getting started, please complete the configuration guide.</p> <p>Laravel UI provides basic authentication scaffolding out-of-the-box.</p> <p>This guide will show you how to integrate LdapRecord-Laravel using this scaffolding.</p>"},{"location":"docs/laravel/v2/auth/plain/laravel-ui/#debugging","title":"Debugging","text":"<p>Inside of your <code>config/ldap.php</code> file, ensure you have <code>logging</code> enabled during the setup of authentication. Doing this will help you immensely in debugging connectivity and authentication issues.</p> <p>If you encounter issues along the way, be sure to open your <code>storage/logs</code> directory after you attempt signing in to your application and see what issues may be occurring.</p> <p>In addition, you may also run the below artisan command to test connectivity to your LDAP server:</p> <pre><code>php artisan ldap:test\n</code></pre>"},{"location":"docs/laravel/v2/auth/plain/laravel-ui/#sessions","title":"Sessions","text":"<p>Before we begin, if you are using the <code>database</code> session driver, you must change the <code>user_id</code> column from its default type. This is due to LDAP Object GUID's being stored as the user's ID, which is not compatible with the unsigned big integer type:</p> <p>From:</p> <pre><code>Schema::create('sessions', function (Blueprint $table) {\n    // ...\n    $table-&gt;foreignId('user_id')-&gt;nullable()-&gt;index();\n    // ...\n});\n</code></pre> <p>To:</p> <pre><code>Schema::create('sessions', function (Blueprint $table) {\n    // ...\n    $table-&gt;string('user_id')-&gt;nullable()-&gt;index();\n    // ...\n});\n</code></pre>"},{"location":"docs/laravel/v2/auth/plain/laravel-ui/#login-controller","title":"Login Controller","text":"<p>For this example application, we will authenticate our LDAP users with their email address using the LDAP attribute <code>mail</code>.</p> <p>For LdapRecord to properly locate the user in your directory during sign in, we will override the <code>credentials</code> method in the <code>LoginController</code>:</p> <pre><code>// app/Http/Controllers/Auth/LoginController.php\n\nuse Illuminate\\Http\\Request;\n\nprotected function credentials(Request $request)\n{\n    return [\n        'mail' =&gt; $request-&gt;email,\n        'password' =&gt; $request-&gt;password,\n    ];\n}\n</code></pre> <p>As you can see above, we set the <code>mail</code> key which is passed to the LdapRecord authentication provider.</p> <p>A search query will be executed on your LDAP directory for a user that contains the <code>mail</code> attribute equal to the entered <code>email</code> that the user has submitted on your login form. The <code>password</code> key will not be used in the search.</p> <p>If a user cannot be located in your directory, or they fail authentication, they will be redirected to the login page normally with the \"Invalid credentials\" error message.</p> <p>You may also add extra key =&gt; value pairs in the <code>credentials</code> array to further scope the LDAP query. The <code>password</code> key is automatically ignored by LdapRecord.</p>"},{"location":"docs/laravel/v2/auth/plain/laravel-ui/#updating-blade-views","title":"Updating Blade Views","text":"<p>Since an LdapRecord model instance will be returned when calling <code>Auth::user()</code> instead of an Eloquent model, you must change any references from:</p> <pre><code>Auth::user()-&gt;name\n</code></pre> <p>To:</p> <pre><code>Auth::user()-&gt;getName()\n</code></pre>"},{"location":"docs/laravel/v2/auth/plain/laravel-ui/#using-usernames","title":"Using Usernames","text":"<p>In corporate environments, users are often used to signing into their computers with their username. You can certainly keep this flow easy for them - we just need to change a couple things.</p> <p>First, let's jump into our <code>auth/login.blade.php</code> view and update our input field to use <code>username</code> instead of <code>email</code>:</p> <pre><code>&lt;!-- resources/views/auth/login.blade.php --&gt;\n\n&lt;!-- Before... --&gt;\n&lt;input\n  id=\"email\"\n  type=\"email\"\n  class=\"form-control @error('email') is-invalid @enderror\"\n  name=\"email\"\n  value=\"{{ old('email') }}\"\n  required\n  autocomplete=\"email\"\n  autofocus\n/&gt;\n\n&lt;!-- After... --&gt;\n&lt;input\n  id=\"username\"\n  type=\"text\"\n  class=\"form-control @error('username') is-invalid @enderror\"\n  name=\"username\"\n  value=\"{{ old('username') }}\"\n  required\n  autocomplete=\"username\"\n  autofocus\n/&gt;\n</code></pre> <p>After changing the HTML input, we now must modify our <code>LoginController</code> to use this new field. We do this by overriding the <code>username</code> method, and updating our <code>credentials</code> method:</p> <pre><code>// app/Http/Controllers/Auth/LoginController.php\n\nuse Illuminate\\Http\\Request;\n\npublic function username()\n{\n    return 'username';\n}\n\nprotected function credentials(Request $request)\n{\n    return [\n        'samaccountname' =&gt; $request-&gt;username,\n        'password' =&gt; $request-&gt;password,\n    ];\n}\n</code></pre> <p>You can now sign in to your application using usernames instead of email addresses.</p>"},{"location":"docs/laravel/v2/auth/plain/laravel-ui/#displaying-ldap-error-messages","title":"Displaying LDAP Error Messages","text":"<p>When a user fails LDAP authentication due to their password / account expiring, account lockout, or their password requiring to be changed, specific error codes will be sent back from your server. LdapRecord can interpret these for you and display helpful error messages to users upon failing authentication.</p> <p>To add this functionality, you must add the following trait to your <code>LoginController</code>:</p> <pre><code>LdapRecord\\Laravel\\Auth\\ListensForLdapBindFailure\n</code></pre> <p>Example:</p> <pre><code>// app/Http/Controllers/Auth/LoginController.php\n\n// ...\n\nuse LdapRecord\\Laravel\\Auth\\ListensForLdapBindFailure;\n\nclass LoginController extends Controller\n{\n    use AuthenticatesUsers, ListensForLdapBindFailure;\n\n    // ...\n</code></pre> <p>However, this feature will only register automatically if your <code>LoginController</code> resides in the default <code>App\\Http\\Controllers\\Auth</code> namespace. If you have changed the location of your <code>LoginController</code>, you must modify the constructor and add the following method call to register the LDAP listener:</p> <pre><code>// app/Http/Controllers/Auth/LoginController.php\n\n// ...\n\nuse LdapRecord\\Laravel\\Auth\\ListensForLdapBindFailure;\n\nclass LoginController extends Controller\n{\n    use AuthenticatesUsers, ListensForLdapBindFailure;\n\n    public function __construct()\n    {\n        $this-&gt;middleware('guest')-&gt;except('logout');\n\n        $this-&gt;listenForLdapBindFailure();\n    }\n\n    // ...\n}\n</code></pre>"},{"location":"docs/laravel/v2/auth/plain/laravel-ui/#altering-the-response","title":"Altering the Response","text":"<p>By default, when an LDAP bind failure occurs, a <code>ValidationException</code> will be thrown which will redirect users to your login page and display the error. If you would like to modify this behaviour, you will need to override the method <code>handleLdapBindError</code>.</p> <p>This method will include the error message as the first parameter and the error code as the second.</p> <p>This is useful for checking for specific Active Directory response codes and returning a response:</p> <pre><code>// app/Http/Controllers/Auth/LoginController.php\n\n// ...\n\nclass LoginController extends Controller\n{\n    // ...\n\n    use ListensForLdapBindFailure {\n        handleLdapBindError as baseHandleLdapBindError;\n    }\n\n    protected function handleLdapBindError($message, $code = null)\n    {\n        if ($code == '773') {\n            // The users password has expired. Redirect them.\n            abort(redirect('/password-reset'));\n        }\n\n        $this-&gt;baseHandleLdapBindError($message, $code);\n    }\n\n    // ...\n}\n</code></pre> <p>Refer to the Password Policy Errors documentation to see what each code means.</p>"},{"location":"docs/laravel/v2/auth/plain/laravel-ui/#changing-the-error-messages","title":"Changing the Error Messages","text":"<p>If you need to modify the translations of these error messages, create a new translation file named <code>errors.php</code> in your <code>resources</code> directory at the following path:</p> <p>The <code>vendor</code> directory (and each sub-directory) will have to be created manually.</p>"},{"location":"docs/laravel/v2/auth/plain/laravel-ui/#laravel-9","title":"Laravel &gt;= 9","text":"<pre><code>lang/\n\u2514\u2500\u2500 vendor/\n    \u2514\u2500\u2500 ldap/\n        \u2514\u2500\u2500 en/\n            \u2514\u2500\u2500 errors.php\n</code></pre>"},{"location":"docs/laravel/v2/auth/plain/laravel-ui/#laravel-8","title":"Laravel &lt;= 8","text":"<pre><code>resources/\n\u2514\u2500\u2500 lang/\n    \u2514\u2500\u2500 vendor/\n        \u2514\u2500\u2500 ldap/\n            \u2514\u2500\u2500 en/\n                \u2514\u2500\u2500 errors.php\n</code></pre> <p>Then, paste in the following translations in the file and modify where necessary:</p> <pre><code>&lt;?php\n\nreturn [\n    'user_not_found' =&gt; 'User not found.',\n    'user_not_permitted_at_this_time' =&gt; 'Not permitted to logon at this time.',\n    'user_not_permitted_to_login' =&gt; 'Not permitted to logon at this workstation.',\n    'password_expired' =&gt; 'Your password has expired.',\n    'account_disabled' =&gt; 'Your account is disabled.',\n    'account_expired' =&gt; 'Your account has expired.',\n    'user_must_reset_password' =&gt; 'You must reset your password before logging in.',\n    'user_account_locked' =&gt; 'Your account is locked.',\n];\n</code></pre>"},{"location":"docs/laravel/v2/auth/plain/logging-in/","title":"Logging In","text":"<p>Once you have configured a new authentication provider, you're ready to start logging users into your application.</p> <p>Logging in is simple -- you only need to use Laravel's <code>Auth</code> facade:</p> <pre><code>use Illuminate\\Support\\Facades\\Auth;\n\n$credentials = [\n    'mail' =&gt; 'jdoe@local.com',\n    'password' =&gt; 'password',\n];\n\nif (Auth::attempt($credentials)) {\n    $user = Auth::user();\n\n    return redirect('/dashboard')-&gt;with([\n        'message' =&gt; \"Welcome back, {$user-&gt;getName()}\"\n    ]);\n}\n</code></pre> <p>As you can see above, we set the <code>mail</code> key which is passed to the LdapRecord authentication provider.</p> <p>A search query will be executed on your LDAP directory for a user that contains the <code>mail</code> attribute equal to the entered email address. The <code>password</code> key will not be used in the search.</p> <p>If you wish to login a user by their username instead, simply change the <code>mail</code> key to whichever attribute you would like to locate the user by in your LDAP directory. For example, <code>samaccountname</code>:</p> <pre><code>use Illuminate\\Support\\Facades\\Auth;\n\n$credentials = [\n    'samaccountname' =&gt; 'jdoe',\n    'password' =&gt; 'password',\n];\n\nif (Auth::attempt($credentials)) {\n    //\n}\n</code></pre>"},{"location":"docs/laravel/v2/auth/sso/","title":"Pass-through / SSO Authentication","text":"<p>Pass-through authentication allows your users to be automatically signed in when they access your application on a Windows domain joined computer. This feature is ideal for in-house corporate environments.</p> <p>However, this feature assumes that you have enabled Windows Authentication in IIS, or have enabled it in some other means with Apache. LdapRecord does not set this up for you. To enable Windows Authentication, visit the IIS configuration guide.</p> <p>When you have it enabled on your server, and a user visits your application from a domain joined computer, the users <code>sAMAccountName</code> becomes available on a PHP server variable (<code>$_SERVER['AUTH_USER']</code>).</p> <p>LdapRecord provides a middleware that you apply to your stack which retrieves this username from the request, attempts to locate the user in your directory, then logs the user in.</p>"},{"location":"docs/laravel/v2/auth/sso/setup/","title":"Pass-through / SSO Setup","text":""},{"location":"docs/laravel/v2/auth/sso/setup/#middleware","title":"Middleware","text":"<p>To enable single-sign-on in your Laravel application, insert the included <code>WindowsAuthenticate</code> middleware on your middleware stack inside your <code>app/Http/Kernel.php</code> file:</p> <pre><code>protected $middlewareGroups = [\n    'web' =&gt; [\n        // ...\n        \\LdapRecord\\Laravel\\Middleware\\WindowsAuthenticate::class,\n    ],\n];\n</code></pre> <p>The <code>WindowsAuthenticate</code> middleware uses the rules you have configured inside your <code>config/auth.php</code> file. A user may successfully authenticate against your LDAP server when visiting your site, but depending on your rules, may not be imported or logged in.</p>"},{"location":"docs/laravel/v2/auth/sso/setup/#multi-domain-sso","title":"Multi-Domain SSO","text":"<p>To be able to use multi-domain single-sign-on, your LDAP directory servers must first be joined in a trust.</p> <p>Consider we have two domains: alpha.local and bravo.local.</p> <p>If you have a web server that is joined to the alpha.local domain that is hosting your Laravel application, it must allow users to authenticate to the bravo.local domain.</p> <p>Once you have a working trust defined between your domains, you must follow the steps of setting up multi-domain authentication. You may skip step 2, if you do not need a login page for your users.</p> <p>After completing the above linked guide, you must instruct the <code>WindowsAuthenticate</code> middleware to utilize your LDAP authentication guards that you have configured in your <code>config/auth.php</code> file by calling the <code>guards</code> method:</p> <pre><code>// app/Providers/AuthServiceProvider.php\n\n/**\n * Register any authentication / authorization services.\n *\n * @return void\n */\npublic function boot()\n{\n    $this-&gt;registerPolicies();\n\n    WindowsAuthenticate::guards(['alpha', 'bravo']);\n}\n</code></pre> <p>Or, if you prefer, you may define the <code>WindowsAuthenticate</code> middleware as a named middleware inside your <code>app/Http/Kernel.php</code>, and insert the guard names in the definition of your routes:</p> <pre><code>// app/Http/Kernel.php\n\n/**\n * The application's route middleware.\n *\n * These middleware may be assigned to groups or used individually.\n *\n * @var array\n */\nprotected $routeMiddleware = [\n    'auth' =&gt; \\App\\Http\\Middleware\\Authenticate::class,\n    'auth.windows' =&gt; \\LdapRecord\\Laravel\\Middleware\\WindowsAuthenticate::class,\n    // ...\n],\n</code></pre> <p>Then, utilize it inside your routes file:</p> <p>Important: When guarding your routes that require authentication via the <code>auth</code> middleware, you must add both guard names into it as well.</p> <pre><code>// routes/web.php\n\nRoute::middleware([\n    'auth.windows:alpha,bravo',\n    'auth:alpha,bravo',\n])-&gt;group(function () {\n    // ...\n});\n</code></pre> <p>Important:  The actual order of the middleware definition is critical here, so your users that are accessing your site through single-sign-on are logged into your application, prior to hitting the <code>auth</code> middleware, which validates that they are in-fact logged in.  Otherwise, they will be simply redirected to your login page.</p>"},{"location":"docs/laravel/v2/auth/sso/setup/#sso-domain-verification","title":"SSO Domain Verification","text":"<p>To prevent security issues using multiple-domain authentication using the <code>WindowsAuthenticate</code> middleware, domain verification will be performed on the authenticating user.</p> <p>This verification checks if the user's domain name is contained inside of their full distinguished name, which is retrieved from each of your configured LDAP guards.</p> <p>Only 'Domain Components' are checked in the user's distinguished name. More on this below.</p> <p>To describe this issue in further detail -- the <code>WindowsAuthenticate</code> middleware retrieves all of your configured authentication guards inside of your <code>config/auth.php</code> file. It then determines which one is using the <code>ldap</code> driver, and attempts to locate the authenticating users from each connection.</p> <p>Since there is the possibility of users having the same <code>sAMAccountName</code> on two separate domains, LdapRecord must verify that the user retrieved from your domain is in-fact the user who is connecting to your Laravel application via Single-Sign-On.</p> <p>For example, if a user visits your Laravel application with the username of:</p> <pre><code>ACME\\sbauman\n</code></pre> <p>And LdapRecord locates a user with the distinguished name of:</p> <pre><code>cn=sbauman,ou=users,dc=local,dc=com\n</code></pre> <p>They will be denied authentication. This is because the authenticating user has a domain of <code>ACME</code>, but it is not contained inside of their distinguished name domain components (<code>dc</code>).</p> <p>Using the same example, if the located user's distinguished name is:</p> <pre><code>cn=sbauman,ou=users,dc=acme,dc=com\n</code></pre> <p>Then they will be allowed to authenticate, as their <code>ACME</code> domain exists inside of their distinguished name domain components (<code>dc=acme</code>). Comparison against each domain component will be performed in a case-insensitive manor.</p> <p>If you would like to disable this check, you must call the static method <code>bypassDomainVerification</code> on the <code>WindowsAuthenticate</code> middleware inside of your <code>AuthServiceProvider</code>:</p> <p>Important: This is a security issue if you use multi-domain authentication, since users who have the same <code>sAMAccountName</code> could sign in as each other. You have been warned. If however, you connect to only one domain inside your application, there is no security issue, and you may disable this check as shown below.</p> <pre><code>// app/Providers/AuthServiceProvider.php\n\nuse LdapRecord\\Laravel\\Middleware\\WindowsAuthenticate;\n\n/**\n * Register any authentication / authorization services.\n *\n * @return void\n */\npublic function boot()\n{\n    $this-&gt;registerPolicies();\n\n    WindowsAuthenticate::bypassDomainVerification();\n}\n</code></pre>"},{"location":"docs/laravel/v2/auth/sso/setup/#swapping-the-domain-extractor","title":"Swapping the Domain Extractor","text":"<p>Important: This feature is available as of v2.3.0.</p> <p>If you would like to override the default mechanism that extracts the domain from the user's account that is retrieved from the PHP request key, call the <code>WindowsAuthenticate::extractDomainUsing()</code> method and supply a callback.</p> <p>The callback should return a string, or an array with two values. The first being the user's username, the second being the user's domain.</p> <p>The returned value(s) will be passed into the Domain Validator, for validation.</p> <p>The first (and only) argument of the closure will be equal to the retrieved value from the configured PHP <code>$_SERVER</code> key (default is <code>AUTH_USER</code>).</p> <pre><code>WindowsAuthenticate::extractDomainUsing(function ($account) {\n    [$username, $domain] = array_pad(\n        array_reverse(explode('\\\\', $account)),\n        2,\n        null\n    );\n\n    return [$username, $domain];\n});\n</code></pre> <p>To bypass extraction, supply a closure and return the account's value:</p> <pre><code>WindowsAuthenticate::extractDomainUsing(function ($account) {\n    return $account;\n});\n</code></pre>"},{"location":"docs/laravel/v2/auth/sso/setup/#swapping-the-domain-validator","title":"Swapping the Domain Validator","text":"<p>Important: This feature is available as of v2.3.0.</p> <p>If you'd like to validate the user's domain in your own way, call the <code>WindowsAuthenticate::validateDomainUsing()</code> method, and supply either a closure, or a class.</p> <p>The first argument will be the user's LdapRecord model, the second will be the user's username and the third argument will be the user's domain (extracted with the above Domain Extractor).</p> <p>Return <code>true</code>/<code>false</code> whether the user has passed validation.</p>"},{"location":"docs/laravel/v2/auth/sso/setup/#using-a-closure","title":"Using a Closure","text":"<p>Register the closure into the middleware:</p> <pre><code>use LdapRecord\\Models\\Model;\nuse LdapRecord\\Laravel\\Middleware\\WindowsAuthenticate;\n\nWindowsAuthenticate::validateDomainUsing(function (Model $user, $username, $domain = null) {\n    // Validate the user's domain.\n});\n</code></pre>"},{"location":"docs/laravel/v2/auth/sso/setup/#using-a-class","title":"Using a Class","text":"<p>Create the class with an <code>__invoke()</code> method:</p> <pre><code>use LdapRecord\\Models\\Model;\n\nclass DomainValidator\n{\n    /**\n     * Determine if the user passes domain validation.\n     *\n     * @param Model       $user\n     * @param string      $username\n     * @param string|null $domain\n     *\n     * @return bool\n     */\n    public function __invoke(Model $user, $username, $domain = null)\n    {\n        // Validate the user's domain.\n    }\n}\n</code></pre> <p>Register the class into the middleware:</p> <pre><code>WindowsAuthenticate::validateDomainUsing(DomainValidator::class);\n</code></pre>"},{"location":"docs/laravel/v2/auth/sso/setup/#changing-the-server-key","title":"Changing the Server Key","text":"<p>By default, the <code>WindowsAuthenticate</code> middleware uses the <code>AUTH_USER</code> key inside of PHP's <code>$_SERVER</code> array (<code>$_SERVER['AUTH_USER']</code>). If you would like to change this, call the <code>serverKey</code> method on the <code>WindowsAuthenticate</code> middleware inside of your <code>AuthServiceProvider</code>:</p> <pre><code>// app/Providers/AuthServiceProvider.php\n\nuse LdapRecord\\Laravel\\Middleware\\WindowsAuthenticate;\n\n/**\n * Register any authentication / authorization services.\n *\n * @return void\n */\npublic function boot()\n{\n    $this-&gt;registerPolicies();\n\n    WindowsAuthenticate::serverKey('PHP_AUTH_USER');\n}\n</code></pre>"},{"location":"docs/laravel/v2/auth/sso/setup/#remember-single-sign-on-users","title":"Remember Single-Sign-On users","text":"<p>As of LdapRecord-Laravel version <code>v1.9.0</code>, users signed in to your application via the <code>WindowsAuthenticate</code> middleware will no longer be automatically \"remembered\".</p> <p>This shouldn't have any effect on your application, but if you need to re-enable this feature, you must call the <code>rememberAuthenticatedUsers</code> method on the <code>WindowsAuthenticate</code> middleware inside of your <code>AuthServiceProvider</code>:</p> <pre><code>// app/Providers/AuthServiceProvider.php\n\nuse LdapRecord\\Laravel\\Middleware\\WindowsAuthenticate;\n\n/**\n * Register any authentication / authorization services.\n *\n * @return void\n */\npublic function boot()\n{\n    $this-&gt;registerPolicies();\n\n    WindowsAuthenticate::rememberAuthenticatedUsers();\n}\n</code></pre>"},{"location":"docs/laravel/v2/auth/sso/setup/#selective-bypassing-single-sign-on","title":"Selective / Bypassing Single-Sign-On","text":"<p>Occasionally you may need to allow users who are not a part of the domain to login to your application, as well as allowing domain users to automatically sign in via Single-Sign-On.</p> <p>Depending on your web servers operating system, this process can be different.</p>"},{"location":"docs/laravel/v2/auth/sso/setup/#linux-httpd","title":"Linux (HTTPD)","text":"<p>If you're using the Apache <code>httpd</code> server with plugins enabling the sharing of a domain joined user's username via the <code>REMOTE_USER</code> server variable, you must update the <code>WindowsAuthenticate</code> middleware to use this variable, instead of the default <code>AUTH_USER</code>.</p> <p>To do this, call the <code>WindowsAuthenticate::serverKey()</code> method in your <code>AuthServiceProvider::boot()</code> method:</p> <pre><code>// app/Providers/AuthServiceProvider.php\n\nuse LdapRecord\\Laravel\\Middleware\\WindowsAuthenticate;\n\n/**\n * Register any authentication / authorization services.\n *\n * @return void\n */\npublic function boot()\n{\n    $this-&gt;registerPolicies();\n\n    WindowsAuthenticate::serverKey('REMOTE_USER');\n}\n</code></pre> <p>If a user is not on a domain joined computer, then the <code>REMOTE_USER</code> variable will be <code>null</code> and the <code>WindowsAuthenticate</code> middleware will be automatically bypassed, allowing regular web application users to sign in.</p>"},{"location":"docs/laravel/v2/auth/sso/setup/#windows-iis","title":"Windows (IIS)","text":"<p>A Windows hosted application with NTLM / Windows authentication enabled is unfortunately all-or-nothing on your entire web application instance. This means, you cannot enable a single HTTP endpoint in your application to use Single-Sign-On or exempt a portion of your application. However, there is a workaround that is used frequently in the industry.</p> <p>The goal is to have two URL's that point to the same Laravel application. One has Windows authentication enabled, and another does not. This is typically identified by an <code>sso</code> sub-domain:</p> <pre><code>&lt;!-- Standard URL --&gt;\nmy-app.com\n\n&lt;!-- Single-Sign-On URL --&gt;\nsso.my-app.com\n</code></pre> <p>To do this, you must create a new IIS application instance and point to the same Laravel application. Then, you simply have Windows authentication enabled on one instance, and left disabled on another.</p> <p>Nothing needs to be done in your Laravel application. The <code>WindowsAuthenticate</code> middleware will only attempt to authenticate users when the <code>AUTH_USER</code> server key is present, so it can remain in the global middleware stack.</p>"},{"location":"docs/laravel/v2/auth/sso/setup/#forcing-logouts-on-non-single-sign-on-users","title":"Forcing logouts on non Single-Sign-On users","text":"<p>If a user successfully authenticates to your Laravel application through single-sign-on, and their LDAP account happens to be deleted or disabled, the user will remain authenticated to your application for the duration of your Laravel application's session.</p> <p>If you would like all users in your application to be signed out automatically if SSO credentials are not available from your web server, call the <code>logoutUnauthenticatedUsers</code> method on the <code>WindowsAuthenticate</code> middleware in your <code>AuthServiceProvider::boot()</code> method:</p> <p>Important: Only enable this feature if Single-Sign-On is the only way you authenticate users. If a non-Single-Sign-On user has a session open, it will be ended automatically on their next request.</p> <pre><code>// app/Providers/AuthServiceProvider.php\n\nuse LdapRecord\\Laravel\\Middleware\\WindowsAuthenticate;\n\n/**\n * Register any authentication / authorization services.\n *\n * @return void\n */\npublic function boot()\n{\n    $this-&gt;registerPolicies();\n\n    WindowsAuthenticate::logoutUnauthenticatedUsers();\n}\n</code></pre>"},{"location":"docs/laravel/v3/","title":"Overview","text":"<p>LdapRecord-Laravel is a package providing you the ability to search your LDAP directory, perform operations, and authenticate LDAP users into your Laravel application.</p> <p>It uses the core LdapRecord package under the hood, so be sure to look at its documentation, so you have an understanding of how everything works. It was created with the mindset of porting Laravel's fantastic Eloquent database ORM to an LDAP equivalent.</p> <p>If you ever encounter issues or simply need some help getting up and running, please feel free to create an issue and I would be happy to help you out.</p> <p>If you require immediate support, consider becoming a sponsor to receive issue priority, so you get up and running as fast as possible.</p> <p>Let's get started!</p>"},{"location":"docs/laravel/v3/configuration/","title":"Configuration","text":"<p>Important: It's recommended to only use one approach listed in this guide below. Using both approaches to configure your LDAP connections may lead to unexpected results.</p> <p>LdapRecord-Laravel provides two ways to configure your connections:</p> <ul> <li>Using a published configuration file</li> <li>Using an environment file (.env)</li> </ul>"},{"location":"docs/laravel/v3/configuration/#using-a-published-configuration-file","title":"Using a published configuration file","text":"<p>To publish the <code>ldap.php</code> configuration file, execute the below artisan command:</p> <pre><code>php artisan vendor:publish --provider=\"LdapRecord\\Laravel\\LdapServiceProvider\"\n</code></pre> <p>The <code>ldap.php</code> file will then be created inside your applications <code>config</code>, directory.</p> <p>Inside the configuration file, set up your LDAP connections, or paste the following in your <code>.env</code> file to get started quicky:</p> <p>Review the LDAP configuration documentation to see what each option is used for.</p> <pre><code>LDAP_LOGGING=true\nLDAP_CONNECTION=default\nLDAP_HOST=127.0.0.1\nLDAP_USERNAME=\"cn=user,dc=local,dc=com\"\nLDAP_PASSWORD=secret\nLDAP_PORT=389\nLDAP_BASE_DN=\"dc=local,dc=com\"\nLDAP_TIMEOUT=5\nLDAP_SSL=false\nLDAP_TLS=false\nLDAP_SASL=false\n</code></pre> <p>If you'd like to configure more options that are specified in the <code>ldap.php</code> file, you may create your own env variables to control those options.</p>"},{"location":"docs/laravel/v3/configuration/#using-an-environment-file-env","title":"Using an environment file (.env)","text":"<p>LDAP connections may be configured directly in your <code>.env</code> without having to publish any configuration files.</p> <p>If your application has a single connection, you can paste the below env to get started right away:</p> <pre><code>LDAP_LOGGING=true\nLDAP_CONNECTION=default\nLDAP_CONNECTIONS=default\n\nLDAP_DEFAULT_HOSTS=10.0.0.1\nLDAP_DEFAULT_USERNAME=\"cn=admin,dc=local,dc=com\"\nLDAP_DEFAULT_PASSWORD=secret\nLDAP_DEFAULT_PORT=389\nLDAP_DEFAULT_BASE_DN=\"dc=local,dc=com\"\nLDAP_DEFAULT_TIMEOUT=5\nLDAP_DEFAULT_SSL=false\nLDAP_DEFAULT_TLS=false\nLDAP_DEFAULT_SASL=false\n</code></pre> <p>To set up multiple connections, you may use a comma-separated list of connection names using the <code>LDAP_CONNECTIONS</code> variable:</p> <pre><code>LDAP_CONNECTIONS=alpha,bravo\n</code></pre> <p>Next, set your default LDAP connection by using the <code>LDAP_CONNECTION</code> variable:</p> <pre><code>LDAP_CONNECTION=alpha\n</code></pre> <p>Then, to configure options for each connection you have specified, you must suffix them by <code>LDAP_{CONNECTION}_</code>:</p> <pre><code>LDAP_LOGGING=true\nLDAP_CONNECTION=alpha\nLDAP_CONNECTIONS=alpha,bravo\n\nLDAP_ALPHA_HOSTS=10.0.0.1,10.0.0.2\nLDAP_ALPHA_USERNAME=\"cn=admin,dc=alpha,dc=com\"\nLDAP_ALPHA_PASSWORD=secret\nLDAP_ALPHA_PORT=389\nLDAP_ALPHA_BASE_DN=\"dc=alpha,dc=com\"\nLDAP_ALPHA_TIMEOUT=5\nLDAP_ALPHA_SSL=false\nLDAP_ALPHA_TLS=false\nLDAP_ALPHA_SASL=false\n\nLDAP_BRAVO_HOSTS=11.0.0.1,11.0.0.2\nLDAP_BRAVO_USERNAME=\"cn=admin,dc=bravo,dc=com\"\nLDAP_BRAVO_PASSWORD=secret\nLDAP_BRAVO_PORT=389\nLDAP_BRAVO_BASE_DN=\"dc=bravo,dc=com\"\nLDAP_BRAVO_TIMEOUT=5\nLDAP_BRAVO_SSL=false\nLDAP_BRAVO_TLS=false\nLDAP_BRAVO_SASL=false\n</code></pre> <p>To configure PHP LDAP options for a connection using an env variable, use the configuration name pattern <code>LDAP_{CONNECTION}_OPT_{NAME}</code>.</p> <p>For example, you may configure the option <code>LDAP_OPT_X_TLS_CERTFILE</code> for a connection named <code>alpha</code> like so:</p> <pre><code>LDAP_ALPHA_OPT_X_TLS_CERTFILE=/usr/bin/etc/path\n</code></pre>"},{"location":"docs/laravel/v3/configuration/#testing-your-connection","title":"Testing your connection","text":"<p>Once you have your connection(s) configured, run a quick test to make sure they've been set up properly:</p> <pre><code>php artisan ldap:test\n</code></pre>"},{"location":"docs/laravel/v3/debugging/","title":"Debugging","text":""},{"location":"docs/laravel/v3/debugging/#connectivity","title":"Connectivity","text":"<p>LdapRecord-Laravel comes with a built-in command to test connectivity to your LDAP servers. The exception message, error code, and diagnostic message are displayed after a failure to bind to your LDAP server.</p> <p>To test your connectivity, run the following command:</p> <pre><code>php artisan ldap:test\n</code></pre> <p>Then, the following will be output:</p> <pre><code>Testing LDAP connection [default]...\n\n+------------+------------+-----------------+-------------------------------------------------------------------------------------------------------------+---------------+\n| Connection | Successful | Username        | Message                                                                                                     | Response Time |\n+------------+------------+-----------------+-------------------------------------------------------------------------------------------------------------+---------------+\n| default    | \u2718 No       | user@local.com  | ldap_bind(): Unable to bind to server: Can't contact LDAP server. Error Code: [-1] Diagnostic Message: null | 5008.72ms     |\n+------------+------------+-----------------+-------------------------------------------------------------------------------------------------------------+---------------+\n</code></pre> <p>The returned error codes and diagnostic messages can help you greatly when attempting to debug SSL and TLS connectivity issues.</p>"},{"location":"docs/laravel/v3/debugging/#tls-ssl","title":"TLS &amp; SSL","text":"<p>TLS and SSL can be very tricky to get up and running. You will most likely have to place an <code>ldap.conf</code> file onto your local / production server to indicate that you would like to either bypass TLS / SSL certificate verification, or use a valid certificate that you have retrieved from your LDAP server.</p> <p>This process is fully documented on the configuration documentation. It includes per operating system level instructions on where your <code>ldap.conf</code> file is located (or where it must be created), as well as what it must contain.</p> <p>Important: You must restart your web server after making changes to the <code>ldap.conf</code> file. In some cases, you may even have to restart your workstation or server for the changes to take effect.</p>"},{"location":"docs/laravel/v3/debugging/#directory-and-objects","title":"Directory and Objects","text":"<p>LdapRecord-Laravel comes with a built-in command to browse and navigate through your LDAP directories interactively.</p> <p>To browse your directory, use the <code>ldap:browse {connection}</code> command:</p> <p>Note: If no connection is specified, the browse command will connect to your default LDAP connection.</p> <pre><code>php artisan ldap:browse\n</code></pre>"},{"location":"docs/laravel/v3/debugging/#logging-in","title":"Logging In","text":"<p>To debug issues logging in, it's recommended to first complete the following steps:</p> <ol> <li>Enabled logging via the <code>logging</code> key inside your <code>config/ldap.php</code> file     (or by enabling it via your <code>.env</code> by using the <code>LDAP_LOGGING</code> key)</li> <li>Clear your configurations cache (if enabled) by running the <code>php artisan config:clear</code> command</li> <li>Add the <code>ListensForLdapBindFailure</code> trait onto your <code>LoginController</code></li> <li>Attempt logging in again</li> </ol> <p>After completing the above, the first thing to lookout for is whether a red error message is being displayed underneath your username / email field.</p> <p>If you do not see any error message and are immediately returned back to the login page, then you have likely changed the username field on your <code>resources/views/auth/login.blade.php</code> but have not updated it inside  your <code>LoginController</code>, or vice versa.</p> <p>For example, if you want users to login by a <code>username</code> instead of their <code>email</code>, make sure you've changed this via the <code>username</code> method, and the <code>credentials</code> method on your <code>LoginController</code></p> <pre><code>// app/Http/Controllers/Auth/LoginController.php\n\nuse Illuminate\\Http\\Request;\n\npublic function username()\n{\n    // This is the name of the HTML 'input' inside\n    // of our 'login.blade.php' view:\n    return 'username';\n}\n\nprotected function credentials(Request $request)\n{\n    // 'samaccountname' is the attribute we are using to\n    // locate users in our LDAP directory with. The\n    // value of the key must be the input name of\n    // our HTML input, as shown above:\n    return [\n        'samaccountname' =&gt; $request-&gt;get('username'),\n        'password' =&gt; $request-&gt;get('password'),\n    ];\n}\n</code></pre> <p>If you simply see an Invalid Credentials, or Can't contact LDAP server error, refer to your log files inside your applications <code>storage/logs</code> directory to investigate further. With <code>logging</code> enabled, all LDAP searches, binds, failures and exceptions will be reported there.</p>"},{"location":"docs/laravel/v3/events/","title":"Events","text":""},{"location":"docs/laravel/v3/events/#introduction","title":"Introduction","text":"<p>LdapRecord includes a robust event dispatcher that allows you to listen for various events that occur, such as authentication and object creation / modification.</p> <p>For example, you may wish to send a notification when an LDAP object is modified. You can listen for the model <code>Saved</code> event and then send an email regarding the change.</p>"},{"location":"docs/laravel/v3/events/#creating-the-listener","title":"Creating the Listener","text":"<p>To get started, we will create an event listener in the <code>app/Ldap/Listeners</code> directory and create a new file named <code>ObjectModified.php</code>. This will contain a class that will listen for the <code>Saved</code> model event.</p> <p>You will have to create the <code>Ldap</code> and <code>Listeners</code> subdirectories.</p> <pre><code>&lt;?php\n\nnamespace App\\Ldap\\Listeners;\n\nuse LdapRecord\\Models\\Events\\Saved;\nuse Illuminate\\Support\\Facades\\Mail;\n\nclass ObjectModified\n{\n    public function handle(Saved $event)\n    {\n        $objectName = $event-&gt;getModel()-&gt;getName();\n\n        // Send an email when the object has been modified.\n        Mail::raw(\"Object [$objectName] has been modified.\", function ($message) {\n            $message-&gt;from('notifier@company.com', 'LDAP Notifier');\n            $message-&gt;to('it-support@company.com');\n            $message-&gt;subject('LDAP Object Modified');\n        });\n    }\n}\n</code></pre> <p>For a list of all LdapRecord events, view the core event's documentation.</p>"},{"location":"docs/laravel/v3/events/#creating-the-service-provider","title":"Creating the Service Provider","text":"<p>Next, we will create a new Laravel service provider. This is where we will register our LDAP event listeners. We will call it <code>LdapEventServiceProvider</code>. Execute the below command to generate it:</p> <pre><code>php artisan make:provider LdapEventServiceProvider\n</code></pre> <p>Add the provider to your <code>config/app.php</code> configuration file:</p> <pre><code>// config/app.php\n\nreturn [\n    // ...\n\n    'providers' =&gt; [\n        // ...\n        \\App\\Providers\\LdapEventServiceProvider::class,\n    ],\n];\n</code></pre> <p>Then, in the generated provider we will update it to the following:</p> <pre><code>&lt;?php\n\nnamespace App\\Providers;\n\nuse LdapRecord\\Container;\nuse Illuminate\\Support\\ServiceProvider;\n\nclass LdapEventServiceProvider extends ServiceProvider\n{\n    /**\n     * The LDAP event listener mappings for the application.\n     *\n     * @return array\n     */\n    protected $listen = [\n        \\LdapRecord\\Models\\Events\\Saved::class =&gt; [\n            \\App\\Ldap\\ObjectModified::class\n        ],\n    ];\n\n    /**\n     * Register the application LDAP event listeners.\n     *\n     * @return void\n     */\n    public function boot()\n    {\n        $dispatcher = Container::getDispatcher();\n\n        foreach ($this-&gt;listen as $event =&gt; $listeners) {\n            foreach (array_unique($listeners) as $listener) {\n                $dispatcher-&gt;listen($event, $listener);\n            }\n        }\n    }\n}\n</code></pre> <p>We've removed the <code>register</code> method in the above generated class. We won't need it here.</p> <p>As you can see above, we can add LdapRecord events to the <code>$listen</code> property as the key, and the listeners as the value. This allows you to attach mulitple listeners to the same event.</p>"},{"location":"docs/laravel/v3/extending/","title":"Extending","text":""},{"location":"docs/laravel/v3/extending/#introduction","title":"Introduction","text":"<p>Important: Extendability has been added in v2.3.0.</p> <p>LdapRecord relies on Laravel's application container for making most of the instances that control all the major features of LdapRecord. This allows you to modify and/or adjust core methods with ease.</p> <p>Please be mindful of what you override, as certain events may not be fired and things may not work as documented, depending on your own custom implementation of features and what has been changed.</p>"},{"location":"docs/laravel/v3/extending/#authentication","title":"Authentication","text":"<p>To override the class that attempts authentication against your LDAP server, call the <code>LdapRecord::authenticateUsersUsing()</code> method, and provide a class name or closure, which extends the built-in authenticator.</p> <p>Create the authenticator:</p> <pre><code>namespace App\\Ldap;\n\nuse LdapRecord\\Models\\Model;\nuse LdapRecord\\Laravel\\LdapUserAuthenticator;\n\nclass UserAuthenticator extends LdapUserAuthenticator\n{\n    /**\n     * Attempt authenticating against the LDAP domain.\n     *\n     * @param Model  $user\n     * @param string $password\n     *\n     * @return bool\n     */\n    public function attempt(Model $user, $password)\n    {\n        // Attempt authentication...\n\n        // $user-&gt;getConnection()-&gt;auth()-&gt;attempt($user-&gt;getDn(), $password)...\n    }\n}\n</code></pre> <p>Register the binding:</p> <pre><code>// app/Providers/AppServiceProvider.php\n\nuse App\\Ldap\\UserAuthenticator;\n\nclass AppServiceProvider extends ServiceProvider\n{\n    /**\n     * Register application services.\n     *\n     * @return void\n     */\n    public function register()\n    {\n        LdapRecord::authenticateUsersUsing(UserAuthenticator::class);\n    }\n}\n</code></pre>"},{"location":"docs/laravel/v3/extending/#user-repository","title":"User Repository","text":"<p>To override the class that queries your LDAP server for users during authentication and importing, call the <code>LdapRecord::locateUsersUsing()</code> method, and provide a class name or closure, which extends the built-in user repository.</p> <p>Create the class:</p> <pre><code>namespace App\\Ldap;\n\nuse LdapRecord\\Laravel\\LdapUserRepository;\n\nclass UserRepository extends LdapUserRepository\n{\n    /**\n     * Retrieve a user by the given credentials.\n     *\n     * @param array $credentials\n     *\n     * @return \\LdapRecord\\Models\\Model|null\n     */\n    public function findByCredentials(array $credentials = [])\n    {\n        // Locate the user by their credentials...\n\n        // $this-&gt;query()-&gt;where(['...'])\n    }\n}\n</code></pre> <p>Register the binding:</p> <pre><code>// app/Providers/AppServiceProvider.php\n\nuse App\\Ldap\\UserRepository;\n\nclass AppServiceProvider extends ServiceProvider\n{\n    /**\n     * Register application services.\n     *\n     * @return void\n     */\n    public function register()\n    {\n        LdapRecord::locateUsersUsing(UserRepository::class);\n    }\n}\n</code></pre>"},{"location":"docs/laravel/v3/extending/#user-synchronizer","title":"User Synchronizer","text":"<p>To override the class that synchronizes your LDAP users during authentication and importing, call the <code>LdapRecord::synchronizeUsersUsing()</code> method, and provide a class name or closure, which extends the built-in user sychronizer.</p> <p>Create the class:</p> <pre><code>namespace App\\Ldap;\n\nuse LdapRecord\\Laravel\\Import\\UserSynchronizer;\n\nclass Synchronizer extends UserSynchronizer\n{\n    /**\n     * Synchronize the Eloquent database model with the LDAP model.\n     *\n     * @param LdapModel     $object\n     * @param EloquentModel $eloquent\n     * @param array         $data\n     *\n     * @return EloquentModel\n     */\n    public function synchronize(LdapModel $object, EloquentModel $eloquent, array $data = [])\n    {\n        // Set attributes onto the users Eloquent model...\n\n        // $eloquent-&gt;name = $object-&gt;getFirstAttribute('cn');\n    }\n}\n</code></pre> <p>Register the binding:</p> <pre><code>// app/Providers/AppServiceProvider.php\n\nuse App\\Ldap\\Synchronizer;\n\nclass AppServiceProvider extends ServiceProvider\n{\n    /**\n     * Register application services.\n     *\n     * @return void\n     */\n    public function register()\n    {\n        LdapRecord::synchronizeUsersUsing(Synchronizer::class);\n    }\n}\n</code></pre>"},{"location":"docs/laravel/v3/importing/","title":"Importing LDAP Objects","text":""},{"location":"docs/laravel/v3/importing/#introduction","title":"Introduction","text":"<p>If you are looking to import LDAP users into your application, view this guide instead.</p> <p>With LdapRecord-Laravel, you can easily import and synchronize LDAP objects into a database table using a given Eloquent model. This is useful for importing groups, memberships and more.</p>"},{"location":"docs/laravel/v3/importing/#getting-started","title":"Getting Started","text":"<p>For this example, we will be importing LDAP groups into our applications database table <code>groups</code>.</p> <p>Our groups table simply contains a <code>name</code> column, however to import LDAP objects into it, we must add two extra database columns:</p> Column Reason <code>guid</code> This is for storing your LDAP objects <code>objectguid</code>. It is needed for locating and synchronizing your LDAP object to the database. <code>domain</code> This is for storing your LDAP objects connection name. It is needed for storing your configured LDAP connection name of the object. <p>For brevity, we will not be showing the creation of the <code>groups</code> database table migration.</p>"},{"location":"docs/laravel/v3/importing/#creating-the-migration","title":"Creating the Migration","text":"<p>Generate a migration to add these columns onto our <code>groups</code> table:</p> <pre><code>php artisan make:migration add_ldap_columns_to_groups_table\n</code></pre> <p>Then, we'll add the new required columns to the migration:</p> <pre><code>class AddLdapColumnsToGroupsTable extends Migration\n{\n    /**\n     * Run the migrations.\n     */\n    public function up()\n    {\n        Schema::table('groups', function (Blueprint $table) {\n            $table-&gt;string('guid')-&gt;unique()-&gt;nullable();\n            $table-&gt;string('domain')-&gt;nullable();\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     */\n    public function down()\n    {\n        Schema::table('groups', function (Blueprint $table) {\n            $table-&gt;dropColumn(['guid', 'domain']);\n        });\n    }\n}\n</code></pre> <p>After finishing setting up the above migration, make sure you run it:</p> <pre><code>php artisan migrate\n</code></pre>"},{"location":"docs/laravel/v3/importing/#setting-up-the-eloquent-model","title":"Setting Up the Eloquent Model","text":"<p>For the importer to be able to properly interface with your Eloquent model, you must apply the following trait and interface onto your Eloquent model you are using to perform the import.</p> Type Interface <code>LdapRecord\\Laravel\\LdapImportable</code> Trait <code>LdapRecord\\Laravel\\ImportableFromLdap</code> <pre><code>// app/Group.php\n\nnamespace App;\n\nuse LdapRecord\\Laravel\\LdapImportable;\nuse LdapRecord\\Laravel\\ImportableFromLdap;\n\nclass Group extends Authenticatable implements LdapImportable\n{\n    use ImportableFromLdap;\n\n    // ...\n}\n</code></pre> <p>Your model is now ready for importing.</p>"},{"location":"docs/laravel/v3/importing/#running-the-import","title":"Running the Import","text":""},{"location":"docs/laravel/v3/importing/#defining-sync-attributes","title":"Defining Sync Attributes","text":"<p>Prior to running the import, you must define a configuration array. This configuration array must contain an array of <code>sync_attributes</code>, that reference the database column (the key) and the LDAP attribute (the value):</p> <pre><code>$config = [\n    'sync_attributes' =&gt; [\n        'name' =&gt; 'cn'\n    ],\n];\n</code></pre> <p>As with importing LDAP users, you may also use an attribute handler if you require extra logic when setting database values from the object.</p> <pre><code>$config = ['sync_attributes' =&gt; \\App\\Ldap\\AttributeHandler::class];\n</code></pre>"},{"location":"docs/laravel/v3/importing/#performing-the-import","title":"Performing the Import","text":"<p>To perform the import, you must use the <code>LdapRecord\\Laravel\\Import\\Synchronizer</code> class.</p> <p>This class accepts your Eloquent model class as the first parameter, and your configuration array into the second:</p> <p>Important: An unsaved Eloquent model will be returned after running the synchronizer. This means you must call <code>save()</code> on the resulting model.</p> <pre><code>use App\\Group as EloquentGroup;\nuse LdapRecord\\Laravel\\Import\\Synchronizer;\nuse LdapRecord\\Models\\ActiveDirectory\\Group as LdapGroup;\n\n// Create the synchronizer.\n$synchronizer = new Synchronizer(EloquentGroup::class, $config = [\n    'sync_attributes' =&gt; [\n        'name' =&gt; 'cn'\n    ],\n]);\n\n// Import each group from the directory.\nforeach (LdapGroup::get() as $group) {\n    $synchronizer-&gt;run($group)-&gt;save();\n}\n</code></pre> <p>The above can easily be placed into a scheduled job if you'd prefer the import to be run in the background of your application.</p>"},{"location":"docs/laravel/v3/installation/","title":"Installation","text":"<p>LdapRecord-Laravel requires the following:</p> Requirements PHP &gt;= 8.1 Laravel &gt;= 8.0 PHP LDAP extension enabled An LDAP server (Active Directory, OpenLDAP, FreeIPA etc.) <p>Require LdapRecord-Laravel via composer:</p> <pre><code>composer require directorytree/ldaprecord-laravel\n</code></pre> <p>Now you're ready to start configuring your connection(s).</p>"},{"location":"docs/laravel/v3/license/","title":"License","text":"<p>LdapRecord-Laravel is open-sourced software licensed under the MIT license.</p>"},{"location":"docs/laravel/v3/lumen/","title":"LdapRecord-Lumen","text":""},{"location":"docs/laravel/v3/lumen/#introduction","title":"Introduction","text":"<p>LdapRecord-Lumen gives you the features of LdapRecord-Laravel using Lumen.</p>"},{"location":"docs/laravel/v3/lumen/#installation","title":"Installation","text":"<p>LdapRecord-Lumen requires the following:</p> Requirements PHP &gt;= 8.1 Lumen &gt;= 8.0 PHP LDAP extension enabled An LDAP server (Active Directory, OpenLDAP, FreeIPA etc.) <p>Require LdapRecord-Laravel via composer:</p> <pre><code>composer require directorytree/ldaprecord-lumen\n</code></pre> <p>Once composer completes, register the <code>LdapServiceProvider</code> inside your <code>bootstrap/app.php</code> file:</p> <pre><code>// bootstrap/app.php\n\n$app-&gt;register(\\LdapRecord\\Lumen\\LdapServiceProvider::class);\n</code></pre>"},{"location":"docs/laravel/v3/lumen/#configuration","title":"Configuration","text":"<p>Publish the <code>ldap.php</code> configuration file via the <code>ldap:make:config</code> command:</p> <pre><code>php artisan ldap:make:config\n</code></pre> <p>A new LDAP configuration file will be created in your <code>config</code> directory.</p> <p>Then, inside your <code>.env</code> file, paste the following to configure your LDAP connection:</p> <pre><code>LDAP_LOGGING=true\nLDAP_CONNECTION=default\nLDAP_HOST=127.0.0.1\nLDAP_USERNAME=\"cn=user,dc=local,dc=com\"\nLDAP_PASSWORD=secret\nLDAP_PORT=389\nLDAP_BASE_DN=\"dc=local,dc=com\"\nLDAP_TIMEOUT=5\nLDAP_SSL=false\nLDAP_TLS=false\nLDAP_SASL=false\n</code></pre>"},{"location":"docs/laravel/v3/lumen/#usage","title":"Usage","text":"<p>You can now begin using LdapRecord inside your Lumen application:</p> <pre><code>// routes/web.php\n\nuse LdapRecord\\Models\\ActiveDirectory\\User;\n\n$router-&gt;get('/users', function () {\n    return User::get();\n});\n</code></pre>"},{"location":"docs/laravel/v3/release-notes/","title":"LdapRecord-Laravel v3.0.0 Release Notes","text":"<p>We're excited to announce the release of LdapRecord-Laravel v3.0.0! This major version introduces changes and improvements, focusing on stricter typing, utilizing new PHP features and methods, updated dependencies, and a new import and authentication  configuration option. Please review the following release notes to understand the new features and changes.</p>"},{"location":"docs/laravel/v3/release-notes/#key-features-and-changes","title":"Key Features and Changes","text":""},{"location":"docs/laravel/v3/release-notes/#php-81-requirement","title":"PHP &gt;= 8.1 Requirement","text":"<p>LdapRecord-Laravel v3 now requires PHP version 8.1 or higher to take advantage of the latest language features, optimizations, and security improvements. The whole codebase has been reviewed and refreshed with usage of new language features where applicable.</p>"},{"location":"docs/laravel/v3/release-notes/#laravel-80-requirement","title":"Laravel &gt;= 8.0 Requirement","text":"<p>LdapRecord-Laravel v3 now requires Laravel version 8.0 or higher to  take advantage of the latest framework features, optimizations,  and security improvements.</p>"},{"location":"docs/laravel/v3/release-notes/#strict-types-implementation","title":"Strict Types Implementation","text":"<p>We've implemented strict types across all classes and methods to enforce  better type safety and catch potential errors during development. This  will lead to more robust and maintainable code.</p>"},{"location":"docs/laravel/v3/release-notes/#new-import-and-authentication-options","title":"New Import and Authentication Options","text":"<ul> <li> <p>A new <code>min-users</code> command option has been added to the <code>ldap:import</code> command, allowing to you set a minumum number  of users to be returned by your LDAP server before importing users and  performing soft-deletes.</p> </li> <li> <p>A new <code>scopes</code> configuration option  has been made available to be added to your authentication provider in your  <code>config/auth.php</code> file. This allows you to add model query scopes to  refine/restrict the users who may authenticate into your application.</p> </li> </ul>"},{"location":"docs/laravel/v3/testing/","title":"Testing","text":""},{"location":"docs/laravel/v3/testing/#introduction","title":"Introduction","text":"<p>Testing LDAP integration for PHP has always been quite difficult. Any type of integration that is needed, you either need a real LDAP server to test against, or you mock every response given and assume the logic you have in place will work until you do live testing with a real LDAP server. This is finicky and hard to test in an easy way.</p> <p>That's where the LdapRecord Directory Emulator comes in.</p>"},{"location":"docs/laravel/v3/testing/#directory-emulator","title":"Directory Emulator","text":"<p>The Directory Emulator dynamically replaces the LDAP connection you specify with a fake one. This fake connection sets up an SQLite database that resembles an LDAP directory and allows you to store, update, delete, move, rename, and query LDAP objects through LdapRecord.</p> <p>The SQLite database can be stored as file, so you can utilize it in your application, or you can use an in-memory database for running unit tests. It's the perfect suite for testing the LDAP integration in your Laravel applications.</p> <p>When you query a model that uses the connection you have set up with the Directory Emulator, LdapRecord dynamically swaps query filters with Eloquent SQL queries, effectively allowing you to query objects you create inside your emulated directory.</p>"},{"location":"docs/laravel/v3/testing/#getting-started","title":"Getting Started","text":"<p>To begin, let's say we have an application that lists LDAP users inside your configured directory.</p> <p>inside our <code>config/ldap.php</code> file, we have defined our single <code>default</code> connection:</p> <pre><code>// config/ldap.php\n\n'default' =&gt; env('LDAP_CONNECTION', 'default'),\n\n'connections' =&gt; [\n    'default' =&gt; [\n        // ...\n        'base_dn' =&gt; 'dc=local,dc=com',\n    ],\n],\n</code></pre> <p>We have a <code>UsersController</code> that displays the LDAP users:</p> <pre><code>use App\\Ldap\\User;\n\npublic class UsersController extends Controller\n{\n    public function index()\n    {\n        $users = User::get();\n\n        return view('ldap.users', ['users' =&gt; $users]);\n    }\n}\n</code></pre> <p>And our view that simply lists all the users:</p> <pre><code>&lt;table&gt;\n  &lt;thead&gt;\n    &lt;tr&gt;\n      &lt;th&gt;Username&lt;/th&gt;\n      &lt;th&gt;Full Name&lt;/th&gt;\n    &lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    @foreach($users as $user)\n    &lt;tr&gt;\n      &lt;td&gt;{{ $user-&gt;getFirstAttribute('samaccountname') }}&lt;/td&gt;\n      &lt;td&gt;{{ $user-&gt;getFirstAttribute('cn') }}&lt;/td&gt;\n    &lt;/tr&gt;\n    @endforeach\n  &lt;/tbody&gt;\n&lt;/table&gt;\n</code></pre> <p>To test this would involve a ton of mocking - which we want to avoid. With the Directory Emulator, we can populate a fake LDAP server with objects utilizing our actual connection configuration.</p> <p>Let's create a test for the <code>UserController@index</code> method. We'll create a Laravel test running the following command:</p> <pre><code>php artisan make:test LdapUserControllerTest\n</code></pre> <p>Now that we have our test, let's attempt to test our <code>index</code> method:</p> <pre><code>use App\\Ldap\\User;\nuse LdapRecord\\Laravel\\Testing\\DirectoryEmulator;\n\nclass LdapUserControllerTest extends TestCase\n{\n    public function test_index_works()\n    {\n        DirectoryEmulator::setup('default');\n\n        $user = User::create([\n            'cn' =&gt; 'John Doe',\n            'samaccountname' =&gt; 'jdoe',\n        ]);\n\n        $this-&gt;assertEquals('cn=John Doe,dc=local,dc=com', $user-&gt;getDn());\n\n        $this-&gt;visit('/ldap/users')\n            -&gt;assertSee($user-&gt;getFirstAttribute('cn'))\n            -&gt;assertSee($user-&gt;getFirstAttribute('samaccountname'));\n    }\n}\n</code></pre> <p>As with actual LDAP objects created in a live directory using LdapRecord models, when you create LDAP objects in the emulated directory, they will use your connections configured <code>base_dn</code> to create distinguished names.</p>"},{"location":"docs/laravel/v3/testing/#using-a-sqlite-file-database","title":"Using a SQLite File Database","text":"<p>To use a SQLite file database, you must supply an array to the second parameter of the <code>DirectoryEmulator::setup</code> method and provide a file path using the <code>database</code> key where you would like the SQLite file to be stored:</p> <p>If the file does not exist already, it will be created for you automatically.</p> <pre><code>$file = storage_path('ldap_test_database.sqlite');\n\nDirectoryEmulator::setup('default', ['database' =&gt; $file]);\n</code></pre>"},{"location":"docs/laravel/v3/testing/#emulated-queries","title":"Emulated Queries","text":"<p>The Directory Emulator also emulates LDAP queries. However, there are limitations. It currently does not support the following features:</p> <ul> <li><code>raw</code> filters</li> <li><code>anr</code> (Ambiguous Name Resolution) filters</li> <li>Virtual attributes (such as <code>memberof</code>, <code>entryUUID</code> and more)</li> </ul> <p>Using the emulator, you can create a diverse LDAP object tree in your unit tests and ensure your application is querying the proper objects.</p> <p>The examples below use LdapRecord models, but you may also use a raw LdapRecord <code>Connection</code>.</p> <p>Let's update our example controller to retrieve users inside a specific OU, and a company name:</p> <pre><code>public class UsersController extends Controller\n{\n    public function index()\n    {\n        $ou = OrganizationalUnit::find('ou=Accounting,dc=local,dc=com');\n\n        $users = User::in($ou)-&gt;where('company', '=', 'Acme')-&gt;get();\n\n        return view('ldap.users', ['users' =&gt; $users]);\n    }\n}\n</code></pre> <p>Now we can update our test by creating an Organizational Unit and then creating a user inside that OU and assert that we only see the proper user:</p> <pre><code>public function test_index_works()\n{\n    DirectoryEmulator::setup('default');\n\n    $user = User::create([\n        'cn' =&gt; 'John Doe',\n        'samaccountname' =&gt; 'johndoe',\n    ]);\n\n    $ou = OrganizationalUnit::create([\n        'ou' =&gt; 'Accounting',\n    ]);\n\n    $accountant = (new User)-&gt;inside($ou)-&gt;save([\n        'cn' =&gt; 'Jane Doe',\n        'samaccountname' =&gt; 'janedoe',\n    ]);\n\n    $this-&gt;visit('/ldap/users')\n        -&gt;assertSee($accountant-&gt;getFirstAttribute('cn'))\n        -&gt;assertSee($accountant-&gt;getFirstAttribute('samaccountname'))\n        -&gt;assertDontSee($user-&gt;getFirstAttribute('cn'))\n        -&gt;assertDontSee($user-&gt;getFirstAttribute('samaccountname'));\n}\n</code></pre> <p>As you can see, this is extremely effective for testing your LDAP query integrations.</p>"},{"location":"docs/laravel/v3/testing/#working-with-relationships","title":"Working with Relationships","text":""},{"location":"docs/laravel/v3/testing/#has-one","title":"Has One","text":"<p>A <code>hasOne</code> relationship is easy to test. In this example, we will set the <code>manager</code> of another user:</p> <pre><code>$user = User::create(['cn' =&gt; 'Jane']);\n\n$manager = User::create(['cn' =&gt; 'John']);\n\n$user-&gt;manager()-&gt;attach($manager);\n</code></pre> <p>Then, you can retrieve the user's manager:</p> <pre><code>$manager = $user-&gt;manager()-&gt;first();\n</code></pre>"},{"location":"docs/laravel/v3/testing/#has-many","title":"Has Many","text":"<p>Since some attributes are virtual in LDAP (such as the <code>memberof</code> attribute on User objects in Active Directory), you will have to populate some attributes manually to mimic these virtual attributes. Let's walk through an example.</p> <p>In our application, we want to test that a user is a member of a particular group.</p> <p>First, we will create our group and user and add the user to the group:</p> <pre><code>$user = User::create(['cn' =&gt; 'John']);\n\n$group = Group::create(['cn' =&gt; 'Accounting']);\n\n$user-&gt;groups()-&gt;attach($group);\n</code></pre> <p>Now, if we attempt to retrieve the <code>$group-&gt;members()</code> relationship, we won't receive any results, but we will when using the <code>$user-&gt;groups()</code> relationship:</p> <pre><code>// Empty collection returned!\n$users = $group-&gt;members()-&gt;get();\n\n// A collection containing 'Accounting' group returned.\n$groups = $user-&gt;groups()-&gt;get();\n</code></pre> <p>The <code>$user-&gt;groups()</code> relationship works because it queries for groups that contain a <code>member</code> attribute equal to the users distinguished name. This <code>member</code> attribute is set on the <code>$group</code> instance that you pass into the <code>attach()</code> method.</p> <p>The <code>$group-&gt;members()</code> relationship does not work because it queries for objects that contain a <code>memberof</code> attribute to locate objects that are members. The <code>memberof</code> attribute is virtual, so we must populate it manually to get our relationships working on both directions:</p> <pre><code>$group = Group::create(['cn' =&gt; 'Accounting']);\n\n$user = User::create([\n    'cn' =&gt; 'John',\n    'memberof' =&gt; [$group-&gt;getDn()],\n]);\n\n$user-&gt;groups()-&gt;attach($group);\n\n// Returns the user 'John'.\n$users = $group-&gt;members()-&gt;first();\n\n// Returns 'Accounting' group.\n$groups = $user-&gt;groups()-&gt;first();\n</code></pre>"},{"location":"docs/laravel/v3/testing/#has-many-in","title":"Has Many In","text":"<p>Similarly with the <code>hasMany</code> relationship, when using a <code>hasManyIn</code> relationship, you must pre-populate a users virtual attribute for queries to properly locate members of a group.</p>"},{"location":"docs/laravel/v3/upgrading/","title":"Upgrading to Version 3","text":"<p>We strive to record all potential breaking changes. However, as some of these changes occur in lesser-known areas of the library, only a fraction of them might have an impact on your application.</p> <p>If you encounter any changes not documented here that have affected you, please create a bug report on the LdapRecord-Docs repository so that we can address the issue promptly.</p>"},{"location":"docs/laravel/v3/upgrading/#high-impact-changes","title":"High Impact Changes","text":""},{"location":"docs/laravel/v3/upgrading/#updating-dependencies","title":"Updating Dependencies","text":""},{"location":"docs/laravel/v3/upgrading/#php-810-required","title":"PHP &gt;= 8.1.0 Required","text":"<p>LdapRecord-Laravel v3 now requires PHP 8.1.0 or greater.</p>"},{"location":"docs/laravel/v3/upgrading/#laravel-80-required","title":"Laravel &gt;= 8.0 Required","text":"<p>LdapRecord-Laravel now requires Laravel version 8.0 or greater.</p>"},{"location":"docs/laravel/v3/upgrading/#ldaprecord-v3","title":"LdapRecord v3","text":"<p>The core LdapRecord repository has been updated to version 3.</p> <p>Please visit the upgrade guide to see any changes in the core that may have an impact on your application.</p>"},{"location":"docs/laravel/v3/upgrading/#composer-dependencies","title":"Composer Dependencies","text":"<p>You should update the following dependency in your application's <code>composer.json</code> file:</p> <pre><code>\"directorytree/ldaprecord-laravel\": \"^3.0\"\n</code></pre>"},{"location":"docs/laravel/v3/upgrading/#strict-php-types-implemented","title":"Strict PHP Types Implemented","text":"<p>LdapRecord-Laravel (and the core LdapRecord repository) now has strict  types implemented in all classes for all methods and properties.</p> <p>If you've created your own models, scopes, or have extended any other class from either repository, you will need to adjust any  overridden properties or methods with their respective types.</p>"},{"location":"docs/laravel/v3/upgrading/#configuration-updates","title":"Configuration Updates","text":"<p>The <code>logging</code> configuration options have been moved to an array. You  may either republish your configuration file by deleting the existing one (<code>config/ldap.php</code>) and running:</p> <pre><code>php artisan vendor:publish --provider=\"LdapRecord\\Laravel\\LdapServiceProvider\"\n</code></pre> <p>Or, by updating the option manually:</p> <pre><code>// config/ldap.php\n\nreturn [\n    // ...\n\n-   'logging' =&gt; true,\n-   'logging_channel' =&gt; 'stack',\n\n+   'logging' =&gt; [\n+       'enabled' =&gt; true,\n+       'channel' =&gt; 'stack',\n+   ],\n];\n</code></pre>"},{"location":"docs/laravel/v3/upgrading/#medium-impact-changes","title":"Medium Impact Changes","text":""},{"location":"docs/laravel/v3/upgrading/#ldaprecordlaravelauthrule-changes","title":"LdapRecord\\Laravel\\Auth\\Rule changes","text":"<p>The <code>LdapRecord\\Laravel\\Auth\\Rule</code> abstract class has been moved to an interface and the <code>isValid</code> method has also been renamed to <code>passes</code>, which now accepts an LdapRecord <code>Model</code> as the first parameter and an Eloquent <code>Model</code> as the second:</p> <pre><code>namespace App\\Ldap;\n\nuse LdapRecord\\Models\\Model as LdapRecord;\nuse Illuminate\\Database\\Eloquent\\Model as Eloquent;\n\nuse LdapRecord\\Laravel\\Auth\\Rule;\n\n- class MyRule extends Rule\n+ class MyRule implements Rule\n{\n    /**\n     * Determine if the rule passes validation.\n     */\n-    public function isValid();\n+    public function passes(LdapRecord $user, Eloquent $model = null): bool\n    {\n        // ...\n    }\n}\n</code></pre>"},{"location":"docs/laravel/v3/upgrading/#low-impact-changes","title":"Low Impact Changes","text":""},{"location":"docs/laravel/v3/upgrading/#make-command-changes","title":"\"Make\" Command Changes","text":"<p>The <code>make:ldap-*</code> methods have been renamed:</p> <pre><code>- php artisan make:ldap-rule\n+ php artisan ldap:make:rule\n</code></pre> <pre><code>- php artisan make:ldap-model\n+ php artisan ldap:make:model\n</code></pre> <pre><code>- php artisan make:ldap-scope\n+ php artisan ldap:make:scope\n</code></pre>"},{"location":"docs/laravel/v3/upgrading/#ldaprecordlaravelauthvalidator","title":"LdapRecord\\Laravel\\Auth\\Validator","text":"<p>The <code>Validator</code> class has had the <code>fails</code> method removed, and the <code>passes()</code> method now accepts an LdapRecord <code>Model</code> as the first parameter, and an Eloquent <code>Model</code> as the second:</p> <pre><code>+ use LdapRecord\\Models\\Model as LdapRecord;\n+ use Illuminate\\Database\\Eloquent\\Model as Eloquent;\n\nclass Validator\n{\n    // ...\n-    public function passes();\n+    public function passes(LdapRecord $user, Eloquent $model = null): bool;\n\n-    public function fails();\n}\n</code></pre>"},{"location":"docs/laravel/v3/usage/","title":"Usage","text":""},{"location":"docs/laravel/v3/usage/#models","title":"Models","text":"<p>This usage documentation is intentionally kept short and sweet to prevent duplication. Be sure to review the core LdapRecord documentation as it explains all of LdapRecord's features in-depth.</p> <p>Once you've configured your connections in your <code>config/ldap.php</code> file, you're ready to start running queries and operations on your LDAP server.</p> <p>If you're connecting to an Active Directory or OpenLDAP server, you may utilize the built-in models to get up and running right away.</p> <p>If you would like to create your own models, you can generate one via the <code>ldap:make:model</code> command:</p> <pre><code>php artisan ldap:make:model User\n</code></pre> <p>This will create a new LdapRecord model inside your application in the <code>app/Ldap</code> folder.</p> <p>If the <code>Ldap</code> folder does not exist, it will be created automatically.</p> <p>By default, the generated model will not have any <code>$objectClasses</code> set. LdapRecord requires this attribute to be set for objects to be created properly in your directory.</p> <p>If no <code>$objectClasses</code> are set, queries will not be scoped to the object you are querying, and you will have to set the models <code>$objectClasses</code> manually before creating new objects.</p> <pre><code>namespace App\\Ldap;\n\nuse LdapRecord\\Models\\Model;\n\nclass User extends Model\n{\n    public static $objectClasses = [\n        'top',\n        'person',\n        'organizationalperson',\n        'user',\n    ];\n}\n</code></pre> <p>You may want to extend from the <code>LdapRecord\\Models\\ActiveDirectory\\Entry</code> class to utilize some helper methods that are limited to the use of Active Directory.  This can save you time from having to implement functionality manually.</p>"},{"location":"docs/laravel/v3/usage/#searching","title":"Searching","text":"<p>To begin querying your model, you can statically call query methods off of the model:</p> <pre><code>$users = User::where('company', '=', 'Acme')-&gt;get();\n</code></pre> <p>When using the above example model for searching your LDAP directory, the following filter will be used:</p> <pre><code>(&amp;(objectclass=top)(objectclass=person)(objectclass=organizationalperson)(objectclass=user)(company=Acme))\n</code></pre>"},{"location":"docs/laravel/v3/usage/#creating-updating","title":"Creating / Updating","text":"<p>To create a new object in your directory, call the <code>create</code> method:</p> <pre><code>$user = User::create([\n    'company'   =&gt; 'Acme',\n    'givenname' =&gt; 'Steve',\n    'sn'        =&gt; 'Bauman',\n    'cn'        =&gt; 'Steve Bauman',\n]);\n</code></pre> <p>When creating the above example model, the <code>objectclass</code> attribute will automatically be sent with all other attributes you have set for the user creation. This effectively creates the proper object in your directory.</p> <p>You may also create a new model instance, set its attributes, and call the <code>save</code> method:</p> <pre><code>$user = new User;\n\n$user-&gt;cn = 'Steve Bauman';\n$user-&gt;givenname = 'Steve';\n$user-&gt;sn = 'Bauman';\n$user-&gt;company = 'Acme';\n\n$user-&gt;save();\n</code></pre> <p>Similarly, to update an object, modify a model that was returned from a query and call the <code>save</code> method:</p> <pre><code>$user = User::find('cn=Steve Bauman,dc=local,dc=com');\n\n$user-&gt;company = 'Acme';\n\n$user-&gt;save();\n</code></pre> <p>If you need help understanding user creation and management, take a look at the Active Directory user management tutorial.</p>"},{"location":"docs/laravel/v3/usage/#scopes","title":"Scopes","text":"<p>Sometimes you may need to utilize several of the same query filters around your application. Model scopes are a perfect for this, as you can extract these filters into its own class and apply it to a model query.</p> <p>Be sure to take a peek at the query scopes documentation for a more in-depth look.</p> <p>To create a new model scope, call the command:</p> <pre><code>php artisan ldap:make:scope OnlyAccountants\n</code></pre> <p>This will create a new model scope in your applications <code>app\\Ldap\\Scopes</code> directory.</p> <pre><code>namespace App\\Ldap\\Scopes;\n\nuse LdapRecord\\Models\\Model;\nuse LdapRecord\\Models\\Scope;\nuse LdapRecord\\Query\\Model\\Builder;\n\nclass OnlyAccountants implements Scope\n{\n    public function apply(Builder $query, Model $model)\n    {\n        $query-&gt;where('title', '=', 'Accountant');\n    }\n}\n</code></pre> <p>Now, you can either apply this scope globally so the query filter is applied on every query of your model, or apply it when you need it. Let's walk through both.</p> <p>To apply your scope globally, override your models protected static <code>boot</code> method, and then call the <code>addGlobalScope</code> method:</p> <pre><code>namespace App\\Ldap;\n\nuse LdapRecord\\Models\\Model;\nuse App\\Ldap\\Scopes\\OnlyAccountants;\n\nclass User extends Model\n{\n    // ...\n\n    protected static function boot()\n    {\n        parent::boot();\n\n        static::addGlobalScope(new OnlyAccountants);\n    }\n}\n</code></pre> <p>You must pass a new instance of your scope into the <code>addGlobalScope</code> method, not the class name.</p> <p>Any search queries that are performed on your <code>User</code> model will now be properly scoped.</p> <p>If you wish to apply a scope in certain situations, you may use the <code>withGlobalScope</code> method:</p> <pre><code>$accountants = User::withGlobalScope('accountants', new OnlyAccountants)-&gt;get();\n</code></pre> <p>As you may have noticed above, you must provide a named string for the scope you are passing in.</p>"},{"location":"docs/laravel/v3/usage/#basic-authentication","title":"Basic Authentication","text":"<p>Sometimes you simply want to know if a users LDAP credentials are valid. To do this, you must retrieve your LDAP connection from the LdapRecord connection container.</p> <p>To do so, you must call the <code>getConnection</code> method on the <code>Container</code> and pass in the name of your connection that appears in your <code>config/ldap.php</code> file:</p> <pre><code>use LdapRecord\\Container;\n\n$connection = Container::getConnection('default');\n</code></pre> <p>To retrieve your <code>default</code> connection that you have set in your <code>ldap.php</code> configuration file, call the <code>getDefaultConnection</code> method:</p> <pre><code>use LdapRecord\\Container;\n\n$connection = Container::getDefaultConnection();\n</code></pre> <p>Once you have your connection, call the <code>auth()-&gt;attempt</code> method with your users Distinguished Name and their password:</p> <pre><code>use LdapRecord\\Container;\n\n$connection = Container::getConnection('default');\n\nif ($connection-&gt;auth()-&gt;attempt('cn=user,dc=local,dc=com', 'SuperSecret')) {\n    // Credentials are valid!\n}\n</code></pre> <p>If you don't want your user to have to enter in their Distinguished Name, locate the user in your directory first who is attempting to authenticate, and then pass in their Distinguished Name:</p> <pre><code>use LdapRecord\\Container;\nuse LdapRecord\\Models\\ActiveDirectory\\User;\n\n$connection = Container::getConnection('default');\n\n$user = User::findByOrFail('samaccountname', 'sbauman');\n\nif ($connection-&gt;auth()-&gt;attempt($user-&gt;getDn(), 'SuperSecret')) {\n    // Credentials are valid!\n}\n</code></pre> <p>If you need to determine why the users authentication is failing (for example, if their password has expired), you can retrieve the last message that was generated from your LDAP server. This message will usually contain a code that you can use to determine the cause of failure:</p> <pre><code>if ($connection-&gt;auth()-&gt;attempt($user-&gt;getDn(), 'SuperSecret')) {\n    // Credentials are valid!\n} else {\n    $message = $connection-&gt;getLdapConnection()-&gt;getDiagnosticMessage();\n\n    if (strpos($message, '532') !== false) {\n        return \"Your password has expired.\";\n    }\n}\n</code></pre>"},{"location":"docs/laravel/v3/versioning/","title":"Versioning","text":"<p>LdapRecord-Laravel is versioned under the Semantic Versioning guidelines as much as possible.</p> <p>Major versions of LdapRecord-Laravel will always be kept in sync with the core LdapRecord repository. This means when LdapRecord-Laravel hits <code>v2.0.0</code>, LdapRecord <code>^v2.0</code> will be used.</p> <p>Releases will be numbered with the following format:</p> <p><code>&lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;</code></p> <p>And constructed with the following guidelines:</p> <ul> <li>Breaking backward compatibility bumps the major and resets the minor and patch.</li> <li>New additions without breaking backward compatibility bumps the minor and resets the patch.</li> <li>Bug fixes and misc changes bumps the patch.</li> </ul> <p>Minor versions are not maintained individually, and you're encouraged to upgrade through to the next minor version.</p> <p>Major versions are maintained individually through separate branches.</p>"},{"location":"docs/laravel/v3/auth/","title":"Authentication Overview","text":"<p>LdapRecord-Laravel comes with two ways to authenticate LDAP users into your application. Read each use case below and select one that best suits your needs.</p>"},{"location":"docs/laravel/v3/auth/#plain-authentication","title":"Plain Authentication","text":"<ul> <li>You don't need to attach any data to your LDAP users.</li> <li>You're okay with your application being inaccessible if your LDAP server is down.</li> <li>Your application critically depends on LDAP user roles and status (i.e. user enablement/disablement, group memberships).</li> </ul> <p>Plain Authentication Overview</p>"},{"location":"docs/laravel/v3/auth/#synchronized-database-authentication","title":"Synchronized Database Authentication","text":"<ul> <li>You need to attach data to your LDAP users.</li> <li>Your application may need to authenticate other registered non-LDAP users.</li> <li>Your application must be accessible if your LDAP server is unavailable or down.</li> </ul> <p>Synchronized Database Authentication Overview</p>"},{"location":"docs/laravel/v3/auth/#configure-without-credentials","title":"Configure Without Credentials","text":"<p>To configure LdapRecord-Laravel authentication without credentails your LDAP server much have anonymous binding enabled. When binding anonymously, your permissions must be open enough so that users who need to sign in to your Laravel application can be read from your ActiveDirectory server, along with the attribute you are using for authentication.</p> <p>To bind anonymously to your LDAP server, set your <code>username</code> and <code>password</code> to <code>null</code> inside your configuration.</p> <p>Important: A base DN must still be configured for searches to return results.</p> <p>If anonymous binding is disabled, you must configure a <code>username</code> and <code>password</code> to connect to your LDAP server.</p>"},{"location":"docs/laravel/v3/auth/#why-does-ldaprecord-require-credentials","title":"Why Does LdapRecord Require Credentials?","text":"<p>Think of it like a database connection to your application. LdapRecord needs credentials to search your directory for the user who is attempting to sign in to your Laravel application by the attribute of your choosing. Without this access, it cannot search. You would have to have users enter in their full distinguished name to be able to sign in. Once signed in, LDAP access would be lost as soon as the PHP request ends, leaving most of the features in LdapRecord-Laravel in a non-working state.</p>"},{"location":"docs/laravel/v3/auth/configuration/","title":"Authentication Configuration","text":""},{"location":"docs/laravel/v3/auth/configuration/#introduction","title":"Introduction","text":"<p>To configure LDAP authentication, you must define or update a <code>provider</code> inside your <code>config/auth.php</code> file.</p> <p>Let's walk through configuring both LDAP authentication mechanisms.</p>"},{"location":"docs/laravel/v3/auth/configuration/#plain-authentication","title":"Plain Authentication","text":"<p>To create a plain LDAP authentication provider, navigate to the <code>providers</code> array, and paste the following <code>ldap</code> provider:</p> <pre><code>// config/auth.php\n\n'providers' =&gt; [\n    // ...\n\n    'ldap' =&gt; [\n        'driver' =&gt; 'ldap',\n        'model' =&gt; LdapRecord\\Models\\ActiveDirectory\\User::class,\n        'rules' =&gt; [],\n    ],\n],\n</code></pre> <p>If your application requires more than one LDAP connection, you must create a new provider for each connection.</p> <p>This new provider must have its own unique <code>model</code> class set which must use your alternate configured connection using the <code>$connection</code> property.</p> <p>In the scenario of having multiple LDAP connections, it may be helpful to namespace the LDAP models you create with the desired connection. For example:</p> <pre><code>App\\Ldap\\DomainAlpha\\User\n</code></pre> <p>This will allow you to segregate scopes, rules and other classes to their relating connection.</p>"},{"location":"docs/laravel/v3/auth/configuration/#driver","title":"Driver","text":"<p>The <code>driver</code> option must be <code>ldap</code> as this is what indicates to Laravel the proper authentication driver to use.</p>"},{"location":"docs/laravel/v3/auth/configuration/#model","title":"Model","text":"<p>The <code>model</code> option must be the class name of your LdapRecord model. This model will be used for fetching users from your directory.</p>"},{"location":"docs/laravel/v3/auth/configuration/#rules","title":"Rules","text":"<p>The <code>rules</code> option must be an array of class names of authentication rules.</p>"},{"location":"docs/laravel/v3/auth/configuration/#synchronized-database-authentication","title":"Synchronized Database Authentication","text":"<p>To create a synchronized database LDAP authentication provider, navigate to the <code>providers</code> array, and paste the following <code>ldap</code> provider:</p> <p>If your application requires two or more LDAP connections, you must create a new provider for each connection.</p> <pre><code>// config/auth.php\n\n'providers' =&gt; [\n    // ...\n\n    'ldap' =&gt; [\n        'driver' =&gt; 'ldap',\n        'model' =&gt; LdapRecord\\Models\\ActiveDirectory\\User::class,\n        'rules' =&gt; [],\n        'database' =&gt; [\n            'model' =&gt; App\\Models\\User::class,\n            'sync_passwords' =&gt; false,\n            'sync_attributes' =&gt; [\n                'name' =&gt; 'cn',\n                'email' =&gt; 'mail',\n            ],\n        ],\n    ],\n],\n</code></pre> <p>As you can see above, a <code>database</code> array is used to configure the association between your LDAP user and your Eloquent user.</p>"},{"location":"docs/laravel/v3/auth/configuration/#database-model","title":"Database Model","text":"<p>The <code>database =&gt; model</code> key is the class name of the Eloquent model that will be used for creating and retrieving LDAP users from your applications database.</p> <p>Be sure to add the required trait and interface to this model as shown in the installation guide.</p>"},{"location":"docs/laravel/v3/auth/configuration/#password-column","title":"Password Column","text":"<p>If your application uses a different password column than <code>password</code>, then you can configure it using the <code>password_column</code> key inside your provider's configuration:</p> <pre><code>'providers' =&gt; [\n    // ...\n\n    'ldap' =&gt; [\n        // ...\n        'database' =&gt; [\n            // ...\n            'password_column' =&gt; 'my_password_column',\n        ],\n    ],\n],\n</code></pre> <p>You can also set the value to <code>false</code> if your database table does not have any password column at all:</p> <pre><code>'providers' =&gt; [\n    // ...\n\n    'ldap' =&gt; [\n        // ...\n        'database' =&gt; [\n            // ...\n            'password_column' =&gt; false,\n        ],\n    ],\n],\n</code></pre>"},{"location":"docs/laravel/v3/auth/configuration/#sync-passwords","title":"Sync Passwords","text":"<p>The <code>database =&gt; sync_passwords</code> option enables password synchronization. Password synchronization captures and hashes the users password upon login if they pass LDAP authentication. This helps in situations where you may want to provide a \"back up\" option in case your LDAP server is unreachable, as well as a way of determining if a users password is valid without having to call to your LDAP server and validate it for you.</p> <p>If you do not define the <code>sync_passwords</code> key or have it set <code>false</code>, a user is always applied a random 16 character hashed password. This hashed password is only set once upon initial import or login so no needless updates are performed on user records.</p>"},{"location":"docs/laravel/v3/auth/configuration/#sync-attributes","title":"Sync Attributes","text":"<p>The <code>database =&gt; sync_attributes</code> array defines a set of key-value pairs:</p> <ul> <li>The key of each array item is the column of your <code>users</code> database table</li> <li>The value is the name of the users LDAP attribute to set the database value to</li> </ul> <p>You do not need to add your users <code>guid</code> or <code>domain</code> database columns. These are done automatically for you.</p> <p>For further control on sync attributes, see the below attribute handler feature.</p>"},{"location":"docs/laravel/v3/auth/configuration/#sync-existing-records","title":"Sync Existing Records","text":"<p>The <code>database =&gt; sync_existing</code> array defines a set of key-value pairs:</p> <ul> <li>The key of each array item is the column of your <code>users</code> database table to query</li> <li>The value is the name of the users LDAP attribute to query inside your database for</li> </ul> <p>If the LDAP attribute returns <code>null</code> for the given value, the value string will be used in the query instead. This is helpful to be able to use raw strings to scope your query by.</p> <p>Let's walk through an example.</p> <p>In our application, we have existing users inside our Laravel applications database:</p> id name email password guid domain 1 Steve Bauman sbauman@local.com ... <code>null</code> <code>null</code> 2 John Doe jdoe@local.com ... <code>null</code> <code>null</code> <p>As you can see above, these users have <code>null</code> values for their <code>guid</code> and <code>domain</code> columns.</p> <p>If you do not define a <code>sync_existing</code> array, and a user logs in with <code>sbauman@local.com</code>, you will receive a SQL exception. This is because LdapRecord was unable to locate a local database user using the users GUID. If this occurs, LdapRecord attempts to insert a new user with the same email address.</p> <p>To solve this issue, we will insert the following <code>sync_existing</code> array:</p> <pre><code>'providers' =&gt; [\n    // ...\n\n    'ldap' =&gt; [\n        // ...\n        'database' =&gt; [\n            // ...\n            'sync_existing' =&gt; [\n                'email' =&gt; 'mail',\n            ],\n        ],\n    ],\n],\n</code></pre> <p>Now when <code>sbauman@local.com</code> attempts to log in, if the user cannot be located by their GUID, they will instead be located by their email address. Their GUID, domain, and sync attributes you define will then synchronize.</p>"},{"location":"docs/laravel/v3/auth/configuration/#all-available-options-example","title":"All Available Options Example","text":"<p>Here is a synchronized database provider fully configured with all available options set:</p> <pre><code>// config/auth.php\n\n'providers' =&gt; [\n    // ...\n\n    'ldap' =&gt; [\n        'driver' =&gt; 'ldap',\n        'model' =&gt; LdapRecord\\Models\\ActiveDirectory\\User::class,\n        'rules' =&gt; [],\n        'database' =&gt; [\n            'model' =&gt; App\\Models\\User::class,\n            'sync_passwords' =&gt; true,\n            'sync_attributes' =&gt; [\n                'name' =&gt; 'cn',\n                'email' =&gt; 'mail',\n            ],\n            'sync_existing' =&gt; [\n                'email' =&gt; 'mail',\n            ],\n            'password_column' =&gt; 'password',\n        ],\n    ],\n],\n</code></pre>"},{"location":"docs/laravel/v3/auth/configuration/#attribute-handlers","title":"Attribute Handlers","text":"<p>If you require logic for synchronizing attributes when users sign in to your application or are being imported, you can create an attribute handler class responsible for setting / synchronizing your database models attributes from their LDAP model.</p> <p>This class you define must have a <code>handle</code> method. This method must accept the LDAP model you have configured as the first parameter and your Eloquent database model as the second.</p> <p>For the example below, we will create a handler named <code>AttributeHandler.php</code> inside your <code>app/Ldap</code> folder:</p> <p>You do not need to call <code>save()</code> on your Eloquent database model. This is called for you after attribute synchronization.</p> <pre><code>&lt;?php\n\nnamespace App\\Ldap;\n\nuse App\\Models\\User as DatabaseUser;\nuse App\\Ldap\\User as LdapUser;\n\nclass AttributeHandler\n{\n    public function handle(LdapUser $ldap, DatabaseUser $database)\n    {\n        $database-&gt;name = $ldap-&gt;getFirstAttribute('cn');\n        $database-&gt;email = $ldap-&gt;getFirstAttribute('mail');\n    }\n}\n</code></pre> <p>Attribute handlers are created using Laravel's <code>app()</code> helper, so you may type-hint any dependencies you require in your handlers constructor to be made available during synchronization.</p> <p>Then inside your <code>config/auth.php</code> file for your provider, set the attribute handler class as the <code>sync_attributes</code> value:</p> <pre><code>'providers' =&gt; [\n    // ...\n\n    'ldap' =&gt; [\n        // ...\n        'database' =&gt; [\n            // ...\n            'sync_attributes' =&gt; \\App\\Ldap\\LdapAttributeHandler::class,\n        ],\n    ],\n],\n</code></pre> <p>You may also add multiple if you'd prefer, or combine them with <code>key =&gt; value</code> pairs:</p> <pre><code>// ...\n'database' =&gt; [\n    // ...\n    'sync_attributes' =&gt; [\n        'name' =&gt; 'cn',\n        'email' =&gt; 'mail',\n        \\App\\Ldap\\MyFirstAttributeHandler::class,\n        \\App\\Ldap\\MySecondAttributeHandler::class,\n    ],\n],\n</code></pre>"},{"location":"docs/laravel/v3/auth/multi-domain/","title":"Multi-Domain Authentication","text":""},{"location":"docs/laravel/v3/auth/multi-domain/#introduction","title":"Introduction","text":"<p>LdapRecord-Laravel allows you to authenticate users from as many LDAP directories as you'd like.</p> <p>This useful when you have separate domains that are not joined in a trust.</p>"},{"location":"docs/laravel/v3/auth/multi-domain/#configuration","title":"Configuration","text":"<p>To begin, you must create two separate LdapRecord models for each of your domains.</p> <p>Having two separate models allows you to configure their connections independently.</p>"},{"location":"docs/laravel/v3/auth/multi-domain/#configuring-the-ldap-connections","title":"Configuring the LDAP Connections","text":"<p>For this guide, we will have two example domains named <code>Alpha</code> and <code>Bravo</code>. We first need to set up these domain connections in our <code>ldap.php</code> configuration file:</p> <pre><code>// config/ldap.php\n\n// ...\n\n'connections' =&gt; [\n    'alpha' =&gt; [\n        // ...\n    ],\n\n    'bravo' =&gt; [\n        // ...\n    ],\n],\n</code></pre> <p>Remember to test your connections using <code>php artisan ldap:test</code> to ensure you are able to connect to each of your LDAP servers.</p> <p>Now we have our connections configured, you must create a <code>User</code> model for each one.</p> <p>Let's go ahead and create them by running the below commands:</p> <pre><code>php artisan ldap:make:model Alpha\\User\n</code></pre> <pre><code>php artisan ldap:make:model Bravo\\User\n</code></pre> <p>The <code>Alpha</code> and <code>Bravo</code> subdirectories will be created for you automatically.</p> <p>Then, we must edit their connections to reflect the connection name in the <code>config/ldap.php</code> file:</p> <pre><code>// app/Ldap/Alpha/User.php\n\nclass User extends Model\n{\n    protected $connection = 'alpha';\n\n    // ...\n}\n</code></pre> <pre><code>// app/Ldap/Bravo/User.php\n\nclass User extends Model\n{\n    protected $connection = 'bravo';\n\n    // ...\n}\n</code></pre> <p>You may want these models to extend the built-in models, as they include functionality that you do not need to build yourself. It's completely up to you.</p>"},{"location":"docs/laravel/v3/auth/multi-domain/#configuring-the-authentication-guards","title":"Configuring the Authentication Guards","text":"<p>For each of our LDAP connections, we will set up new authentication providers, as well as their own guard inside our <code>config/auth.php</code> file:</p> <pre><code>// config/auth.php\n\n'guards' =&gt; [\n    'alpha' =&gt; [\n        'driver' =&gt; 'session',\n        'provider' =&gt; 'alpha',\n    ],\n\n    'bravo' =&gt; [\n        'driver' =&gt; 'session',\n        'provider' =&gt; 'bravo',\n    ],\n],\n\n'providers' =&gt; [\n    // ...\n\n    'alpha' =&gt; [\n        // ...\n        'model' =&gt; App\\Ldap\\Alpha\\User::class,\n    ],\n\n    'bravo' =&gt; [\n        // ...\n        'model' =&gt; App\\Ldap\\Bravo\\User::class,\n    ],\n],\n</code></pre>"},{"location":"docs/laravel/v3/auth/multi-domain/#authentication-approaches","title":"Authentication Approaches","text":"<p>Due to each domain requiring its own <code>guard</code> that we've configured in our <code>config/auth.php</code> file, we need to be able to determine which domain the user who is attempting to log in is from, so we can tell Laravel which guard to use for authenticating the user.</p> <p>Let's walk through two examples of how we could determine their domain:</p> Example Description Domain Selection Using a <code>&lt;select&gt;</code> dropdown Email Address Suffix Using the users email address suffx / hostname (eg. <code>@domain.com</code>)"},{"location":"docs/laravel/v3/auth/multi-domain/#domain-selection","title":"Domain Selection","text":"<p>In this example, we will add an HTML <code>&lt;select&gt;</code> input containing an <code>&lt;option&gt;</code> for each domain we want to allow users to log in to. This allows the user to select the domain from the dropdown, enter their credentials, and then attempt signing in.</p> <p>First, we will open up our <code>login.blade.php</code> file, and add the select option:</p> <pre><code>&lt;!-- resources/views/auth/login.blade.php --&gt;\n\n&lt;form method=\"POST\" action=\"{{ route('login') }}\"&gt;\n    @csrf\n\n    &lt;div class=\"form-group row\"&gt;\n        &lt;select name=\"domain\" class=\"form-control\"&gt;\n            @foreach(['alpha' =&gt; 'Alpha', 'bravo' =&gt; 'Bravo'] as $guard =&gt; $name)\n                &lt;option value=\"{{ $guard }}\" {{ old('domain') == $guard ? 'selected' : '' }}&gt;{{ $name }}&lt;/option&gt;\n            @endforeach\n        &lt;/select&gt;\n    &lt;/div&gt;\n\n    &lt;!-- ... --&gt;\n&lt;/form&gt;\n</code></pre> <p>Then we must update our authentication logic to use the guard the user has selected during login:</p> <pre><code>$credentials = [\n    'mail' =&gt; $request-&gt;email,\n    'password' =&gt; $request-&gt;password,\n];\n\nAuth::shouldUse($request-&gt;domain);\n\nif (Auth::attempt($credentials)) {\n    return redirect('/dashboard');\n}\n</code></pre>"},{"location":"docs/laravel/v3/auth/multi-domain/#email-address-suffix","title":"Email Address Suffix","text":"<p>In this example, we will be determining the users domain from their email addresses host name (eg. <code>@alpha.com</code> and <code>@bravo.com</code>).</p> <p>Using this method, we will simply split out their email address domain and use a lookup table to retrieve the proper guard:</p> <pre><code>$credentials = [\n    'mail' =&gt; $request-&gt;email,\n    'password' =&gt; $request-&gt;password,\n];\n\n$guards = [\n    'alpha.com' =&gt; 'alpha',\n    'bravo.com' =&gt; 'bravo',\n];\n\n$domain = explode('@', $request-&gt;email)[1];\n\n$guard = $guards[$domain] ?? 'alpha';\n\nAuth::shouldUse($guard);\n\nif (Auth::attempt($credentials)) {\n    return redirect('/dashboard');\n}\n</code></pre>"},{"location":"docs/laravel/v3/auth/multi-domain/#updating-your-web-routes","title":"Updating Your Web Routes","text":"<p>Having multiple authentication guards means that we need to update the <code>auth</code> middleware that is covering our protected application routes inside our <code>routes/web.php</code> file.</p> <p>Luckily, this middleware accepts a comma separated list of guards you would like to protect your routes by. You will need to add both of the guards you created above:</p> <p>By default, if no guards are given to the Laravel <code>auth</code> middleware, it will attempt to use the <code>default</code> guard configured inside your <code>config/auth.php</code> file.</p> <p>Before:</p> <pre><code>// routes/web.php\n\nRoute::middleware('auth')-&gt;group(function () {\n    // ...\n})\n</code></pre> <p>After:</p> <pre><code>// routes/web.php\n\nRoute::middleware('auth:alpha,bravo')-&gt;group(function () {\n    // Both alpha and bravo domains can access these routes...\n});\n</code></pre> <p>If you would like to restrict routes to certain domains, only include one of them when adding the <code>auth</code> middleware to a route:</p> <pre><code>// routes/web.php\n\nRoute::group(function () {\n    // Only alpha domain users can access these routes...\n})-&gt;middleware('auth:alpha');\n</code></pre> <p>This is extremely handy for permission management - as authenticated users from certain domains can only access the routes that have been defined for their domain.</p> <p>You are now ready to authenticate users with multiple domains.</p>"},{"location":"docs/laravel/v3/auth/restricting-login/","title":"Restricting Login","text":""},{"location":"docs/laravel/v3/auth/restricting-login/#introduction","title":"Introduction","text":"<p>LdapRecord-Laravel provides various ways you can prevent certain users from logging into your application. Let's walk through some approaches.</p>"},{"location":"docs/laravel/v3/auth/restricting-login/#using-a-group-membership","title":"Using a Group Membership","text":"<p>To use a group membership for authorizing signing in to your application, we will use an authentication rule.</p> <p>In our example application, we want to only allow users who are members of a single group to authenticate. This group will be called <code>Help Desk</code>.</p> <p>Let's create our new authentication rule by running the below command:</p> <pre><code>php artisan ldap:make:rule OnlyHelpDeskUsers\n</code></pre> <p>A new rule will be created inside <code>app/Ldap/Rules/OnlyHelpDeskUsers.php</code></p> <p>In the newly generated rule, we can check for group membership in various ways, as well as check for nested group membership, and even for multiple group memberships.</p> <p>Let's walk through each example.</p>"},{"location":"docs/laravel/v3/auth/restricting-login/#checking-for-a-single-group","title":"Checking for a single group","text":"<p>When checking for a single group, we will use the relation <code>exists()</code> method:</p> <pre><code>use LdapRecord\\Models\\Model as LdapRecord;\nuse Illuminate\\Database\\Eloquent\\Model as Eloquent;\n\n/**\n * Check if the rule passes validation.\n *\n * @return bool\n */\npublic function passes(LdapRecord $user, Eloquent $model = null): bool\n{\n    return $user-&gt;groups()-&gt;exists(\n        'cn=Help Desk,ou=Groups,dc=local,dc=com'\n    );\n}\n</code></pre> <p>With the <code>exists()</code> method, we can also use an LdapRecord <code>Model</code> instance:</p> <p>This approach is useful, so an exception will be thrown when the group cannot be located.</p> <pre><code>public function passes(LdapRecord $user, Eloquent $model = null): bool\n{\n    return $user-&gt;groups()-&gt;exists(\n        Group::findOrFail('cn=Help Desk,ou=Groups,dc=local,dc=com')\n    );\n}\n</code></pre> <p>Or; A Common Name (<code>cn</code>):</p> <pre><code>public function passes(LdapRecord $user, Eloquent $model = null): bool\n{\n    return $user-&gt;groups()-&gt;exists('Help Desk');\n}\n</code></pre>"},{"location":"docs/laravel/v3/auth/restricting-login/#checking-for-multiple-groups","title":"Checking for multiple groups","text":"<p>To check that the user has all of a given set of groups, we will use the <code>exists()</code> method:</p> <pre><code>public function passes(LdapRecord $user, Eloquent $model = null): bool\n{\n    return $user-&gt;groups()-&gt;exists(\n        'cn=Help Desk,ou=Groups,dc=local,dc=com',\n        'cn=Site Admins,ou=Groups,dc=local,dc=com'\n    );\n}\n</code></pre> <p>We can also use <code>Model</code> instances:</p> <pre><code>public function passes(LdapRecord $user, Eloquent $model = null): bool\n{\n    return $user-&gt;groups()-&gt;exists([\n        Group::findOrFail('cn=Help Desk,ou=Groups,dc=local,dc=com'),\n        Group::findOrFail('cn=Site Admins,ou=Groups,dc=local,dc=com'),\n    ]);\n}\n</code></pre> <p>Or; Common Names (<code>cn</code>):</p> <pre><code>public function passes(LdapRecord $user, Eloquent $model = null): bool\n{\n    return $user-&gt;groups()-&gt;exists([\n        'Help Desk', 'Site Admins'\n    ]);\n}\n</code></pre>"},{"location":"docs/laravel/v3/auth/restricting-login/#checking-for-any-given-groups","title":"Checking for any given groups","text":"<p>To check that a user has any of a given set of groups, we will use the <code>contains()</code> method:</p> <pre><code>public function passes(LdapRecord $user, Eloquent $model = null): bool\n{\n    return $user-&gt;groups()-&gt;contains([\n        'Help Desk', 'Accounting'\n    ]);\n}\n</code></pre> <p>You can also provide a <code>Model</code> instance or Distinguished Name into the <code>contains</code> method.</p> <p>This will allow members of either the <code>Help Desk</code> or <code>Accounting</code> group to authenticate.</p>"},{"location":"docs/laravel/v3/auth/restricting-login/#checking-for-nested-groups-recursively","title":"Checking for nested group(s) recursively","text":"<p>Nested group checking allows LdapRecord to search recursively if a user is a member of a particular group.</p> <p>For example, if a user is a member of an <code>Accounting</code> group, and this <code>Accounting</code> group is a member of an <code>Office</code> group, you can tell LdapRecord to search recursively for the <code>Office</code> group:</p> <pre><code>public function passes(LdapRecord $user, Eloquent $model = null): bool\n{\n    return $user-&gt;groups()-&gt;recursive()-&gt;exists('Office');\n}\n</code></pre> <p>Using the above example without the <code>recursive</code> call, it will fail to determine the users group membership, since LdapRecord is only searching for immediate memberships of the user:</p> <pre><code>public function passes(LdapRecord $user, Eloquent $model = null): bool\n{\n    // Only searching immediate group memberships:\n    return $user-&gt;groups()-&gt;exists('Office');\n}\n</code></pre>"},{"location":"docs/laravel/v3/auth/restricting-login/#using-an-organizational-unit","title":"Using an Organizational Unit","text":"<p>To use an Organizational Unit which contains your users that you want to allow sign in to your application, we will leverage LdapRecord model scopes.</p> <p>In our application, we have an Organizational Unit named <code>Accounting</code> with the following Distinguished Name:</p> <pre><code>ou=Accounting,ou=Users,dc=local,dc=com\n</code></pre> <p>Let's create a new model scope using the below command:</p> <pre><code>php artisan ldap:make:scope OnlyAccountingUsers\n</code></pre> <p>Now inside the generated scope, we will limit the query to only return users who are contained inside our <code>Accounting</code> OU:</p> <pre><code>&lt;?php\n\nnamespace App\\Ldap\\Scopes;\n\nuse LdapRecord\\Models\\Model;\nuse LdapRecord\\Models\\Scope;\nuse LdapRecord\\Query\\Model\\Builder;\n\nclass OnlyAccountingUsers implements Scope\n{\n    /**\n     * Apply the scope to the given query.\n     *\n     * @param Builder $query\n     * @param Model   $model\n     *\n     * @return void\n     */\n    public function apply(Builder $query, Model $model)\n    {\n        $query-&gt;in('ou=Accounting,ou=Users,dc=local,dc=com');\n\n        // You can also make this \"environment aware\" if needed:\n        // $query-&gt;in(env('LDAP_USER_SCOPE'));\n    }\n}\n</code></pre> <p>After modifying the scope, we can now add the scope to our LDAP user model.</p> <p>If you are using one of the built-in predefined models, you can add the global scope to the model inside your <code>AuthServiceProvider::boot()</code> method:</p> <pre><code>// app/Providers/AuthServiceProvider.php\n\nuse App\\Ldap\\Scopes\\OnlyAccountingUsers;\n\n/**\n * Register any authentication / authorization services.\n *\n * @return void\n */\npublic function boot()\n{\n    $this-&gt;registerPolicies();\n\n    \\LdapRecord\\Models\\ActiveDirectory\\User::addGlobalScope(\n        new OnlyAccountingUsers\n    );\n}\n</code></pre> <p>If you have created your own LDAP model, add the scope in the inside your models static <code>boot</code> method:</p> <pre><code>&lt;?php\n\nnamespace App\\Ldap;\n\nuse LdapRecord\\Models\\Model;\nuse App\\Ldap\\Scopes\\CompanyScope;\n\nclass User extends Model\n{\n    /**\n     * The \"booting\" method of the model.\n     *\n     * @return void\n     */\n    protected static function boot()\n    {\n        parent::boot();\n\n        static::addGlobalScope(new OnlyAccountingUsers);\n    }\n}\n</code></pre> <p>Now when you attempt to sign in to your application, only users who are contained inside the <code>Accounting</code> OU will be allowed to authenticate.</p>"},{"location":"docs/laravel/v3/auth/restricting-login/#using-only-manually-imported-users","title":"Using Only Manually Imported Users","text":"<p>To enforce only manually imported LDAP users who exist inside your database to sign in to your application, you must use an authentication rule.</p> <p>LdapRecord-Laravel includes this authentication rule out-of-the-box:</p> <pre><code>LdapRecord\\Laravel\\Auth\\Rules\\OnlyImported\n</code></pre> <p>To use this rule, insert it into the <code>rules</code> array into your authentication provider configuration inside the <code>config/auth.php</code> file:</p> <pre><code>// config/auth.php\n\n'providers' =&gt; [\n    // ...\n\n    'ldap' =&gt; [\n        'driver' =&gt; 'ldap',\n        'model' =&gt; LdapRecord\\Models\\ActiveDirectory\\User::class,\n        'rules' =&gt; [\n            LdapRecord\\Laravel\\Auth\\Rules\\OnlyImported::class, // &lt;-- Added here.\n        ],\n    ],\n],\n</code></pre> <p>Make sure you run <code>php artisan config:clear</code> if you are caching your configuration files.</p> <p>Now when you attempt to sign in to your application, you will only be able to sign in with a user who has already been imported into your local application's database.</p>"},{"location":"docs/laravel/v3/auth/testing/","title":"Testing","text":""},{"location":"docs/laravel/v3/auth/testing/#introduction","title":"Introduction","text":"<p>LdapRecord-Laravel prides itself on giving you a great and easy testing experience using the Directory Emulator. Using it, we can test authentication rules, scopes and group memberships.</p>"},{"location":"docs/laravel/v3/auth/testing/#getting-started","title":"Getting Started","text":"<p>Before we begin, you must require the <code>doctrine/dbal</code> into your composers <code>require-dev</code> for testing. This is due to the <code>$table-&gt;dropColumns(['guid', 'domain'])</code> call inside the additional LdapRecord auth migration and that we are using SQLite in our test environment.</p> <p>This package is required for modifying columns - as described in the Laravel documentation.</p> <p>To do so, run the following command:</p> <pre><code>composer require doctrine/dbal --dev\n</code></pre>"},{"location":"docs/laravel/v3/auth/testing/#creating-the-test","title":"Creating the test","text":"<p>Let's whip up a test by running the following command:</p> <pre><code>php artisan make:test LdapAuthenticationTest\n</code></pre> <p>inside our generated test, we'll make use of the following traits:</p> <p>DatabaseMigrations</p> <pre><code>Illuminate\\Foundation\\Testing\\DatabaseMigrations\n</code></pre> <p>Using this trait will execute our migrations and ensure our database is ready to import our LDAP user.</p> <p>WithFaker</p> <pre><code>Illuminate\\Foundation\\Testing\\WithFaker\n</code></pre> <p>Using this trait provides us with generating fake UUID's (great for creating mock \"guids\"), names and emails.</p> <p>Let's add a <code>test_auth_works</code> method into the generated test:</p> <pre><code>&lt;?php\n\nnamespace Tests\\Feature;\n\nuse Illuminate\\Foundation\\Testing\\DatabaseMigrations;\nuse Illuminate\\Foundation\\Testing\\WithFaker;\nuse Illuminate\\Support\\Facades\\Auth;\nuse LdapRecord\\Laravel\\Testing\\DirectoryEmulator;\nuse LdapRecord\\Models\\ActiveDirectory\\User;\nuse Tests\\TestCase;\n\nclass LdapAuthenticationTest extends TestCase\n{\n    use DatabaseMigrations, WithFaker;\n\n    public function test_auth_works()\n    {\n        $fake = DirectoryEmulator::setup('default');\n\n        $ldapUser = User::create([\n            'cn' =&gt; $this-&gt;faker-&gt;name,\n            'mail' =&gt; $this-&gt;faker-&gt;email,\n            'objectguid' =&gt; $this-&gt;faker-&gt;uuid,\n        ]);\n\n        $fake-&gt;actingAs($ldapUser);\n\n        $this-&gt;post('/login', [\n            'email' =&gt; $ldapUser-&gt;mail[0],\n            'password' =&gt; 'secret',\n        ])-&gt;assertRedirect('/home');\n\n        $user = Auth::user();\n\n        $this-&gt;assertInstanceOf(\\App\\Models\\User::class, $user);\n        $this-&gt;assertEquals($ldapUser-&gt;mail[0], $user-&gt;email);\n        $this-&gt;assertEquals($ldapUser-&gt;cn[0], $user-&gt;name);\n    }\n}\n</code></pre> <p>Let's deconstruct what's going on here step by step.</p> <pre><code>$fake = DirectoryEmulator::setup('default');\n</code></pre> <p>This first line creates a new Directory Emulator for our LDAP connection named <code>default</code> inside of our <code>config/ldap.php</code> file. It returns a fake LDAP connection that we can use to indicate that the user we create in this fake directory will successfully pass LDAP authentication.</p> <pre><code>$user = User::create([\n    'cn' =&gt; $this-&gt;faker-&gt;name,\n    'mail' =&gt; $this-&gt;faker-&gt;email,\n    'objectguid' =&gt; $this-&gt;faker-&gt;uuid,\n]);\n</code></pre> <p>On the second line, we're creating our fake LDAP user who will be signing in to our application. You'll notice that we assign the attributes that are inside our <code>sync_attributes</code> specified inside our <code>config/auth.php</code> file, as well as the users <code>objectguid</code>.</p> <p>If you're using OpenLDAP, the <code>objectguid</code> field may be <code>entryUUID</code> or <code>uid</code>.</p> <p>This is a good place to test attribute synchronization.</p> <pre><code>$fake-&gt;actingAs($user);\n</code></pre> <p>This third line, we are asserting that the user we have created will automatically pass LDAP authentication. If we remove this line, attempting to authenticate as the user will fail, as they are not allowed to bind using your fake connection.</p> <pre><code>$this-&gt;post('/login', [\n    'email' =&gt; $user-&gt;mail[0],\n    'password' =&gt; 'secret',\n])-&gt;assertRedirect('/home');\n</code></pre> <p>Fourth, we are sending a post request to our <code>login</code> page, with our LDAP users email address. The password can be anything, since we asserted above (using the <code>actingAs()</code> method) that the user will pass, regardless of what password we use.</p> <p>If your application has password synchronization enabled, this is a good place to send various passwords and assert that the hashes match after a successful login.</p> <pre><code>$user = Auth::user();\n\n$this-&gt;assertInstanceOf(\\App\\Models\\User::class, $user);\n$this-&gt;assertEquals($ldapUser-&gt;mail[0], $user-&gt;email);\n$this-&gt;assertEquals($ldapUser-&gt;cn[0], $user-&gt;name);\n</code></pre> <p>Finally, we'll check to make sure we can retrieve the successfully authenticated user and that their attributes were successfully synchronized into our Eloquent database model.</p>"},{"location":"docs/laravel/v3/auth/testing/#scopes","title":"Scopes","text":"<p>To test scopes that you apply to the LdapRecord model you are using for authentication, you will need to apply the attributes to the fake user you create to test that they can be properly located during authentication.</p> <p>For example, if you created a scope that enforces users to be inside an Organizational Unit, then we must create our fake user inside that Organizational Unit for the user to be located - as you would using a real LDAP directory. Let's walk through this.</p> <p>Below we have our scope that will enforce users to be located inside an Organizational Unit named <code>Administrators</code>:</p> <pre><code>namespace App\\Ldap\\Scopes;\n\nuse LdapRecord\\Models\\Model;\nuse LdapRecord\\Models\\Scope;\nuse LdapRecord\\Query\\Model\\Builder;\nuse LdapRecord\\Models\\ActiveDirectory\\OrganizationalUnit;\n\nclass AdministratorsScope implements Scope\n{\n    public function apply(Builder $query, Model $model)\n    {\n        $ou = OrganizationalUnit::where('ou', '=', 'Accounting')-&gt;first();\n\n        $query-&gt;in($ou);\n    }\n}\n</code></pre> <p>And we have also added it into our model:</p> <pre><code>namespace App\\Ldap;\n\nuse LdapRecord\\Models\\Model;\nuse App\\Ldap\\Scopes\\AdministratorsScope;\n\nclass User extends Model\n{\n    protected static function boot()\n    {\n        parent::boot();\n\n        static::addGlobalScope(new AdministratorsScope());\n    }\n}\n</code></pre> <p>Now let's create our test. To do so, we'll set up everything as we have in the above test example, but we will create our user inside the <code>Administrators</code> Organizational Unit:</p> <pre><code>public function test_auth_works()\n{\n    $fake = DirectoryEmulator::setup('default');\n\n    $ou = OrganizationalUnit::create(['ou' =&gt; 'Administrators']);\n\n    $ldapUser = (new User)-&gt;inside($ou);\n\n    $ldapUser-&gt;save([\n        'mail' =&gt; $this-&gt;faker-&gt;email,\n        'cn' =&gt; $this-&gt;faker-&gt;name,\n        'objectguid' =&gt; $this-&gt;faker-&gt;uuid,\n    ]);\n\n    $fake-&gt;actingAs($ldapUser);\n\n    $this-&gt;post('/login', [\n        'email' =&gt; $ldapUser-&gt;mail[0],\n        'password' =&gt; 'secret',\n    ])-&gt;assertRedirect('/home');\n\n    $user = Auth::user();\n\n    $this-&gt;assertInstanceOf(\\App\\Models\\User::class, $user);\n    $this-&gt;assertEquals($ldapUser-&gt;mail[0], $user-&gt;email);\n    $this-&gt;assertEquals($ldapUser-&gt;cn[0], $user-&gt;name);\n}\n</code></pre> <p>To test the opposite of the above - such as a user who is not located inside the <code>Administrators</code> OU, simply create them inside a different OU, or inside the root of your emulated directory:</p> <pre><code>public function test_auth_fails()\n{\n    $fake = DirectoryEmulator::setup('default');\n\n    $ldapUser = User::create([\n        'cn' =&gt; $this-&gt;faker-&gt;name,\n        'mail' =&gt; $this-&gt;faker-&gt;email,\n        'objectguid' =&gt; $this-&gt;faker-&gt;uuid,\n    ]);\n\n    $fake-&gt;actingAs($ldapUser);\n\n    $this-&gt;post('/login', [\n        'email' =&gt; $ldapUser-&gt;mail[0],\n        'password' =&gt; 'secret',\n    ])-&gt;assertSessionHasErrors('email');\n\n    $this-&gt;assertFalse(Auth::check());\n}\n</code></pre> <p>Even though we have asserted that the user passes LDAP authentication (<code>$fake-&gt;actingAs($ldapUser)</code>), authentication will fail due to the user not being able to be located due to our scope we have created.</p> <p>We have also modified our redirect assertion to instead validate that the <code>email</code> session key contains errors. This key will contain the <code>Invalid credentials</code> message.</p>"},{"location":"docs/laravel/v3/auth/testing/#rules","title":"Rules","text":"<p>As with testing scopes, to test rules we must either apply or omit data on our fake user to test our LDAP authentication rules.</p> <p>An authentication rule is great for checking if a user is a member of a certain group before allowing them to authenticate. Let's walk through an example and test this.</p> <p>Our application requires the user to be a member of a group called <code>Help Desk</code>. With that requirement, here is our created authentication rule:</p> <pre><code>&lt;?php\n\nnamespace App\\Ldap\\Rules;\n\nuse LdapRecord\\Laravel\\Auth\\Rule;\nuse LdapRecord\\Models\\Model as LdapRecord;\nuse LdapRecord\\Models\\ActiveDirectory\\Group;\nuse Illuminate\\Database\\Eloquent\\Model as Eloquent;\n\nclass HelpDeskEmployee implements Rule\n{\n    public function passes(LdapRecord $user, Eloquent $model = null): bool\n    {\n        $group = Group::where('name', '=', 'Help Desk')-&gt;first();\n\n        return $this-&gt;user-&gt;groups()-&gt;exists($group);\n    }\n}\n</code></pre> <p>This rule has also been added into our providers configuration inside our <code>config/auth.php</code> file:</p> <pre><code>// ...\n\n'providers' =&gt; [\n    // ...\n\n    'ldap' =&gt; [\n        // ...\n        'rules' =&gt; [\n            \\App\\Ldap\\Rules\\HelpDeskEmployee::class,\n        ],\n    ],\n]\n</code></pre> <p>Now we can create our test to ensure only users who are members of the group can authenticate:</p> <pre><code>public function test_auth_works()\n{\n    $fake = DirectoryEmulator::setup('default');\n\n    $ldapGroup = Group::create(['cn' =&gt; 'Help Desk']);\n\n    $ldapUser = User::create([\n        'cn' =&gt; $this-&gt;faker-&gt;name,\n        'mail' =&gt; $this-&gt;faker-&gt;email,\n        'objectguid' =&gt; $this-&gt;faker-&gt;uuid,\n        'memberof' =&gt; [$ldapGroup-&gt;getDn()],\n    ]);\n\n    $ldapGroup-&gt;members()-&gt;attach($ldapUser);\n\n    $fake-&gt;actingAs($ldapUser);\n\n    $this-&gt;post('/login', [\n        'email' =&gt; $ldapUser-&gt;mail[0],\n        'password' =&gt; 'secret',\n    ])-&gt;assertRedirect('/home');\n\n    $user = Auth::user();\n\n    $this-&gt;assertInstanceOf(\\App\\Models\\User::class, $user);\n    $this-&gt;assertEquals($ldapUser-&gt;mail[0], $user-&gt;email);\n    $this-&gt;assertEquals($ldapUser-&gt;cn[0], $user-&gt;name);\n}\n</code></pre> <p>As you can see above, we created a <code>Help Desk</code> group, added the group into the users <code>memberof</code> attribute (due to this field being virtual) and have attached them to the group.</p> <p>Now let's create a test to ensure users who are not members of the group can't authenticate.</p> <pre><code>public function test_auth_fails()\n{\n    $fake = DirectoryEmulator::setup('default');\n\n    $ldapUser = User::create([\n        'cn' =&gt; $this-&gt;faker-&gt;name,\n        'mail' =&gt; $this-&gt;faker-&gt;email,\n        'objectguid' =&gt; $this-&gt;faker-&gt;uuid,\n    ]);\n\n    $fake-&gt;actingAs($ldapUser);\n\n    $this-&gt;post('/login', [\n        'email' =&gt; $ldapUser-&gt;mail[0],\n        'password' =&gt; 'secret',\n    ])-&gt;assertSessionHasErrors('email');\n\n    $this-&gt;assertFalse(Auth::check());\n}\n</code></pre> <p>The above test passes because we have not added our LDAP user into any groups - so the <code>exists()</code> check inside our rule returns <code>false</code>.</p>"},{"location":"docs/laravel/v3/auth/testing/#sso-windows-authentication","title":"SSO / Windows Authentication","text":"<p>To test Sigle-Sign-On (or Windows Authentication) for your Laravel application, you must set the authenticating users down-level logon name as a server variable.</p> <p>This server variable (typically <code>$_SERVER['AUTH_USER']</code>) is what the <code>WindowsAuthenticate</code> middleware reads to locate the authenticated user from your LDAP directory.</p> <p>To set server variables for upcoming requests inside your Laravel tests, use the <code>withServerVariables()</code> method:</p> <pre><code>public function test_windows_authentication_works()\n{\n    DirectoryEmulator::setup('default');\n\n    $ldapUser = User::create([\n        'cn' =&gt; $this-&gt;faker-&gt;name,\n        'mail' =&gt; $this-&gt;faker-&gt;email,\n        'objectguid' =&gt; $this-&gt;faker-&gt;uuid,\n        'samaccountname' =&gt; $this-&gt;faker-&gt;userName,\n    ]);\n\n    // Replace 'DOMAIN' with your domain from your configured LDAP\n    // `base_dn`. For example, if your `base_dn` is equal to\n    // 'dc=company,dc=com', then you would use 'COMPANY'.\n    $authUser = implode('\\\\', [\n        'DOMAIN', $ldapUser-&gt;getFirstAttribute('samaccountname')\n    ]);\n\n    // Set the server variables for the upcoming request.\n    $this-&gt;withServerVariables([\n        WindowsAuthenticate::$serverKey =&gt; $authUser\n    ]);\n\n    // Attempt accessing a protected page:\n    $this-&gt;get('/dashboard')-&gt;assertOk();\n\n    // Ensure the user was authenticated:\n    $this-&gt;assertTrue(Auth::check());\n}\n</code></pre>"},{"location":"docs/laravel/v3/auth/database/","title":"Database Authentication Overview","text":"<p>Synchronized Database LDAP Authentication means that an LDAP user which successfully passes LDAP authentication will be created &amp; synchronized to your local application's database. This is helpful as you can attach typical relational database information to them, such as blog posts, attachments, etc.</p> <p>When a user is successfully authenticated, the Laravel <code>Auth::user()</code> method will return an instance of your configured Eloquent database model:</p> <pre><code>use Illuminate\\Support\\Facades\\Auth;\n\n$credentials = [\n    'mail' =&gt; 'jdoe@local.com',\n    'password' =&gt; 'secret',\n];\n\nif (Auth::attempt($credentials)) {\n    $user = Auth::user();\n\n    // Returns true:\n    $user instanceof \\App\\Models\\User;\n}\n</code></pre> <p>Subsequent requests to your application with logged-in users will retrieve the logged-in user from your database, rather than your LDAP directory. This means your application will stay operational if connectivity to your LDAP server is dropped.</p>"},{"location":"docs/laravel/v3/auth/database/configuration/","title":"Database Auth Configuration","text":""},{"location":"docs/laravel/v3/auth/database/configuration/#introduction","title":"Introduction","text":"<p>To configure a synchronized database LDAP authentication provider, navigate to the <code>providers</code> array inside your <code>config/auth.php</code> file, and paste the following <code>users</code> provider:</p> <p>You will have to remove/alter the default <code>users</code> provider, or create your own.</p> <pre><code>// config/auth.php\n\n'providers' =&gt; [\n    // ...\n\n    'users' =&gt; [\n        'driver' =&gt; 'ldap',\n        'model' =&gt; LdapRecord\\Models\\ActiveDirectory\\User::class,\n        'rules' =&gt; [],\n        'scopes' =&gt; [],\n        'database' =&gt; [\n            'model' =&gt; App\\Models\\User::class,\n            'sync_passwords' =&gt; false,\n            'sync_attributes' =&gt; [\n                'name' =&gt; 'cn',\n                'email' =&gt; 'mail',\n            ],\n        ],\n    ],\n],\n</code></pre> <p>As you can see above, a <code>database</code> array is used to configure the association between your LDAP user and your Eloquent user.</p> <p>Important:  If your application requires more than one LDAP connection, you must create a new provider for each connection.  This new provider must have its own unique <code>model</code> class which must use your alternate configured connection name using the <code>$connection</code> property.</p> <p>In the scenario of having multiple LDAP connections, it may be helpful to namespace the LDAP models you create with the desired connection. For example:</p> <pre><code>App\\Ldap\\DomainAlpha\\User\n</code></pre> <p>This will allow you to segregate scopes, rules and other classes to their relating connection.</p>"},{"location":"docs/laravel/v3/auth/database/configuration/#driver","title":"Driver","text":"<p>The <code>driver</code> option must be <code>ldap</code> as this is what indicates to Laravel the proper authentication driver to use.</p>"},{"location":"docs/laravel/v3/auth/database/configuration/#model","title":"Model","text":"<p>The <code>model</code> option must be the class name of your LdapRecord model. This model will be used for fetching users from your directory.</p>"},{"location":"docs/laravel/v3/auth/database/configuration/#rules","title":"Rules","text":"<p>The <code>rules</code> option must be an array of authentication rule class name's.</p>"},{"location":"docs/laravel/v3/auth/database/configuration/#overview","title":"Overview","text":"<p>LDAP authentication rules give you the ability to allow or deny users from signing in to your application using a condition you would like to apply. These rules are executed after a user successfully passes LDAP authentication against your configured server.</p> <p>Think of them as a final authorization gate before they are allowed in.</p> <p>Authentication rules are never executed if a user fails LDAP authentication.</p>"},{"location":"docs/laravel/v3/auth/database/configuration/#creating-rules","title":"Creating Rules","text":"<p>Let's create an LDAP rule that only allows members of our domain <code>Administrators</code> group.</p> <p>To create an authentication rule, call the <code>ldap:make:rule</code> command:</p> <pre><code>php artisan ldap:make:rule OnlyAdministrators\n</code></pre> <p>A rule will then be created in your applications <code>app/Ldap/Rules</code> directory:</p> <pre><code>&lt;?php\n\nnamespace App\\Ldap\\Rules;\n\nuse LdapRecord\\Laravel\\Auth\\Rule;\nuse LdapRecord\\Models\\Model as LdapRecord;\nuse Illuminate\\Database\\Eloquent\\Model as Eloquent;\n\nclass OnlyAdministrators implements Rule\n{\n    /**\n     * Check if the rule passes validation.\n     */\n    public function passes(LdapRecord $user, Eloquent $model = null): bool\n    {\n        //\n    }\n}\n</code></pre> <p>In the authentication rule, there are two properties made available to us.</p> <ul> <li>A <code>$user</code> property that is the LdapRecord model of the authenticating user</li> <li>A <code>$model</code> property that is the Eloquent model of the authenticating user</li> </ul> <p>Now, we will update the <code>passes</code> method to check the LDAP users <code>groups</code> relationship to see if they are a member:</p> <pre><code>&lt;?php\n\nnamespace App\\Ldap\\Rules;\n\nuse LdapRecord\\Laravel\\Auth\\Rule;\nuse LdapRecord\\Models\\Model as LdapRecord;\nuse LdapRecord\\Models\\ActiveDirectory\\Group;\nuse Illuminate\\Database\\Eloquent\\Model as Eloquent;\n\nclass OnlyAdministrators implements Rule\n{\n    public function passes(LdapRecord $user, Eloquent $model = null): bool\n    {\n        $administrators = Group::find('cn=Administrators,dc=local,dc=com');\n\n        return $this-&gt;user-&gt;groups()-&gt;recursive()-&gt;exists($administrators);\n    }\n}\n</code></pre> <p>We call the <code>recursive</code> method on the relationship to make sure that we load groups of groups in case the user is not an immediate member of the <code>Administrators</code> group.</p> <p>Once we have our rule defined, we will add it into our authentication provider in the <code>config/auth.php</code> file:</p> <pre><code>'providers' =&gt; [\n    // ...\n\n    'users' =&gt; [\n        'driver' =&gt; 'ldap',\n        'model' =&gt; LdapRecord\\Models\\ActiveDirectory\\User::class,\n        'rules' =&gt; [\n            App\\Ldap\\Rules\\OnlyAdministrators::class,\n        ],\n        'database' =&gt; [\n            // ...\n        ],\n    ],\n],\n</code></pre> <p>Now when you attempt to log in to your application with an LDAP user that successfully passes LDAP authentication, they will need to be a member of the <code>Administrators</code> group.</p> <p>If you are caching your configuration, make sure you re-run <code>config:cache</code> to re-cache your modifications.</p>"},{"location":"docs/laravel/v3/auth/database/configuration/#scopes","title":"Scopes","text":"<p>The <code>scopes</code> option must be an array of LdapRecord scope class names.</p>"},{"location":"docs/laravel/v3/auth/database/configuration/#overview_1","title":"Overview","text":"<p>The <code>scopes</code> inserted in this option allow you to apply query scopes to your configured model, only during import and authentication. This is option is useful for when you don't want to add global scopes to your configured model, but would like to scope the query used to retrieve users during import and authentication into your application.</p>"},{"location":"docs/laravel/v3/auth/database/configuration/#creating-scopes","title":"Creating Scopes","text":"<p>Let's create an LDAP scope that scopes the authentication query to only return users that are located inside the <code>Accounting</code> Organizational Unit.</p> <p>To create a new LDAP scope, call the <code>ldap:make:scope</code> command:</p> <pre><code>php artisan ldap:make:scope Accounting\n</code></pre> <p>A scope will then be created in your applications <code>app/Ldap/Scopes</code> directory:</p> <pre><code>&lt;?php\n\nnamespace App\\Ldap\\Scopes;\n\nuse LdapRecord\\Models\\Model;\nuse LdapRecord\\Models\\Scope;\nuse LdapRecord\\Query\\Model\\Builder;\n\nclass Accounting implements Scope\n{\n    /**\n     * Apply the scope to the given query.\n     */\n    public function apply(Builder $query, Model $model): void\n    {\n        // ...\n    }\n}\n</code></pre> <p>Now let's update the <code>apply</code> method to only return users located inside the <code>Accounting</code> Organizational Unit:</p> <p>We're using automatic base DN subsitution in query below by supplying <code>{base}</code> in the <code>$query-&gt;in()</code> method.</p> <pre><code>class Accounting implements Scope\n{\n    /**\n     * Apply the scope to the given query.\n     */\n    public function apply(Builder $query, Model $model): void\n    {\n        $query-&gt;in('ou=Accounting,{base}');\n    }\n}\n</code></pre> <p>Once we have our scope defined, we will add it into our authentication provider in the <code>config/auth.php</code> file:</p> <pre><code>'providers' =&gt; [\n    // ...\n\n    'users' =&gt; [\n        'driver' =&gt; 'ldap',\n        'model' =&gt; LdapRecord\\Models\\ActiveDirectory\\User::class,\n        'rules' =&gt; [],\n        'scopes' =&gt; [\n            App\\Ldap\\Scopes\\Accounting::class,\n        ],\n    ],\n],\n</code></pre> <p>Now when you attempt to log in to your application with an LDAP user, that LDAP user must be located inside the <code>Accounting</code> Organizational Unit to be able to authenticate into your application.</p> <p>If you are caching your configuration, make sure you re-run <code>config:cache</code> to re-cache your modifications.</p>"},{"location":"docs/laravel/v3/auth/database/configuration/#database-model","title":"Database Model","text":"<p>The <code>database =&gt; model</code> key is the class name of the Eloquent model that will be used for creating and retrieving LDAP users from your applications database.</p> <p>Be sure to add the required trait and interface to this model as shown in the installation guide.</p>"},{"location":"docs/laravel/v3/auth/database/configuration/#sync-password-column","title":"Sync Password Column","text":"<p>If your application uses a different password column than <code>password</code>, then you can configure it using the <code>password_column</code> key inside your provider's configuration:</p> <pre><code>'providers' =&gt; [\n    // ...\n\n    'users' =&gt; [\n        // ...\n        'database' =&gt; [\n            // ...\n            'password_column' =&gt; 'my_password_column',\n        ],\n    ],\n],\n</code></pre> <p>You can also set the value to <code>false</code> if your database table does not have any password column at all:</p> <pre><code>'providers' =&gt; [\n    // ...\n\n    'users' =&gt; [\n        // ...\n        'database' =&gt; [\n            // ...\n            'password_column' =&gt; false,\n        ],\n    ],\n],\n</code></pre>"},{"location":"docs/laravel/v3/auth/database/configuration/#sync-passwords","title":"Sync Passwords","text":"<p>The <code>database =&gt; sync_passwords</code> option enables password synchronization.</p> <p>Password synchronization captures and hashes the users password upon login if they pass LDAP authentication. This helps in situations where you may want to provide a \"back up\" option in case your LDAP server is unreachable, as well as a way of determining if a users password is valid without having to call to your LDAP server and validate it for you.</p> <p>If you do not define the <code>sync_passwords</code> key or have it set <code>false</code>, a user is always applied a random 16 character hashed password. This hashed password is only set once upon initial import or login so no needless updates are performed on user records.</p>"},{"location":"docs/laravel/v3/auth/database/configuration/#sync-attributes","title":"Sync Attributes","text":"<p>The <code>database =&gt; sync_attributes</code> array defines a set of key-value pairs that describe which database column should be set and to which LDAP property:</p> <pre><code>'sync_attributes' =&gt; [\n    'email' =&gt; 'mail',\n    'name' =&gt; 'cn',\n]\n</code></pre> <ul> <li>The key of each array item is the attribute of your <code>User</code> Eloquent model</li> <li>The value is the name of the users LDAP attribute to set the Eloquent model attribute value to</li> </ul> <p>You do not need to add your users <code>guid</code> or <code>domain</code> database columns. These are done automatically for you.</p> <p>For further control on sync attributes, see the below attribute handler feature.</p>"},{"location":"docs/laravel/v3/auth/database/configuration/#sync-existing-records","title":"Sync Existing Records","text":"<p>The <code>database =&gt; sync_existing</code> array defines a set of key-value pairs that describe how existing database users should be sychronized:</p> <pre><code>'sync_existing' =&gt; [\n    'email' =&gt; 'mail',\n],\n</code></pre> <ul> <li>The key of each array item is the column of your <code>users</code> database table to query</li> <li>The value is the name of the users LDAP attribute to set the database value to</li> </ul> <p>Alternatively inside each <code>value</code> key, you may provide an array with an <code>attribute</code> key containing the LDAP attribute name and an <code>operator</code> key to use for the query when retrieving a record from the database. More on this below.</p> <p>Important: If the LDAP attribute returns <code>null</code> for the given value, the actual value will be used in the query instead. This is helpful to be able to use raw strings to scope your query by.</p> <p>Let's walk through an example.</p> <p>In our application, we have existing users inside our database:</p> id name email password guid domain 1 Steve Bauman sbauman@local.com ... <code>null</code> <code>null</code> 2 John Doe jdoe@local.com ... <code>null</code> <code>null</code> <p>As you can see above, these users have <code>null</code> values for their <code>guid</code> and <code>domain</code> columns.</p> <p>If you do not define a <code>sync_existing</code> array and a user logs in with <code>sbauman@local.com</code>, you will receive a SQL exception. This is because LdapRecord was unable to locate a local database user using the users GUID. If this occurs, LdapRecord will attempt to insert a new user with the same email address.</p> <p>To resolve this issue, we will insert the following <code>sync_existing</code> array:</p> <pre><code>'providers' =&gt; [\n    // ...\n\n    'users' =&gt; [\n        // ...\n        'database' =&gt; [\n            // ...\n            'sync_existing' =&gt; [\n                'email' =&gt; 'mail',\n            ],\n        ],\n    ],\n],\n</code></pre> <p>Now when <code>sbauman@local.com</code> attempts to log in, if the user cannot be located by their GUID, they will instead be located by their email address. Their GUID, domain, and sync attributes you define will then synchronize.</p>"},{"location":"docs/laravel/v3/auth/database/configuration/#database-compatibility","title":"Database Compatibility","text":"<p>In some database drivers, such as Postgres, there is case-sensitivity when executing <code>where</code> clauses with the equals (<code>=</code>) operator. Consider the following data in your database:</p> id name email password guid domain 1 Steve Bauman sbauman@local.com ... <code>null</code> <code>null</code> 2 John Doe jdoe@local.com ... <code>null</code> <code>null</code> <p>However, inside the LDAP server, the <code>mail</code> attribute for Steve's record is actually <code>SBauman@local.com</code>. While he could successfully authenticate, the existing record would not be found in our database due to Postgres' more strict SQL grammar. Changing the <code>sync_existing</code> configuration to the following array syntax would allow us to change the operator from an equals (<code>=</code>) to an <code>ilike</code>.</p> <pre><code>'sync_existing' =&gt; [\n    'email' =&gt; [\n        'attribute' =&gt; 'mail',\n        'operator' =&gt; 'ilike',\n    ],\n],\n</code></pre> <p>By replacing the value of the array to be an array with the <code>attribute</code> and <code>operator</code> keys, we can fine-tune the query syntax to be more flexible to your needs.</p>"},{"location":"docs/laravel/v3/auth/database/configuration/#attribute-handlers","title":"Attribute Handlers","text":"<p>If you require logic for synchronizing attributes when users sign in to your application or are being imported, you can create an attribute handler class responsible for setting / synchronizing your database models attributes from their LDAP model.</p> <p>This class you define must have a <code>handle</code> method. This method must accept the LDAP model you have configured as the first parameter and your Eloquent database model as the second.</p> <p>For the example below, we will create a handler named <code>AttributeHandler.php</code> inside your <code>app/Ldap</code> folder:</p> <p>You do not need to call <code>save()</code> on your Eloquent database model. This is called for you after attribute synchronization.</p> <pre><code>&lt;?php\n\nnamespace App\\Ldap;\n\nuse App\\Models\\User as DatabaseUser;\nuse App\\Ldap\\User as LdapUser;\n\nclass AttributeHandler\n{\n    public function handle(LdapUser $ldap, DatabaseUser $database)\n    {\n        $database-&gt;name = $ldap-&gt;getFirstAttribute('cn');\n        $database-&gt;email = $ldap-&gt;getFirstAttribute('mail');\n    }\n}\n</code></pre> <p>Attribute handlers are created using Laravel's <code>app()</code> helper, so you may type-hint any dependencies you require in your handlers constructor to be made available during synchronization.</p> <p>Then inside your <code>config/auth.php</code> file for your provider, set the attribute handler class as the <code>sync_attributes</code> value:</p> <pre><code>'providers' =&gt; [\n    // ...\n\n    'users' =&gt; [\n        // ...\n        'database' =&gt; [\n            // ...\n            'sync_attributes' =&gt; \\App\\Ldap\\AttributeHandler::class,\n        ],\n    ],\n],\n</code></pre> <p>You may also add multiple if you'd prefer, or combine them with <code>key =&gt; value</code> pairs:</p> <pre><code>// ...\n'database' =&gt; [\n    // ...\n    'sync_attributes' =&gt; [\n        'name' =&gt; 'cn',\n        'email' =&gt; 'mail',\n        \\App\\Ldap\\MyFirstAttributeHandler::class,\n        \\App\\Ldap\\MySecondAttributeHandler::class,\n    ],\n],\n</code></pre> <p>Attributes you specify are synchronized in order (first to last), so you may access the already synchronized attributes in subsequent attribute handlers.</p>"},{"location":"docs/laravel/v3/auth/database/configuration/#all-available-options","title":"All Available Options","text":"<p>Below is a synchronized database provider that is configured with all available options:</p> <pre><code>// config/auth.php\n\n'providers' =&gt; [\n    // ...\n\n    'users' =&gt; [\n        'driver' =&gt; 'ldap',\n        'model' =&gt; LdapRecord\\Models\\ActiveDirectory\\User::class,\n        'rules' =&gt; [],\n        'scopes' =&gt; [],\n        'database' =&gt; [\n            'model' =&gt; App\\Models\\User::class,\n            'sync_passwords' =&gt; true,\n            'sync_attributes' =&gt; [\n                'name' =&gt; 'cn',\n                'email' =&gt; 'mail',\n            ],\n            'sync_existing' =&gt; [\n                'email' =&gt; 'mail',\n            ],\n            'password_column' =&gt; 'password',\n        ],\n    ],\n],\n</code></pre>"},{"location":"docs/laravel/v3/auth/database/importing/","title":"Importing LDAP Users","text":""},{"location":"docs/laravel/v3/auth/database/importing/#introduction","title":"Introduction","text":"<p>LdapRecord-Laravel allows you to import users from your LDAP directories into your local database. This is done by executing the <code>php artisan ldap:import</code> command and is only available to LDAP authentication providers you configure with database synchronization.</p> <p>As it is with signing users into your application, the Eloquent database model you specify in your <code>config/auth.php</code> file is used for the creation and retrieval of users in your database.</p>"},{"location":"docs/laravel/v3/auth/database/importing/#attribute-synchronization","title":"Attribute Synchronization","text":"<p>The <code>sync_attributes</code> you define inside your <code>config/auth.php</code> file for your provider will be used for importing and synchronizing users.</p> <p>Be sure to look at the documentation to get a further understanding on what is possible with this option.</p>"},{"location":"docs/laravel/v3/auth/database/importing/#syncing-existing-records","title":"Syncing Existing Records","text":"<p>The <code>sync_existing</code> array you define inside your <code>config/auth.php</code> will be used to synchronize existing database records with your LDAP users.</p> <p>Be sure to look at the documentation to get a further understanding on what is possible with this option.</p>"},{"location":"docs/laravel/v3/auth/database/importing/#password-synchronization","title":"Password Synchronization","text":"<p>The <code>sync_passwords</code> option you define inside your <code>config/auth.php</code> file is used when importing and synchronizing users. However, there are some caveats you must be aware of:</p> <ul> <li>Passwords cannot be retrieved from users who are being imported from your LDAP server. This would be a major security risk if this were possible. If a password is already   set for the user being imported, it will be left untouched. This is to retain a   possible synchronized password that was set upon login.</li> <li>Passwords will always be set to a hashed 16 character string if not already present. If the user being imported does not have a password, their password will be set to a   hashed 16 character random string using <code>Str::random</code>.</li> <li>Passwords will not be set if you have defined <code>false</code> for <code>password_column</code>.</li> </ul>"},{"location":"docs/laravel/v3/auth/database/importing/#running-the-command","title":"Running the command","text":"<p>To run the command you must insert the <code>provider</code> name that you have set up for LDAP database synchronization inside your <code>config/auth.php</code> file. Let's walk through an example.</p> <p>In our application we have a configured authentication provider named <code>ldap</code>:</p> <pre><code>'providers' =&gt; [\n    // ...\n\n    'ldap' =&gt; [\n        // ...\n        'database' =&gt; [\n            // ...\n        ],\n    ],\n],\n</code></pre> <p>We will then insert the providers name into our import command and execute it:</p> <pre><code>php artisan ldap:import users\n</code></pre> <p>You will then be asked after a successful search in your directory:</p> <pre><code>Found 2 user(s).\n\nWould you like to display the user(s) to be imported / synchronized? (yes/no) [no]:\n&gt; y\n</code></pre> <p>A table will then be shown, so you can confirm the import of the located users:</p> <pre><code>+-------------+-------------------+---------------------+\n| Name        | Account Name      | UPN                 |\n+-------------+-------------------+---------------------+\n| John Doe    | johndoe           | johndoe@local.com   |\n| Jane Doe    | janedoe           | janedoe@local.com   |\n+-------------+-------------------+---------------------+\n</code></pre> <p>Then, you will be asked to import the users shown and the import will begin:</p> <pre><code> Would you like these users to be imported / synchronized? (yes/no) [no]:\n &gt; y\n\n  2/2 [============================] 100%\n\nSuccessfully imported / synchronized 2 user(s).\n</code></pre>"},{"location":"docs/laravel/v3/auth/database/importing/#scheduling-the-command","title":"Scheduling the command","text":"<p>To run the import as a scheduled job, place the following in your <code>app/Console/Kernel.php</code> in the command scheduler:</p> <pre><code>protected function schedule(Schedule $schedule)\n{\n    // Import LDAP users hourly.\n    $schedule-&gt;command('ldap:import users', [\n        '--no-interaction',\n        '--restore',\n        '--delete',\n        '--filter' =&gt; '(objectclass=user)',\n    ])-&gt;hourly();\n}\n</code></pre> <p>The above scheduled import command will:</p> <ul> <li>Run without interaction and import new users as well as synchronize already imported users</li> <li>Restore user models who have been re-activated in your LDAP directory (if you're using Eloquent Soft Deletes)</li> <li>Soft-Delete user models who have been deactived in your LDAP directory (if you're using Eloquent Soft Deletes)</li> <li>Only import objects that have an <code>objectclass</code> containing <code>user</code></li> </ul> <p>It's recommended to use model query scopes instead of the <code>--filter</code> option on your configured authentication LdapRecord model so LDAP users signing in to your application are applied the same search filter.</p>"},{"location":"docs/laravel/v3/auth/database/importing/#programmatically-executing","title":"Programmatically Executing","text":"<p>You can call the <code>ldap:import</code> command using Laravel's Artisan facade to programmatically execute the import inside your application wherever you'd like:</p> <pre><code>Artisan::call('ldap:import', ['provider' =&gt; 'ldap', '--no-interaction']);\n</code></pre> <p>To use other arguments and options, include them as array values:</p> <pre><code>Artisan::call('ldap:import', [\n    'provider' =&gt; 'ldap',\n    'user' =&gt; 'sbauman',\n    '--no-interaction',\n    '--restore' =&gt; true,\n    '--delete' =&gt; true,\n    '--delete-missing' =&gt; true,\n    '--filter' =&gt; '(cn=John Doe)',\n    '--scopes' =&gt; 'App\\Ldap\\Scopes\\OnlyAdmins',\n    '--attributes' =&gt; 'cn,mail,samaccountname',\n]);\n</code></pre>"},{"location":"docs/laravel/v3/auth/database/importing/#events","title":"Events","text":"<p>When executing the <code>ldap:import</code> command, LdapRecord-Laravel will fire various events that you may register listeners on:</p> <p>Important: Each event listed below has the parent namespace of <code>LdapRecord\\Laravel\\Events\\Import\\</code>.</p> Event Fired Occurrence <code>Completed</code> When an import has fully completed. Once per <code>ldap:import</code> execution. <code>Deleted</code> When an import has soft-deleted a user. Each time a user is soft-deleted during an <code>ldap:import</code> execution. <code>DeletedMissing</code> When an import has soft-deleted missing users. Once per <code>ldap:import</code> execution. <code>Imported</code> When a user has been imported. Each time a user is imported via <code>ldap:import</code> execution, or authentication. <code>ImportFailed</code> When an exception occurs during import or synchronization. Each time a user fails to be synchronized or imported via <code>ldap:import</code> execution, or authentication. <code>Importing</code> When a non-existent user is being imported. Each time a non-existent user is imported via <code>ldap:import</code> execution, or authentication. <code>Restored</code> When a previously soft-deleted user is being restored (un-deleted). Each time a soft-deleted user is restored via an <code>ldap:import</code> execution. <code>Saved</code> When a user has been saved after import or synchronization. Each time a user is saved via <code>ldap:import</code> execution, or authentication. <code>Started</code> When an import has been started. Once per <code>ldap:import</code> execution. <code>Synchronized</code> When a user has been synchronized with any defined sync attributes. Each time a user is synchronized via an <code>ldap:import</code> execution, or authentication. <code>Synchronizing</code> When a user is beginning to be synchronized. Each time a user is synchronizing via an <code>ldap:import</code> execution, or authentication."},{"location":"docs/laravel/v3/auth/database/importing/#command-arguments","title":"Command Arguments","text":""},{"location":"docs/laravel/v3/auth/database/importing/#provider","title":"Provider","text":"<p>To execute the import command, you must supply an authentication provider name. This will retrieve the users from your configured LdapRecord model, and import them using your configured Eloquent model.</p> <p>For example, if you have kept the default <code>users</code> authentication provider name in your <code>config/auth.php</code> file, then you would execute:</p> <pre><code>php artisan ldap:import users\n</code></pre>"},{"location":"docs/laravel/v3/auth/database/importing/#user","title":"User","text":"<p>To import or synchronize a single user, insert one of their attributes (such as <code>mail</code>, <code>samaccountname</code>, <code>cn</code>) and LdapRecord will try to locate the user for you using Ambiguous Name Resolution. If your LDAP server does not support ANR, an equivalent query will be created automatically.</p> <p>This argument is completely optional.</p> <p>Important: Do not use the <code>--delete-missing</code> option with this argument. Otherwise, other LDAP users that have been imported will be soft-deleted (if configured &amp; enabled on your Eloquent model).</p> <pre><code>php artisan ldap:import users jdoe@email.com\n\nFound user 'John Doe'.\n\nWould you like to display the user(s) to be imported / synchronized? (yes/no) [no]:\n&gt; y\n</code></pre>"},{"location":"docs/laravel/v3/auth/database/importing/#command-options","title":"Command Options","text":""},{"location":"docs/laravel/v3/auth/database/importing/#chunk","title":"Chunk","text":"<p>The <code>--chunk</code> option allows you to import users by chunk.</p> <p>The option takes a number that indicates how many users per-chunk you would like to import.</p> <p>Use this option if you are running out of memory during large imports.</p> <pre><code>php artisan ldap:import users --chunk 500\n</code></pre>"},{"location":"docs/laravel/v3/auth/database/importing/#filter","title":"Filter","text":"<p>The <code>--filter</code> option allows you to apply a raw filter to further narrow down the users who are imported:</p> <p>Important: If your filter contains commas, or other types of \"escape\" level LDAP search filter characters, you must escape the value with a backslash (<code>\\</code>) before passing it into the search string. More on this below.</p> <pre><code>php artisan ldap:import users --filter \"(cn=John Doe)\"\n</code></pre>"},{"location":"docs/laravel/v3/auth/database/importing/#escaping","title":"Escaping","text":"<p>In some cases, you may need to pass commas or other escape level characters into the search filter.</p> <p>To do so, add a backslash (<code>\\</code>) before the character to escape it properly:</p> <pre><code>php artisan ldap:import users --filter \"(cn=Doe\\, John)\"\n</code></pre> <p>If this is not done, you will receive a <code>Bad search filter</code> exception during import.</p>"},{"location":"docs/laravel/v3/auth/database/importing/#scopes","title":"Scopes","text":"<p>The <code>--scopes</code> option allows you to specify model query scopes that will apply to the underlying LdapRecord query builder instance when searching for users to import with your configured model.</p> <p>This allows you to not have to extend the built-in models to apply global scopes, as well as having scopes that only apply during import.</p> <p>Note: Since these scopes only apply during import, you may want to configure the OnlyImported authentication rule so that only users who have been imported successfully with your configured scopes, can log into your application.</p> <pre><code>php artisan ldap:import users --scopes \"App\\Ldap\\Scopes\\OnlyAdministrators\"\n</code></pre> <p>You may also provide several scopes, via comma separation:</p> <pre><code>php artisan ldap:import users --scopes \"App\\Ldap\\Scopes\\OnlyUsers,App\\Ldap\\Scopes\\ExcludeComputerObjects\"\n</code></pre>"},{"location":"docs/laravel/v3/auth/database/importing/#attributes","title":"Attributes","text":"<p>The <code>--attributes</code> option allows you to specify the attributes that should be returned from your LDAP server.</p> <p>This option is great for reducing memory usage for large imports, since all attributes will be returned from your LDAP server otherwise.</p> <p>Important: To use this option, you must comma separate each attribute in the command and include the attributes you have configured in your authentication provider.</p> <pre><code>php artisan ldap:import users --attributes \"cn,mail,sn,givenname,samaccountname\"\n</code></pre>"},{"location":"docs/laravel/v3/auth/database/importing/#delete","title":"Delete","text":"<p>This option is only available on Active Directory models.</p> <p>The <code>--delete</code> option allows you to soft-delete deactivated LDAP users. No users will be deleted if your <code>User</code> Eloquent model does not have soft-deletes enabled.</p> <pre><code>php artisan ldap:import users --delete\n</code></pre>"},{"location":"docs/laravel/v3/auth/database/importing/#delete-missing","title":"Delete Missing","text":"<p>This option is available for all LDAP directories.</p> <p>The <code>--delete-missing</code> option allows you to soft-delete all LDAP users that were missing from the import. This is useful when a user has been deleted in your LDAP server, and therefore should be soft-deleted inside your application, since they will not be returned in search results.</p> <p>This option has been designed to have the utmost safety of user data in mind. Here are some paramount things to understand with this option:</p> <p>No users will be deleted if soft-deletes are not enabled on your <code>User</code> eloquent model.</p> <p>Deletion will not occur. You must set up Soft Deletes on your <code>User</code> eloquent model.</p> <p>If no users have been successfully imported, no users will be soft-deleted.</p> <p>If an executed import does not successfully import any users, no users will be soft-deleted.</p> <p>Only users that belong to the domain you are importing will be soft-deleted.</p> <p>This means, all other users will be left untouched, such as local database users that were not imported from an LDAP server, as well as users that were imported from another domain.</p> <p>Soft-deleted users are reported in the log.</p> <p>When users are soft-deleted, a log entry will be created for each one:</p> <pre><code>User with [id = 2] has been soft-deleted due to being missing from LDAP import.\nUser with [id = 5] has been soft-deleted due to being missing from LDAP import.\n</code></pre>"},{"location":"docs/laravel/v3/auth/database/importing/#the-deletedmissing-event","title":"The DeletedMissing Event","text":"<p>A <code>DeletedMissing</code> event is fired in the event of any users being soft-deleted.</p> <p>You may listen for this event and access the IDs of the deleted users, as well as the Eloquent model that was used to perform the deletion, and the LdapRecord model that was used to perform the import.</p> <p>Here is an example listener that accesses this event and its properties:</p> <pre><code>// app/Listeners/UsersDeletedFromImport.php\n\nnamespace App\\Listeners;\n\nuse LdapRecord\\Laravel\\Events\\Import\\DeletedMissing;\n\nclass UsersDeletedFromImport\n{\n    public function handle(DeletedMissing $event)\n    {\n        // \\Illuminate\\Support\\Collection\n        $event-&gt;deleted;\n\n        // \\LdapRecord\\Models\\ActiveDirectory\\User\n        $event-&gt;ldapModel;\n\n        // \\Illuminate\\Database\\Eloquent\\Model\n        $event-&gt;eloquentModel;\n    }\n}\n</code></pre>"},{"location":"docs/laravel/v3/auth/database/importing/#restore","title":"Restore","text":"<p>This option is only available on Active Directory models.</p> <p>The <code>--restore</code> option allows you to restore soft-deleted re-activated LDAP users.</p> <pre><code>php artisan ldap:import users --restore\n</code></pre> <p>Typically, the <code>--restore</code> and <code>--delete</code> options would be used together to allow full synchronization of user disablements and restoration.</p>"},{"location":"docs/laravel/v3/auth/database/importing/#min-users","title":"Min Users","text":"<p>The <code>--min-users</code> option allows you to specify a minimum number of users that should be returned from your LDAP server before performing an import. This is useful in circumstances where you're  using the <code>--delete-missing</code> flag, and you want to ensure that a possible query or replication  issue in your environment does not perform a drastic soft-deletion to users not returned.</p> <pre><code>php artisan ldap:import users --min-users=1000 --delete-missing\n</code></pre>"},{"location":"docs/laravel/v3/auth/database/importing/#no-logging","title":"No Logging","text":"<p>The <code>--no-log</code> option allows you to disable logging during the command.</p> <pre><code>php artisan ldap:import users --no-log\n</code></pre> <p>By default, this is enabled, regardless if <code>logging</code> is disabled in your <code>config/ldap.php</code> file.</p>"},{"location":"docs/laravel/v3/auth/database/importing/#no-interaction","title":"No Interaction","text":"<p>To run the import command via a schedule, use the <code>--no-interaction</code> flag:</p> <pre><code>php artisan ldap:import users --no-interaction\n</code></pre> <p>Users will be imported automatically with no prompts.</p> <p>You can also call the command from the Laravel Scheduler, or other commands:</p> <pre><code>// Importing one user\n$schedule-&gt;command('ldap:import users sbauman', ['--no-interaction'])\n            -&gt;everyMinute();\n\n// Importing all users\n$schedule-&gt;command('ldap:import users', ['--no-interaction'])\n            -&gt;everyMinute();\n\n// Importing users with a filter\n$dn = 'CN=Accounting,OU=SecurityGroups,DC=local,DC=com';\n\n$filter = sprintf('(memberof:1.2.840.113556.1.4.1941:=%s)', $dn);\n\n$schedule-&gt;command('ldap:import users', ['--no-interaction', '--filter' =&gt; $filter])\n    -&gt;everyMinute();\n</code></pre>"},{"location":"docs/laravel/v3/auth/database/importing/#additional-tips","title":"Additional Tips","text":"<ul> <li>Users who already exist inside your database will be updated with your configured providers <code>sync_attributes</code>.</li> <li>Users will never be force deleted from the import command. You will need to delete users manually   through your Eloquent model</li> <li>If you have a password mutator (setter) on your <code>User</code> Eloquent model, it will not override it.   This allows you to hash the random 16 character passwords in your own way.</li> <li>Imported (new) users will be reported in your log files:</li> </ul> <pre><code>[2020-01-29 14:51:51] local.INFO: Imported user johndoe\n</code></pre> <ul> <li>Users that fail to be imported are also reported in your log files, alongside the message of the exception that caused the failure:</li> </ul> <pre><code>[2020-01-29 14:51:51] local.ERROR: Unable to import user janedoe. SQLSTATE[23000]: Integrity constraint violation: 1048\n</code></pre>"},{"location":"docs/laravel/v3/auth/database/installation/","title":"Database Authentication Installation","text":""},{"location":"docs/laravel/v3/auth/database/installation/#introduction","title":"Introduction","text":"<p>Database authentication requires the addition of two (2) database columns inside your <code>users</code> database table:</p> <ul> <li><code>guid</code>  This is for storing your LDAP users <code>objectguid</code>. It is used for locating and synchronizing your LDAP user.</li> <li><code>domain</code>  This is for storing your LDAP users connection name. It is used to identify users from different domains.</li> </ul>"},{"location":"docs/laravel/v3/auth/database/installation/#publishing-the-required-migration","title":"Publishing The Required Migration","text":"<p>Publish the migration using the below command:</p> <pre><code>php artisan vendor:publish --provider=\"LdapRecord\\Laravel\\LdapAuthServiceProvider\"\n</code></pre> <p>Then run the migration using the below command:</p> <pre><code>php artisan migrate\n</code></pre>"},{"location":"docs/laravel/v3/auth/database/installation/#add-the-required-trait-and-interface","title":"Add The Required Trait and Interface","text":"<p>Add the following interface and trait to your <code>User</code> Eloquent model:</p> <ul> <li>Trait: <code>LdapRecord\\Laravel\\Auth\\AuthenticatesWithLdap</code></li> <li>Interface: <code>LdapRecord\\Laravel\\Auth\\LdapAuthenticatable</code></li> </ul> <pre><code>// app/User.php\n\n// ...\n\nuse LdapRecord\\Laravel\\Auth\\LdapAuthenticatable;\nuse LdapRecord\\Laravel\\Auth\\AuthenticatesWithLdap;\n\nclass User extends Authenticatable implements LdapAuthenticatable\n{\n    use Notifiable, AuthenticatesWithLdap;\n\n    // ...\n}\n</code></pre> <p>This trait and interface provide LdapRecord the ability of setting and getting your users <code>domain</code> and <code>guid</code> database columns upon authentication.</p>"},{"location":"docs/laravel/v3/auth/database/installation/#migration-customization","title":"Migration Customization","text":"<p>You may change the database column names in the published migration to anything you would like. However, once you have done so, you must override the following methods in your Eloquent <code>User</code> model that are provided by the above-mentioned LdapRecord trait and interface:</p> <pre><code>// app/User.php\n\n// ...\n\nuse LdapRecord\\Laravel\\Auth\\LdapAuthenticatable;\nuse LdapRecord\\Laravel\\Auth\\AuthenticatesWithLdap;\n\nclass User extends Authenticatable implements LdapAuthenticatable\n{\n    // ...\n\n    public function getLdapDomainColumn()\n    {\n        return 'my_domain_column';\n    }\n\n    public function getLdapGuidColumn()\n    {\n        return 'my_guid_column';\n    }\n}\n</code></pre>"},{"location":"docs/laravel/v3/auth/database/laravel-breeze/","title":"Laravel Breeze","text":""},{"location":"docs/laravel/v3/auth/database/laravel-breeze/#introduction","title":"Introduction","text":"<p>Important: Before getting started, please complete the below guides:</p> <ul> <li>Installation Guide</li> <li>Configuration Guide</li> </ul> <p>Laravel Breeze provides basic authentication scaffolding out-of-the-box.</p> <p>This guide will show you how to integrate LdapRecord-Laravel using this scaffolding.</p>"},{"location":"docs/laravel/v3/auth/database/laravel-breeze/#debugging","title":"Debugging","text":"<p>inside your <code>config/ldap.php</code> file, ensure you have <code>logging</code> enabled during the setup of authentication. Doing this will help you immensely in debugging connectivity and authentication issues.</p> <p>If you encounter issues along the way, be sure to open your <code>storage/logs</code> directory after you attempt signing in to your application and see what issues may be occurring.</p> <p>In addition, you may also run the below artisan command to test connectivity to your LDAP server:</p> <pre><code>php artisan ldap:test\n</code></pre>"},{"location":"docs/laravel/v3/auth/database/laravel-breeze/#login-request","title":"Login Request","text":"<p>For this example application, we will authenticate our LDAP users with their email address using the LDAP attribute <code>mail</code>.</p> <p>For LdapRecord to properly locate the user in your directory during sign in, we will override the <code>authenticate</code> method in the <code>LoginRequest</code>, and pass in an array with the <code>mail</code> key (which is the attribute we are wanting to retrieve our LDAP users by) and the users <code>password</code>:</p> <pre><code>// app/Http/Requests/Auth/LoginRequest.php\n\n/**\n * Attempt to authenticate the request's credentials.\n *\n * @return void\n *\n * @throws \\Illuminate\\Validation\\ValidationException\n */\npublic function authenticate()\n{\n    $this-&gt;ensureIsNotRateLimited();\n\n    $credentials = [\n        'mail' =&gt; $this-&gt;email,\n        'password' =&gt; $this-&gt;password,\n    ];\n\n    if (! Auth::attempt($credentials, $this-&gt;filled('remember'))) {\n        RateLimiter::hit($this-&gt;throttleKey());\n\n        throw ValidationException::withMessages([\n            'email' =&gt; __('auth.failed'),\n        ]);\n    }\n\n    RateLimiter::clear($this-&gt;throttleKey());\n}\n</code></pre> <p>That's it! You are now ready to authenticate LDAP users into your application.</p>"},{"location":"docs/laravel/v3/auth/database/laravel-breeze/#using-usernames","title":"Using Usernames","text":"<p>To authenticate your users by their username we must adjust some scaffolded code generated by Laravel Breeze.</p> <p>In the following example, we will authenticate users by their <code>sAMAccountName</code>.</p>"},{"location":"docs/laravel/v3/auth/database/laravel-breeze/#sync-attributes","title":"Sync Attributes","text":"<p>We will first need to adjust our <code>sync_attributes</code> array, located inside our <code>config/auth.php</code> file.</p> <p>The only thing we need to change is the <code>email</code> key:</p> <p>From:</p> <pre><code>// config/auth.php\n\n'sync_attributes' =&gt; [\n    // ...\n    'email' =&gt; 'mail',\n],\n</code></pre> <p>To:</p> <pre><code>// config/auth.php\n\n'sync_attributes' =&gt; [\n    // ...\n    'username' =&gt; 'samaccountname',\n],\n</code></pre>"},{"location":"docs/laravel/v3/auth/database/laravel-breeze/#user-migration","title":"User Migration","text":"<p>Now we have adjusted our synchronized attributes, we need to adjust the <code>users</code> database table migration.</p> <p>Similarly, as above, we only need to change the <code>email</code> column to <code>username</code>:</p> <p>From:</p> <pre><code>Schema::create('users', function (Blueprint $table) {\n    // ...\n    $table-&gt;string('email')-&gt;unique();\n    // ...\n});\n</code></pre> <p>To:</p> <pre><code>Schema::create('users', function (Blueprint $table) {\n    // ...\n    $table-&gt;string('username')-&gt;unique();\n    // ...\n});\n</code></pre>"},{"location":"docs/laravel/v3/auth/database/laravel-breeze/#login-form","title":"Login Form","text":"<p>We're almost there. We will now need to update the input HTML field inside the scaffolded <code>login.blade.php</code> view:</p> <p>From:</p> <pre><code>&lt;!-- resources/views/auth/login.blade.php --&gt;\n\n&lt;!-- Email Address --&gt;\n&lt;div&gt;\n  &lt;x-label for=\"email\" :value=\"__('Email')\" /&gt;\n\n  &lt;x-input\n    id=\"email\"\n    class=\"block w-full mt-1\"\n    type=\"email\"\n    name=\"email\"\n    :value=\"old('email')\"\n    required\n    autofocus\n  /&gt;\n&lt;/div&gt;\n</code></pre> <p>To:</p> <pre><code>&lt;!-- resources/views/auth/login.blade.php --&gt;\n\n&lt;!-- Username --&gt;\n&lt;div&gt;\n  &lt;x-label for=\"username\" :value=\"__('Username')\" /&gt;\n\n  &lt;x-input\n    id=\"username\"\n    class=\"block w-full mt-1\"\n    type=\"text\"\n    name=\"username\"\n    :value=\"old('username')\"\n    required\n    autofocus\n  /&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"docs/laravel/v3/auth/database/laravel-breeze/#login-request_1","title":"Login Request","text":"<p>This last step requires adjusting the <code>rules()</code> and <code>authenticate()</code> methods inside the scaffolded <code>LoginRequest.php</code> class:</p> <p>From:</p> <pre><code>// app/Http/Requests/Auth/LoginRequest.php\n\npublic function rules()\n{\n    return [\n        'email' =&gt; 'required|string|email',\n        'password' =&gt; 'required|string',\n    ];\n}\n\npublic function authenticate()\n{\n    $this-&gt;ensureIsNotRateLimited();\n\n    if (! Auth::attempt($request-&gt;only('email', 'password'), $this-&gt;filled('remember'))) {\n        RateLimiter::hit($this-&gt;throttleKey());\n\n        throw ValidationException::withMessages([\n            'email' =&gt; __('auth.failed'),\n        ]);\n    }\n\n    RateLimiter::clear($this-&gt;throttleKey());\n}\n</code></pre> <p>To:</p> <pre><code>// app/Http/Requests/Auth/LoginRequest.php\n\npublic function rules()\n{\n    return [\n        'username' =&gt; 'required|string',\n        'password' =&gt; 'required|string',\n    ];\n}\n\npublic function authenticate()\n{\n    $this-&gt;ensureIsNotRateLimited();\n\n    $credentials = [\n        'samaccountname' =&gt; $this-&gt;username,\n        'password' =&gt; $this-&gt;password,\n    ];\n\n    if (! Auth::attempt($credentials, $this-&gt;filled('remember'))) {\n        RateLimiter::hit($this-&gt;throttleKey());\n\n        throw ValidationException::withMessages([\n            'email' =&gt; __('auth.failed'),\n        ]);\n    }\n\n    RateLimiter::clear($this-&gt;throttleKey());\n}\n</code></pre> <p>You are now ready to log in LDAP users by their username!</p>"},{"location":"docs/laravel/v3/auth/database/laravel-breeze/#fallback-authentication","title":"Fallback Authentication","text":"<p>Database fallback allows the authentication of local database users if:</p> <ul> <li>LDAP connectivity is not present.</li> <li>Or; An LDAP user cannot be found.</li> </ul> <p>For example, given the following <code>users</code> database table:</p> id name email password guid domain 1 Steve Bauman sbauman@outlook.com ... <code>null</code> <code>null</code> <p>If a user attempts to log in with the above email address and this user does not exist inside your LDAP directory, then standard Eloquent authentication will be performed instead.</p> <p>This feature is ideal for environments where:</p> <ul> <li>LDAP server connectivity may be intermittent.</li> <li>Or; You have regular users registering normally in your application.</li> </ul> <p>To enable this feature, you must define a <code>fallback</code> array inside the <code>$credentials</code> you pass to the <code>Auth::attempt()</code> method inside your <code>LoginRequest</code>:</p> <pre><code>// app/Http/Requests/Auth/LoginRequest.php\n\npublic function authenticate()\n{\n    $this-&gt;ensureIsNotRateLimited();\n\n    $credentials = [\n        'mail' =&gt; $this-&gt;email,\n        'password' =&gt; $this-&gt;password,\n        'fallback' =&gt; [\n            'email' =&gt; $this-&gt;email,\n            'password' =&gt; $this-&gt;password,\n        ],\n    ];\n\n    if (! Auth::attempt($credentials, $this-&gt;filled('remember'))) {\n        RateLimiter::hit($this-&gt;throttleKey());\n\n        throw ValidationException::withMessages([\n            'email' =&gt; __('auth.failed'),\n        ]);\n    }\n\n    RateLimiter::clear($this-&gt;throttleKey());\n}\n</code></pre> <p>If you would like your LDAP users to be able to sign in to your application when LDAP connectivity fails or is not present, you must enable the sync passwords option, so your LDAP users can sign in using their last used password.  If an LDAP users password has not been synchronized, they will not be able to sign in.</p>"},{"location":"docs/laravel/v3/auth/database/laravel-breeze/#eloquent-model-binding","title":"Eloquent Model Binding","text":"<p>Model binding allows you to access the currently authenticated user's LdapRecord model from their Eloquent model. This grants you access to their LDAP model whenever you need it.</p> <p>To begin, insert the <code>LdapRecord\\Laravel\\Auth\\HasLdapUser</code> trait onto your <code>User</code> eloquent model:</p> <pre><code>// app/Models/User.php\n\n// ...\n\nuse LdapRecord\\Laravel\\Auth\\HasLdapUser;\nuse LdapRecord\\Laravel\\Auth\\LdapAuthenticatable;\nuse LdapRecord\\Laravel\\Auth\\AuthenticatesWithLdap;\n\nclass User extends Authenticatable implements LdapAuthenticatable\n{\n    use HasFactory, Notifiable, AuthenticatesWithLdap, HasLdapUser;\n\n    // ...\n}\n</code></pre> <p>Now, after an LDAP user logs into your application, their LdapRecord model will be available on their Eloquent model via the <code>ldap</code> property:</p> <p>If their LDAP model cannot be located, the returned will be <code>null</code>.</p> <pre><code>// Instance of App\\Models\\User:\n$user = Auth::user();\n\n// Instance of LdapRecord\\Models\\Model:\n$user-&gt;ldap;\n\n// Get LDAP user attributes:\necho $user-&gt;ldap-&gt;getFirstAttribute('cn');\n\n// Get LDAP user relationships:\n$groups = $user-&gt;ldap-&gt;groups()-&gt;get();\n</code></pre> <p>This property uses deferred loading -- which means that the users LDAP model only gets requested from your server when you attempt to access it. This prevents loading the model unnecessarily when it is not needed in your application.</p>"},{"location":"docs/laravel/v3/auth/database/laravel-breeze/#displaying-ldap-error-messages","title":"Displaying LDAP Error Messages","text":"<p>When a user fails LDAP authentication due to their password / account expiring, account lockout, or their password requiring to be changed, specific error codes will be sent back from your server. LdapRecord can interpret these for you and display helpful error messages to users upon failing authentication.</p> <p></p> <p>To enable this feature, you will have to:</p> <ol> <li>Navigate to the scaffolded <code>AuthenticatedSessionController.php</code></li> <li>Insert the <code>ListensForLdapBindFailure</code> trait</li> <li>Call the <code>listenForLdapBindFailure()</code> method in the constructor:</li> </ol> <pre><code>// app/Http/Controllers/Auth/AuthenticatedSessionController.php\n\nuse LdapRecord\\Laravel\\Auth\\ListensForLdapBindFailure;\n\nclass AuthenticatedSessionController extends Controller\n{\n    use ListensForLdapBindFailure;\n\n    public function __construct()\n    {\n        $this-&gt;listenForLdapBindFailure();\n    }\n\n    // ...\n}\n</code></pre>"},{"location":"docs/laravel/v3/auth/database/laravel-breeze/#changing-the-input-field","title":"Changing The Input Field","text":"<p>By default, LdapRecord-Laravel will attach the LDAP error to the <code>email</code> input field. If you're using a different input field, you can customize it by adding a <code>username</code> property to the <code>AuthenticatedSessionController</code>:</p> <pre><code>use LdapRecord\\Laravel\\Auth\\ListensForLdapBindFailure;\n\nclass AuthenticatedSessionController extends Controller\n{\n    use ListensForLdapBindFailure;\n\n    protected $username = 'username';\n\n    public function __construct()\n    {\n        $this-&gt;listenForLdapBindFailure();\n    }\n\n    // ...\n}\n</code></pre>"},{"location":"docs/laravel/v3/auth/database/laravel-breeze/#changing-the-error-messages","title":"Changing the Error Messages","text":"<p>If you need to modify the translations of these error messages, create a new translation file named <code>errors.php</code> in your <code>resources</code> directory at the following path:</p> <p>The <code>vendor</code> directory (and each subdirectory) will have to be created manually.</p>"},{"location":"docs/laravel/v3/auth/database/laravel-breeze/#laravel-9","title":"Laravel &gt;= 9","text":"<pre><code>lang/\n\u2514\u2500\u2500 vendor/\n    \u2514\u2500\u2500 ldap/\n        \u2514\u2500\u2500 en/\n            \u2514\u2500\u2500 errors.php\n</code></pre>"},{"location":"docs/laravel/v3/auth/database/laravel-breeze/#laravel-8","title":"Laravel &lt;= 8","text":"<pre><code>resources/\n\u2514\u2500\u2500 lang/\n    \u2514\u2500\u2500 vendor/\n        \u2514\u2500\u2500 ldap/\n            \u2514\u2500\u2500 en/\n                \u2514\u2500\u2500 errors.php\n</code></pre> <p>Then, paste in the following translations in the file and modify where necessary:</p> <pre><code>&lt;?php\n\nreturn [\n    'user_not_found' =&gt; 'User not found.',\n    'user_not_permitted_at_this_time' =&gt; 'Not permitted to logon at this time.',\n    'user_not_permitted_to_login' =&gt; 'Not permitted to logon at this workstation.',\n    'password_expired' =&gt; 'Your password has expired.',\n    'account_disabled' =&gt; 'Your account is disabled.',\n    'account_expired' =&gt; 'Your account has expired.',\n    'user_must_reset_password' =&gt; 'You must reset your password before logging in.',\n    'user_account_locked' =&gt; 'Your account is locked.',\n];\n</code></pre>"},{"location":"docs/laravel/v3/auth/database/laravel-breeze/#altering-the-response","title":"Altering the Response","text":"<p>By default, when an LDAP bind failure occurs, a <code>ValidationException</code> will be thrown which will redirect users to your login page and display the error. If you would like to modify this behaviour, you will need to override the method <code>handleLdapBindError</code>.</p> <p>This method will include the error <code>$message</code> as the first parameter and the error <code>$code</code> as the second. This is useful for checking for specific Active Directory response codes and returning a response:</p> <pre><code>use Illuminate\\Validation\\ValidationException;\nuse LdapRecord\\Laravel\\Auth\\ListensForLdapBindFailure;\n\nclass AuthenticatedSessionController extends Controller\n{\n    use ListensForLdapBindFailure;\n\n    protected function handleLdapBindError($message, $code = null)\n    {\n        if ($code == '773') {\n            // The users password has expired. Redirect them.\n            abort(redirect('/password-reset'));\n        }\n\n        throw ValidationException::withMessages([\n            'email' =&gt; \"Whoops! LDAP server cannot be reached.\",\n        ]);\n    }\n\n    // ...\n}\n</code></pre> <p>Refer to the Password Policy Errors documentation to see what each code means.</p>"},{"location":"docs/laravel/v3/auth/database/laravel-jetstream/","title":"Laravel Jetstream","text":""},{"location":"docs/laravel/v3/auth/database/laravel-jetstream/#introduction","title":"Introduction","text":"<p>Important: Before getting started, please complete the below guides:</p> <ul> <li>Installation Guide</li> <li>Configuration Guide</li> </ul> <p>Laravel Jetstream provides robust authentication scaffolding out-of-the-box. It utilizes Laravel Fortify for authentication under the hood.</p> <p>We will customize various aspects of Jetsream and Fortify to allow LDAP users to sign in to the application.</p>"},{"location":"docs/laravel/v3/auth/database/laravel-jetstream/#debugging","title":"Debugging","text":"<p>inside your <code>config/ldap.php</code> file, ensure you have <code>logging</code> enabled during the setup of authentication. Doing this will help you immensely in debugging connectivity and authentication issues.</p> <p>If you encounter issues along the way, be sure to open your <code>storage/logs</code> directory after you attempt signing in to your application and see what issues may be occurring.</p> <p>In addition, you may also run the below artisan command to test connectivity to your LDAP server:</p> <pre><code>php artisan ldap:test\n</code></pre>"},{"location":"docs/laravel/v3/auth/database/laravel-jetstream/#fortify-setup","title":"Fortify Setup","text":""},{"location":"docs/laravel/v3/auth/database/laravel-jetstream/#authentication-callback","title":"Authentication Callback","text":"<p>For this example application, we will authenticate our LDAP users with their email address using the LDAP attribute <code>mail</code>.</p> <p>For LdapRecord to properly locate the user in your directory during sign in, we will override Fortify's authentication callback using the <code>Fortify::authenticateUsing()</code> method in our <code>AuthServiceProvider.php</code> file:</p> <pre><code>// app/Providers/AuthServiceProvider.php\n\n// ...\nuse Laravel\\Fortify\\Fortify;\nuse Illuminate\\Support\\Facades\\Auth;\n\nclass AuthServiceProvider extends ServiceProvider\n{\n    // ...\n\n    public function boot()\n    {\n        $this-&gt;registerPolicies();\n\n        Fortify::authenticateUsing(function ($request) {\n            $validated = Auth::validate([\n                'mail' =&gt; $request-&gt;email,\n                'password' =&gt; $request-&gt;password\n            ]);\n\n            return $validated ? Auth::getLastAttempted() : null;\n        });\n    }\n}\n</code></pre> <p>As you can see above, we set the <code>mail</code> key which is passed to the LdapRecord authentication provider.</p> <p>A search query will be executed on your LDAP directory for a user that contains the <code>mail</code> attribute equal to the entered <code>email</code> that the user has submitted on your login form. The <code>password</code> key will not be used in the search.</p> <p>If a user cannot be located in your directory, or they fail authentication, they will be redirected to the login page normally with the \"Invalid credentials\" error message.</p> <p>You may also add extra key =&gt; value pairs in the <code>credentials</code> array to further scope the LDAP query. The <code>password</code> key is automatically ignored by LdapRecord.</p>"},{"location":"docs/laravel/v3/auth/database/laravel-jetstream/#feature-configuration","title":"Feature Configuration","text":"<p>Since we are synchronizing data from our LDAP server, we must disable the following features by commenting them out inside the <code>config/fortify.php</code> file:</p> <pre><code>// config/fortify.php\n\n// Before:\n'features' =&gt; [\n    Features::registration(),\n    Features::resetPasswords(),\n    // Features::emailVerification(),\n    Features::updateProfileInformation(),\n    Features::updatePasswords(),\n    // Features::twoFactorAuthentication(),\n],\n\n// After:\n'features' =&gt; [\n    // Features::registration(),\n    // Features::resetPasswords(),\n    // Features::emailVerification(),\n    // Features::updateProfileInformation(),\n    // Features::updatePasswords(),\n    // Features::twoFactorAuthentication(),\n],\n</code></pre> <p>Important: You may keep <code>Features::registration()</code> enabled if you would like to continue accepting local application user registration. Keep in mind, if you continue to allow registration, you will need to either use multiple Laravel authentication guards, or set up the login fallback feature.</p>"},{"location":"docs/laravel/v3/auth/database/laravel-jetstream/#using-usernames","title":"Using Usernames","text":"<p>To authenticate your users by their username we must adjust some scaffolded code generated by Laravel Jetstream.</p> <p>In the following example, we will authenticate users by their <code>sAMAccountName</code>.</p>"},{"location":"docs/laravel/v3/auth/database/laravel-jetstream/#fortify-setup_1","title":"Fortify Setup","text":""},{"location":"docs/laravel/v3/auth/database/laravel-jetstream/#authentication-callback_1","title":"Authentication Callback","text":"<p>With our Fortiy configuration updated, we will jump into our <code>AuthServiceProvider.php</code> file and set up our authentication callback using the <code>Fortify::authenticateUsing()</code> method:</p> <pre><code>// app/Providers/AuthServiceProvider.php\n\n// ...\nuse Laravel\\Fortify\\Fortify;\nuse Illuminate\\Support\\Facades\\Auth;\n\nclass AuthServiceProvider extends ServiceProvider\n{\n    // ...\n\n    public function boot()\n    {\n        $this-&gt;registerPolicies();\n\n        Fortify::authenticateUsing(function ($request) {\n            $validated = Auth::validate([\n                'samaccountname' =&gt; $request-&gt;username,\n                'password' =&gt; $request-&gt;password\n            ]);\n\n            return $validated ? Auth::getLastAttempted() : null;\n        });\n    }\n}\n</code></pre>"},{"location":"docs/laravel/v3/auth/database/laravel-jetstream/#username-configuration","title":"Username Configuration","text":"<p>inside our <code>config/fortify.php</code> file, we must change the <code>username</code> option to <code>username</code> from <code>email</code>:</p> <pre><code>// config/fortify.php\n\n// Before:\n'username' =&gt; 'email',\n\n// After:\n'username' =&gt; 'username',\n</code></pre> <p>You will notice above we are passing in an array of credentials with <code>samaccountname</code> as the key, and the requests <code>username</code> form input.</p>"},{"location":"docs/laravel/v3/auth/database/laravel-jetstream/#database-migration","title":"Database Migration","text":"<p>The built in <code>users</code> database table migration must also be modified to use a <code>username</code> column instead of <code>email</code>:</p> <pre><code>// database/migrations/2014_10_12_000000_create_users_table.php\n\n// Before:\n$table-&gt;string('email')-&gt;unique();\n\n// After:\n$table-&gt;string('username')-&gt;unique();\n</code></pre>"},{"location":"docs/laravel/v3/auth/database/laravel-jetstream/#sync-attributes","title":"Sync Attributes","text":"<p>When using usernames, we must also adjust the <code>sync_attributes</code> option inside our <code>config/auth.php</code> file. We will adjust it to reflect our <code>username</code> database column to be synchronized with the <code>samaccountname</code> attribute:</p> <pre><code>// config/auth.php\n\n'providers' =&gt; [\n    // ...\n\n    'ldap' =&gt; [\n        // ...\n        'database' =&gt; [\n            // ...\n            'sync_attributes' =&gt; [\n                'name' =&gt; 'cn',\n                'username' =&gt; 'samaccountname',\n            ],\n        ],\n    ],\n],\n</code></pre> <p>Remember to add any additional database columns you need synchronized here.</p>"},{"location":"docs/laravel/v3/auth/database/laravel-jetstream/#login-view","title":"Login View","text":"<p>Now we must open up the <code>login.blade.php</code> view and swap the current HTML input field from <code>email</code> to <code>username</code> so we can retrieve it properly in our <code>Fortify::authenticateUsing()</code> callback:</p> <pre><code>&lt;!-- Before: --&gt;\n&lt;div&gt;\n  &lt;x-jet-label value=\"Email\" /&gt;\n  &lt;x-jet-input\n    class=\"block w-full mt-1\"\n    type=\"email\"\n    name=\"email\"\n    :value=\"old('email')\"\n    required\n    autofocus\n  /&gt;\n&lt;/div&gt;\n\n&lt;!-- After: --&gt;\n&lt;div&gt;\n  &lt;x-jet-label value=\"Username\" /&gt;\n  &lt;x-jet-input\n    class=\"block w-full mt-1\"\n    type=\"text\"\n    name=\"username\"\n    :value=\"old('username')\"\n    required\n    autofocus\n  /&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"docs/laravel/v3/auth/database/laravel-jetstream/#user-model","title":"User Model","text":"<p>If you plan on allowing non-LDAP users to register and login to your application, you must adjust the <code>$fillable</code> attributes property on your <code>app/Models/User.php</code> to include the <code>username</code> column instead of <code>email</code>:</p> <pre><code>// app/Models/User.php\n\nclass User extends Authenticatable implements LdapAuthenticatable\n{\n    // ...\n\n    // Before:\n    protected $fillable = [\n        'name',\n        'email',\n        'password',\n    ];\n\n    // After:\n    protected $fillable = [\n        'name',\n        'username',\n        'password',\n    ];\n}\n</code></pre>"},{"location":"docs/laravel/v3/auth/database/laravel-jetstream/#fallback-authentication","title":"Fallback Authentication","text":"<p>Database fallback allows the authentication of local database users if LDAP connectivity is not present, or an LDAP user cannot be found.</p> <p>To enable this feature, you must define a <code>fallback</code> array inside the credentials you insert into the <code>Auth::validate()</code> method in your <code>Fortify::authenticateUsing()</code> callback:</p> <pre><code>// app/Providers/AuthServiceProvider.php\n\nuse Laravel\\Fortify\\Fortify;\nuse Illuminate\\Support\\Facades\\Auth;\n\nclass AuthServiceProvider extends ServiceProvider\n{\n    // ...\n\n    public function boot()\n    {\n        $this-&gt;registerPolicies();\n\n        Fortify::authenticateUsing(function ($request) {\n            $validated = Auth::validate([\n                'mail' =&gt; $request-&gt;email,\n                'password' =&gt; $request-&gt;password,\n                'fallback' =&gt; [\n                    'email' =&gt; $request-&gt;email,\n                    'password' =&gt; $request-&gt;password,\n                ],\n            ]);\n\n            return $validated ? Auth::getLastAttempted() : null;\n        });\n    }\n}\n</code></pre> <p>For example, given the following <code>users</code> database table:</p> id name email password guid domain 1 Steve Bauman sbauman@outlook.com ... <code>null</code> <code>null</code> <p>If a user attempts to log in with the above email address and this user does not exist inside your LDAP directory, then standard Eloquent authentication will be performed instead.</p> <p>This feature is ideal for environments where:</p> <ul> <li>LDAP server connectivity may be intermittent</li> <li>Or; You have regular users registering normally in your application</li> </ul> <p>If you would like your LDAP users to be able to sign in to your application when LDAP connectivity fails or is not present, you must enable the sync passwords option, so your LDAP users can sign in using their last successfully used password.  If an LDAP users password has not been synchronized, they will not be able to sign in.</p>"},{"location":"docs/laravel/v3/auth/database/laravel-jetstream/#eloquent-model-binding","title":"Eloquent Model Binding","text":"<p>Model binding allows you to access the currently authenticated user's LdapRecord model from their Eloquent model. This grants you access to their LDAP model whenever you need it.</p> <p>To begin, insert the <code>LdapRecord\\Laravel\\Auth\\HasLdapUser</code> trait onto your User model:</p> <pre><code>// app/Models/User.php\n\n// ...\nuse LdapRecord\\Laravel\\Auth\\HasLdapUser;\nuse LdapRecord\\Laravel\\Auth\\LdapAuthenticatable;\nuse LdapRecord\\Laravel\\Auth\\AuthenticatesWithLdap;\n\nclass User extends Authenticatable implements LdapAuthenticatable\n{\n    //...\n\n    use HasLdapUser;\n\n    // ...\n}\n</code></pre> <p>Now, after an LDAP user logs into your application, their LdapRecord model will be available on their Eloquent model via the <code>ldap</code> property:</p> <p>If their LDAP model cannot be located, the returned value will be <code>null</code>.</p> <pre><code>// Instance of App\\Models\\User\n$user = Auth::user();\n\n// Instance of App\\Ldap\\User\n$user-&gt;ldap;\n\n// Get LDAP user attributes\necho $user-&gt;ldap-&gt;getFirstAttribute('cn');\n\n// Get LDAP user relationships:\n$groups = $user-&gt;ldap-&gt;groups()-&gt;get();\n</code></pre> <p>This property uses deferred loading -- which means that the users LDAP model only gets requested from your server when you attempt to access it. This prevents loading the model unnecessarily when it is not needed in your application.</p>"},{"location":"docs/laravel/v3/auth/database/laravel-jetstream/#displaying-ldap-error-messages","title":"Displaying LDAP Error Messages","text":"<p>When using Laravel Jetstream, LDAP error messages will now be displayed automatically to users. You do not need to configure or include the <code>ListensForLdapBindFailure</code> trait as you would using Laravel UI on the <code>LoginController</code>.</p>"},{"location":"docs/laravel/v3/auth/database/laravel-jetstream/#altering-the-response","title":"Altering the Response","text":"<p>Since this functionality is now automatically registered, if you would like to modify how an error is handled, call the <code>setErrorHandler</code> method on the <code>BindFailureListener</code> class inside your <code>AuthServiceProvider.php</code> file:</p> <pre><code>// app/Providers/AuthServiceProvider.php\n\n// ...\nuse LdapRecord\\Laravel\\Auth\\BindFailureListener;\n\nclass AuthServiceProvider extends ServiceProvider\n{\n    // ...\n\n    public function boot()\n    {\n        $this-&gt;registerPolicies();\n\n        BindFailureListener::setErrorHandler(function ($message, $code = null) {\n            if ($code == '773') {\n                // The users password has expired. Redirect them.\n                abort(redirect('/password-reset'));\n            }\n        });\n    }\n}\n</code></pre> <p>Refer to the Password Policy Errors documentation to see what each code means.</p>"},{"location":"docs/laravel/v3/auth/database/laravel-jetstream/#changing-the-error-messages","title":"Changing the Error Messages","text":"<p>If you need to modify the translations of these error messages, create a new translation file named <code>errors.php</code> in your <code>resources</code> directory at the following path:</p> <p>The <code>vendor</code> directory (and each subdirectory) will have to be created manually.</p>"},{"location":"docs/laravel/v3/auth/database/laravel-jetstream/#laravel-9","title":"Laravel &gt;= 9","text":"<pre><code>lang/\n\u2514\u2500\u2500 vendor/\n    \u2514\u2500\u2500 ldap/\n        \u2514\u2500\u2500 en/\n            \u2514\u2500\u2500 errors.php\n</code></pre>"},{"location":"docs/laravel/v3/auth/database/laravel-jetstream/#laravel-8","title":"Laravel &lt;= 8","text":"<pre><code>resources/\n\u2514\u2500\u2500 lang/\n    \u2514\u2500\u2500 vendor/\n        \u2514\u2500\u2500 ldap/\n            \u2514\u2500\u2500 en/\n                \u2514\u2500\u2500 errors.php\n</code></pre> <p>Then, paste in the following translations in the file and modify where necessary:</p> <pre><code>&lt;?php\n\nreturn [\n    'user_not_found' =&gt; 'User not found.',\n    'user_not_permitted_at_this_time' =&gt; 'Not permitted to logon at this time.',\n    'user_not_permitted_to_login' =&gt; 'Not permitted to logon at this workstation.',\n    'password_expired' =&gt; 'Your password has expired.',\n    'account_disabled' =&gt; 'Your account is disabled.',\n    'account_expired' =&gt; 'Your account has expired.',\n    'user_must_reset_password' =&gt; 'You must reset your password before logging in.',\n    'user_account_locked' =&gt; 'Your account is locked.',\n];\n</code></pre>"},{"location":"docs/laravel/v3/auth/database/laravel-jetstream/#teams","title":"Teams","text":""},{"location":"docs/laravel/v3/auth/database/laravel-jetstream/#default-team-assignment","title":"Default Team Assignment","text":"<p>Since LDAP users are not registered through Jetstream's interface and are instead created through an import or successful authentication, you will have to assign their default team by utilizing LdapRecord's <code>Imported</code> event, which is fired directly after a new user has been imported or created inside your application's database.</p> <p>Create the event listener executing the below command:</p> <pre><code>php artisan make:listener AssignTeam --event=\"LdapRecord\\Laravel\\Events\\Import\\Imported\"\n</code></pre> <p>inside the event listener, attach the users team as you would during a normal users registration through the registration interface:</p> <pre><code>namespace App\\Listeners;\n\nuse App\\Models\\Team;\nuse LdapRecord\\Laravel\\Events\\Import\\Imported;\n\nclass AssignTeam\n{\n    /**\n     * Handle the event.\n     *\n     * @param Imported $event\n     *\n     * @return void\n     */\n    public function handle(Imported $event)\n    {\n        $user = $event-&gt;eloquent;\n\n        $user-&gt;ownedTeams()-&gt;save(Team::forceCreate([\n            'user_id' =&gt; $user-&gt;id,\n            'name' =&gt; explode(' ', $user-&gt;name, 2)[0].\"'s Team\",\n            'personal_team' =&gt; true,\n        ]));\n    }\n}\n</code></pre> <p>Finally, register the event inside your <code>EventServiceProvider</code>:</p> <pre><code>// app/Providers/EventServiceProvider.php\n\nuse App\\Listeners\\AssignTeam;\nuse LdapRecord\\Laravel\\Events\\Import\\Imported;\n\n/**\n * The event listener mappings for the application.\n *\n * @var array\n */\nprotected $listen = [\n    Imported::class =&gt; [\n        AssignTeam::class,\n    ],\n];\n</code></pre>"},{"location":"docs/laravel/v3/auth/database/laravel-sanctum/","title":"Laravel Sanctum","text":""},{"location":"docs/laravel/v3/auth/database/laravel-sanctum/#introduction","title":"Introduction","text":"<p>Laravel Sanctum provides a featherweight authentication system for SPAs and simple APIs.</p> <p>Since LdapRecord-Laravel provides a database authentication driver, it integrates with Sanctum directly, similarly to the built in <code>eloquent</code> driver.</p> <p>Important: Before getting started, please complete the below guides:</p> <ul> <li>Installation Guide</li> <li>Configuration Guide</li> <li>Sanctum Installation Guide</li> </ul>"},{"location":"docs/laravel/v3/auth/database/laravel-sanctum/#preparing-the-user-eloquent-model","title":"Preparing The User Eloquent Model","text":"<p>If you've followed the above guides, your Eloquent user model should resemble the below:</p> <pre><code>// app/Models/User.php\n\n// ...\nuse Laravel\\Sanctum\\HasApiTokens;\nuse LdapRecord\\Laravel\\Auth\\HasLdapUser;\nuse LdapRecord\\Laravel\\Auth\\LdapAuthenticatable;\n\nclass User extends Authenticatable implements LdapAuthenticatable\n{\n    // ...\n    use HasApiTokens;\n    use AuthenticatesWithLdap;\n    // ...\n}\n</code></pre>"},{"location":"docs/laravel/v3/auth/database/laravel-sanctum/#spa-authentication","title":"SPA Authentication","text":"<p>Important:</p> <p>Please read Laravel Sanctum's SPA Authentication setup guide before proceeding.</p> <p>SPA Authentication means that you have a frontend-based application that will be sending requests to your own application's protected route endpoints (via the <code>auth:sanctum</code> middleware).</p>"},{"location":"docs/laravel/v3/auth/database/laravel-sanctum/#preparing-the-authentication-guard","title":"Preparing The Authentication Guard","text":"<p>Laravel Sanctum will utilize the <code>web</code> authentication guard specified in your <code>config/auth.php</code> file by default.</p> <p>Make sure this guard exists and is utilizing the <code>session</code> driver:</p> <pre><code>// config/auth.php\n\n'guards' =&gt; [\n    'web' =&gt; [\n        'driver' =&gt; 'session',\n        'provider' =&gt; 'users',\n    ],\n\n    // ...\n],\n</code></pre> <p>If you want to change the guard Sanctum uses, publish its configuration file by running the below command:</p> <p>Important: As mentioned above, any custom guard must use a <code>session</code> driver for Sanctum to function.</p> <pre><code>php artisan vendor:publish --tag=\"sanctum-config\"\n</code></pre> <p>Then, update the <code>guard</code> configuration option:</p> <pre><code>// config/sanctum.php\n\n'guard' =&gt; ['web'],\n</code></pre>"},{"location":"docs/laravel/v3/auth/database/laravel-sanctum/#setting-up-the-sanctum-middleware","title":"Setting Up The Sanctum Middleware","text":"<p>If you're going to be sending requests to your <code>/api</code> endpoints from your application's frontend, you must insert a Sanctum middleware into your Laravel application's <code>api</code> middleware group for those requests to be automatically authenticated.</p> <p>This means that users who have logged into your frontend application will not need to manually provide a Sanctum token to send requests to your protected <code>/api</code> endpoints. This middleware is responsible for booting up the session during API requests that are received from your frontend:</p> <p>Important:</p> <p>The position of this middleware is crucial. The <code>throttle:api</code> middleware will utilize a different throttle cache key for authenticated users than guests.</p> <p>Since the <code>EnsureFrontendRequestsAreStateful</code> is inserted before <code>throttle:api</code>, the session will be started and an authenticated user will exist, allowing the <code>throttle:api</code> to access them and bind a unique throttle key to them.</p> <p>You may have to tweak this <code>throttle:api</code> middleware if your frontend application sends large amounts of API requests.</p> <pre><code>// app/Http/Kernel.php\n\nprotected $middlewareGroups = [\n    // ...\n\n    'api' =&gt; [\n        \\Laravel\\Sanctum\\Http\\Middleware\\EnsureFrontendRequestsAreStateful::class, // &lt;-- Inserted here.\n        'throttle:api',\n        \\Illuminate\\Routing\\Middleware\\SubstituteBindings::class,\n    ],\n],\n</code></pre> <p>How does Sanctum know that the request came from your frontend? Well, it does this by checking the domain that the request was sent from to see if it matches with your application server's URL, or one of the URL's configured inside the <code>sanctum.php</code> configuration file:</p> <pre><code>// config/sanctum.php\n\n'stateful' =&gt; explode(',', env('SANCTUM_STATEFUL_DOMAINS', sprintf(\n    '%s%s',\n    'localhost,localhost:3000,127.0.0.1,127.0.0.1:8000,::1',\n    Sanctum::currentApplicationUrlWithPort()\n))),\n</code></pre> <p>As you can see, various <code>localhost</code> domains are included, which is why we can test with Sanctum locally.</p>"},{"location":"docs/laravel/v3/auth/database/laravel-sanctum/#logging-in","title":"Logging In","text":"<p>Important:</p> <p>It's recommended to use Laravel Fortify as a starting point for authenticating users. This guide assumes you have set up authentication using one of the documented packages.</p> <p>As mentioned in the Laravel Sanctum documentation, you must first initialize a CSRF cookie by requesting one from an endpoint Sanctum integrates into your application automatically (<code>/sanctum/csrf-token</code>). When you send a request to this endpoint, your application will send cookie headers back, containing the X-CSRF token.</p> <p>Once a successful <code>204</code> (No content) response is received from the CSRF token endpoint resulting in a new CSRF cookie containing the token, you may send a login request to your application. This login request will initialize the session by sending back a new session cookie in the header (upon providing valid credentials).</p> <p>When this session cookie is received by your web browser, <code>axios</code> (and other HTTP JavaScript clients) should automatically send this cookie along with any subsequent requests. Laravel Sanctum will read this cookie that is sent along your request and authenticate the user for you, allowing the user to access protected routes.</p> <p>Here's how a login request via <code>axios</code> could be made:</p> <pre><code>let credentials = {\n    email: 'john@local.com',\n    password: 'secret',\n};\n\naxios.get('/sanctum/csrf-cookie').then(response =&gt; {\n    axios.post('/login', credentials).then('...');\n});\n</code></pre>"},{"location":"docs/laravel/v3/auth/database/laravel-sanctum/#api-token-authentication","title":"API Token Authentication","text":"<p>Important:</p> <p>Please read Laravel Sanctum's API Token Authentication setup guide before proceeding.</p> <p>If your application is going to provide an API to end users or external services, you will need to implement API token authentication.</p>"},{"location":"docs/laravel/v3/auth/database/laravel-sanctum/#issuing-api-tokens","title":"Issuing API Tokens","text":"<p>To start issuing new user API tokens, we will take Sanctum's default suggested endpoint for issuing tokens, and then tweak it a little bit.</p> <p>Open your <code>routes/api.php</code> file, and paste the below:</p> <pre><code>// routes/api.php\n\nuse App\\Models\\User;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Route;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Validation\\ValidationException;\n\nRoute::middleware('auth:sanctum')-&gt;get('/user', function (Request $request) {\n    return $request-&gt;user();\n});\n\nRoute::post('sanctum/token', function (Request $request) {\n    $request-&gt;validate([\n        'email' =&gt; 'required|email',\n        'password' =&gt; 'required',\n        'device_name' =&gt; 'required',\n    ]);\n\n    // Remember, an LDAP query will be executed on all the array\n    // elements in the credentials array (excluding \"password\").\n    // Here, we're locating a user via their \"mail\" attribute.\n    $credentials = [\n        'mail' =&gt; $request-&gt;email,\n        'password' =&gt; $request-&gt;password,\n    ];\n\n    if (Auth::validate($credentials)) {\n        $user = Auth::getLastAttempted();\n\n        return [\n            'token' =&gt; $user-&gt;createToken($request-&gt;device_name)-&gt;plainTextToken\n        ];\n    }\n\n    throw ValidationException::withMessages([\n        'email' =&gt; ['The provided credentials are incorrect.'],\n    ]);\n});\n</code></pre> <p>This is all that is needed to generate new API tokens, and to start using those tokens to authenticate against your server with.</p> <p>Let's make sure these endpoints work with some tests.</p>"},{"location":"docs/laravel/v3/auth/database/laravel-sanctum/#testing","title":"Testing","text":""},{"location":"docs/laravel/v3/auth/database/laravel-sanctum/#tinkerwell-testing","title":"Tinkerwell Testing","text":"<p>To test your Sanctum endpoint with Tinkerwell, serve your Laravel application by running the below command:</p> <pre><code>php artisan serve\n\n&gt; Starting Laravel development server: http://127.0.0.1:8000\n</code></pre> <p>Then, send a post request to <code>api/sanctum/token</code>:</p> <pre><code>use Illuminate\\Support\\Facades\\Http;\n\n$data = [\n  'email' =&gt; 'johndoe@local.com',\n  'password' =&gt; 'secret',\n  'device_name' =&gt; 'browser',\n];\n\n$response = Http::baseUrl('http://127.0.0.1:8000')\n  -&gt;withHeaders(['accept' =&gt; 'application/json'])\n  -&gt;post('api/sanctum/token', $data)\n  -&gt;json();\n\n// ['token' =&gt; '5|iSO2wH8W....']\ndd($response);\n</code></pre> <p>To ensure the token works, capture a returned token from the above request, and send it with <code>Authorization</code> headers to <code>api/user</code>:</p> <pre><code>$token = '5|iSO2wH8W....';\n\n$response = Http::baseUrl('http://127.0.0.1:8000')\n  -&gt;withHeaders(['accept' =&gt; 'application/json'])\n  -&gt;withToken($token)\n  -&gt;get('api/user')\n  -&gt;body();\n\n// ['id' =&gt; 1, 'name' =&gt; 'John Doe', ...]\ndd($response);\n</code></pre>"},{"location":"docs/laravel/v3/auth/database/laravel-sanctum/#phpunit-testing","title":"PHPUnit Testing","text":"<p>Important: If you are using SQLite to test, remember to install <code>doctrine/dbal</code> before getting started, as mentioned in the test guide:</p> <p><code>bash composer require doctrine/dbal --dev</code></p> <p>To begin, let's create a Sanctum test to make sure both our API endpoints are working:</p> <pre><code>php artisan make:test SanctumTokenTest\n</code></pre> <p>Open the new file and erase the existing example test:</p> <pre><code>namespace Tests\\Feature;\n\nuse Tests\\TestCase;\nuse Illuminate\\Foundation\\Testing\\WithFaker;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\n\nclass SanctumTokenTest extends TestCase\n{\n}\n</code></pre> <p>We'll need to <code>use</code> the <code>DatabaseMigrations</code> trait to run our application's migrations:</p> <pre><code>// ...\nuse Illuminate\\Foundation\\Testing\\DatabaseMigrations;\n\nclass SanctumTokenTest extends TestCase\n{\n    use DatabaseMigrations;\n}\n</code></pre> <p>Now let's add a test to ensure our LDAP user can authenticate and get an API token:</p> <pre><code>namespace Tests\\Feature;\n\nuse Tests\\TestCase;\nuse App\\Models\\User;\nuse Laravel\\Sanctum\\PersonalAccessToken;\nuse Illuminate\\Testing\\Fluent\\AssertableJson;\nuse LdapRecord\\Laravel\\Testing\\DirectoryEmulator;\nuse Illuminate\\Foundation\\Testing\\DatabaseMigrations;\nuse LdapRecord\\Models\\ActiveDirectory\\User as LdapUser;\n\nclass SanctumTokenTest extends TestCase\n{\n    use DatabaseMigrations;\n\n    protected function tearDown(): void\n    {\n        DirectoryEmulator::tearDown();\n\n        parent::tearDown();\n    }\n\n    public function testLdapUserCanRetrieveToken()\n    {\n        // Set up the directory emulator to create a fake, existing LDAP user:\n        $fake = DirectoryEmulator::setup();\n\n        // Remember to supply the \"sync_attributes\" you have assigned inside\n        // your config/auth.php. You will receive an exception if any\n        // non-nullable SQL fields are not present on the LDAP user:\n        $ldapUser = LdapUser::create([\n            'cn' =&gt; 'John Doe',\n            'mail' =&gt; 'john@local.com',\n        ]);\n\n        // Set the user to automatically pass LDAP authentication:\n        $fake-&gt;actingAs($ldapUser);\n\n        // Post the token endpoint and ensure a new token was created:\n        $this-&gt;postJson('api/sanctum/token', [\n            'email' =&gt; $ldapUser-&gt;mail[0],\n            'password' =&gt; 'secret',\n            'device_name' =&gt; 'browser',\n        ])-&gt;assertJson(\n            fn (AssertableJson $json) =&gt; $json-&gt;whereType('token', 'string')\n        );\n\n        // Ensure the user was imported:\n        $this-&gt;assertDatabaseHas(User::class, [\n            'email' =&gt; $ldapUser-&gt;mail[0],\n            'name' =&gt; $ldapUser-&gt;cn[0],\n        ]);\n\n        // Ensure a token exists:\n        $this-&gt;assertDatabaseCount(PersonalAccessToken::class, 1);\n    }\n}\n</code></pre> <p>Great, now let's add a test to ensure an existing LDAP user that fails authentication is not imported, and no token is created:</p> <pre><code>class SanctumTokenTest extends TestCase\n{\n    // ...\n\n    public function testLdapUserCannotRetrieveTokenWithInvalidPassword()\n    {\n        DirectoryEmulator::setup();\n\n        $ldapUser = LdapUser::create([\n            'cn' =&gt; 'John Doe',\n            'mail' =&gt; 'john@local.com',\n        ]);\n\n        // Post the token endpoint and ensure a validation error is thrown:\n        $this-&gt;postJson('api/sanctum/token', [\n            'email' =&gt; $ldapUser-&gt;mail[0],\n            'password' =&gt; 'secret',\n            'device_name' =&gt; 'browser',\n        ])-&gt;assertJsonValidationErrors([\n            'email' =&gt; 'The provided credentials are incorrect.'\n        ]);\n\n        // Ensure the user was not imported:\n        $this-&gt;assertDatabaseMissing(User::class, [\n            'email' =&gt; $ldapUser-&gt;mail[0],\n            'name' =&gt; $ldapUser-&gt;cn[0],\n        ]);\n\n        // Ensure no token was created:\n        $this-&gt;assertDatabaseCount(PersonalAccessToken::class, 0);\n    }\n}\n</code></pre> <p>Nice, now let's add another to ensure our LDAP users can authenticate using their token:</p> <pre><code>class SanctumTokenTest extends TestCase\n{\n    // ...\n\n    public function testLdapUserCanUseTokenOnProtectedRoutes()\n    {\n        $fake = DirectoryEmulator::setup();\n\n        $ldapUser = LdapUser::create([\n            'cn' =&gt; 'John Doe',\n            'mail' =&gt; 'john@local.com',\n        ]);\n\n        $fake-&gt;actingAs($ldapUser);\n\n        // Post the token endpoint and grab the API token:\n        $plainTextToken = $this-&gt;postJson('api/sanctum/token', [\n            'email' =&gt; $ldapUser-&gt;mail[0],\n            'password' =&gt; 'secret',\n            'device_name' =&gt; 'browser',\n        ])-&gt;json('token');\n\n        // Attempt retrieving the user using the returned token:\n        $this-&gt;getJson('api/user', [\n            'Authorization' =&gt; \"Bearer $plainTextToken\",\n        ])-&gt;assertJsonStructure([\n            'id',\n            'guid',\n            'name',\n            'email',\n            'domain',\n        ]);\n    }\n}\n</code></pre> <p>Great. Now we have our API Sanctum endpoints tested against our LDAP integration!</p>"},{"location":"docs/laravel/v3/auth/database/laravel-ui/","title":"Laravel UI","text":""},{"location":"docs/laravel/v3/auth/database/laravel-ui/#introduction","title":"Introduction","text":"<p>Important: Before getting started, please complete the below guides:</p> <ul> <li>Installation Guide</li> <li>Configuration Guide</li> </ul> <p>Laravel UI provides basic authentication scaffolding out-of-the-box.</p> <p>This guide will show you how to integrate LdapRecord-Laravel using this scaffolding.</p>"},{"location":"docs/laravel/v3/auth/database/laravel-ui/#debugging","title":"Debugging","text":"<p>inside your <code>config/ldap.php</code> file, ensure you have <code>logging</code> enabled during the setup of authentication. Doing this will help you immensely in debugging connectivity and authentication issues.</p> <p>If you encounter issues along the way, be sure to open your <code>storage/logs</code> directory after you attempt signing in to your application and see what issues may be occurring.</p> <p>In addition, you may also run the below artisan command to test connectivity to your LDAP server:</p> <pre><code>php artisan ldap:test\n</code></pre>"},{"location":"docs/laravel/v3/auth/database/laravel-ui/#login-controller","title":"Login Controller","text":"<p>For this example application, we will authenticate our LDAP users with their email address using the LDAP attribute <code>mail</code>.</p> <p>For LdapRecord to properly locate the user in your directory during sign in, we will override the <code>credentials</code> method in the <code>LoginController</code>:</p> <pre><code>// app/Http/Controllers/Auth/LoginController.php\n\nuse Illuminate\\Http\\Request;\n\nprotected function credentials(Request $request)\n{\n    return [\n        'mail' =&gt; $request-&gt;email,\n        'password' =&gt; $request-&gt;password,\n    ];\n}\n</code></pre> <p>As you can see above, we set the <code>mail</code> key which is passed to the LdapRecord authentication provider.</p> <p>A search query will be executed on your LDAP directory for a user that contains the <code>mail</code> attribute equal to the entered <code>email</code> that the user has submitted on your login form. The <code>password</code> key will not be used in the search.</p> <p>If a user cannot be located in your directory, or they fail authentication, they will be redirected to the login page normally with the \"Invalid credentials\" error message.</p> <p>You may also add extra key =&gt; value pairs in the <code>credentials</code> array to further scope the LDAP query. The <code>password</code> key is automatically ignored by LdapRecord.</p>"},{"location":"docs/laravel/v3/auth/database/laravel-ui/#using-usernames","title":"Using Usernames","text":"<p>In corporate environments, users are often used to signing in to their computers with their username. You can certainly keep this flow easy for them - we just need to change a couple of things.</p> <p>First, you will need to change the <code>email</code> column in the database migration that creates your <code>users</code> table to <code>username</code>, as this represents what it will now contain:</p> <pre><code>Schema::create('users', function (Blueprint $table) {\n    // ...\n\n    // Before...\n    $table-&gt;string('email')-&gt;unique();\n\n    // After...\n    $table-&gt;string('username')-&gt;unique();\n});\n</code></pre> <p>Make sure you run your migrations using <code>php artisan migrate</code>.</p> <p>Once we've changed the name of the column, we'll jump into the <code>config/auth.php</code> configuration and modify our LDAP user providers <code>sync_attributes</code> to synchronize this changed column.</p> <p>In this example, we will use the users <code>sAMAccountName</code> as their username which is common in Active Directory environments:</p> <pre><code>// config/auth.php\n\n'providers' =&gt; [\n    // ...\n\n    'ldap' =&gt; [\n        // ...\n\n        'database' =&gt; [\n            // ...\n\n            'sync_attributes' =&gt; [\n                'name' =&gt; 'cn',\n                'username' =&gt; 'samaccountname',\n            ],\n        ],\n    ],\n],\n</code></pre> <p>Now, since we have changed the way our users sign in to our application from the default <code>email</code> field, we need to modify our HTML login form to reflect this. Let's jump into our <code>auth/login.blade.php</code>:</p> <pre><code>&lt;!-- resources/views/auth/login.blade.php --&gt;\n\n&lt;!-- Before... --&gt;\n&lt;input\n  id=\"email\"\n  type=\"email\"\n  class=\"form-control @error('email') is-invalid @enderror\"\n  name=\"email\"\n  value=\"{{ old('email') }}\"\n  required\n  autocomplete=\"email\"\n  autofocus\n/&gt;\n\n&lt;!-- After... --&gt;\n&lt;input\n  id=\"username\"\n  type=\"text\"\n  class=\"form-control @error('username') is-invalid @enderror\"\n  name=\"username\"\n  value=\"{{ old('username') }}\"\n  required\n  autocomplete=\"username\"\n  autofocus\n/&gt;\n</code></pre> <p>After changing the HTML input, we now must modify our <code>LoginController</code> to use this new field. We do this by overriding the <code>username</code> method, and updating our <code>credentials</code> method:</p> <pre><code>// app/Http/Controllers/Auth/LoginController.php\n\nuse Illuminate\\Http\\Request;\n\npublic function username()\n{\n    return 'username';\n}\n\nprotected function credentials(Request $request)\n{\n    return [\n        'samaccountname' =&gt; $request-&gt;username,\n        'password' =&gt; $request-&gt;password,\n    ];\n}\n</code></pre> <p>You can now sign in to your application using usernames instead of email addresses.</p>"},{"location":"docs/laravel/v3/auth/database/laravel-ui/#fallback-authentication","title":"Fallback Authentication","text":"<p>Database fallback allows the authentication of local database users if:</p> <ul> <li>LDAP connectivity is not present.</li> <li>Or; An LDAP user cannot be found.</li> </ul> <p>For example, given the following <code>users</code> database table:</p> id name email password guid domain 1 Steve Bauman sbauman@outlook.com ... <code>null</code> <code>null</code> <p>If a user attempts to log in with the above email address and this user does not exist inside your LDAP directory, then standard Eloquent authentication will be performed instead.</p> <p>This feature is ideal for environments where:</p> <ul> <li>LDAP server connectivity may be intermittent.</li> <li>Or; You have regular users registering normally in your application.</li> </ul> <p>To enable this feature, you must define a <code>fallback</code> array inside the credentials you return from the <code>credentials()</code> method inside your <code>LoginController</code>:</p> <pre><code>protected function credentials(Request $request)\n{\n    return [\n        'mail' =&gt; $request-&gt;email,\n        'password' =&gt; $request-&gt;password,\n        'fallback' =&gt; [\n            'email' =&gt; $request-&gt;email,\n            'password' =&gt; $request-&gt;password,\n        ],\n    ];\n}\n</code></pre> <p>If you would like your LDAP users to be able to sign in to your application when LDAP connectivity fails or is not present, you must enable the sync passwords option, so your LDAP users can sign in using their last used password.  If an LDAP users password has not been synchronized, they will not be able to sign in.</p>"},{"location":"docs/laravel/v3/auth/database/laravel-ui/#eloquent-model-binding","title":"Eloquent Model Binding","text":"<p>Model binding allows you to access the currently authenticated user's LdapRecord model from their Eloquent model. This grants you access to their LDAP model whenever you need it.</p> <p>To begin, insert the <code>LdapRecord\\Laravel\\Auth\\HasLdapUser</code> trait onto your <code>User</code> eloquent model:</p> <pre><code>// app/User.php\n\n// ...\n\nuse LdapRecord\\Laravel\\Auth\\HasLdapUser;\nuse LdapRecord\\Laravel\\Auth\\LdapAuthenticatable;\nuse LdapRecord\\Laravel\\Auth\\AuthenticatesWithLdap;\n\nclass User extends Authenticatable implements LdapAuthenticatable\n{\n    use Notifiable, AuthenticatesWithLdap, HasLdapUser;\n\n    // ...\n}\n</code></pre> <p>Now, after an LDAP user logs into your application, their LdapRecord model will be available on their Eloquent model via the <code>ldap</code> property:</p> <p>If their LDAP model cannot be located, the returned will be <code>null</code>.</p> <pre><code>// Instance of App\\Models\\User:\n$user = Auth::user();\n\n// Instance of LdapRecord\\Models\\Model:\n$user-&gt;ldap;\n\n// Get LDAP user attributes:\necho $user-&gt;ldap-&gt;getFirstAttribute('cn');\n\n// Get LDAP user relationships:\n$groups = $user-&gt;ldap-&gt;groups()-&gt;get();\n</code></pre> <p>This property uses deferred loading -- which means that the users LDAP model only gets requested from your server when you attempt to access it. This prevents loading the model unnecessarily when it is not needed in your application.</p>"},{"location":"docs/laravel/v3/auth/database/laravel-ui/#displaying-ldap-error-messages","title":"Displaying LDAP Error Messages","text":"<p>When a user fails LDAP authentication due to their password / account expiring, account lockout, or their password requiring to be changed, specific error codes will be sent back from your server. LdapRecord can interpret these for you and display helpful error messages to users upon failing authentication.</p> <p></p> <p>To add this functionality, you must add the following trait to your <code>LoginController</code>:</p> <pre><code>LdapRecord\\Laravel\\Auth\\ListensForLdapBindFailure\n</code></pre> <p>Example:</p> <pre><code>// app/Http/Controllers/Auth/LoginController.php\n\n// ...\n\nuse LdapRecord\\Laravel\\Auth\\ListensForLdapBindFailure;\n\nclass LoginController extends Controller\n{\n    use AuthenticatesUsers, ListensForLdapBindFailure;\n\n    // ...\n</code></pre> <p>However, this feature will only register automatically if your <code>LoginController</code> resides in the default <code>App\\Http\\Controllers\\Auth</code> namespace. If you have changed the location of your <code>LoginController</code>, you must modify the constructor and add the following method call to register the LDAP listener:</p> <pre><code>// app/Http/Controllers/Auth/LoginController.php\n\n// ...\nuse LdapRecord\\Laravel\\Auth\\ListensForLdapBindFailure;\n\nclass LoginController extends Controller\n{\n    use AuthenticatesUsers, ListensForLdapBindFailure;\n\n    public function __construct()\n    {\n        $this-&gt;middleware('guest')-&gt;except('logout');\n\n        $this-&gt;listenForLdapBindFailure();\n    }\n\n    // ...\n}\n</code></pre>"},{"location":"docs/laravel/v3/auth/database/laravel-ui/#changing-the-error-messages","title":"Changing the Error Messages","text":"<p>If you need to modify the translations of these error messages, create a new translation file named <code>errors.php</code> in your <code>resources</code> directory at the following path:</p> <p>The <code>vendor</code> directory (and each subdirectory) will have to be created manually.</p>"},{"location":"docs/laravel/v3/auth/database/laravel-ui/#laravel-9","title":"Laravel &gt;= 9","text":"<pre><code>lang/\n\u2514\u2500\u2500 vendor/\n    \u2514\u2500\u2500 ldap/\n        \u2514\u2500\u2500 en/\n            \u2514\u2500\u2500 errors.php\n</code></pre>"},{"location":"docs/laravel/v3/auth/database/laravel-ui/#laravel-8","title":"Laravel &lt;= 8","text":"<pre><code>resources/\n\u2514\u2500\u2500 lang/\n    \u2514\u2500\u2500 vendor/\n        \u2514\u2500\u2500 ldap/\n            \u2514\u2500\u2500 en/\n                \u2514\u2500\u2500 errors.php\n</code></pre> <p>Then, paste in the following translations in the file and modify where necessary:</p> <pre><code>&lt;?php\n\nreturn [\n    'user_not_found' =&gt; 'User not found.',\n    'user_not_permitted_at_this_time' =&gt; 'Not permitted to logon at this time.',\n    'user_not_permitted_to_login' =&gt; 'Not permitted to logon at this workstation.',\n    'password_expired' =&gt; 'Your password has expired.',\n    'account_disabled' =&gt; 'Your account is disabled.',\n    'account_expired' =&gt; 'Your account has expired.',\n    'user_must_reset_password' =&gt; 'You must reset your password before logging in.',\n    'user_account_locked' =&gt; 'Your account is locked.',\n];\n</code></pre>"},{"location":"docs/laravel/v3/auth/database/laravel-ui/#altering-the-response","title":"Altering The Response","text":"<p>By default, when an LDAP bind failure occurs, a <code>ValidationException</code> will be thrown which will redirect users to your login page and display the error. If you would like to modify this behaviour, you will need to override the method <code>handleLdapBindError</code>.</p> <p>This method will include the error <code>$message</code> as the first parameter and the error <code>$code</code> as the second. This is useful for checking for specific Active Directory response codes and returning a response:</p> <pre><code>// app/Http/Controllers/Auth/LoginController.php\n\n// ...\nuse Illuminate\\Validation\\ValidationException;\nuse LdapRecord\\Laravel\\Auth\\ListensForLdapBindFailure;\n\nclass LoginController extends Controller\n{\n    // ...\n\n    use ListensForLdapBindFailure;\n\n    protected function handleLdapBindError($message, $code = null)\n    {\n        if ($code == '773') {\n            // The users password has expired. Redirect them.\n            abort(redirect('/password-reset'));\n        }\n\n       throw ValidationException::withMessages([\n            'email' =&gt; \"Whoops! LDAP server cannot be reached.\",\n        ]);\n    }\n\n    // ...\n}\n</code></pre> <p>Refer to the Password Policy Errors documentation to see what each code means.</p>"},{"location":"docs/laravel/v3/auth/database/logging-in/","title":"Logging In","text":"<p>Once you have configured a new authentication provider, you're ready to start logging users into your application.</p> <p>Logging in is simple -- you only need to use Laravel's <code>Auth</code> facade:</p> <pre><code>use Illuminate\\Support\\Facades\\Auth;\n\n$credentials = [\n    'mail' =&gt; 'jdoe@local.com',\n    'password' =&gt; 'password',\n];\n\nif (Auth::attempt($credentials)) {\n    $user = Auth::user();\n\n    return redirect('/dashboard')-&gt;with([\n        'message' =&gt; \"Welcome back, {$user-&gt;name}\"\n    ]);\n}\n</code></pre> <p>As you can see above, we set the <code>mail</code> key which is passed to the LdapRecord authentication provider.</p> <p>A search query will be executed on your LDAP directory for a user that contains the <code>mail</code> attribute equal to the entered email address. The <code>password</code> key will not be used in the search.</p> <p>If you wish to log in a user by their username instead, simply change the <code>mail</code> key to whichever attribute you would like to locate the user by in your LDAP directory. For example, <code>samaccountname</code>:</p> <p>Important: Keep in mind you will have to alter your <code>sync_attributes</code> inside your <code>config/auth.php</code> file to synchronize this field into your <code>users</code> database record if you have not already done so.</p> <pre><code>use Illuminate\\Support\\Facades\\Auth;\n\n$credentials = [\n    'samaccountname' =&gt; 'jdoe',\n    'password' =&gt; 'password',\n];\n\nif (Auth::attempt($credentials)) {\n    //\n}\n</code></pre>"},{"location":"docs/laravel/v3/auth/plain/","title":"Plain Authentication Overview","text":"<p>If you have an application that doesn't require any user data to be synchronized to your database, then you can utilize plain LDAP authentication.</p> <p>It is paramount to understand that upon every request a logged-in user makes to your application, an LDAP search request will be made to retrieve them. If you do not want this to occur, you must use synchronized database authentication.</p> <p>When a user is successfully authenticated, the Laravel <code>Auth::user()</code> method will return an instance of your configured LdapRecord model:</p> <pre><code>use Illuminate\\Support\\Facades\\Auth;\n\n$credentials = [\n    'mail' =&gt; 'jdoe@local.com',\n    'password' =&gt; 'secret',\n];\n\nif (Auth::attempt($credentials)) {\n    $user = Auth::user();\n\n    // Returns true:\n    $user instanceof \\LdapRecord\\Models\\Model;\n}\n</code></pre>"},{"location":"docs/laravel/v3/auth/plain/configuration/","title":"Plain Auth Configuration","text":""},{"location":"docs/laravel/v3/auth/plain/configuration/#introduction","title":"Introduction","text":"<p>To configure a plain LDAP authentication provider, navigate to the <code>providers</code> array inside your <code>config/auth.php</code> file, and paste the following <code>users</code> provider:</p> <p>You will have to remove/alter the default <code>users</code> provider, or create your own.</p> <pre><code>// config/auth.php\n\n'providers' =&gt; [\n    // ...\n\n    'users' =&gt; [\n        'driver' =&gt; 'ldap',\n        'model' =&gt; LdapRecord\\Models\\ActiveDirectory\\User::class,\n        'rules' =&gt; [],\n        'scopes' =&gt; [],\n    ],\n],\n</code></pre> <p>Important: If your application requires more than one LDAP connection, you must create a new provider for each connection.  This new provider must have its own unique <code>model</code> class which must use your alternate configured connection name using the <code>$connection</code> property.</p> <p>In the scenario of having multiple LDAP connections, it may be helpful to namespace the LDAP models you create with the desired connection. For example:</p> <pre><code>App\\Ldap\\DomainAlpha\\User\n</code></pre> <p>This will allow you to segregate scopes, rules and other classes to their relating connection.</p>"},{"location":"docs/laravel/v3/auth/plain/configuration/#driver","title":"Driver","text":"<p>The <code>driver</code> option must be <code>ldap</code> as this is what indicates to Laravel the proper authentication driver to use.</p>"},{"location":"docs/laravel/v3/auth/plain/configuration/#model","title":"Model","text":"<p>The <code>model</code> option must be the class name of your LdapRecord model. This model will be used for fetching users from your directory.</p>"},{"location":"docs/laravel/v3/auth/plain/configuration/#using-your-own-model","title":"Using your own model","text":"<p>If you're using an LDAP directory that is not directly supported by LdapRecord, you may publish your own model using the below command:</p> <pre><code>php artisan ldap:make:model User\n</code></pre> <p>The model will be created inside the <code>app/Ldap</code> directory.</p> <p>Once created, insert the following interface and trait onto the model:</p> <p>Interface:</p> <pre><code>Illuminate\\Contracts\\Auth\\Authenticatable\n</code></pre> <p>Trait:</p> <pre><code>LdapRecord\\Models\\Concerns\\CanAuthenticate\n</code></pre> <p>Finally, you must define a <code>$guidKey</code> property which will contain the name of the attribute your LDAP directory uses to store its unique identifier.</p> <p>Important: Don't forget to also define the models <code>$objectClasses</code>.</p> <pre><code>namespace App\\Ldap;\n\nuse LdapRecord\\Models\\Model;\nuse LdapRecord\\Models\\Concerns\\CanAuthenticate;\nuse Illuminate\\Contracts\\Auth\\Authenticatable;\n\nclass User extends Model implements Authenticatable\n{\n    use CanAuthenticate;\n\n    public static array $objectClasses = ['...'];\n\n    protected string $guidKey = 'uuid';\n}\n</code></pre>"},{"location":"docs/laravel/v3/auth/plain/configuration/#rules","title":"Rules","text":"<p>The <code>rules</code> option must be an array of authentication rule class names.</p>"},{"location":"docs/laravel/v3/auth/plain/configuration/#overview","title":"Overview","text":"<p>LDAP authentication rules give you the ability to allow or deny users from signing in to your application using a condition you would like to apply. These rules are executed after a user successfully passes LDAP authentication against your configured server.</p> <p>Think of them as a final authorization gate before they are allowed in.</p> <p>Authentication rules are never executed if a user fails LDAP authentication.</p>"},{"location":"docs/laravel/v3/auth/plain/configuration/#creating-rules","title":"Creating Rules","text":"<p>Let's create an LDAP rule that only allows members of our domain <code>Administrators</code> group.</p> <p>To create an authentication rule, call the <code>ldap:make:rule</code> command:</p> <pre><code>php artisan ldap:make:rule OnlyAdministrators\n</code></pre> <p>A rule will then be created in your applications <code>app/Ldap/Rules</code> directory:</p> <pre><code>&lt;?php\n\nnamespace App\\Ldap\\Rules;\n\nuse LdapRecord\\Laravel\\Auth\\Rule;\nuse LdapRecord\\Models\\Model as LdapRecord;\nuse Illuminate\\Database\\Eloquent\\Model as Eloquent;\n\nclass OnlyAdministrators implements Rule\n{\n    /**\n     * Check if the rule passes validation.\n     */\n    public function passes(LdapRecord $user, Eloquent $model = null): bool\n    {\n        //\n    }\n}\n</code></pre> <p>In the authentication rule, a <code>$user</code> property will be made available to us.</p> <p>Now, we will update the <code>passes</code> method to check the LDAP users <code>groups</code> relationship to see if they are a member:</p> <pre><code>&lt;?php\n\nnamespace App\\Ldap\\Rules;\n\nuse LdapRecord\\Laravel\\Auth\\Rule;\nuse LdapRecord\\Models\\Model as LdapRecord;\nuse LdapRecord\\Models\\ActiveDirectory\\Group;\nuse Illuminate\\Database\\Eloquent\\Model as Eloquent;\n\nclass OnlyAdministrators implements Rule\n{\n    public function passes(LdapRecord $user, Eloquent $model = null): bool\n    {\n        $administrators = Group::find('cn=Administrators,dc=local,dc=com');\n\n        return $user-&gt;groups()-&gt;recursive()-&gt;exists($administrators);\n    }\n}\n</code></pre> <p>We call the <code>recursive</code> method on the relationship to make sure we load groups of groups in case the user is not an immediate member of the <code>Administrators</code> group.</p> <p>Once we have our rule defined, we will add it into our authentication provider in the <code>config/auth.php</code> file:</p> <pre><code>'providers' =&gt; [\n    // ...\n\n    'users' =&gt; [\n        'driver' =&gt; 'ldap',\n        'model' =&gt; LdapRecord\\Models\\ActiveDirectory\\User::class,\n        'rules' =&gt; [\n            App\\Ldap\\Rules\\OnlyAdministrators::class,\n        ],\n    ],\n],\n</code></pre> <p>Now when you attempt to log in to your application with an LDAP user that successfully passes LDAP authentication, they will need to be a member of the <code>Administrators</code> group.</p> <p>If you are caching your configuration, make sure you re-run <code>config:cache</code> to re-cache your modifications.</p>"},{"location":"docs/laravel/v3/auth/plain/configuration/#scopes","title":"Scopes","text":"<p>The <code>scopes</code> option must be an array of LdapRecord scope class names.</p>"},{"location":"docs/laravel/v3/auth/plain/configuration/#overview_1","title":"Overview","text":"<p>The <code>scopes</code> inserted in this option allow you to apply query scopes to your configured model, only during authentication. This is option is useful for when you don't want to add global scopes to your configured model, but would like to scope the query used to retrieve users during import and authentication into your application.</p>"},{"location":"docs/laravel/v3/auth/plain/configuration/#creating-scopes","title":"Creating Scopes","text":"<p>Let's create an LDAP scope that scopes the authentication query to only return users that are located inside the <code>Accounting</code> Organizational Unit.</p> <p>To create a new LDAP scope, call the <code>ldap:make:scope</code> command:</p> <pre><code>php artisan ldap:make:scope Accounting\n</code></pre> <p>A scope will then be created in your applications <code>app/Ldap/Scopes</code> directory:</p> <pre><code>&lt;?php\n\nnamespace App\\Ldap\\Scopes;\n\nuse LdapRecord\\Models\\Model;\nuse LdapRecord\\Models\\Scope;\nuse LdapRecord\\Query\\Model\\Builder;\n\nclass Accounting implements Scope\n{\n    /**\n     * Apply the scope to the given query.\n     */\n    public function apply(Builder $query, Model $model): void\n    {\n        // ...\n    }\n}\n</code></pre> <p>Now let's update the <code>apply</code> method to only return users located inside the <code>Accounting</code> Organizational Unit:</p> <p>We're using automatic base DN subsitution in query below by supplying <code>{base}</code> in the <code>$query-&gt;in()</code> method.</p> <pre><code>class Accounting implements Scope\n{\n    /**\n     * Apply the scope to the given query.\n     */\n    public function apply(Builder $query, Model $model): void\n    {\n        $query-&gt;in('ou=Accounting,{base}');\n    }\n}\n</code></pre> <p>Once we have our scope defined, we will add it into our authentication provider in the <code>config/auth.php</code> file:</p> <pre><code>'providers' =&gt; [\n    // ...\n\n    'users' =&gt; [\n        'driver' =&gt; 'ldap',\n        'model' =&gt; LdapRecord\\Models\\ActiveDirectory\\User::class,\n        'rules' =&gt; [],\n        'scopes' =&gt; [\n            App\\Ldap\\Scopes\\Accounting::class,\n        ],\n    ],\n],\n</code></pre> <p>Now when you attempt to log in to your application with an LDAP user, that LDAP  user must be located inside the <code>Accounting</code> Organizational Unit to be able  to authenticate into your application. </p> <p>If you are caching your configuration, make sure you re-run <code>config:cache</code> to re-cache your modifications.</p>"},{"location":"docs/laravel/v3/auth/plain/laravel-breeze/","title":"Laravel Breeze","text":""},{"location":"docs/laravel/v3/auth/plain/laravel-breeze/#introduction","title":"Introduction","text":"<p>Important: Before getting started, please complete the configuration guide.</p> <p>Laravel Breeze provides basic authentication scaffolding out-of-the-box.</p> <p>This guide will show you how to integrate LdapRecord-Laravel using this scaffolding.</p>"},{"location":"docs/laravel/v3/auth/plain/laravel-breeze/#debugging","title":"Debugging","text":"<p>inside your <code>config/ldap.php</code> file, ensure you have <code>logging</code> enabled during the setup of authentication. Doing this will help you immensely in debugging connectivity and authentication issues.</p> <p>If you encounter issues along the way, be sure to open your <code>storage/logs</code> directory after you attempt signing in to your application and see what issues may be occurring.</p> <p>In addition, you may also run the below artisan command to test connectivity to your LDAP server:</p> <pre><code>php artisan ldap:test\n</code></pre>"},{"location":"docs/laravel/v3/auth/plain/laravel-breeze/#sessions","title":"Sessions","text":"<p>Before we begin, if you are using the <code>database</code> session driver, you must change the <code>user_id</code> column from its default type. This is due to LDAP Object GUID's being stored as the user's ID, which is not compatible with the unsigned big integer type:</p> <p>From:</p> <pre><code>Schema::create('sessions', function (Blueprint $table) {\n    // ...\n    $table-&gt;foreignId('user_id')-&gt;nullable()-&gt;index();\n    // ...\n});\n</code></pre> <p>To:</p> <pre><code>Schema::create('sessions', function (Blueprint $table) {\n    // ...\n    $table-&gt;string('user_id')-&gt;nullable()-&gt;index();\n    // ...\n});\n</code></pre>"},{"location":"docs/laravel/v3/auth/plain/laravel-breeze/#login-request","title":"Login Request","text":"<p>For this example application, we will authenticate our LDAP users with their email address using the LDAP attribute <code>mail</code>.</p> <p>For LdapRecord to properly locate the user in your directory during sign in, we will override the <code>authenticate</code> method in the <code>LoginRequest</code>, and pass in an array with the <code>mail</code> key (which is the attribute we are wanting to retrieve our LDAP users by) and the users <code>password</code>:</p> <pre><code>// app/Http/Requests/Auth/LoginRequest.php\n\n/**\n * Attempt to authenticate the request's credentials.\n *\n * @return void\n *\n * @throws \\Illuminate\\Validation\\ValidationException\n */\npublic function authenticate()\n{\n    $this-&gt;ensureIsNotRateLimited();\n\n    $credentials = [\n        'mail' =&gt; $this-&gt;email,\n        'password' =&gt; $this-&gt;password,\n    ];\n\n    if (! Auth::attempt($credentials, $this-&gt;filled('remember'))) {\n        RateLimiter::hit($this-&gt;throttleKey());\n\n        throw ValidationException::withMessages([\n            'email' =&gt; __('auth.failed'),\n        ]);\n    }\n\n    RateLimiter::clear($this-&gt;throttleKey());\n}\n</code></pre>"},{"location":"docs/laravel/v3/auth/plain/laravel-breeze/#blade-views","title":"Blade Views","text":"<p>Once you have completed updating your <code>LoginRequest.php</code> class, you will then have to navigate to any Blade views that contain references to <code>Auth::user()</code>. Remember, when using plain authentication, LdapRecord models are returned, not Eloquent.</p> <p>In the standard scaffolding, this occurs namely in the <code>navigation.blade.php</code> view:</p> <p>From:</p> <pre><code>&lt;!-- resources/views/layouts/navigation.blade.php --&gt;\n\n{{ Auth::user()-&gt;name }} {{ Auth::user()-&gt;email }}\n</code></pre> <p>To:</p> <pre><code>&lt;!-- resources/views/layouts/navigation.blade.php --&gt;\n\n{{ Auth::user()-&gt;getName() }} {{ Auth::user()-&gt;getFirstAttribute('mail') }}\n</code></pre> <p>That's it! You are now ready to authenticate LDAP users into your application.</p>"},{"location":"docs/laravel/v3/auth/plain/laravel-breeze/#using-usernames","title":"Using Usernames","text":"<p>To authenticate your users by their username we must adjust some scaffolded code generated by Laravel Breeze.</p> <p>In the following example, we will authenticate users by their <code>sAMAccountName</code>.</p>"},{"location":"docs/laravel/v3/auth/plain/laravel-breeze/#login-form","title":"Login Form","text":"<p>We will first need to update the input HTML field inside the scaffolded <code>login.blade.php</code> view:</p> <p>From:</p> <pre><code>&lt;!-- resources/views/auth/login.blade.php --&gt;\n\n&lt;!-- Email Address --&gt;\n&lt;div&gt;\n  &lt;x-label for=\"email\" :value=\"__('Email')\" /&gt;\n\n  &lt;x-input\n    id=\"email\"\n    class=\"block w-full mt-1\"\n    type=\"email\"\n    name=\"email\"\n    :value=\"old('email')\"\n    required\n    autofocus\n  /&gt;\n&lt;/div&gt;\n</code></pre> <p>To:</p> <pre><code>&lt;!-- resources/views/auth/login.blade.php --&gt;\n\n&lt;!-- Username --&gt;\n&lt;div&gt;\n  &lt;x-label for=\"username\" :value=\"__('Username')\" /&gt;\n\n  &lt;x-input\n    id=\"username\"\n    class=\"block w-full mt-1\"\n    type=\"text\"\n    name=\"username\"\n    :value=\"old('username')\"\n    required\n    autofocus\n  /&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"docs/laravel/v3/auth/plain/laravel-breeze/#login-request_1","title":"Login Request","text":"<p>Lastly, we must adjust the <code>rules()</code> and <code>authenticate()</code> methods inside the scaffolded <code>LoginRequest.php</code> class:</p> <p>From:</p> <pre><code>// app/Http/Requests/Auth/LoginRequest.php\n\npublic function rules()\n{\n    return [\n        'email' =&gt; 'required|string|email',\n        'password' =&gt; 'required|string',\n    ];\n}\n\npublic function authenticate()\n{\n    $this-&gt;ensureIsNotRateLimited();\n\n    if (! Auth::attempt($request-&gt;only('email', 'password'), $this-&gt;filled('remember'))) {\n        RateLimiter::hit($this-&gt;throttleKey());\n\n        throw ValidationException::withMessages([\n            'email' =&gt; __('auth.failed'),\n        ]);\n    }\n\n    RateLimiter::clear($this-&gt;throttleKey());\n}\n</code></pre> <p>To:</p> <pre><code>// app/Http/Requests/Auth/LoginRequest.php\n\npublic function rules()\n{\n    return [\n        'username' =&gt; 'required|string',\n        'password' =&gt; 'required|string',\n    ];\n}\n\npublic function authenticate()\n{\n    $this-&gt;ensureIsNotRateLimited();\n\n    $credentials = [\n        'samaccountname' =&gt; $this-&gt;username,\n        'password' =&gt; $this-&gt;password,\n    ];\n\n    if (! Auth::attempt($credentials, $this-&gt;filled('remember'))) {\n        RateLimiter::hit($this-&gt;throttleKey());\n\n        throw ValidationException::withMessages([\n            'username' =&gt; __('auth.failed'),\n        ]);\n    }\n\n    RateLimiter::clear($this-&gt;throttleKey());\n}\n</code></pre> <p>You are now ready to log in LDAP users by their username!</p>"},{"location":"docs/laravel/v3/auth/plain/laravel-jetstream/","title":"Laravel Jetstream","text":""},{"location":"docs/laravel/v3/auth/plain/laravel-jetstream/#introduction","title":"Introduction","text":"<p>Important: Before getting started, please complete the configuration guide.</p> <p>Laravel Jetstream utilizes Laravel Fortify for authentication under the hood. We will customize various aspects of it to allow LDAP users to sign in to the application.</p>"},{"location":"docs/laravel/v3/auth/plain/laravel-jetstream/#fortify-setup","title":"Fortify Setup","text":""},{"location":"docs/laravel/v3/auth/plain/laravel-jetstream/#authentication-callback","title":"Authentication Callback","text":"<p>For this example application, we will authenticate our LDAP users with their email address using the LDAP attribute <code>mail</code>.</p> <p>For LdapRecord to properly locate the user in your directory during sign in, we will override Fortify's authentication callback using the <code>Fortify::authenticateUsing()</code> method in our <code>AuthServiceProvider.php</code> file:</p> <pre><code>// app/Providers/AuthServiceProvider.php\n\n// ...\nuse Laravel\\Fortify\\Fortify;\nuse Illuminate\\Support\\Facades\\Auth;\n\nclass AuthServiceProvider extends ServiceProvider\n{\n    // ...\n\n    public function boot()\n    {\n        $this-&gt;registerPolicies();\n\n        Fortify::authenticateUsing(function ($request) {\n            $validated = Auth::validate([\n                'mail' =&gt; $request-&gt;email,\n                'password' =&gt; $request-&gt;password\n            ]);\n\n            return $validated ? Auth::getLastAttempted() : null;\n        });\n    }\n}\n</code></pre> <p>As you can see above, we set the <code>mail</code> key which is passed to the LdapRecord authentication provider.</p> <p>A search query will be executed on your LDAP directory for a user that contains the <code>mail</code> attribute equal to the entered <code>email</code> that the user has submitted on your login form. The <code>password</code> key will not be used in the search.</p> <p>If a user cannot be located in your directory, or they fail authentication, they will be redirected to the login page normally with the \"Invalid credentials\" error message.</p> <p>You may also add extra key =&gt; value pairs in the <code>credentials</code> array to further scope the LDAP query. The <code>password</code> key is automatically ignored by LdapRecord.</p>"},{"location":"docs/laravel/v3/auth/plain/laravel-jetstream/#feature-configuration","title":"Feature Configuration","text":"<p>Since we are synchronizing data from our LDAP server, we must disable the following features by commenting them out inside the <code>config/fortify.php</code> file:</p> <pre><code>// config/fortify.php\n\n// Before:\n'features' =&gt; [\n    Features::registration(),\n    Features::resetPasswords(),\n    // Features::emailVerification(),\n    Features::updateProfileInformation(),\n    Features::updatePasswords(),\n    // Features::twoFactorAuthentication(),\n],\n\n// After:\n'features' =&gt; [\n    // Features::registration(),\n    // Features::resetPasswords(),\n    // Features::emailVerification(),\n    // Features::updateProfileInformation(),\n    // Features::updatePasswords(),\n    // Features::twoFactorAuthentication(),\n],\n</code></pre> <p>Important: You may keep <code>Features::registration()</code> enabled if you would like to continue accepting local application user registration. Keep in mind, if you continue to allow registration, you will need to either use multiple Laravel authentication guards, or set up the login fallback feature.</p>"},{"location":"docs/laravel/v3/auth/plain/laravel-jetstream/#sessions","title":"Sessions","text":"<p>If you are using the <code>database</code> session driver, you must change the <code>user_id</code> column from its default type. This is due to LDAP Object GUID's being stored as the user's ID, which is not compatible with the unsigned big integer type:</p> <p>From:</p> <pre><code>public function up()\n{\n    Schema::create('sessions', function (Blueprint $table) {\n        // ...\n        $table-&gt;foreignId('user_id')-&gt;nullable()-&gt;index();\n        // ...\n    });\n}\n</code></pre> <p>To:</p> <pre><code>public function up()\n{\n    Schema::create('sessions', function (Blueprint $table) {\n        // ...\n        $table-&gt;uuid('user_id')-&gt;nullable()-&gt;index();\n        // ...\n    });\n}\n</code></pre>"},{"location":"docs/laravel/v3/auth/plain/laravel-jetstream/#using-usernames","title":"Using Usernames","text":"<p>To authenticate your users by their username we must adjust some scaffolded code generated by Laravel Jetstream.</p> <p>In the following example, we will authenticate users by their <code>sAMAccountName</code>.</p>"},{"location":"docs/laravel/v3/auth/plain/laravel-jetstream/#fortify-setup_1","title":"Fortify Setup","text":""},{"location":"docs/laravel/v3/auth/plain/laravel-jetstream/#authentication-callback_1","title":"Authentication Callback","text":"<p>With our Fortiy configuration updated, we will jump into our <code>AuthServiceProvider.php</code> file and set up our authentication callback using the <code>Fortify::authenticateUsing()</code> method:</p> <pre><code>// app/Providers/AuthServiceProvider.php\n\n// ...\nuse Laravel\\Fortify\\Fortify;\nuse Illuminate\\Support\\Facades\\Auth;\n\nclass AuthServiceProvider extends ServiceProvider\n{\n    // ...\n\n    public function boot()\n    {\n        $this-&gt;registerPolicies();\n\n        Fortify::authenticateUsing(function ($request) {\n            $validated = Auth::validate([\n                'samaccountname' =&gt; $request-&gt;username,\n                'password' =&gt; $request-&gt;password\n            ]);\n\n            return $validated ? Auth::getLastAttempted() : null;\n        });\n    }\n}\n</code></pre>"},{"location":"docs/laravel/v3/auth/plain/laravel-jetstream/#username-configuration","title":"Username Configuration","text":"<p>inside our <code>config/fortify.php</code> file, we must change the <code>username</code> option to <code>username</code> from <code>email</code>:</p> <pre><code>// config/fortify.php\n\n// Before:\n'username' =&gt; 'email',\n\n// After:\n'username' =&gt; 'username',\n</code></pre> <p>You will notice above we are passing in an array of credentials with <code>samaccountname</code> as the key, and the requests <code>username</code> form input.</p>"},{"location":"docs/laravel/v3/auth/plain/laravel-jetstream/#login-view","title":"Login View","text":"<p>Now we must open up the <code>login.blade.php</code> view and swap the current HTML input field from <code>email</code> to <code>username</code> so we can retrieve it properly in our <code>Fortify::authenticateUsing()</code> callback:</p> <pre><code>&lt;!-- Before: --&gt;\n&lt;div&gt;\n  &lt;x-jet-label value=\"Email\" /&gt;\n  &lt;x-jet-input\n    class=\"block w-full mt-1\"\n    type=\"email\"\n    name=\"email\"\n    :value=\"old('email')\"\n    required\n    autofocus\n  /&gt;\n&lt;/div&gt;\n\n&lt;!-- After: --&gt;\n&lt;div&gt;\n  &lt;x-jet-label value=\"Username\" /&gt;\n  &lt;x-jet-input\n    class=\"block w-full mt-1\"\n    type=\"text\"\n    name=\"username\"\n    :value=\"old('username')\"\n    required\n    autofocus\n  /&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"docs/laravel/v3/auth/plain/laravel-jetstream/#displaying-ldap-error-messages","title":"Displaying LDAP Error Messages","text":"<p>When using Laravel Jetstream, LDAP error messages will now be displayed automatically to users. You do not need to configure or include the <code>ListensForLdapBindFailure</code> trait as you would using Laravel UI on the <code>LoginController</code>.</p>"},{"location":"docs/laravel/v3/auth/plain/laravel-jetstream/#altering-the-response","title":"Altering the Response","text":"<p>Since this functionality is now automatically registered, if you would like to modify how an error is handled, call the <code>setErrorHandler</code> method on the <code>BindFailureListener</code> class inside your <code>AuthServiceProvider.php</code> file:</p> <pre><code>// app/Providers/AuthServiceProvider.php\n\n// ...\nuse LdapRecord\\Laravel\\Auth\\BindFailureListener;\n\nclass AuthServiceProvider extends ServiceProvider\n{\n    // ...\n\n    public function boot()\n    {\n        $this-&gt;registerPolicies();\n\n        BindFailureListener::setErrorHandler(function ($message, $code = null) {\n            if ($code == '773') {\n                // The users password has expired. Redirect them.\n                abort(redirect('/password-reset'));\n            }\n        });\n    }\n}\n</code></pre> <p>Refer to the Password Policy Errors documentation to see what each code means.</p>"},{"location":"docs/laravel/v3/auth/plain/laravel-jetstream/#changing-the-error-messages","title":"Changing the Error Messages","text":"<p>If you need to modify the translations of these error messages, create a new translation file named <code>errors.php</code> in your <code>resources</code> directory at the following path:</p> <p>The <code>vendor</code> directory (and each subdirectory) will have to be created manually.</p>"},{"location":"docs/laravel/v3/auth/plain/laravel-jetstream/#laravel-9","title":"Laravel &gt;= 9","text":"<pre><code>lang/\n\u2514\u2500\u2500 vendor/\n    \u2514\u2500\u2500 ldap/\n        \u2514\u2500\u2500 en/\n            \u2514\u2500\u2500 errors.php\n</code></pre>"},{"location":"docs/laravel/v3/auth/plain/laravel-jetstream/#laravel-8","title":"Laravel &lt;= 8","text":"<pre><code>resources/\n\u2514\u2500\u2500 lang/\n    \u2514\u2500\u2500 vendor/\n        \u2514\u2500\u2500 ldap/\n            \u2514\u2500\u2500 en/\n                \u2514\u2500\u2500 errors.php\n</code></pre> <p>Then, paste in the following translations in the file and modify where necessary:</p> <pre><code>&lt;?php\n\nreturn [\n    'user_not_found' =&gt; 'User not found.',\n    'user_not_permitted_at_this_time' =&gt; 'Not permitted to logon at this time.',\n    'user_not_permitted_to_login' =&gt; 'Not permitted to logon at this workstation.',\n    'password_expired' =&gt; 'Your password has expired.',\n    'account_disabled' =&gt; 'Your account is disabled.',\n    'account_expired' =&gt; 'Your account has expired.',\n    'user_must_reset_password' =&gt; 'You must reset your password before logging in.',\n    'user_account_locked' =&gt; 'Your account is locked.',\n];\n</code></pre>"},{"location":"docs/laravel/v3/auth/plain/laravel-ui/","title":"Laravel UI","text":""},{"location":"docs/laravel/v3/auth/plain/laravel-ui/#introduction","title":"Introduction","text":"<p>Important: Before getting started, please complete the configuration guide.</p> <p>Laravel UI provides basic authentication scaffolding out-of-the-box.</p> <p>This guide will show you how to integrate LdapRecord-Laravel using this scaffolding.</p>"},{"location":"docs/laravel/v3/auth/plain/laravel-ui/#debugging","title":"Debugging","text":"<p>inside your <code>config/ldap.php</code> file, ensure you have <code>logging</code> enabled during the setup of authentication. Doing this will help you immensely in debugging connectivity and authentication issues.</p> <p>If you encounter issues along the way, be sure to open your <code>storage/logs</code> directory after you attempt signing in to your application and see what issues may be occurring.</p> <p>In addition, you may also run the below artisan command to test connectivity to your LDAP server:</p> <pre><code>php artisan ldap:test\n</code></pre>"},{"location":"docs/laravel/v3/auth/plain/laravel-ui/#sessions","title":"Sessions","text":"<p>Before we begin, if you are using the <code>database</code> session driver, you must change the <code>user_id</code> column from its default type. This is due to LDAP Object GUID's being stored as the user's ID, which is not compatible with the unsigned big integer type:</p> <p>From:</p> <pre><code>Schema::create('sessions', function (Blueprint $table) {\n    // ...\n    $table-&gt;foreignId('user_id')-&gt;nullable()-&gt;index();\n    // ...\n});\n</code></pre> <p>To:</p> <pre><code>Schema::create('sessions', function (Blueprint $table) {\n    // ...\n    $table-&gt;string('user_id')-&gt;nullable()-&gt;index();\n    // ...\n});\n</code></pre>"},{"location":"docs/laravel/v3/auth/plain/laravel-ui/#login-controller","title":"Login Controller","text":"<p>For this example application, we will authenticate our LDAP users with their email address using the LDAP attribute <code>mail</code>.</p> <p>For LdapRecord to properly locate the user in your directory during sign in, we will override the <code>credentials</code> method in the <code>LoginController</code>:</p> <pre><code>// app/Http/Controllers/Auth/LoginController.php\n\nuse Illuminate\\Http\\Request;\n\nprotected function credentials(Request $request)\n{\n    return [\n        'mail' =&gt; $request-&gt;email,\n        'password' =&gt; $request-&gt;password,\n    ];\n}\n</code></pre> <p>As you can see above, we set the <code>mail</code> key which is passed to the LdapRecord authentication provider.</p> <p>A search query will be executed on your LDAP directory for a user that contains the <code>mail</code> attribute equal to the entered <code>email</code> that the user has submitted on your login form. The <code>password</code> key will not be used in the search.</p> <p>If a user cannot be located in your directory, or they fail authentication, they will be redirected to the login page normally with the \"Invalid credentials\" error message.</p> <p>You may also add extra key =&gt; value pairs in the <code>credentials</code> array to further scope the LDAP query. The <code>password</code> key is automatically ignored by LdapRecord.</p>"},{"location":"docs/laravel/v3/auth/plain/laravel-ui/#updating-blade-views","title":"Updating Blade Views","text":"<p>Since an LdapRecord model instance will be returned when calling <code>Auth::user()</code> instead of an Eloquent model, you must change any references from:</p> <pre><code>Auth::user()-&gt;name\n</code></pre> <p>To:</p> <pre><code>Auth::user()-&gt;getName()\n</code></pre>"},{"location":"docs/laravel/v3/auth/plain/laravel-ui/#using-usernames","title":"Using Usernames","text":"<p>In corporate environments, users are often used to signing in to their computers with their username. You can certainly keep this flow easy for them - we just need to change a couple of things.</p> <p>First, let's jump into our <code>auth/login.blade.php</code> view and update our input field to use <code>username</code> instead of <code>email</code>:</p> <pre><code>&lt;!-- resources/views/auth/login.blade.php --&gt;\n\n&lt;!-- Before... --&gt;\n&lt;input\n  id=\"email\"\n  type=\"email\"\n  class=\"form-control @error('email') is-invalid @enderror\"\n  name=\"email\"\n  value=\"{{ old('email') }}\"\n  required\n  autocomplete=\"email\"\n  autofocus\n/&gt;\n\n&lt;!-- After... --&gt;\n&lt;input\n  id=\"username\"\n  type=\"text\"\n  class=\"form-control @error('username') is-invalid @enderror\"\n  name=\"username\"\n  value=\"{{ old('username') }}\"\n  required\n  autocomplete=\"username\"\n  autofocus\n/&gt;\n</code></pre> <p>After changing the HTML input, we now must modify our <code>LoginController</code> to use this new field. We do this by overriding the <code>username</code> method, and updating our <code>credentials</code> method:</p> <pre><code>// app/Http/Controllers/Auth/LoginController.php\n\nuse Illuminate\\Http\\Request;\n\npublic function username()\n{\n    return 'username';\n}\n\nprotected function credentials(Request $request)\n{\n    return [\n        'samaccountname' =&gt; $request-&gt;username,\n        'password' =&gt; $request-&gt;password,\n    ];\n}\n</code></pre> <p>You can now sign in to your application using usernames instead of email addresses.</p>"},{"location":"docs/laravel/v3/auth/plain/laravel-ui/#displaying-ldap-error-messages","title":"Displaying LDAP Error Messages","text":"<p>When a user fails LDAP authentication due to their password / account expiring, account lockout, or their password requiring to be changed, specific error codes will be sent back from your server. LdapRecord can interpret these for you and display helpful error messages to users upon failing authentication.</p> <p>To add this functionality, you must add the following trait to your <code>LoginController</code>:</p> <pre><code>LdapRecord\\Laravel\\Auth\\ListensForLdapBindFailure\n</code></pre> <p>Example:</p> <pre><code>// app/Http/Controllers/Auth/LoginController.php\n\n// ...\n\nuse LdapRecord\\Laravel\\Auth\\ListensForLdapBindFailure;\n\nclass LoginController extends Controller\n{\n    use AuthenticatesUsers, ListensForLdapBindFailure;\n\n    // ...\n</code></pre> <p>However, this feature will only register automatically if your <code>LoginController</code> resides in the default <code>App\\Http\\Controllers\\Auth</code> namespace. If you have changed the location of your <code>LoginController</code>, you must modify the constructor and add the following method call to register the LDAP listener:</p> <pre><code>// app/Http/Controllers/Auth/LoginController.php\n\n// ...\n\nuse LdapRecord\\Laravel\\Auth\\ListensForLdapBindFailure;\n\nclass LoginController extends Controller\n{\n    use AuthenticatesUsers, ListensForLdapBindFailure;\n\n    public function __construct()\n    {\n        $this-&gt;middleware('guest')-&gt;except('logout');\n\n        $this-&gt;listenForLdapBindFailure();\n    }\n\n    // ...\n}\n</code></pre>"},{"location":"docs/laravel/v3/auth/plain/laravel-ui/#altering-the-response","title":"Altering the Response","text":"<p>By default, when an LDAP bind failure occurs, a <code>ValidationException</code> will be thrown which will redirect users to your login page and display the error. If you would like to modify this behaviour, you will need to override the method <code>handleLdapBindError</code>.</p> <p>This method will include the error message as the first parameter and the error code as the second.</p> <p>This is useful for checking for specific Active Directory response codes and returning a response:</p> <pre><code>// app/Http/Controllers/Auth/LoginController.php\n\n// ...\n\nclass LoginController extends Controller\n{\n    // ...\n\n    use ListensForLdapBindFailure {\n        handleLdapBindError as baseHandleLdapBindError;\n    }\n\n    protected function handleLdapBindError($message, $code = null)\n    {\n        if ($code == '773') {\n            // The users password has expired. Redirect them.\n            abort(redirect('/password-reset'));\n        }\n\n        $this-&gt;baseHandleLdapBindError($message, $code);\n    }\n\n    // ...\n}\n</code></pre> <p>Refer to the Password Policy Errors documentation to see what each code means.</p>"},{"location":"docs/laravel/v3/auth/plain/laravel-ui/#changing-the-error-messages","title":"Changing the Error Messages","text":"<p>If you need to modify the translations of these error messages, create a new translation file named <code>errors.php</code> in your <code>resources</code> directory at the following path:</p> <p>The <code>vendor</code> directory (and each subdirectory) will have to be created manually.</p>"},{"location":"docs/laravel/v3/auth/plain/laravel-ui/#laravel-9","title":"Laravel &gt;= 9","text":"<pre><code>lang/\n\u2514\u2500\u2500 vendor/\n    \u2514\u2500\u2500 ldap/\n        \u2514\u2500\u2500 en/\n            \u2514\u2500\u2500 errors.php\n</code></pre>"},{"location":"docs/laravel/v3/auth/plain/laravel-ui/#laravel-8","title":"Laravel &lt;= 8","text":"<pre><code>resources/\n\u2514\u2500\u2500 lang/\n    \u2514\u2500\u2500 vendor/\n        \u2514\u2500\u2500 ldap/\n            \u2514\u2500\u2500 en/\n                \u2514\u2500\u2500 errors.php\n</code></pre> <p>Then, paste in the following translations in the file and modify where necessary:</p> <pre><code>&lt;?php\n\nreturn [\n    'user_not_found' =&gt; 'User not found.',\n    'user_not_permitted_at_this_time' =&gt; 'Not permitted to logon at this time.',\n    'user_not_permitted_to_login' =&gt; 'Not permitted to logon at this workstation.',\n    'password_expired' =&gt; 'Your password has expired.',\n    'account_disabled' =&gt; 'Your account is disabled.',\n    'account_expired' =&gt; 'Your account has expired.',\n    'user_must_reset_password' =&gt; 'You must reset your password before logging in.',\n    'user_account_locked' =&gt; 'Your account is locked.',\n];\n</code></pre>"},{"location":"docs/laravel/v3/auth/plain/logging-in/","title":"Logging In","text":"<p>Once you have configured a new authentication provider, you're ready to start logging users into your application.</p> <p>Logging in is simple -- you only need to use Laravel's <code>Auth</code> facade:</p> <pre><code>use Illuminate\\Support\\Facades\\Auth;\n\n$credentials = [\n    'mail' =&gt; 'jdoe@local.com',\n    'password' =&gt; 'password',\n];\n\nif (Auth::attempt($credentials)) {\n    $user = Auth::user();\n\n    return redirect('/dashboard')-&gt;with([\n        'message' =&gt; \"Welcome back, {$user-&gt;getName()}\"\n    ]);\n}\n</code></pre> <p>As you can see above, we set the <code>mail</code> key which is passed to the LdapRecord authentication provider.</p> <p>A search query will be executed on your LDAP directory for a user that contains the <code>mail</code> attribute equal to the entered email address. The <code>password</code> key will not be used in the search.</p> <p>If you wish to log in a user by their username instead, simply change the <code>mail</code> key to whichever attribute you would like to locate the user by in your LDAP directory. For example, <code>samaccountname</code>:</p> <pre><code>use Illuminate\\Support\\Facades\\Auth;\n\n$credentials = [\n    'samaccountname' =&gt; 'jdoe',\n    'password' =&gt; 'password',\n];\n\nif (Auth::attempt($credentials)) {\n    //\n}\n</code></pre>"},{"location":"docs/laravel/v3/auth/sso/","title":"Pass-through / SSO Authentication","text":"<p>Pass-through authentication allows your users to be automatically signed in when they access your application on a Windows domain joined computer. This feature is ideal for in-house corporate environments.</p> <p>However, this feature assumes that you have enabled Windows Authentication in IIS, or have enabled it in some other means with Apache. LdapRecord does not set this up for you. To enable Windows Authentication, visit the IIS configuration guide.</p> <p>When you have it enabled on your server, and a user visits your application from a domain joined computer, the users <code>sAMAccountName</code> becomes available on a PHP server variable (<code>$_SERVER['AUTH_USER']</code>).</p> <p>LdapRecord provides a middleware that you apply to your stack which retrieves this username from the request, attempts to locate the user in your directory, then logs the user in.</p>"},{"location":"docs/laravel/v3/auth/sso/setup/","title":"Pass-through / SSO Setup","text":""},{"location":"docs/laravel/v3/auth/sso/setup/#middleware","title":"Middleware","text":"<p>To enable single-sign-on in your Laravel application, insert the included <code>WindowsAuthenticate</code> middleware on your middleware stack inside your <code>app/Http/Kernel.php</code> file:</p> <pre><code>protected $middlewareGroups = [\n    'web' =&gt; [\n        // ...\n        \\LdapRecord\\Laravel\\Middleware\\WindowsAuthenticate::class,\n    ],\n];\n</code></pre> <p>The <code>WindowsAuthenticate</code> middleware uses the rules you have configured inside your <code>config/auth.php</code> file. A user may successfully authenticate against your LDAP server when visiting your site, but depending on your rules, may not be imported or logged in.</p>"},{"location":"docs/laravel/v3/auth/sso/setup/#multi-domain-sso","title":"Multi-Domain SSO","text":"<p>To be able to use multi-domain single-sign-on, your LDAP directory servers must first be joined in a trust.</p> <p>Consider we have two domains: alpha.local and bravo.local.</p> <p>If you have a web server that is joined to the alpha.local domain that is hosting your Laravel application, it must allow users to authenticate to the bravo.local domain.</p> <p>Once you have a working trust defined between your domains, you must follow the steps of setting up multi-domain authentication. You may skip step 2, if you do not need a login page for your users.</p> <p>After completing the above linked guide, you must instruct the <code>WindowsAuthenticate</code> middleware to utilize your LDAP authentication guards that you have configured in your <code>config/auth.php</code> file by calling the <code>guards</code> method:</p> <pre><code>// app/Providers/AuthServiceProvider.php\n\n/**\n * Register any authentication / authorization services.\n *\n * @return void\n */\npublic function boot()\n{\n    $this-&gt;registerPolicies();\n\n    WindowsAuthenticate::guards(['alpha', 'bravo']);\n}\n</code></pre> <p>Or, if you prefer, you may define the <code>WindowsAuthenticate</code> middleware as a named middleware inside your <code>app/Http/Kernel.php</code>, and insert the guard names in the definition of your routes:</p> <pre><code>// app/Http/Kernel.php\n\n/**\n * The application's route middleware.\n *\n * These middleware may be assigned to groups or used individually.\n *\n * @var array\n */\nprotected $routeMiddleware = [\n    'auth' =&gt; \\App\\Http\\Middleware\\Authenticate::class,\n    'auth.windows' =&gt; \\LdapRecord\\Laravel\\Middleware\\WindowsAuthenticate::class,\n    // ...\n],\n</code></pre> <p>Then, utilize it inside your routes file:</p> <p>Important: When guarding your routes that require authentication via the <code>auth</code> middleware, you must add both guard names into it as well.</p> <pre><code>// routes/web.php\n\nRoute::middleware([\n    'auth.windows:alpha,bravo',\n    'auth:alpha,bravo',\n])-&gt;group(function () {\n    // ...\n});\n</code></pre> <p>Important:  The actual order of the middleware definition is critical here, so your users that are accessing your site through single-sign-on are logged into your application, prior to hitting the <code>auth</code> middleware, which validates that they are in-fact logged in.  Otherwise, they will be simply redirected to your login page.</p>"},{"location":"docs/laravel/v3/auth/sso/setup/#sso-domain-verification","title":"SSO Domain Verification","text":"<p>To prevent security issues using multiple-domain authentication using the <code>WindowsAuthenticate</code> middleware, domain verification will be performed on the authenticating user.</p> <p>This verification checks if the user's domain name is contained inside their full distinguished name, which is retrieved from each of your configured LDAP guards.</p> <p>Only 'Domain Components' are checked in the user's distinguished name. More on this below.</p> <p>To describe this issue in further detail -- the <code>WindowsAuthenticate</code> middleware retrieves all of your configured authentication guards inside your <code>config/auth.php</code> file. It then determines which one is using the <code>ldap</code> driver, and attempts to locate the authenticating users from each connection.</p> <p>Since there is the possibility of users having the same <code>sAMAccountName</code> on two separate domains, LdapRecord must verify that the user retrieved from your domain is in-fact the user who is connecting to your Laravel application via Single-Sign-On.</p> <p>For example, if a user visits your Laravel application with the username of:</p> <pre><code>ACME\\sbauman\n</code></pre> <p>And LdapRecord locates a user with the distinguished name of:</p> <pre><code>cn=sbauman,ou=users,dc=local,dc=com\n</code></pre> <p>They will be denied authentication. This is because the authenticating user has a domain of <code>ACME</code>, but it is not contained inside their distinguished name domain components (<code>dc</code>).</p> <p>Using the same example, if the located user's distinguished name is:</p> <pre><code>cn=sbauman,ou=users,dc=acme,dc=com\n</code></pre> <p>Then they will be allowed to authenticate, as their <code>ACME</code> domain exists inside  their distinguished name domain components (<code>dc=acme</code>). Comparison against each domain component will be performed in a case-insensitive manor.</p> <p>If you would like to disable this check, you must call the static method <code>bypassDomainVerification</code> on the <code>WindowsAuthenticate</code> middleware inside your <code>AuthServiceProvider</code>:</p> <p>Important: This is a security issue if you use multi-domain authentication, since users who have the same <code>sAMAccountName</code> could sign in as each other. You have been warned. If however, you connect to only one domain inside your application, there is no security issue, and you may disable this check as shown below.</p> <pre><code>// app/Providers/AuthServiceProvider.php\n\nuse LdapRecord\\Laravel\\Middleware\\WindowsAuthenticate;\n\n/**\n * Register any authentication / authorization services.\n *\n * @return void\n */\npublic function boot()\n{\n    $this-&gt;registerPolicies();\n\n    WindowsAuthenticate::bypassDomainVerification();\n}\n</code></pre>"},{"location":"docs/laravel/v3/auth/sso/setup/#swapping-the-domain-extractor","title":"Swapping the Domain Extractor","text":"<p>If you would like to override the default mechanism that extracts the domain from the user's account that is retrieved from the PHP request key, call the <code>WindowsAuthenticate::extractDomainUsing()</code> method and supply a callback.</p> <p>The callback should return a string, or an array with two values. The first being the user's username, the second being the user's domain.</p> <p>The returned value(s) will be passed into the Domain Validator, for validation.</p> <p>The first (and only) argument of the closure will be equal to the retrieved value from the configured PHP <code>$_SERVER</code> key (default is <code>AUTH_USER</code>).</p> <pre><code>WindowsAuthenticate::extractDomainUsing(function ($account) {\n    [$username, $domain] = array_pad(\n        array_reverse(explode('\\\\', $account)),\n        2,\n        null\n    );\n\n    return [$username, $domain];\n});\n</code></pre> <p>To bypass extraction, supply a closure and return the account's value:</p> <pre><code>WindowsAuthenticate::extractDomainUsing(function ($account) {\n    return $account;\n});\n</code></pre>"},{"location":"docs/laravel/v3/auth/sso/setup/#swapping-the-domain-validator","title":"Swapping the Domain Validator","text":"<p>If you'd like to validate the user's domain in your own way, call the <code>WindowsAuthenticate::validateDomainUsing()</code> method, and supply either a closure, or a class.</p> <p>The first argument will be the user's LdapRecord model, the second will be the user's username and the third argument will be the user's domain (extracted with the above Domain Extractor).</p> <p>Return <code>true</code>/<code>false</code> whether the user has passed validation.</p>"},{"location":"docs/laravel/v3/auth/sso/setup/#using-a-closure","title":"Using a Closure","text":"<p>Register the closure into the middleware:</p> <pre><code>use LdapRecord\\Models\\Model;\nuse LdapRecord\\Laravel\\Middleware\\WindowsAuthenticate;\n\nWindowsAuthenticate::validateDomainUsing(function (Model $user, $username, $domain = null) {\n    // Validate the user's domain.\n});\n</code></pre>"},{"location":"docs/laravel/v3/auth/sso/setup/#using-a-class","title":"Using a Class","text":"<p>Create the class with an <code>__invoke()</code> method:</p> <pre><code>use LdapRecord\\Models\\Model;\n\nclass DomainValidator\n{\n    /**\n     * Determine if the user passes domain validation.\n     *\n     * @param Model       $user\n     * @param string      $username\n     * @param string|null $domain\n     *\n     * @return bool\n     */\n    public function __invoke(Model $user, $username, $domain = null)\n    {\n        // Validate the user's domain.\n    }\n}\n</code></pre> <p>Register the class into the middleware:</p> <pre><code>WindowsAuthenticate::validateDomainUsing(DomainValidator::class);\n</code></pre>"},{"location":"docs/laravel/v3/auth/sso/setup/#changing-the-server-key","title":"Changing the Server Key","text":"<p>By default, the <code>WindowsAuthenticate</code> middleware uses the <code>AUTH_USER</code> key inside PHP's <code>$_SERVER</code> array (<code>$_SERVER['AUTH_USER']</code>). If you would like to change this, call the <code>serverKey</code> method on the <code>WindowsAuthenticate</code> middleware inside your <code>AuthServiceProvider</code>:</p> <pre><code>// app/Providers/AuthServiceProvider.php\n\nuse LdapRecord\\Laravel\\Middleware\\WindowsAuthenticate;\n\n/**\n * Register any authentication / authorization services.\n *\n * @return void\n */\npublic function boot()\n{\n    $this-&gt;registerPolicies();\n\n    WindowsAuthenticate::serverKey('PHP_AUTH_USER');\n}\n</code></pre>"},{"location":"docs/laravel/v3/auth/sso/setup/#remember-single-sign-on-users","title":"Remember Single-Sign-On users","text":"<p>As of LdapRecord-Laravel version <code>v1.9.0</code>, users signed in to your application via the <code>WindowsAuthenticate</code> middleware will no longer be automatically \"remembered\".</p> <p>This shouldn't have any effect on your application, but if you need to re-enable this feature, you must call the <code>rememberAuthenticatedUsers</code> method on the <code>WindowsAuthenticate</code> middleware inside your <code>AuthServiceProvider</code>:</p> <pre><code>// app/Providers/AuthServiceProvider.php\n\nuse LdapRecord\\Laravel\\Middleware\\WindowsAuthenticate;\n\n/**\n * Register any authentication / authorization services.\n *\n * @return void\n */\npublic function boot()\n{\n    $this-&gt;registerPolicies();\n\n    WindowsAuthenticate::rememberAuthenticatedUsers();\n}\n</code></pre>"},{"location":"docs/laravel/v3/auth/sso/setup/#selective-bypassing-single-sign-on","title":"Selective / Bypassing Single-Sign-On","text":"<p>Occasionally you may need to allow users who are not a part of the domain to log in to your application, as well as allowing domain users to automatically sign in via Single-Sign-On.</p> <p>Depending on your web servers operating system, this process can be different.</p>"},{"location":"docs/laravel/v3/auth/sso/setup/#linux-httpd","title":"Linux (HTTPD)","text":"<p>If you're using the Apache <code>httpd</code> server with plugins enabling the sharing of a domain joined user's username via the <code>REMOTE_USER</code> server variable, you must update the <code>WindowsAuthenticate</code> middleware to use this variable, instead of the default <code>AUTH_USER</code>.</p> <p>To do this, call the <code>WindowsAuthenticate::serverKey()</code> method in your <code>AuthServiceProvider::boot()</code> method:</p> <pre><code>// app/Providers/AuthServiceProvider.php\n\nuse LdapRecord\\Laravel\\Middleware\\WindowsAuthenticate;\n\n/**\n * Register any authentication / authorization services.\n *\n * @return void\n */\npublic function boot()\n{\n    $this-&gt;registerPolicies();\n\n    WindowsAuthenticate::serverKey('REMOTE_USER');\n}\n</code></pre> <p>If a user is not on a domain joined computer, then the <code>REMOTE_USER</code> variable will be <code>null</code> and the <code>WindowsAuthenticate</code> middleware will be automatically bypassed, allowing regular web application users to sign in.</p>"},{"location":"docs/laravel/v3/auth/sso/setup/#windows-iis","title":"Windows (IIS)","text":"<p>A Windows hosted application with NTLM / Windows authentication enabled is unfortunately all-or-nothing on your entire web application instance. This means, you cannot enable a single HTTP endpoint in your application to use Single-Sign-On or exempt a portion of your application. However, there is a workaround that is used frequently in the industry.</p> <p>The goal is to have two URLs that point to the same Laravel application. One has Windows authentication enabled, and another does not. This is typically identified by an <code>sso</code> subdomain:</p> <pre><code>&lt;!-- Standard URL --&gt;\nmy-app.com\n\n&lt;!-- Single-Sign-On URL --&gt;\nsso.my-app.com\n</code></pre> <p>To do this, you must create a new IIS application instance and point to the same Laravel application. Then, you simply have Windows authentication enabled on one instance, and left disabled on another.</p> <p>Nothing needs to be done in your Laravel application. The <code>WindowsAuthenticate</code> middleware will only attempt to authenticate users when the <code>AUTH_USER</code> server key is present, so it can remain in the global middleware stack.</p>"},{"location":"docs/laravel/v3/auth/sso/setup/#forcing-logouts-on-non-single-sign-on-users","title":"Forcing logouts on non Single-Sign-On users","text":"<p>If a user successfully authenticates to your Laravel application through single-sign-on, and their LDAP account happens to be deleted or disabled, the user will remain authenticated to your application for the duration of your Laravel application's session.</p> <p>If you would like all users in your application to be signed out automatically if SSO credentials are not available from your web server, call the <code>logoutUnauthenticatedUsers</code> method on the <code>WindowsAuthenticate</code> middleware in your <code>AuthServiceProvider::boot()</code> method:</p> <p>Important: Only enable this feature if Single-Sign-On is the only way you authenticate users. If a non-Single-Sign-On user has a session open, it will be ended automatically on their next request.</p> <pre><code>// app/Providers/AuthServiceProvider.php\n\nuse LdapRecord\\Laravel\\Middleware\\WindowsAuthenticate;\n\n/**\n * Register any authentication / authorization services.\n *\n * @return void\n */\npublic function boot()\n{\n    $this-&gt;registerPolicies();\n\n    WindowsAuthenticate::logoutUnauthenticatedUsers();\n}\n</code></pre>"}]}